<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1utility_1_1_logger.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:34 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::utility::Logger Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1utility.html">utility</a></li><li class="navelem"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::utility::Logger Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye" title="Logger class should be used as a global singleton object (GetInstance()).">Logger</a> class should be used as a global singleton object (<a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#ad6bff0921d73a7dec9d80cbe53baa3e7" title="Get Logger global singleton instance.">GetInstance()</a>).  
 <a href="classopen3d_1_1utility_1_1_logger.44f.delaye#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_logging_8h_source.html">Logging.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1utility_1_1_logger_1_1_impl">Impl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a292003090cb7757462cb3413d8f455fb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a292003090cb7757462cb3413d8f455fb">Logger</a> (<a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a> const &amp;)=delete</td></tr>
<tr class="separator:a292003090cb7757462cb3413d8f455fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30767584c1f1185f1e986cec91fa712b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a30767584c1f1185f1e986cec91fa712b">operator=</a> (<a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a> const &amp;)=delete</td></tr>
<tr class="separator:a30767584c1f1185f1e986cec91fa712b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a918d414c54ad1e299a57d2e707df1931"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a918d414c54ad1e299a57d2e707df1931">SetPrintFunction</a> (std::function&lt; void(const std::string &amp;)&gt; print_fcn)</td></tr>
<tr class="separator:a918d414c54ad1e299a57d2e707df1931"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6df586dfaea50a1268755e510f01dab9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a6df586dfaea50a1268755e510f01dab9">ResetPrintFunction</a> ()</td></tr>
<tr class="memdesc:a6df586dfaea50a1268755e510f01dab9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the print function to the default one (print to console).  <a href="classopen3d_1_1utility_1_1_logger.44f.delaye#a6df586dfaea50a1268755e510f01dab9">More...</a><br /></td></tr>
<tr class="separator:a6df586dfaea50a1268755e510f01dab9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d95f2e3d35e54ad540563393a225cf3"><td class="memItemLeft" align="right" valign="top">const std::function&lt; void(const std::string &amp;)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a5d95f2e3d35e54ad540563393a225cf3">GetPrintFunction</a> ()</td></tr>
<tr class="memdesc:a5d95f2e3d35e54ad540563393a225cf3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the print function used by the <a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye" title="Logger class should be used as a global singleton object (GetInstance()).">Logger</a>.  <a href="classopen3d_1_1utility_1_1_logger.44f.delaye#a5d95f2e3d35e54ad540563393a225cf3">More...</a><br /></td></tr>
<tr class="separator:a5d95f2e3d35e54ad540563393a225cf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9e6c611693ebaf4eeea4792b64ab5bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#ac9e6c611693ebaf4eeea4792b64ab5bd">SetVerbosityLevel</a> (<a class="el" href="namespaceopen3d_1_1utility.html#a9e2a86f73378129aae0665367795a867">VerbosityLevel</a> verbosity_level)</td></tr>
<tr class="separator:ac9e6c611693ebaf4eeea4792b64ab5bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b3dba536f09a5394fc97abbd5c691a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1utility.html#a9e2a86f73378129aae0665367795a867">VerbosityLevel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a62b3dba536f09a5394fc97abbd5c691a">GetVerbosityLevel</a> () const</td></tr>
<tr class="memdesc:a62b3dba536f09a5394fc97abbd5c691a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get global verbosity level of Open3D.  <a href="classopen3d_1_1utility_1_1_logger.44f.delaye#a62b3dba536f09a5394fc97abbd5c691a">More...</a><br /></td></tr>
<tr class="separator:a62b3dba536f09a5394fc97abbd5c691a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ad6bff0921d73a7dec9d80cbe53baa3e7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#ad6bff0921d73a7dec9d80cbe53baa3e7">GetInstance</a> ()</td></tr>
<tr class="memdesc:ad6bff0921d73a7dec9d80cbe53baa3e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get <a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye" title="Logger class should be used as a global singleton object (GetInstance()).">Logger</a> global singleton instance.  <a href="classopen3d_1_1utility_1_1_logger.44f.delaye#ad6bff0921d73a7dec9d80cbe53baa3e7">More...</a><br /></td></tr>
<tr class="separator:ad6bff0921d73a7dec9d80cbe53baa3e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e91a3564d85710f591aa5a39dbe34eb"><td class="memTemplParams" colspan="2">template&lt;typename... Args&gt; </td></tr>
<tr class="memitem:a9e91a3564d85710f591aa5a39dbe34eb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#a9e91a3564d85710f591aa5a39dbe34eb">LogError_</a> (const char *file, int line, const char *function, const char *<a class="el" href="_filament_resource_manager_8cpp.html#a1acaede49c416601578d9bbd854f5106">format</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:a9e91a3564d85710f591aa5a39dbe34eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa787a8616cd5bb7d60af7e2c8f92f787"><td class="memTemplParams" colspan="2">template&lt;typename... Args&gt; </td></tr>
<tr class="memitem:aa787a8616cd5bb7d60af7e2c8f92f787"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#aa787a8616cd5bb7d60af7e2c8f92f787">LogWarning_</a> (const char *file, int line, const char *function, const char *<a class="el" href="_filament_resource_manager_8cpp.html#a1acaede49c416601578d9bbd854f5106">format</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:aa787a8616cd5bb7d60af7e2c8f92f787"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac25caa169533c54d406f60a1ef7718eb"><td class="memTemplParams" colspan="2">template&lt;typename... Args&gt; </td></tr>
<tr class="memitem:ac25caa169533c54d406f60a1ef7718eb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#ac25caa169533c54d406f60a1ef7718eb">LogInfo_</a> (const char *file, int line, const char *function, const char *<a class="el" href="_filament_resource_manager_8cpp.html#a1acaede49c416601578d9bbd854f5106">format</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:ac25caa169533c54d406f60a1ef7718eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf3d175a95189ef91d25c5040d33203f"><td class="memTemplParams" colspan="2">template&lt;typename... Args&gt; </td></tr>
<tr class="memitem:aaf3d175a95189ef91d25c5040d33203f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#aaf3d175a95189ef91d25c5040d33203f">LogDebug_</a> (const char *file, int line, const char *function, const char *<a class="el" href="_filament_resource_manager_8cpp.html#a1acaede49c416601578d9bbd854f5106">format</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:aaf3d175a95189ef91d25c5040d33203f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye" title="Logger class should be used as a global singleton object (GetInstance()).">Logger</a> class should be used as a global singleton object (<a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye#ad6bff0921d73a7dec9d80cbe53baa3e7" title="Get Logger global singleton instance.">GetInstance()</a>). </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a292003090cb7757462cb3413d8f455fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a292003090cb7757462cb3413d8f455fb">&#9670;&nbsp;</a></span>Logger()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::utility::Logger::Logger </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ad6bff0921d73a7dec9d80cbe53baa3e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6bff0921d73a7dec9d80cbe53baa3e7">&#9670;&nbsp;</a></span>GetInstance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a> &amp; open3d::utility::Logger::GetInstance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get <a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye" title="Logger class should be used as a global singleton object (GetInstance()).">Logger</a> global singleton instance. </p>

</div>
</div>
<a id="a5d95f2e3d35e54ad540563393a225cf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d95f2e3d35e54ad540563393a225cf3">&#9670;&nbsp;</a></span>GetPrintFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::function&lt; void(const std::string &amp;)&gt; open3d::utility::Logger::GetPrintFunction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the print function used by the <a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye" title="Logger class should be used as a global singleton object (GetInstance()).">Logger</a>. </p>

</div>
</div>
<a id="a62b3dba536f09a5394fc97abbd5c691a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62b3dba536f09a5394fc97abbd5c691a">&#9670;&nbsp;</a></span>GetVerbosityLevel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopen3d_1_1utility.html#a9e2a86f73378129aae0665367795a867">VerbosityLevel</a> open3d::utility::Logger::GetVerbosityLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get global verbosity level of Open3D. </p>

</div>
</div>
<a id="aaf3d175a95189ef91d25c5040d33203f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf3d175a95189ef91d25c5040d33203f">&#9670;&nbsp;</a></span>LogDebug_()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void open3d::utility::Logger::LogDebug_ </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9e91a3564d85710f591aa5a39dbe34eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e91a3564d85710f591aa5a39dbe34eb">&#9670;&nbsp;</a></span>LogError_()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void open3d::utility::Logger::LogError_ </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac25caa169533c54d406f60a1ef7718eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac25caa169533c54d406f60a1ef7718eb">&#9670;&nbsp;</a></span>LogInfo_()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void open3d::utility::Logger::LogInfo_ </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa787a8616cd5bb7d60af7e2c8f92f787"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa787a8616cd5bb7d60af7e2c8f92f787">&#9670;&nbsp;</a></span>LogWarning_()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void open3d::utility::Logger::LogWarning_ </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a30767584c1f1185f1e986cec91fa712b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30767584c1f1185f1e986cec91fa712b">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::utility::Logger::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1_logger.44f.delaye">Logger</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6df586dfaea50a1268755e510f01dab9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6df586dfaea50a1268755e510f01dab9">&#9670;&nbsp;</a></span>ResetPrintFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::utility::Logger::ResetPrintFunction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset the print function to the default one (print to console). </p>

</div>
</div>
<a id="a918d414c54ad1e299a57d2e707df1931"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a918d414c54ad1e299a57d2e707df1931">&#9670;&nbsp;</a></span>SetPrintFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::utility::Logger::SetPrintFunction </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; void(const std::string &amp;)&gt;&#160;</td>
          <td class="paramname"><em>print_fcn</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Overwrite the default print function, this is useful when you want to redirect prints rather than printing to stdout. For example, in Open3D's python binding, the default print function is replaced with py::print().</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">print_fcn</td><td>The function for printing. It should take a string input and returns nothing. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac9e6c611693ebaf4eeea4792b64ab5bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9e6c611693ebaf4eeea4792b64ab5bd">&#9670;&nbsp;</a></span>SetVerbosityLevel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::utility::Logger::SetVerbosityLevel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1utility.html#a9e2a86f73378129aae0665367795a867">VerbosityLevel</a>&#160;</td>
          <td class="paramname"><em>verbosity_level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set global verbosity level of Open3D.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">verbosity_level</td><td>Messages with equal or less than verbosity_level verbosity will be printed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/utility/<a class="el" href="_logging_8h_source.html">Logging.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/utility/<a class="el" href="_logging_8cpp.html">Logging.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1utility_1_1_logger.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:34 GMT -->
</html>
