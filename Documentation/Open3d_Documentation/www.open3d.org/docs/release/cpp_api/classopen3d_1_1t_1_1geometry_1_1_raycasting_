<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_raycasting_scene.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:51 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::RaycastingScene Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_">RaycastingScene</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::RaycastingScene Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A scene class with basic ray casting and closest point queries.  
 <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_raycasting_scene_8h_source.html">RaycastingScene.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1t_1_1geometry_1_1_raycasting">Impl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aaa6032279d06306e2e99f3c2f6fbf1d1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aaa6032279d06306e2e99f3c2f6fbf1d1">RaycastingScene</a> (int64_t nthreads=0)</td></tr>
<tr class="memdesc:aaa6032279d06306e2e99f3c2f6fbf1d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aaa6032279d06306e2e99f3c2f6fbf1d1">More...</a><br /></td></tr>
<tr class="separator:aaa6032279d06306e2e99f3c2f6fbf1d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a044dd49964a5fb0355a67f3e21895e09"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a044dd49964a5fb0355a67f3e21895e09">~RaycastingScene</a> ()</td></tr>
<tr class="separator:a044dd49964a5fb0355a67f3e21895e09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac93b83f28b5702730672aac0ac9810a6"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#ac93b83f28b5702730672aac0ac9810a6">AddTriangles</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;vertex_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;triangle_indices)</td></tr>
<tr class="memdesc:ac93b83f28b5702730672aac0ac9810a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a triangle mesh to the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#ac93b83f28b5702730672aac0ac9810a6">More...</a><br /></td></tr>
<tr class="separator:ac93b83f28b5702730672aac0ac9810a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd63551de162ee0deffa30576eaef5f"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a9fd63551de162ee0deffa30576eaef5f">AddTriangles</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;mesh)</td></tr>
<tr class="memdesc:a9fd63551de162ee0deffa30576eaef5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a triangle mesh to the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a9fd63551de162ee0deffa30576eaef5f">More...</a><br /></td></tr>
<tr class="separator:a9fd63551de162ee0deffa30576eaef5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21545461750941ed888d8b73a1aace32"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a21545461750941ed888d8b73a1aace32">CastRays</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;rays, const int nthreads=0)</td></tr>
<tr class="memdesc:a21545461750941ed888d8b73a1aace32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the first intersection of the rays with the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a21545461750941ed888d8b73a1aace32">More...</a><br /></td></tr>
<tr class="separator:a21545461750941ed888d8b73a1aace32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a351db5eea21cd33fbe2ee0b426396f6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a351db5eea21cd33fbe2ee0b426396f6c">TestOcclusions</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;rays, const float tnear=0.f, const float tfar=std::numeric_limits&lt; float &gt;::infinity(), const int nthreads=0)</td></tr>
<tr class="memdesc:a351db5eea21cd33fbe2ee0b426396f6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the rays have any intersection with the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a351db5eea21cd33fbe2ee0b426396f6c">More...</a><br /></td></tr>
<tr class="separator:a351db5eea21cd33fbe2ee0b426396f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb01eeb4b53df25804cc3a2dbff6bd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a6bb01eeb4b53df25804cc3a2dbff6bd5">CountIntersections</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;rays, const int nthreads=0)</td></tr>
<tr class="memdesc:a6bb01eeb4b53df25804cc3a2dbff6bd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the number of intersection of the rays with the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a6bb01eeb4b53df25804cc3a2dbff6bd5">More...</a><br /></td></tr>
<tr class="separator:a6bb01eeb4b53df25804cc3a2dbff6bd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca62463c6599a399f71f1af7fbd505f0"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aca62463c6599a399f71f1af7fbd505f0">ComputeClosestPoints</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;query_points, const int nthreads=0)</td></tr>
<tr class="memdesc:aca62463c6599a399f71f1af7fbd505f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the closest points on the surfaces of the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aca62463c6599a399f71f1af7fbd505f0">More...</a><br /></td></tr>
<tr class="separator:aca62463c6599a399f71f1af7fbd505f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23d9da99897ff161a79947b5e9e6d39d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a23d9da99897ff161a79947b5e9e6d39d">ComputeDistance</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;query_points, const int nthreads=0)</td></tr>
<tr class="memdesc:a23d9da99897ff161a79947b5e9e6d39d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the distance to the surface of the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a23d9da99897ff161a79947b5e9e6d39d">More...</a><br /></td></tr>
<tr class="separator:a23d9da99897ff161a79947b5e9e6d39d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad1a95c70ffd8671a25163a599ac67b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aad1a95c70ffd8671a25163a599ac67b0">ComputeSignedDistance</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;query_points, const int nthreads=0, const int nsamples=1)</td></tr>
<tr class="memdesc:aad1a95c70ffd8671a25163a599ac67b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the signed distance to the surface of the scene.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aad1a95c70ffd8671a25163a599ac67b0">More...</a><br /></td></tr>
<tr class="separator:aad1a95c70ffd8671a25163a599ac67b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac8190cc8d7fa9f89c2c15431274ef1f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aac8190cc8d7fa9f89c2c15431274ef1f">ComputeOccupancy</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;query_points, const int nthreads=0, const int nsamples=1)</td></tr>
<tr class="memdesc:aac8190cc8d7fa9f89c2c15431274ef1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the occupancy at the query point positions.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aac8190cc8d7fa9f89c2c15431274ef1f">More...</a><br /></td></tr>
<tr class="separator:aac8190cc8d7fa9f89c2c15431274ef1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3d685932f8e85e4ef076a0bc92fa9d18"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a3d685932f8e85e4ef076a0bc92fa9d18">CreateRaysPinhole</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic_matrix, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsic_matrix, int width_px, int height_px)</td></tr>
<tr class="memdesc:a3d685932f8e85e4ef076a0bc92fa9d18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates rays for the given camera parameters.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#a3d685932f8e85e4ef076a0bc92fa9d18">More...</a><br /></td></tr>
<tr class="separator:a3d685932f8e85e4ef076a0bc92fa9d18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad67c3d89041455108f03fa2926f1d94"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aad67c3d89041455108f03fa2926f1d94">CreateRaysPinhole</a> (double fov_deg, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;center, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;eye, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;up, int width_px, int height_px)</td></tr>
<tr class="memdesc:aad67c3d89041455108f03fa2926f1d94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates rays for the given camera parameters.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aad67c3d89041455108f03fa2926f1d94">More...</a><br /></td></tr>
<tr class="separator:aad67c3d89041455108f03fa2926f1d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5087b85ef9223a7f9b1b32171fbb067"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aa5087b85ef9223a7f9b1b32171fbb067">INVALID_ID</a> ()</td></tr>
<tr class="memdesc:aa5087b85ef9223a7f9b1b32171fbb067"><td class="mdescLeft">&#160;</td><td class="mdescRight">The value for invalid IDs.  <a href="classopen3d_1_1t_1_1geometry_1_1_raycasting_#aa5087b85ef9223a7f9b1b32171fbb067">More...</a><br /></td></tr>
<tr class="separator:aa5087b85ef9223a7f9b1b32171fbb067"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A scene class with basic ray casting and closest point queries. </p>
<p>The <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_raycasting_" title="A scene class with basic ray casting and closest point queries.">RaycastingScene</a> allows to compute ray intersections with triangle meshes or compute the closest point on the surface of a mesh with respect to one or more query points. It builds an internal acceleration structure to speed up those queries.</p>
<p>This class supports only the CPU device. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aaa6032279d06306e2e99f3c2f6fbf1d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa6032279d06306e2e99f3c2f6fbf1d1">&#9670;&nbsp;</a></span>RaycastingScene()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::RaycastingScene::RaycastingScene </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default Constructor. </p>

</div>
</div>
<a id="a044dd49964a5fb0355a67f3e21895e09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a044dd49964a5fb0355a67f3e21895e09">&#9670;&nbsp;</a></span>~RaycastingScene()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::RaycastingScene::~RaycastingScene </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac93b83f28b5702730672aac0ac9810a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac93b83f28b5702730672aac0ac9810a6">&#9670;&nbsp;</a></span>AddTriangles() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t open3d::t::geometry::RaycastingScene::AddTriangles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>vertex_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>triangle_indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a triangle mesh to the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertex_positions</td><td>Vertices as Tensor of dim {N,3} and dtype float. </td></tr>
    <tr><td class="paramname">triangle_indices</td><td>Triangles as Tensor of dim {M,3} and dtype uint32_t. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The geometry ID of the added mesh. </dd></dl>

</div>
</div>
<a id="a9fd63551de162ee0deffa30576eaef5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fd63551de162ee0deffa30576eaef5f">&#9670;&nbsp;</a></span>AddTriangles() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t open3d::t::geometry::RaycastingScene::AddTriangles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a triangle mesh to the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mesh</td><td>A triangle mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The geometry ID of the added mesh. </dd></dl>

</div>
</div>
<a id="a21545461750941ed888d8b73a1aace32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21545461750941ed888d8b73a1aace32">&#9670;&nbsp;</a></span>CastRays()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::geometry::RaycastingScene::CastRays </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>rays</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the first intersection of the rays with the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rays</td><td>A tensor with &gt;=2 dims, shape {.., 6}, and Dtype Float32 describing the rays. {..} can be any number of dimensions, e.g., to organize rays for creating an image the shape can be {height, width, 6}. The last dimension must be 6 and has the format [ox, oy, oz, dx, dy, dz] with [ox,oy,oz] as the origin and [dx,dy,dz] as the direction. It is not necessary to normalize the direction but the returned hit distance uses the length of the direction vector as unit. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The returned dictionary contains:<ul>
<li><b>t_hit</b> A tensor with the distance to the first hit. The shape is {..}. If there is no intersection the hit distance is <em>inf</em> .</li>
<li><b>geometry_ids</b> A tensor with the geometry IDs. The shape is {..}. If there is no intersection the ID is <em>INVALID_ID</em> .</li>
<li><b>primitive_ids</b> A tensor with the primitive IDs, which corresponds to the triangle index. The shape is {..}. If there is no intersection the ID is <em>INVALID_ID</em> .</li>
<li><b>primitive_uvs</b> A tensor with the barycentric coordinates of the hit points within the hit triangles. The shape is {.., 2}.</li>
<li><b>primitive_normals</b> A tensor with the normals of the hit triangles. The shape is {.., 3}. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="aca62463c6599a399f71f1af7fbd505f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca62463c6599a399f71f1af7fbd505f0">&#9670;&nbsp;</a></span>ComputeClosestPoints()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::geometry::RaycastingScene::ComputeClosestPoints </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the closest points on the surfaces of the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>A tensor with &gt;=2 dims, shape {.., 3} and Dtype Float32 describing the query points. {..} can be any number of dimensions, e.g., to organize the query_point to create a 3D grid the shape can be {depth, height, width, 3}. The last dimension must be 3 and has the format [x, y, z]. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The returned dictionary contains:<ul>
<li><b>points</b> A tensor with the closest surface points. The shape is {..}.</li>
<li><b>geometry_ids</b> A tensor with the geometry IDs. The shape is {..}.</li>
<li><b>primitive_ids</b> A tensor with the primitive IDs, which corresponds to the triangle index. The shape is {..}.</li>
<li><b>primitive_uvs</b> A tensor with the barycentric coordinates of the closest points within the triangles. The shape is {.., 2}.</li>
<li><b>primitive_normals</b> A tensor with the normals of the closest triangle . The shape is {.., 3}. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="a23d9da99897ff161a79947b5e9e6d39d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23d9da99897ff161a79947b5e9e6d39d">&#9670;&nbsp;</a></span>ComputeDistance()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::ComputeDistance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the distance to the surface of the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>A tensor with &gt;=2 dims, shape {.., 3} and Dtype Float32 describing the query points. {..} can be any number of dimensions, e.g., to organize the query_point to create a 3D grid the shape can be {depth, height, width, 3}. The last dimension must be 3 and has the format [x, y, z]. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tensor with the distances to the surface. The shape is {..}. </dd></dl>

</div>
</div>
<a id="aac8190cc8d7fa9f89c2c15431274ef1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac8190cc8d7fa9f89c2c15431274ef1f">&#9670;&nbsp;</a></span>ComputeOccupancy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::ComputeOccupancy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nsamples</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the occupancy at the query point positions. </p>
<p>This function computes whether the query points are inside or outside. The function assumes that all meshes are watertight and that there are no intersections between meshes, i.e., inside and outside must be well defined. The function determines if a point is inside by counting the intersections of a rays starting at the query points.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>A tensor with &gt;=2 dims, shape {.., 3} and Dtype Float32 describing the query_points. {..} can be any number of dimensions, e.g., to organize the query_point to create a 3D grid the shape can be {depth, height, width, 3}. The last dimension must be 3 and has the format [x, y, z]. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
    <tr><td class="paramname">nsamples</td><td>The number of rays used for determining the inside. This must be an odd number. The default is 1. Use a higher value if you notice errors in the occupancy values. Errors can occur when rays hit exactly an edge or vertex in the scene.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tensor with the occupancy values. The shape is {..}. Values are either 0 or 1. A point is occupied or inside if the value is 1. </dd></dl>

</div>
</div>
<a id="aad1a95c70ffd8671a25163a599ac67b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad1a95c70ffd8671a25163a599ac67b0">&#9670;&nbsp;</a></span>ComputeSignedDistance()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::ComputeSignedDistance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nsamples</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the signed distance to the surface of the scene. </p>
<p>This function computes the signed distance to the meshes in the scene. The function assumes that all meshes are watertight and that there are no intersections between meshes, i.e., inside and outside must be well defined. The function determines the sign of the distance by counting the intersections of a rays starting at the query points.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>A tensor with &gt;=2 dims, shape {.., 3} and Dtype Float32 describing the query points. {..} can be any number of dimensions, e.g., to organize the query_point to create a 3D grid the shape can be {depth, height, width, 3}. The last dimension must be 3 and has the format [x, y, z]. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
    <tr><td class="paramname">nsamples</td><td>The number of rays used for determining the inside. This must be an odd number. The default is 1. Use a higher value if you notice sign flipping, which can occur when rays hit exactly an edge or vertex in the scene.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tensor with the signed distances to the surface. The shape is {..}. Negative distances mean a point is inside a closed surface. </dd></dl>

</div>
</div>
<a id="a6bb01eeb4b53df25804cc3a2dbff6bd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb01eeb4b53df25804cc3a2dbff6bd5">&#9670;&nbsp;</a></span>CountIntersections()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::CountIntersections </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>rays</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the number of intersection of the rays with the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rays</td><td>A tensor with &gt;=2 dims, shape {.., 6}, and Dtype Float32 describing the rays. {..} can be any number of dimensions, e.g., to organize rays for creating an image the shape can be {height, width, 6}. The last dimension must be 6 and has the format [ox, oy, oz, dx, dy, dz] with [ox,oy,oz] as the origin and [dx,dy,dz] as the direction. It is not necessary to normalize the direction. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tensor with the number of intersections. The shape is {..}. </dd></dl>

</div>
</div>
<a id="a3d685932f8e85e4ef076a0bc92fa9d18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d685932f8e85e4ef076a0bc92fa9d18">&#9670;&nbsp;</a></span>CreateRaysPinhole() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::CreateRaysPinhole </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsic_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width_px</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height_px</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates rays for the given camera parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">intrinsic_matrix</td><td>The upper triangular intrinsic matrix with shape {3,3}. </td></tr>
    <tr><td class="paramname">extrinsic_matrix</td><td>The 4x4 world to camera SE(3) transformation matrix.</td></tr>
    <tr><td class="paramname">width_px</td><td>The width of the image in pixels.</td></tr>
    <tr><td class="paramname">height_px</td><td>The height of the image in pixels. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tensor of shape {height_px, width_px, 6} with the rays. </dd></dl>

</div>
</div>
<a id="aad67c3d89041455108f03fa2926f1d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad67c3d89041455108f03fa2926f1d94">&#9670;&nbsp;</a></span>CreateRaysPinhole() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::CreateRaysPinhole </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fov_deg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>eye</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>up</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width_px</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height_px</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates rays for the given camera parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fov_deg</td><td>The horizontal field of view in degree. </td></tr>
    <tr><td class="paramname">center</td><td>The point the camera is looking at with shape {3}. </td></tr>
    <tr><td class="paramname">eye</td><td>The position of the camera with shape {3}. </td></tr>
    <tr><td class="paramname">up</td><td>The up-vector with shape {3}. </td></tr>
    <tr><td class="paramname">width_px</td><td>The width of the image in pixels. </td></tr>
    <tr><td class="paramname">height_px</td><td>The height of the image in pixels. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A tensor of shape {height_px, width_px, 6} with the rays. </dd></dl>

</div>
</div>
<a id="aa5087b85ef9223a7f9b1b32171fbb067"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5087b85ef9223a7f9b1b32171fbb067">&#9670;&nbsp;</a></span>INVALID_ID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t open3d::t::geometry::RaycastingScene::INVALID_ID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The value for invalid IDs. </p>

</div>
</div>
<a id="a351db5eea21cd33fbe2ee0b426396f6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a351db5eea21cd33fbe2ee0b426396f6c">&#9670;&nbsp;</a></span>TestOcclusions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::RaycastingScene::TestOcclusions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>rays</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>tnear</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>tfar</em> = <code>std::numeric_limits&lt;float&gt;::infinity()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks if the rays have any intersection with the scene. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rays</td><td>A tensor with &gt;=2 dims, shape {.., 6}, and Dtype Float32 describing the rays. {..} can be any number of dimensions, e.g., to organize rays for creating an image the shape can be {height, width, 6}. The last dimension must be 6 and has the format [ox, oy, oz, dx, dy, dz] with [ox,oy,oz] as the origin and [dx,dy,dz] as the direction. It is not necessary to normalize the direction. </td></tr>
    <tr><td class="paramname">tnear</td><td>The tnear offset for the rays. The default is 0. </td></tr>
    <tr><td class="paramname">tfar</td><td>The tfar value for the ray. The default is infinity. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads to use. Set to 0 for automatic. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A boolean tensor which indicates if the ray is occluded by the scene (true) or not (false). </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="_raycasting_scene_8h_source.html">RaycastingScene.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="_raycasting_scene_8cpp.html">RaycastingScene.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_raycasting_scene.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:52 GMT -->
</html>
