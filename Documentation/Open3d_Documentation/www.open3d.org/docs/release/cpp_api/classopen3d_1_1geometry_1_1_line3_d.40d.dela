<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_line3_d.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:03 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::Line3D Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::Line3D Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the semantic differences between a "line", "ray", and "line segment" for operations in which the difference is important, such as intersection and distance tests. The underlying <a class="el" href="namespace_eigen.html">Eigen</a> object can always be retrieved with the .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a> method.  
 <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_line3_d_8h_source.html">Line3D.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::Line3D:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_line3_d.627.dela" usemap="#open3d::geometry::Line3D_map" alt=""/>
  <map id="open3d::geometry::Line3D_map" name="open3d::geometry::Line3D_map">
<area href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and..." alt="open3d::geometry::Ray3D" shape="rect" coords="0,112,226,136"/>
<area href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint..." alt="open3d::geometry::Segment3D" shape="rect" coords="236,112,462,136"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2840227cde5c4791cc42220eee3d0f68"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a> { <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68a4803e6b9e63dabf04de980788d6a13c4">Line</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68a9406e3c325bfc9873426e5eda4ba6e18">Ray</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68a4b77e2a9d8e9cfc299f504b32d6e3d2b">Segment</a> = 2
 }</td></tr>
<tr class="memdesc:a2840227cde5c4791cc42220eee3d0f68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies different semantic interpretations of 3d lines.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">More...</a><br /></td></tr>
<tr class="separator:a2840227cde5c4791cc42220eee3d0f68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3ba3531efce5360bed2601598d13d945"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ba3531efce5360bed2601598d13d945">Line3D</a> (const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;direction)</td></tr>
<tr class="memdesc:a3ba3531efce5360bed2601598d13d945"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default user constructor.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ba3531efce5360bed2601598d13d945">More...</a><br /></td></tr>
<tr class="separator:a3ba3531efce5360bed2601598d13d945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1028aaaedbd13abb177ae53b92cb2eb8"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a1028aaaedbd13abb177ae53b92cb2eb8">~Line3D</a> ()=default</td></tr>
<tr class="separator:a1028aaaedbd13abb177ae53b92cb2eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9db1261d9357a920f405f8bda0bd1a82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9db1261d9357a920f405f8bda0bd1a82">GetLineType</a> () const</td></tr>
<tr class="memdesc:a9db1261d9357a920f405f8bda0bd1a82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the semantic type of the line.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9db1261d9357a920f405f8bda0bd1a82">More...</a><br /></td></tr>
<tr class="separator:a9db1261d9357a920f405f8bda0bd1a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff9e3a4249802ba9a32ae3225787300"><td class="memItemLeft" align="right" valign="top">const Eigen::Vector3d &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ff9e3a4249802ba9a32ae3225787300">Origin</a> () const</td></tr>
<tr class="memdesc:a3ff9e3a4249802ba9a32ae3225787300"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the line's origin point.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ff9e3a4249802ba9a32ae3225787300">More...</a><br /></td></tr>
<tr class="separator:a3ff9e3a4249802ba9a32ae3225787300"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a230580a93b1c6ea10d9657bfb07e0ce6"><td class="memItemLeft" align="right" valign="top">const Eigen::Vector3d &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a230580a93b1c6ea10d9657bfb07e0ce6">Direction</a> () const</td></tr>
<tr class="memdesc:a230580a93b1c6ea10d9657bfb07e0ce6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the line's direction vector.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a230580a93b1c6ea10d9657bfb07e0ce6">More...</a><br /></td></tr>
<tr class="separator:a230580a93b1c6ea10d9657bfb07e0ce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9def68edf2d7e0dcbd65cb7fbb8a48d9"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9">Length</a> () const</td></tr>
<tr class="memdesc:a9def68edf2d7e0dcbd65cb7fbb8a48d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the length of the line, which for lines and rays will return positive infinity, but for segments will return a finite positive value.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9">More...</a><br /></td></tr>
<tr class="separator:a9def68edf2d7e0dcbd65cb7fbb8a48d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11174cdfb050d9a56cf854c35220959d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a11174cdfb050d9a56cf854c35220959d">Transform</a> (const Eigen::Transform&lt; double, 3, Eigen::Affine &gt; &amp;t)</td></tr>
<tr class="memdesc:a11174cdfb050d9a56cf854c35220959d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> by the given matrix.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a11174cdfb050d9a56cf854c35220959d">More...</a><br /></td></tr>
<tr class="separator:a11174cdfb050d9a56cf854c35220959d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e4734c3deb1095180ec6d7ef9e096d8"><td class="memItemLeft" align="right" valign="top">const Eigen::ParametrizedLine&lt; double, 3 &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8">Line</a> () const</td></tr>
<tr class="memdesc:a0e4734c3deb1095180ec6d7ef9e096d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a const reference to the underlying Eigen::ParametrizedLine object.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8">More...</a><br /></td></tr>
<tr class="separator:a0e4734c3deb1095180ec6d7ef9e096d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae45775d65b458e92ffedcd4ae8361e83"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae45775d65b458e92ffedcd4ae8361e83">IntersectionParameter</a> (const Eigen::Hyperplane&lt; double, 3 &gt; &amp;plane) const</td></tr>
<tr class="memdesc:ae45775d65b458e92ffedcd4ae8361e83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the intersection parameter between the line and a plane taking into account line semantics. Returns an empty result if there is no intersection. On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> this returns the same result as .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a>.intersectionParameter(plane)  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae45775d65b458e92ffedcd4ae8361e83">More...</a><br /></td></tr>
<tr class="separator:ae45775d65b458e92ffedcd4ae8361e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a777dc6a050bfdbecf4e0c5cf405eef75"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a777dc6a050bfdbecf4e0c5cf405eef75">ProjectionParameter</a> (const Eigen::Vector3d &amp;point) const</td></tr>
<tr class="memdesc:a777dc6a050bfdbecf4e0c5cf405eef75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the parameter of a point projected onto the line taking into account special semantics.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a777dc6a050bfdbecf4e0c5cf405eef75">More...</a><br /></td></tr>
<tr class="separator:a777dc6a050bfdbecf4e0c5cf405eef75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e5e71e98aa3763703018a858573eab5"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9e5e71e98aa3763703018a858573eab5">Projection</a> (const Eigen::Vector3d &amp;point) const</td></tr>
<tr class="memdesc:a9e5e71e98aa3763703018a858573eab5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a point projected onto the line, taking into account special semantics.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9e5e71e98aa3763703018a858573eab5">More...</a><br /></td></tr>
<tr class="separator:a9e5e71e98aa3763703018a858573eab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46481106aae372d1f2c84c3a18283e91"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46481106aae372d1f2c84c3a18283e91">SlabAABB</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box) const</td></tr>
<tr class="memdesc:a46481106aae372d1f2c84c3a18283e91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. Uses the slab method, see warning below.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46481106aae372d1f2c84c3a18283e91">More...</a><br /></td></tr>
<tr class="separator:a46481106aae372d1f2c84c3a18283e91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ce628018b440c61c548b0671d61056"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#aa2ce628018b440c61c548b0671d61056">ExactAABB</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box) const</td></tr>
<tr class="memdesc:aa2ce628018b440c61c548b0671d61056"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. This method is about 20x slower than the slab method, see details to know when to use.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#aa2ce628018b440c61c548b0671d61056">More...</a><br /></td></tr>
<tr class="separator:aa2ce628018b440c61c548b0671d61056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fbe3e1b0f3bda51262582deef4a284c"><td class="memItemLeft" align="right" valign="top">std::pair&lt; double, double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a8fbe3e1b0f3bda51262582deef4a284c">ClosestParameters</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;other) const</td></tr>
<tr class="memdesc:a8fbe3e1b0f3bda51262582deef4a284c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the two corresponding parameters of the closest distance between two <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> objects, including derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line type.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a8fbe3e1b0f3bda51262582deef4a284c">More...</a><br /></td></tr>
<tr class="separator:a8fbe3e1b0f3bda51262582deef4a284c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46befa2087e6f7051ce4ccb9c215f252"><td class="memItemLeft" align="right" valign="top">std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46befa2087e6f7051ce4ccb9c215f252">ClosestPoints</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;other) const</td></tr>
<tr class="memdesc:a46befa2087e6f7051ce4ccb9c215f252"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the two closest points between this <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> object and the other, including of derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line types.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46befa2087e6f7051ce4ccb9c215f252">More...</a><br /></td></tr>
<tr class="separator:a46befa2087e6f7051ce4ccb9c215f252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7a9472d3afe404db5dea4c9380b037b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac7a9472d3afe404db5dea4c9380b037b">DistanceTo</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;other) const</td></tr>
<tr class="memdesc:ac7a9472d3afe404db5dea4c9380b037b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the closest distance between two <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> objects, including derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line type.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac7a9472d3afe404db5dea4c9380b037b">More...</a><br /></td></tr>
<tr class="separator:ac7a9472d3afe404db5dea4c9380b037b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22599e4c534dfeade640b6b1dfb0f6ad"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a22599e4c534dfeade640b6b1dfb0f6ad">ClampParameter</a> (double parameter) const</td></tr>
<tr class="memdesc:a22599e4c534dfeade640b6b1dfb0f6ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps/bounds a parameter value to the closest valid place where the entity exists. On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, the value will be unchanged, on a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> a negative value will be made 0, and on a <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> a negative value will be made 0 and a positive value greater than <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a> will take the value of <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a>  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a22599e4c534dfeade640b6b1dfb0f6ad">More...</a><br /></td></tr>
<tr class="separator:a22599e4c534dfeade640b6b1dfb0f6ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5fe4da46d1ee7687aa65b7b377d8037"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac5fe4da46d1ee7687aa65b7b377d8037">IsParameterValid</a> (double parameter) const</td></tr>
<tr class="memdesc:ac5fe4da46d1ee7687aa65b7b377d8037"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verifies that a given parameter value is valid for the semantics of the line object. For lines, any parameter is valid, for rays any positive parameter is valid, and for segments any parameter between 0 and the segment length is valid.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac5fe4da46d1ee7687aa65b7b377d8037">More...</a><br /></td></tr>
<tr class="separator:ac5fe4da46d1ee7687aa65b7b377d8037"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ae7995760b5dba52b7c04a05b495bbebb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae7995760b5dba52b7c04a05b495bbebb">Through</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1)</td></tr>
<tr class="memdesc:ae7995760b5dba52b7c04a05b495bbebb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a line through two points. The line origin will take the value of p0, and the line direction will be a normalized vector from p0 to p1.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae7995760b5dba52b7c04a05b495bbebb">More...</a><br /></td></tr>
<tr class="separator:ae7995760b5dba52b7c04a05b495bbebb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae518ad901da97abfd11ee8316125158d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae518ad901da97abfd11ee8316125158d">Line3D</a> (const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;direction, <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ae518ad901da97abfd11ee8316125158d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal constructor for inherited classes that allows the setting of the LineType.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae518ad901da97abfd11ee8316125158d">More...</a><br /></td></tr>
<tr class="separator:ae518ad901da97abfd11ee8316125158d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f906f25af799f31e954bfd0c078bc4"><td class="memItemLeft" align="right" valign="top">std::pair&lt; double, double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a34f906f25af799f31e954bfd0c078bc4">SlabAABBBase</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box) const</td></tr>
<tr class="memdesc:a34f906f25af799f31e954bfd0c078bc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the common t_min and t_max values of the slab AABB intersection method. These values are computed identically for any semantic interpretation of the line, it's up to the derived classes to use them in conjunction with other information to determine what the intersection parameter is.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a34f906f25af799f31e954bfd0c078bc4">More...</a><br /></td></tr>
<tr class="separator:a34f906f25af799f31e954bfd0c078bc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the semantic differences between a "line", "ray", and "line segment" for operations in which the difference is important, such as intersection and distance tests. The underlying <a class="el" href="namespace_eigen.html">Eigen</a> object can always be retrieved with the .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a> method. </p>
<p>The taxonomy of the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> class and its derived classes, <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, was created in order to find a compromise between the goals of providing an easy-to-use API, enforcing obvious correctness when dealing with operations in which line semantics are important, and maintaining reasonably high performance.</p>
<p>The underlying motivation is to enforce correctness when performing line operations based on Eigen::ParametrizedLine&lt;double, 3&gt; even as subtleties about how a line is represented begin to affect the outcomes of different operations. Some performance is sacrificed in the use of virtual functions for a clean API in cases where the compiler cannot determine at compile time which function will be called and cannot de-virtualize the call.</p>
<p>In such cases where performance is extremely important, avoid iterating through a list of derived objects stored as <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> and calling virtual functions on them so that the compiler can hopefully remove the vtable lookup, or consider a hand implementation of your problem in which you carefully account for the semantics yourself. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a2840227cde5c4791cc42220eee3d0f68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2840227cde5c4791cc42220eee3d0f68">&#9670;&nbsp;</a></span>LineType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">open3d::geometry::Line3D::LineType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Specifies different semantic interpretations of 3d lines. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a2840227cde5c4791cc42220eee3d0f68a4803e6b9e63dabf04de980788d6a13c4"></a>Line&#160;</td><td class="fielddoc"><p>Lines extend infinitely in both directions. </p>
</td></tr>
<tr><td class="fieldname"><a id="a2840227cde5c4791cc42220eee3d0f68a9406e3c325bfc9873426e5eda4ba6e18"></a>Ray&#160;</td><td class="fielddoc"><p>Rays have an origin and a direction, and extend to infinity in that direction </p>
</td></tr>
<tr><td class="fieldname"><a id="a2840227cde5c4791cc42220eee3d0f68a4b77e2a9d8e9cfc299f504b32d6e3d2b"></a>Segment&#160;</td><td class="fielddoc"><p>Segments have both an origin and an endpoint and are finite in nature </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a3ba3531efce5360bed2601598d13d945"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ba3531efce5360bed2601598d13d945">&#9670;&nbsp;</a></span>Line3D() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Line3D::Line3D </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default user constructor. </p>

</div>
</div>
<a id="a1028aaaedbd13abb177ae53b92cb2eb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1028aaaedbd13abb177ae53b92cb2eb8">&#9670;&nbsp;</a></span>~Line3D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual open3d::geometry::Line3D::~Line3D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae518ad901da97abfd11ee8316125158d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae518ad901da97abfd11ee8316125158d">&#9670;&nbsp;</a></span>Line3D() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Line3D::Line3D </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">Line3D::LineType</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Internal constructor for inherited classes that allows the setting of the LineType. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a22599e4c534dfeade640b6b1dfb0f6ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22599e4c534dfeade640b6b1dfb0f6ad">&#9670;&nbsp;</a></span>ClampParameter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual double open3d::geometry::Line3D::ClampParameter </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>parameter</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clamps/bounds a parameter value to the closest valid place where the entity exists. On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, the value will be unchanged, on a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> a negative value will be made 0, and on a <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> a negative value will be made 0 and a positive value greater than <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a> will take the value of <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a> </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#a642a2ccdc0bb39669d901018d141e3b2">open3d::geometry::Segment3D</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0f44e1edb055f735f7a03982b34ed481">open3d::geometry::Ray3D</a>.</p>

</div>
</div>
<a id="a8fbe3e1b0f3bda51262582deef4a284c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fbe3e1b0f3bda51262582deef4a284c">&#9670;&nbsp;</a></span>ClosestParameters()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; double, double &gt; open3d::geometry::Line3D::ClosestParameters </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the two corresponding parameters of the closest distance between two <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> objects, including derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line type. </p>

</div>
</div>
<a id="a46befa2087e6f7051ce4ccb9c215f252"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46befa2087e6f7051ce4ccb9c215f252">&#9670;&nbsp;</a></span>ClosestPoints()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt; open3d::geometry::Line3D::ClosestPoints </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes the two closest points between this <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> object and the other, including of derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line types. </p>

</div>
</div>
<a id="a230580a93b1c6ea10d9657bfb07e0ce6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a230580a93b1c6ea10d9657bfb07e0ce6">&#9670;&nbsp;</a></span>Direction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::Vector3d&amp; open3d::geometry::Line3D::Direction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the line's direction vector. </p>

</div>
</div>
<a id="ac7a9472d3afe404db5dea4c9380b037b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7a9472d3afe404db5dea4c9380b037b">&#9670;&nbsp;</a></span>DistanceTo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::Line3D::DistanceTo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the closest distance between two <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> objects, including derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line type. </p>

</div>
</div>
<a id="aa2ce628018b440c61c548b0671d61056"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ce628018b440c61c548b0671d61056">&#9670;&nbsp;</a></span>ExactAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; open3d::geometry::Line3D::ExactAABB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>box</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. This method is about 20x slower than the slab method, see details to know when to use. </p>
<p>Calculates the lower intersection parameter of a parameterized line with an axis aligned bounding box. The intersection point can be recovered with .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a>.pointAt(...). If the line does not intersect the box the return value will be empty. Also note that if the AABB is behind the line's origin point, the value returned will still be of the lower intersection, which is the first intersection in the direction of the line, not the intersection closer to the origin.</p>
<p>This implementation is a naive exact method that considers intersections with all six bounding box planes. It is not optimized for speed and should only be used when a problem is conditioned such that the slab method is unacceptable. Use this when a line is likely to lie exactly in one of the AABB planes and false negatives are unacceptable. Typically this will only happen when lines are axis-aligned and both lines and bounding volumes are regularly spaced, and every intersection is important. In such cases if performance is important, a simple custom implementation based on the problem directionality will likely outperform even the slab method. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#a85fde597e4bddf24da88cc4bc0236366">open3d::geometry::Segment3D</a>.</p>

</div>
</div>
<a id="a9db1261d9357a920f405f8bda0bd1a82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9db1261d9357a920f405f8bda0bd1a82">&#9670;&nbsp;</a></span>GetLineType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a> open3d::geometry::Line3D::GetLineType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the semantic type of the line. </p>

</div>
</div>
<a id="ae45775d65b458e92ffedcd4ae8361e83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae45775d65b458e92ffedcd4ae8361e83">&#9670;&nbsp;</a></span>IntersectionParameter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; open3d::geometry::Line3D::IntersectionParameter </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Hyperplane&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>plane</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the intersection parameter between the line and a plane taking into account line semantics. Returns an empty result if there is no intersection. On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> this returns the same result as .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a>.intersectionParameter(plane) </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#a22ac4aea13bc78ef56177b0ed2e82e49">open3d::geometry::Segment3D</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a338aa135fb8cd5fe92bda6d40826ae36">open3d::geometry::Ray3D</a>.</p>

</div>
</div>
<a id="ac5fe4da46d1ee7687aa65b7b377d8037"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5fe4da46d1ee7687aa65b7b377d8037">&#9670;&nbsp;</a></span>IsParameterValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::geometry::Line3D::IsParameterValid </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>parameter</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Verifies that a given parameter value is valid for the semantics of the line object. For lines, any parameter is valid, for rays any positive parameter is valid, and for segments any parameter between 0 and the segment length is valid. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#ad7907f05d54e8288f4e0d98723eca83d">open3d::geometry::Segment3D</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a234920d1ae68d6e19605877bf1aecd48">open3d::geometry::Ray3D</a>.</p>

</div>
</div>
<a id="a9def68edf2d7e0dcbd65cb7fbb8a48d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9def68edf2d7e0dcbd65cb7fbb8a48d9">&#9670;&nbsp;</a></span>Length()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual double open3d::geometry::Line3D::Length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the length of the line, which for lines and rays will return positive infinity, but for segments will return a finite positive value. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#aadcbad20591ab4ff5ffb18696666a9d9">open3d::geometry::Segment3D</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1">open3d::geometry::Ray3D</a>.</p>

</div>
</div>
<a id="a0e4734c3deb1095180ec6d7ef9e096d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e4734c3deb1095180ec6d7ef9e096d8">&#9670;&nbsp;</a></span>Line()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::ParametrizedLine&lt;double, 3&gt;&amp; open3d::geometry::Line3D::Line </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a const reference to the underlying Eigen::ParametrizedLine object. </p>

</div>
</div>
<a id="a3ff9e3a4249802ba9a32ae3225787300"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ff9e3a4249802ba9a32ae3225787300">&#9670;&nbsp;</a></span>Origin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Eigen::Vector3d&amp; open3d::geometry::Line3D::Origin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the line's origin point. </p>

</div>
</div>
<a id="a9e5e71e98aa3763703018a858573eab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e5e71e98aa3763703018a858573eab5">&#9670;&nbsp;</a></span>Projection()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Line3D::Projection </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates a point projected onto the line, taking into account special semantics. </p>
<p>On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> this is the point directly projected onto the infinite line, and represents the closest point on the line to the test point. On a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> this will either be a point on the ray's positive direction or the ray origin, whichever is closer. On a <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> this will be either one of the segment's endpoints or a point between them, whichever is closest to the test point. </p>

</div>
</div>
<a id="a777dc6a050bfdbecf4e0c5cf405eef75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a777dc6a050bfdbecf4e0c5cf405eef75">&#9670;&nbsp;</a></span>ProjectionParameter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::Line3D::ProjectionParameter </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the parameter of a point projected onto the line taking into account special semantics. </p>
<p>On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> this is the point directly projected onto the infinite line, and represents the closest point on the line to the test point. A negative value indicates the projection lies behind the origin, a positive value is in front of the origin. On a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> this will be a positive value only, since rays do not exist in the negative direction. On a <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> this will be a positive value which is less than or equal to the segment length. </p>

</div>
</div>
<a id="a46481106aae372d1f2c84c3a18283e91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46481106aae372d1f2c84c3a18283e91">&#9670;&nbsp;</a></span>SlabAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; open3d::geometry::Line3D::SlabAABB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>box</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. Uses the slab method, see warning below. </p>
<p>Calculates the lower intersection parameter of a parameterized line with an axis aligned bounding box. The intersection point can be recovered with .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a>.pointAt(...). If the line does not intersect the box the optional return value will be empty. Also note that if the AABB is behind the line's origin point, the value returned will still be of the lower intersection, which is the first intersection in the direction of the line, not the intersection closer to the origin.</p>
<p>This implementation is based off of Tavian Barnes' optimized branchless slab method. <a href="https://tavianator.com/2011/ray_box.html">https://tavianator.com/2011/ray_box.html</a>. It runs in roughly 5% of the time as the the naive exact method, but can degenerate in specific conditions where a line lies exactly in one of the AABB's planes.</p>
<dl class="section warning"><dt>Warning</dt><dd>A line that lies exactly in one of the AABB's planes within the double floating point precision will not intersect correctly by this method </dd></dl>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#a7194c4fde9c6812bb8766a801f047b55">open3d::geometry::Segment3D</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a1cfeb81330ebb2ad4410ce59f5d9e68f">open3d::geometry::Ray3D</a>.</p>

</div>
</div>
<a id="a34f906f25af799f31e954bfd0c078bc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f906f25af799f31e954bfd0c078bc4">&#9670;&nbsp;</a></span>SlabAABBBase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; double, double &gt; open3d::geometry::Line3D::SlabAABBBase </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>box</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the common t_min and t_max values of the slab AABB intersection method. These values are computed identically for any semantic interpretation of the line, it's up to the derived classes to use them in conjunction with other information to determine what the intersection parameter is. </p>

</div>
</div>
<a id="ae7995760b5dba52b7c04a05b495bbebb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7995760b5dba52b7c04a05b495bbebb">&#9670;&nbsp;</a></span>Through()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> open3d::geometry::Line3D::Through </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a line through two points. The line origin will take the value of p0, and the line direction will be a normalized vector from p0 to p1. </p>

</div>
</div>
<a id="a11174cdfb050d9a56cf854c35220959d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11174cdfb050d9a56cf854c35220959d">&#9670;&nbsp;</a></span>Transform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Line3D::Transform </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Transform&lt; double, 3, Eigen::Affine &gt; &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transform the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> by the given matrix. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d#a79c996dd1845af56353510325f85d19e">open3d::geometry::Segment3D</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_line3_d_8h_source.html">Line3D.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_line3_d_8cpp.html">Line3D.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_line3_d.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:04 GMT -->
</html>
