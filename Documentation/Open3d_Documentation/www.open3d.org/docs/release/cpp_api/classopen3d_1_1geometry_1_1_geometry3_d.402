<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_geometry3_d.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:55 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::Geometry3D Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::Geometry3D Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>The base geometry class for 3D geometries.  
 <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_geometry3_d_8h_source.html">Geometry3D.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::Geometry3D:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_geometry3_d.60e" usemap="#open3d::geometry::Geometry3D_map" alt=""/>
  <map id="open3d::geometry::Geometry3D_map" name="open3d::geometry::Geometry3D_map">
<area href="classopen3d_1_1geometry_1_1_geometry.400.del" title="The base geometry class." alt="open3d::geometry::Geometry" shape="rect" coords="0,0,259,24"/>
<area href="classopen3d_1_1geometry_1_1_axis_aligned_bou" title="A bounding box that is aligned along the coordinate axes." alt="open3d::geometry::AxisAlignedBoundingBox" shape="rect" coords="269,112,528,136"/>
<area href="classopen3d_1_1geometry_1_1_line_set.411.del" title="LineSet define a sets of lines in 3D. A typical application is to display the point cloud corresponde..." alt="open3d::geometry::LineSet" shape="rect" coords="269,168,528,192"/>
<area href="classopen3d_1_1geometry_1_1_mesh_base.412.de" title="MeshBash Class." alt="open3d::geometry::MeshBase" shape="rect" coords="269,224,528,248"/>
<area href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure." alt="open3d::geometry::Octree" shape="rect" coords="269,280,528,304"/>
<area href="classopen3d_1_1geometry_1_1_oriented_boundin" title="A bounding box oriented along an arbitrary frame of reference." alt="open3d::geometry::OrientedBoundingBox" shape="rect" coords="269,336,528,360"/>
<area href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals." alt="open3d::geometry::PointCloud" shape="rect" coords="269,392,528,416"/>
<area href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid." alt="open3d::geometry::VoxelGrid" shape="rect" coords="269,448,528,472"/>
<area href="classopen3d_1_1visualization_1_1_point_cloud" title="A utility class to store picked points of a pointcloud." alt="open3d::visualization::PointCloudPicker" shape="rect" coords="269,504,528,528"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3bee61a0da428535d0eb9f62786fcab1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a3bee61a0da428535d0eb9f62786fcab1">~Geometry3D</a> () override</td></tr>
<tr class="separator:a3bee61a0da428535d0eb9f62786fcab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d18d746cde60c2e79cd6109c505ea22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5d18d746cde60c2e79cd6109c505ea22">Clear</a> () override=0</td></tr>
<tr class="memdesc:a5d18d746cde60c2e79cd6109c505ea22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear all elements in the geometry.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5d18d746cde60c2e79cd6109c505ea22">More...</a><br /></td></tr>
<tr class="separator:a5d18d746cde60c2e79cd6109c505ea22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cece4be56baea48a365ab22f88f89ea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5cece4be56baea48a365ab22f88f89ea">IsEmpty</a> () const override=0</td></tr>
<tr class="memdesc:a5cece4be56baea48a365ab22f88f89ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> iff the geometry is empty.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5cece4be56baea48a365ab22f88f89ea">More...</a><br /></td></tr>
<tr class="separator:a5cece4be56baea48a365ab22f88f89ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ce0c9ab3b7c4addc07732e69ea0d48d"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5ce0c9ab3b7c4addc07732e69ea0d48d">GetMinBound</a> () const =0</td></tr>
<tr class="memdesc:a5ce0c9ab3b7c4addc07732e69ea0d48d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns min bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5ce0c9ab3b7c4addc07732e69ea0d48d">More...</a><br /></td></tr>
<tr class="separator:a5ce0c9ab3b7c4addc07732e69ea0d48d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ba1483835f630921a290c36d0dc0528"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4ba1483835f630921a290c36d0dc0528">GetMaxBound</a> () const =0</td></tr>
<tr class="memdesc:a4ba1483835f630921a290c36d0dc0528"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns max bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4ba1483835f630921a290c36d0dc0528">More...</a><br /></td></tr>
<tr class="separator:a4ba1483835f630921a290c36d0dc0528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32d884b24e1a680bf2adecd713182ffb"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a32d884b24e1a680bf2adecd713182ffb">GetCenter</a> () const =0</td></tr>
<tr class="memdesc:a32d884b24e1a680bf2adecd713182ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the center of the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a32d884b24e1a680bf2adecd713182ffb">More...</a><br /></td></tr>
<tr class="separator:a32d884b24e1a680bf2adecd713182ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6adfe40c8c59be751e3079a2a5cba874"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a6adfe40c8c59be751e3079a2a5cba874">GetAxisAlignedBoundingBox</a> () const =0</td></tr>
<tr class="separator:a6adfe40c8c59be751e3079a2a5cba874"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa390b8742e15d903bf394cc3b7518d08"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa390b8742e15d903bf394cc3b7518d08">GetOrientedBoundingBox</a> (bool robust=false) const =0</td></tr>
<tr class="separator:aa390b8742e15d903bf394cc3b7518d08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a371b43251251c0873ca427b8dcb5f309"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a371b43251251c0873ca427b8dcb5f309">GetMinimalOrientedBoundingBox</a> (bool robust=false) const =0</td></tr>
<tr class="separator:a371b43251251c0873ca427b8dcb5f309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab99e2171cafbe1039aaebd76d178db0d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab99e2171cafbe1039aaebd76d178db0d">Transform</a> (const Eigen::Matrix4d &amp;transformation)=0</td></tr>
<tr class="memdesc:ab99e2171cafbe1039aaebd76d178db0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply transformation (4x4 matrix) to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab99e2171cafbe1039aaebd76d178db0d">More...</a><br /></td></tr>
<tr class="separator:ab99e2171cafbe1039aaebd76d178db0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a167e8cb72ba68af89c6f418d59dc8bfd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a167e8cb72ba68af89c6f418d59dc8bfd">Translate</a> (const Eigen::Vector3d &amp;translation, bool relative=true)=0</td></tr>
<tr class="memdesc:a167e8cb72ba68af89c6f418d59dc8bfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a167e8cb72ba68af89c6f418d59dc8bfd">More...</a><br /></td></tr>
<tr class="separator:a167e8cb72ba68af89c6f418d59dc8bfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54876d016ceed8e4885dc25b22fa176e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a54876d016ceed8e4885dc25b22fa176e">Scale</a> (const double scale, const Eigen::Vector3d &amp;center)=0</td></tr>
<tr class="memdesc:a54876d016ceed8e4885dc25b22fa176e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a54876d016ceed8e4885dc25b22fa176e">More...</a><br /></td></tr>
<tr class="separator:a54876d016ceed8e4885dc25b22fa176e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab4555d0b3e65d35450a2ec57a14ff4d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aab4555d0b3e65d35450a2ec57a14ff4d">Rotate</a> (const Eigen::Matrix3d &amp;R, const Eigen::Vector3d &amp;center)=0</td></tr>
<tr class="memdesc:aab4555d0b3e65d35450a2ec57a14ff4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aab4555d0b3e65d35450a2ec57a14ff4d">More...</a><br /></td></tr>
<tr class="separator:aab4555d0b3e65d35450a2ec57a14ff4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2ab7fb19c0fc8f4ccbc9a776be2e23"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5c2ab7fb19c0fc8f4ccbc9a776be2e23">Rotate</a> (const Eigen::Matrix3d &amp;R)</td></tr>
<tr class="separator:a5c2ab7fb19c0fc8f4ccbc9a776be2e23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a1c2eb5a3e6c0a47cc31e38d086d07c54">~Geometry</a> ()</td></tr>
<tr class="separator:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">More...</a><br /></td></tr>
<tr class="separator:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">Dimension</a> () const</td></tr>
<tr class="memdesc:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">More...</a><br /></td></tr>
<tr class="separator:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a7cba98e39c57eb2544eedfb525807a06">GetName</a> () const</td></tr>
<tr class="separator:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a4229d9bdaded622121f443cbb81626b8">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab557dd1610ea7fae73d00c706bbd529f"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">GetRotationMatrixFromXYZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ab557dd1610ea7fae73d00c706bbd529f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XYZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">More...</a><br /></td></tr>
<tr class="separator:ab557dd1610ea7fae73d00c706bbd529f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5b8ef97b798c623b4e2fe72d2afda03"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">GetRotationMatrixFromYZX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:af5b8ef97b798c623b4e2fe72d2afda03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YZX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">More...</a><br /></td></tr>
<tr class="separator:af5b8ef97b798c623b4e2fe72d2afda03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb9b2eabab1ced5c25358c3a69c8d13"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">GetRotationMatrixFromZXY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:afbb9b2eabab1ced5c25358c3a69c8d13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZXY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">More...</a><br /></td></tr>
<tr class="separator:afbb9b2eabab1ced5c25358c3a69c8d13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f91e4bddbb07a3ccd6692db599eca7"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">GetRotationMatrixFromXZY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a82f91e4bddbb07a3ccd6692db599eca7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XZY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">More...</a><br /></td></tr>
<tr class="separator:a82f91e4bddbb07a3ccd6692db599eca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac96c4285c5d5cc80f14458559c7a3826"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">GetRotationMatrixFromZYX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ac96c4285c5d5cc80f14458559c7a3826"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZYX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">More...</a><br /></td></tr>
<tr class="separator:ac96c4285c5d5cc80f14458559c7a3826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ee2e4c68c2c55ac4ab8b533b11dad0"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">GetRotationMatrixFromYXZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a16ee2e4c68c2c55ac4ab8b533b11dad0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YXZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">More...</a><br /></td></tr>
<tr class="separator:a16ee2e4c68c2c55ac4ab8b533b11dad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9356dfe2ba6a44df60588f4b2a29056"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">GetRotationMatrixFromAxisAngle</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:aa9356dfe2ba6a44df60588f4b2a29056"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from AxisAngle RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">More...</a><br /></td></tr>
<tr class="separator:aa9356dfe2ba6a44df60588f4b2a29056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9966dec46a4808e5acd9318fa6bf73a"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">GetRotationMatrixFromQuaternion</a> (const Eigen::Vector4d &amp;rotation)</td></tr>
<tr class="memdesc:ad9966dec46a4808e5acd9318fa6bf73a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from Quaternion.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">More...</a><br /></td></tr>
<tr class="separator:ad9966dec46a4808e5acd9318fa6bf73a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ab7c4a13882fb57765e55e164e34eedfb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">Geometry3D</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ab7c4a13882fb57765e55e164e34eedfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">More...</a><br /></td></tr>
<tr class="separator:ab7c4a13882fb57765e55e164e34eedfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03dcc177e8b50632e95d7dd7d838976"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">ComputeMinBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:aa03dcc177e8b50632e95d7dd7d838976"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute min bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">More...</a><br /></td></tr>
<tr class="separator:aa03dcc177e8b50632e95d7dd7d838976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a487b1d81a14ef17bf70e8c4d94d5c18c"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">ComputeMaxBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a487b1d81a14ef17bf70e8c4d94d5c18c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute max bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">More...</a><br /></td></tr>
<tr class="separator:a487b1d81a14ef17bf70e8c4d94d5c18c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8e6a432ab26afcb7fb572313ddc90ce"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">ComputeCenter</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:ac8e6a432ab26afcb7fb572313ddc90ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computer center of a list of points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">More...</a><br /></td></tr>
<tr class="separator:ac8e6a432ab26afcb7fb572313ddc90ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fb3da9e31897b4279f02327daca34cd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">ResizeAndPaintUniformColor</a> (std::vector&lt; Eigen::Vector3d &gt; &amp;colors, const size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const Eigen::Vector3d &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>) const</td></tr>
<tr class="memdesc:a1fb3da9e31897b4279f02327daca34cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resizes the colors vector and paints a uniform color.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">More...</a><br /></td></tr>
<tr class="separator:a1fb3da9e31897b4279f02327daca34cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e3a5c603c2c9a0e05c1af1a4a279508"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">TransformPoints</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a0e3a5c603c2c9a0e05c1af1a4a279508"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all points with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">More...</a><br /></td></tr>
<tr class="separator:a0e3a5c603c2c9a0e05c1af1a4a279508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1df456f2e6dddac794f7ab2186a7ce5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">TransformNormals</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:ac1df456f2e6dddac794f7ab2186a7ce5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the normals with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">More...</a><br /></td></tr>
<tr class="separator:ac1df456f2e6dddac794f7ab2186a7ce5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a623c3e7c883e0bcfc2987aaf92c96597"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">TransformCovariances</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a623c3e7c883e0bcfc2987aaf92c96597"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all covariance matrices with the transformation.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">More...</a><br /></td></tr>
<tr class="separator:a623c3e7c883e0bcfc2987aaf92c96597"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4029dff278938fcf7eb73b4133f76e67"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">TranslatePoints</a> (const Eigen::Vector3d &amp;translation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, bool relative) const</td></tr>
<tr class="memdesc:a4029dff278938fcf7eb73b4133f76e67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">More...</a><br /></td></tr>
<tr class="separator:a4029dff278938fcf7eb73b4133f76e67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26106b31a3acecad90f44293c83a3a1b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">ScalePoints</a> (const double scale, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a26106b31a3acecad90f44293c83a3a1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the coordinates of all points by the scaling factor <code>scale</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">More...</a><br /></td></tr>
<tr class="separator:a26106b31a3acecad90f44293c83a3a1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a901a9fda0a2b40a8a53ea45ff18a1760"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">RotatePoints</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a901a9fda0a2b40a8a53ea45ff18a1760"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all points with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">More...</a><br /></td></tr>
<tr class="separator:a901a9fda0a2b40a8a53ea45ff18a1760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2448e4cfbdb49e90e72289e36113d9b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">RotateNormals</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:aa2448e4cfbdb49e90e72289e36113d9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all normals with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">More...</a><br /></td></tr>
<tr class="separator:aa2448e4cfbdb49e90e72289e36113d9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce8a11fd0762558a620f448f18ebae3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">RotateCovariances</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a9ce8a11fd0762558a620f448f18ebae3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all covariance matrices with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">More...</a><br /></td></tr>
<tr class="separator:a9ce8a11fd0762558a620f448f18ebae3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">Geometry</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">More...</a><br /></td></tr>
<tr class="separator:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a69975c2b054d4fd12cf36866a030ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">More...</a><br /></td></tr>
<tr class="separator:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The base geometry class for 3D geometries. </p>
<p>Main class for 3D geometries, Derives all data from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del" title="The base geometry class.">Geometry</a> Base class. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a3bee61a0da428535d0eb9f62786fcab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bee61a0da428535d0eb9f62786fcab1">&#9670;&nbsp;</a></span>~Geometry3D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Geometry3D::~Geometry3D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab7c4a13882fb57765e55e164e34eedfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7c4a13882fb57765e55e164e34eedfb">&#9670;&nbsp;</a></span>Geometry3D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Geometry3D::Geometry3D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parameterized Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>type of object based on GeometryType. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5d18d746cde60c2e79cd6109c505ea22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d18d746cde60c2e79cd6109c505ea22">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a>&amp; open3d::geometry::Geometry3D::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all elements in the geometry. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a4c64a20f88fed10e95947d83b721efad">open3d::geometry::Geometry</a>.</p>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#af1a278c2d9aaf0f9db946f99242232fb">open3d::visualization::PointCloudPicker</a>, <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a6c21e599148f858ab8928008358cbf43">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40#a4ea92820de31c1fcbf62e5c6d9516540">open3d::geometry::TriangleMesh</a>, <a class="el" href="classopen3d_1_1geometry_1_1_tetra_mesh.423.d#afe4d02411d4ea06cc631232d502042b0">open3d::geometry::TetraMesh</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a37e5242e55046ac9a1e4eb0ae7ed7841">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a376f2e2c9eb1dfc92d9d0db13fda7161">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ac3f81cdfc14b1fe903f2d5c3bd3b9cd7">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a2960168ecfa76fe82b7f908e0b5f61d7">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_half_edge_triang#a963af08512c743cc9deb660280e9322e">open3d::geometry::HalfEdgeTriangleMesh</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#aa5cf05a3f69b07a90f03096522e9c5cc">open3d::geometry::AxisAlignedBoundingBox</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a22d5de36dcd94caaa2eb6c5494a9f771">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="ac8e6a432ab26afcb7fb572313ddc90ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8e6a432ab26afcb7fb572313ddc90ce">&#9670;&nbsp;</a></span>ComputeCenter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Geometry3D::ComputeCenter </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computer center of a list of points. </p>

</div>
</div>
<a id="a487b1d81a14ef17bf70e8c4d94d5c18c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a487b1d81a14ef17bf70e8c4d94d5c18c">&#9670;&nbsp;</a></span>ComputeMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Geometry3D::ComputeMaxBound </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute max bound of a list points. </p>

</div>
</div>
<a id="aa03dcc177e8b50632e95d7dd7d838976"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa03dcc177e8b50632e95d7dd7d838976">&#9670;&nbsp;</a></span>ComputeMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Geometry3D::ComputeMinBound </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute min bound of a list points. </p>

</div>
</div>
<a id="a6adfe40c8c59be751e3079a2a5cba874"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6adfe40c8c59be751e3079a2a5cba874">&#9670;&nbsp;</a></span>GetAxisAlignedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> open3d::geometry::Geometry3D::GetAxisAlignedBoundingBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates the axis-aligned bounding box around the points of the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#aa697d6ef976789d57c6d8f57711919dc">AxisAlignedBoundingBox::CreateFromPoints()</a> </p>

<p>Implemented in <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a05168fae52917fbc53e4b6366cd29f69">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a0f60f4856e3f665d48628b42c1aa8f28">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a579ce71bfa837f26ab08d11181b632d0">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a81a7bcbb473ab0d382f8a604fe01da47">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#aee288862400241cd75bbd0bc93e6cf3d">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a66c66baac6a17d0c14ccf93ab803ea8b">open3d::geometry::AxisAlignedBoundingBox</a>, <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#af8b181a4d95d1ad5d928a700aa62da5a">open3d::geometry::OrientedBoundingBox</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#aa5243edd60a6287d0c0a3e6d9cbd05b0">open3d::visualization::PointCloudPicker</a>.</p>

</div>
</div>
<a id="a32d884b24e1a680bf2adecd713182ffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32d884b24e1a680bf2adecd713182ffb">&#9670;&nbsp;</a></span>GetCenter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Eigen::Vector3d open3d::geometry::Geometry3D::GetCenter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the center of the geometry coordinates. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ab94a328b55529bb33f5d428656e6a86a">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a1b36be18a575419ecb6a1761f56a4f03">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a196f8ba5a6dc1a0f6b88095bd8479dec">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#aca7af34654077e96288094255aa10de5">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a3cffd8adbedb336b113b4ac5aaae28f1">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a358b4cbf247f0fc397accea39e13fa72">open3d::geometry::AxisAlignedBoundingBox</a>, <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a6030f34cbcc213fbb84d889e6f1a6b6e">open3d::geometry::OrientedBoundingBox</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#a61617b8939312a8bc394bd3a93ca6197">open3d::visualization::PointCloudPicker</a>.</p>

</div>
</div>
<a id="a4ba1483835f630921a290c36d0dc0528"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ba1483835f630921a290c36d0dc0528">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Eigen::Vector3d open3d::geometry::Geometry3D::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns max bounds for geometry coordinates. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a9eaeb8d615431d53b95b134ca5c93590">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a35afe91567f1ecf04c2dba08892175a6">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#af88f589fe8c9d3a22f2a58211e41e71f">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a36ceff192f28d34b1893bb592c535072">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a6c40d6ad5e05477432ad2a768ab2690e">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#afada3b556ee50f0f1c1e08028c3a3f52">open3d::geometry::AxisAlignedBoundingBox</a>, <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a33774eddfe03cff2779c42ad957f69c3">open3d::geometry::OrientedBoundingBox</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#a663afa9c58a54dfbc5b036e51fe0f2a3">open3d::visualization::PointCloudPicker</a>.</p>

</div>
</div>
<a id="a5ce0c9ab3b7c4addc07732e69ea0d48d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ce0c9ab3b7c4addc07732e69ea0d48d">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Eigen::Vector3d open3d::geometry::Geometry3D::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns min bounds for geometry coordinates. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a8422b89bb6b28d31e291e1960d1e61cf">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a34cf5bf8e8fc872afb9de353081e0f40">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a455ee9e47b4281372c5f651ac2719cc2">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad6c4c2ef12c0a5a4d50d7974cb779d06">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a84f737e13fd43953358628a08dca1325">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a645388be12376d35b5132c494d1e0cf3">open3d::geometry::AxisAlignedBoundingBox</a>, <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#ae347ae51496a63b6820da9e7cbeed806">open3d::geometry::OrientedBoundingBox</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#af83b840c7ab1625774c15e89be351d88">open3d::visualization::PointCloudPicker</a>.</p>

</div>
</div>
<a id="a371b43251251c0873ca427b8dcb5f309"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a371b43251251c0873ca427b8dcb5f309">&#9670;&nbsp;</a></span>GetMinimalOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::Geometry3D::GetMinimalOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates the minimal oriented bounding box around the points of the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a00bf997d31d1b43449f89b509ac03f72">OrientedBoundingBox::CreateFromPointsMinimal()</a> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">robust</td><td>If set to true uses a more robust method which works in degenerate cases but introduces noise to the points coordinates. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#af51ee30927f7ae619ad69b399c5bc6c4">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a00019e336f74442025fcdaa4c5d20651">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4539e4e44f378b04dbfa83567f7c8aaf">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3b821b781c20c9d1e2d3fd586763626e">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a1536e4862180d98f2da67e50d7468e33">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a408a62af579c2860e92a57e6f7a9c60f">open3d::geometry::AxisAlignedBoundingBox</a>, <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#a20c242c67b124cd233c59f029593be59">open3d::visualization::PointCloudPicker</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#ae4addda11c993e8c918d244b4df30578">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="aa390b8742e15d903bf394cc3b7518d08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa390b8742e15d903bf394cc3b7518d08">&#9670;&nbsp;</a></span>GetOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::Geometry3D::GetOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an oriented bounding box around the points of the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a699fea43ea3dc4e828492e091fc98ba2">OrientedBoundingBox::CreateFromPoints()</a> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">robust</td><td>If set to true uses a more robust method which works in degenerate cases but introduces noise to the points coordinates. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a452e8855ff458f519d6679ec1e4c6f22">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a5ace5711205c405794b824849e826c63">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a70f41d47bc4d0e17d97c0d6f4d3ea80d">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#adf9583383d79c612d1396750f3ad190a">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#abb0f032f0e409e0d2b29171e4f6f0fd8">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a8be5399acfd34c2b2beb89af8a7c6320">open3d::geometry::AxisAlignedBoundingBox</a>, <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#aa97d70cd2aee869c33d7b7d8258ba169">open3d::visualization::PointCloudPicker</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#ae2e514786cea038a4a3aeca1638cb4d6">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="aa9356dfe2ba6a44df60588f4b2a29056"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9356dfe2ba6a44df60588f4b2a29056">&#9670;&nbsp;</a></span>GetRotationMatrixFromAxisAngle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromAxisAngle </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from AxisAngle RotationType. </p>

</div>
</div>
<a id="ad9966dec46a4808e5acd9318fa6bf73a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9966dec46a4808e5acd9318fa6bf73a">&#9670;&nbsp;</a></span>GetRotationMatrixFromQuaternion()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromQuaternion </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector4d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from Quaternion. </p>

</div>
</div>
<a id="ab557dd1610ea7fae73d00c706bbd529f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab557dd1610ea7fae73d00c706bbd529f">&#9670;&nbsp;</a></span>GetRotationMatrixFromXYZ()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromXYZ </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from XYZ RotationType. </p>

</div>
</div>
<a id="a82f91e4bddbb07a3ccd6692db599eca7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82f91e4bddbb07a3ccd6692db599eca7">&#9670;&nbsp;</a></span>GetRotationMatrixFromXZY()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromXZY </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from XZY RotationType. </p>

</div>
</div>
<a id="a16ee2e4c68c2c55ac4ab8b533b11dad0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16ee2e4c68c2c55ac4ab8b533b11dad0">&#9670;&nbsp;</a></span>GetRotationMatrixFromYXZ()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromYXZ </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from YXZ RotationType. </p>

</div>
</div>
<a id="af5b8ef97b798c623b4e2fe72d2afda03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5b8ef97b798c623b4e2fe72d2afda03">&#9670;&nbsp;</a></span>GetRotationMatrixFromYZX()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromYZX </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from YZX RotationType. </p>

</div>
</div>
<a id="afbb9b2eabab1ced5c25358c3a69c8d13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbb9b2eabab1ced5c25358c3a69c8d13">&#9670;&nbsp;</a></span>GetRotationMatrixFromZXY()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromZXY </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from ZXY RotationType. </p>

</div>
</div>
<a id="ac96c4285c5d5cc80f14458559c7a3826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac96c4285c5d5cc80f14458559c7a3826">&#9670;&nbsp;</a></span>GetRotationMatrixFromZYX()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix3d open3d::geometry::Geometry3D::GetRotationMatrixFromZYX </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Rotation Matrix from ZYX RotationType. </p>

</div>
</div>
<a id="a5cece4be56baea48a365ab22f88f89ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cece4be56baea48a365ab22f88f89ea">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Geometry3D::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> iff the geometry is empty. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#ac778791a0c01ba5297483fa7b3020935">open3d::geometry::Geometry</a>.</p>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#ac7856d96a70dacc4df8e1e7b1e49336a">open3d::visualization::PointCloudPicker</a>, <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a4aa9a4074406a897fbed07aec7266956">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#af81645c9fda2cb8ac2545e2848d7f8e4">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a1cf353fda3702ac381aa3c9f5fb9ea18">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a0968a4f71bdbbc116850df571f80272c">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a73ddf7c3f6a115d7bc6ff74bb8808fa4">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a65f1febc32800421c5efbbd89ed380ee">open3d::geometry::AxisAlignedBoundingBox</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#af8d00fd5d2f753ddc3ec68795a61a7f9">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="a1fb3da9e31897b4279f02327daca34cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fb3da9e31897b4279f02327daca34cd">&#9670;&nbsp;</a></span>ResizeAndPaintUniformColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::ResizeAndPaintUniformColor </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>color</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Resizes the colors vector and paints a uniform color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">colors</td><td>An array of eigen vectors specifies colors in RGB. </td></tr>
    <tr><td class="paramname">size</td><td>The resultant size of the colors array. </td></tr>
    <tr><td class="paramname">color</td><td>The final color in which the colors will be painted. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5c2ab7fb19c0fc8f4ccbc9a776be2e23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c2ab7fb19c0fc8f4ccbc9a776be2e23">&#9670;&nbsp;</a></span>Rotate() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp; open3d::geometry::Geometry3D::Rotate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aab4555d0b3e65d35450a2ec57a14ff4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab4555d0b3e65d35450a2ec57a14ff4d">&#9670;&nbsp;</a></span>Rotate() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a>&amp; open3d::geometry::Geometry3D::Rotate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix </td></tr>
    <tr><td class="paramname">center</td><td>Rotation center that is used for the rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#af3baf47759a348e1852353530f5fd04d">open3d::visualization::PointCloudPicker</a>, <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a3eae1fb9d0afb0fa2b90f8ac5e82bb15">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40#a039c1d00b33423cb5371d6ba157557a1">open3d::geometry::TriangleMesh</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a90cf4078f98dc88800657a438f036782">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4c3eff1b9054cf135383220ea5ca7b8e">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3fa1a882c26e318cc9d03b688e91a4f0">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#ad2a1939f0b968d5af5d047cc01c6dd0d">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a32dee569cb1e31e815e542d20d1da120">open3d::geometry::AxisAlignedBoundingBox</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a80fd250e64ba05768910243fb32d19ef">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="a9ce8a11fd0762558a620f448f18ebae3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ce8a11fd0762558a620f448f18ebae3">&#9670;&nbsp;</a></span>RotateCovariances()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::RotateCovariances </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Matrix3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>covariances</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate all covariance matrices with the rotation matrix <code>R</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix </td></tr>
    <tr><td class="paramname">covariances</td><td>A list of covariance matrices to be transformed.</td></tr>
  </table>
  </dd>
</dl>
<p>The only part that affects the covariance is the rotation part. For more information on variance propagation please visit: <a href="https://en.wikipedia.org/wiki/Propagation_of_uncertainty">https://en.wikipedia.org/wiki/Propagation_of_uncertainty</a> </p>

</div>
</div>
<a id="aa2448e4cfbdb49e90e72289e36113d9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2448e4cfbdb49e90e72289e36113d9b">&#9670;&nbsp;</a></span>RotateNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::RotateNormals </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>normals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate all normals with the rotation matrix <code>R</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix </td></tr>
    <tr><td class="paramname">normals</td><td>A list of normals to be transformed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a901a9fda0a2b40a8a53ea45ff18a1760"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a901a9fda0a2b40a8a53ea45ff18a1760">&#9670;&nbsp;</a></span>RotatePoints()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::RotatePoints </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate all points with the rotation matrix <code>R</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix defines the axis of rotation and the norm the angle around this axis. </td></tr>
    <tr><td class="paramname">points</td><td>A list of points to be transformed. </td></tr>
    <tr><td class="paramname">center</td><td>Rotation center that is used for the rotation. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a54876d016ceed8e4885dc25b22fa176e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54876d016ceed8e4885dc25b22fa176e">&#9670;&nbsp;</a></span>Scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a>&amp; open3d::geometry::Geometry3D::Scale </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>The scale parameter that is multiplied to the points/vertices of the geometry. </td></tr>
    <tr><td class="paramname">center</td><td>Scale center that is used to resize the geometry. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#ac33f6204658331504a80534cf9c630fd">open3d::visualization::PointCloudPicker</a>, <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a7cabe44f714a80c750ece424c1f7ddcc">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a58f8f6c660aa06d6a4384d268baa02a9">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#ad5a514a45dd2a41340b6439d5b0706eb">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad300c61bbb35ea3b174b04f8eb5fa042">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#abb7249b3362645d848088d798b3b7d20">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#aea833cbf5ae91a478d037cc0043dd5f0">open3d::geometry::AxisAlignedBoundingBox</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#aa1e4c844d7d3996a9ff9da9737b464fc">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="a26106b31a3acecad90f44293c83a3a1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26106b31a3acecad90f44293c83a3a1b">&#9670;&nbsp;</a></span>ScalePoints()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::ScalePoints </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale the coordinates of all points by the scaling factor <code>scale</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>The scale factor that is used to resize the geometry </td></tr>
    <tr><td class="paramname">points</td><td>A list of points to be transformed </td></tr>
    <tr><td class="paramname">center</td><td>Scale center that is used to resize the geometry.. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab99e2171cafbe1039aaebd76d178db0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab99e2171cafbe1039aaebd76d178db0d">&#9670;&nbsp;</a></span>Transform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a>&amp; open3d::geometry::Geometry3D::Transform </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply transformation (4x4 matrix) to the geometry coordinates. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#ac53ebdb38e008c97b803f511a8ae1afd">open3d::visualization::PointCloudPicker</a>, <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a91ede3a2e8130ee2380f990efd9c9b24">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40#a76a6954168e7b35c70cdcd0f98086783">open3d::geometry::TriangleMesh</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a9d10c488777e1d881c1c29cad308bae6">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a5e1aef2589a20d524bf66edfe5452bc7">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a660867be2560d5690b6837dea7ccfac8">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#ae551940aca828a4b6d90ef085f7dd01a">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a4aa8fd9625b99a97260cc6985aa4cc26">open3d::geometry::AxisAlignedBoundingBox</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a5197ce5712abac7baea1608afedcd735">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="a623c3e7c883e0bcfc2987aaf92c96597"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a623c3e7c883e0bcfc2987aaf92c96597">&#9670;&nbsp;</a></span>TransformCovariances()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::TransformCovariances </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Matrix3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>covariances</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transforms all covariance matrices with the transformation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">transformation</td><td>4x4 matrix for transformation. </td></tr>
    <tr><td class="paramname">covariances</td><td>A list of covariance matrices to be transformed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac1df456f2e6dddac794f7ab2186a7ce5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1df456f2e6dddac794f7ab2186a7ce5">&#9670;&nbsp;</a></span>TransformNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::TransformNormals </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>normals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transforms the normals with the transformation matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">transformation</td><td>4x4 matrix for transformation. </td></tr>
    <tr><td class="paramname">normals</td><td>A list of normals to be transformed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0e3a5c603c2c9a0e05c1af1a4a279508"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e3a5c603c2c9a0e05c1af1a4a279508">&#9670;&nbsp;</a></span>TransformPoints()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::TransformPoints </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transforms all points with the transformation matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">transformation</td><td>4x4 matrix for transformation. </td></tr>
    <tr><td class="paramname">points</td><td>A list of points to be transformed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a167e8cb72ba68af89c6f418d59dc8bfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a167e8cb72ba68af89c6f418d59dc8bfd">&#9670;&nbsp;</a></span>Translate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a>&amp; open3d::geometry::Geometry3D::Translate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply translation to the geometry coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">translation</td><td>A 3D vector to transform the geometry. </td></tr>
    <tr><td class="paramname">relative</td><td>If <code>true</code>, the <code>translation</code> is directly applied to the geometry. Otherwise, the geometry center is moved to the <code>translation</code>. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1_point_cloud#a6cb6654a8294964b956d63cbeda82d8f">open3d::visualization::PointCloudPicker</a>, <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ac24d9842d433547fcb98627e8722b8f6">open3d::geometry::VoxelGrid</a>, <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b#a0ff6318cf076cf3f80c2b51bcdf3341c">open3d::geometry::PointCloud</a>, <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a6175ca74328e9e5b0ea18d6916250e93">open3d::geometry::Octree</a>, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#aa364e4164bb9dfd420732106a0046c3b">open3d::geometry::MeshBase</a>, <a class="el" href="classopen3d_1_1geometry_1_1_line_set.411.del#a6a168d753c322a4c411c918ee66ecd8e">open3d::geometry::LineSet</a>, <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a71f82387dd4447c75c3ba7c97d6b5b39">open3d::geometry::AxisAlignedBoundingBox</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#aebe02a44bd3837d73894e55fc9e149f3">open3d::geometry::OrientedBoundingBox</a>.</p>

</div>
</div>
<a id="a4029dff278938fcf7eb73b4133f76e67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4029dff278938fcf7eb73b4133f76e67">&#9670;&nbsp;</a></span>TranslatePoints()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Geometry3D::TranslatePoints </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply translation to the geometry coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">translation</td><td>A 3D vector to transform the geometry. </td></tr>
    <tr><td class="paramname">points</td><td>A list of points to be transformed. </td></tr>
    <tr><td class="paramname">relative</td><td>If <code>true</code>, the <code>translation</code> is directly applied to the <code>points</code>. Otherwise, the center of the <code>points</code> is moved to the <code>translation</code>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_geometry3_d_8h_source.html">Geometry3D.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_geometry3_d_8cpp.html">Geometry3D.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_geometry3_d.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:56 GMT -->
</html>
