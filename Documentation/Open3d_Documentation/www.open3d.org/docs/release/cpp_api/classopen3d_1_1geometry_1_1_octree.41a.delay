<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_octree.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:08 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::Octree Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::Octree Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> datastructure.  
 <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_octree_8h_source.html">Octree.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::Octree:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_octree.638.delay" usemap="#open3d::geometry::Octree_map" alt=""/>
  <map id="open3d::geometry::Octree_map" name="open3d::geometry::Octree_map">
<area href="classopen3d_1_1geometry_1_1_geometry3_d.402" title="The base geometry class for 3D geometries." alt="open3d::geometry::Geometry3D" shape="rect" coords="0,56,190,80"/>
<area href="classopen3d_1_1utility_1_1_i_json_convertibl" alt="open3d::utility::IJsonConvertible" shape="rect" coords="200,56,390,80"/>
<area href="classopen3d_1_1geometry_1_1_geometry.400.del" title="The base geometry class." alt="open3d::geometry::Geometry" shape="rect" coords="0,0,190,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abef4567cb7d738538470c6441f736070"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#abef4567cb7d738538470c6441f736070">Octree</a> ()</td></tr>
<tr class="memdesc:abef4567cb7d738538470c6441f736070"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#abef4567cb7d738538470c6441f736070">More...</a><br /></td></tr>
<tr class="separator:abef4567cb7d738538470c6441f736070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a870dea7a9d00d40fdcad614c3f639e9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a870dea7a9d00d40fdcad614c3f639e9b">Octree</a> (const size_t &amp;max_depth)</td></tr>
<tr class="memdesc:a870dea7a9d00d40fdcad614c3f639e9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a870dea7a9d00d40fdcad614c3f639e9b">More...</a><br /></td></tr>
<tr class="separator:a870dea7a9d00d40fdcad614c3f639e9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6bc419c288c4305384bf770257a7633"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#aa6bc419c288c4305384bf770257a7633">Octree</a> (const size_t &amp;max_depth, const Eigen::Vector3d &amp;origin, const double &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)</td></tr>
<tr class="memdesc:aa6bc419c288c4305384bf770257a7633"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#aa6bc419c288c4305384bf770257a7633">More...</a><br /></td></tr>
<tr class="separator:aa6bc419c288c4305384bf770257a7633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5438d986a417b44c86a2a79ae81134cf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a5438d986a417b44c86a2a79ae81134cf">Octree</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;src_octree)</td></tr>
<tr class="separator:a5438d986a417b44c86a2a79ae81134cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaba5903f87d219f95a7b3aab45991275"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#aaba5903f87d219f95a7b3aab45991275">~Octree</a> () override</td></tr>
<tr class="separator:aaba5903f87d219f95a7b3aab45991275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a376f2e2c9eb1dfc92d9d0db13fda7161"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a376f2e2c9eb1dfc92d9d0db13fda7161">Clear</a> () override</td></tr>
<tr class="memdesc:a376f2e2c9eb1dfc92d9d0db13fda7161"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear all elements in the geometry.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a376f2e2c9eb1dfc92d9d0db13fda7161">More...</a><br /></td></tr>
<tr class="separator:a376f2e2c9eb1dfc92d9d0db13fda7161"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cf353fda3702ac381aa3c9f5fb9ea18"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a1cf353fda3702ac381aa3c9f5fb9ea18">IsEmpty</a> () const override</td></tr>
<tr class="memdesc:a1cf353fda3702ac381aa3c9f5fb9ea18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> iff the geometry is empty.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a1cf353fda3702ac381aa3c9f5fb9ea18">More...</a><br /></td></tr>
<tr class="separator:a1cf353fda3702ac381aa3c9f5fb9ea18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a455ee9e47b4281372c5f651ac2719cc2"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a455ee9e47b4281372c5f651ac2719cc2">GetMinBound</a> () const override</td></tr>
<tr class="memdesc:a455ee9e47b4281372c5f651ac2719cc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns min bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a455ee9e47b4281372c5f651ac2719cc2">More...</a><br /></td></tr>
<tr class="separator:a455ee9e47b4281372c5f651ac2719cc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af88f589fe8c9d3a22f2a58211e41e71f"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#af88f589fe8c9d3a22f2a58211e41e71f">GetMaxBound</a> () const override</td></tr>
<tr class="memdesc:af88f589fe8c9d3a22f2a58211e41e71f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns max bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#af88f589fe8c9d3a22f2a58211e41e71f">More...</a><br /></td></tr>
<tr class="separator:af88f589fe8c9d3a22f2a58211e41e71f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a196f8ba5a6dc1a0f6b88095bd8479dec"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a196f8ba5a6dc1a0f6b88095bd8479dec">GetCenter</a> () const override</td></tr>
<tr class="memdesc:a196f8ba5a6dc1a0f6b88095bd8479dec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the center of the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a196f8ba5a6dc1a0f6b88095bd8479dec">More...</a><br /></td></tr>
<tr class="separator:a196f8ba5a6dc1a0f6b88095bd8479dec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a579ce71bfa837f26ab08d11181b632d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a579ce71bfa837f26ab08d11181b632d0">GetAxisAlignedBoundingBox</a> () const override</td></tr>
<tr class="separator:a579ce71bfa837f26ab08d11181b632d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70f41d47bc4d0e17d97c0d6f4d3ea80d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a70f41d47bc4d0e17d97c0d6f4d3ea80d">GetOrientedBoundingBox</a> (bool robust=false) const override</td></tr>
<tr class="separator:a70f41d47bc4d0e17d97c0d6f4d3ea80d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4539e4e44f378b04dbfa83567f7c8aaf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4539e4e44f378b04dbfa83567f7c8aaf">GetMinimalOrientedBoundingBox</a> (bool robust=false) const override</td></tr>
<tr class="separator:a4539e4e44f378b04dbfa83567f7c8aaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e1aef2589a20d524bf66edfe5452bc7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a5e1aef2589a20d524bf66edfe5452bc7">Transform</a> (const Eigen::Matrix4d &amp;transformation) override</td></tr>
<tr class="memdesc:a5e1aef2589a20d524bf66edfe5452bc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply transformation (4x4 matrix) to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a5e1aef2589a20d524bf66edfe5452bc7">More...</a><br /></td></tr>
<tr class="separator:a5e1aef2589a20d524bf66edfe5452bc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6175ca74328e9e5b0ea18d6916250e93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a6175ca74328e9e5b0ea18d6916250e93">Translate</a> (const Eigen::Vector3d &amp;translation, bool relative=true) override</td></tr>
<tr class="memdesc:a6175ca74328e9e5b0ea18d6916250e93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a6175ca74328e9e5b0ea18d6916250e93">More...</a><br /></td></tr>
<tr class="separator:a6175ca74328e9e5b0ea18d6916250e93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5a514a45dd2a41340b6439d5b0706eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#ad5a514a45dd2a41340b6439d5b0706eb">Scale</a> (const double scale, const Eigen::Vector3d &amp;center) override</td></tr>
<tr class="memdesc:ad5a514a45dd2a41340b6439d5b0706eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#ad5a514a45dd2a41340b6439d5b0706eb">More...</a><br /></td></tr>
<tr class="separator:ad5a514a45dd2a41340b6439d5b0706eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c3eff1b9054cf135383220ea5ca7b8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4c3eff1b9054cf135383220ea5ca7b8e">Rotate</a> (const Eigen::Matrix3d &amp;R, const Eigen::Vector3d &amp;center) override</td></tr>
<tr class="memdesc:a4c3eff1b9054cf135383220ea5ca7b8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4c3eff1b9054cf135383220ea5ca7b8e">More...</a><br /></td></tr>
<tr class="separator:a4c3eff1b9054cf135383220ea5ca7b8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e08e51768c35382174ab4c369e68f4e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a2e08e51768c35382174ab4c369e68f4e">ConvertToJsonValue</a> (Json::Value &amp;value) const override</td></tr>
<tr class="separator:a2e08e51768c35382174ab4c369e68f4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cec1a67b692c2b4701f5d695828809"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a48cec1a67b692c2b4701f5d695828809">ConvertFromJsonValue</a> (const Json::Value &amp;value) override</td></tr>
<tr class="separator:a48cec1a67b692c2b4701f5d695828809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032bf6ab5f66022bf4222c4ce7d91f97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a032bf6ab5f66022bf4222c4ce7d91f97">ConvertFromPointCloud</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;point_cloud, double size_expand=0.01)</td></tr>
<tr class="memdesc:a032bf6ab5f66022bf4222c4ce7d91f97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert octree from point cloud.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a032bf6ab5f66022bf4222c4ce7d91f97">More...</a><br /></td></tr>
<tr class="separator:a032bf6ab5f66022bf4222c4ce7d91f97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5a2c43b23d1a51d9b7e6de4d082cb14"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#ad5a2c43b23d1a51d9b7e6de4d082cb14">InsertPoint</a> (const Eigen::Vector3d &amp;point, const std::function&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_leaf_node">OctreeLeafNode</a> &gt;()&gt; &amp;fl_init, const std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_leaf_node">OctreeLeafNode</a> &gt;)&gt; &amp;fl_update, const std::function&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_internal_">OctreeInternalNode</a> &gt;()&gt; &amp;fi_init=nullptr, const std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_internal_">OctreeInternalNode</a> &gt;)&gt; &amp;fi_update=nullptr)</td></tr>
<tr class="memdesc:ad5a2c43b23d1a51d9b7e6de4d082cb14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert a point to the octree.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#ad5a2c43b23d1a51d9b7e6de4d082cb14">More...</a><br /></td></tr>
<tr class="separator:ad5a2c43b23d1a51d9b7e6de4d082cb14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a825edcfb9a7d802af6e63fa7eb18ce6b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a825edcfb9a7d802af6e63fa7eb18ce6b">Traverse</a> (const std::function&lt; bool(const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414">OctreeNode</a> &gt; &amp;, const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info">OctreeNodeInfo</a> &gt; &amp;)&gt; &amp;f)</td></tr>
<tr class="memdesc:a825edcfb9a7d802af6e63fa7eb18ce6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">DFS traversal of <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> from the root, with callback function called for each node.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a825edcfb9a7d802af6e63fa7eb18ce6b">More...</a><br /></td></tr>
<tr class="separator:a825edcfb9a7d802af6e63fa7eb18ce6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d315ec2dee5f8fe65bce51d7747f87c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a9d315ec2dee5f8fe65bce51d7747f87c">Traverse</a> (const std::function&lt; bool(const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414">OctreeNode</a> &gt; &amp;, const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info">OctreeNodeInfo</a> &gt; &amp;)&gt; &amp;f) const</td></tr>
<tr class="memdesc:a9d315ec2dee5f8fe65bce51d7747f87c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const version of Traverse. DFS traversal of <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> from the root, with callback function called for each node.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a9d315ec2dee5f8fe65bce51d7747f87c">More...</a><br /></td></tr>
<tr class="separator:a9d315ec2dee5f8fe65bce51d7747f87c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4536d1b212b6a5feff084b0fffa4e66c"><td class="memItemLeft" align="right" valign="top">std::pair&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_leaf_node">OctreeLeafNode</a> &gt;, std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info">OctreeNodeInfo</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4536d1b212b6a5feff084b0fffa4e66c">LocateLeafNode</a> (const Eigen::Vector3d &amp;point) const</td></tr>
<tr class="memdesc:a4536d1b212b6a5feff084b0fffa4e66c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns leaf <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414" title="The base class for octree node.">OctreeNode</a> and <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info" title="OctreeNode&#39;s information.">OctreeNodeInfo</a> where the querypoint should reside.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a4536d1b212b6a5feff084b0fffa4e66c">More...</a><br /></td></tr>
<tr class="separator:a4536d1b212b6a5feff084b0fffa4e66c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a407ef8bf0f55d45962c8f82eb3af20fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a407ef8bf0f55d45962c8f82eb3af20fc">operator==</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;other) const</td></tr>
<tr class="memdesc:a407ef8bf0f55d45962c8f82eb3af20fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> is completely the same, used for testing.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a407ef8bf0f55d45962c8f82eb3af20fc">More...</a><br /></td></tr>
<tr class="separator:a407ef8bf0f55d45962c8f82eb3af20fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a641cce9133d13054de51ba1c8b0643a6"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">geometry::VoxelGrid</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a641cce9133d13054de51ba1c8b0643a6">ToVoxelGrid</a> () const</td></tr>
<tr class="memdesc:a641cce9133d13054de51ba1c8b0643a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert to <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a>.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a641cce9133d13054de51ba1c8b0643a6">More...</a><br /></td></tr>
<tr class="separator:a641cce9133d13054de51ba1c8b0643a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58659e7a9a1b603b9839a993437a4828"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a58659e7a9a1b603b9839a993437a4828">CreateFromVoxelGrid</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">geometry::VoxelGrid</a> &amp;voxel_grid)</td></tr>
<tr class="memdesc:a58659e7a9a1b603b9839a993437a4828"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from voxel grid.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a58659e7a9a1b603b9839a993437a4828">More...</a><br /></td></tr>
<tr class="separator:a58659e7a9a1b603b9839a993437a4828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:a3bee61a0da428535d0eb9f62786fcab1 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a3bee61a0da428535d0eb9f62786fcab1">~Geometry3D</a> () override</td></tr>
<tr class="separator:a3bee61a0da428535d0eb9f62786fcab1 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2ab7fb19c0fc8f4ccbc9a776be2e23 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5c2ab7fb19c0fc8f4ccbc9a776be2e23">Rotate</a> (const Eigen::Matrix3d &amp;R)</td></tr>
<tr class="separator:a5c2ab7fb19c0fc8f4ccbc9a776be2e23 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a1c2eb5a3e6c0a47cc31e38d086d07c54">~Geometry</a> ()</td></tr>
<tr class="separator:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">More...</a><br /></td></tr>
<tr class="separator:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">Dimension</a> () const</td></tr>
<tr class="memdesc:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">More...</a><br /></td></tr>
<tr class="separator:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a7cba98e39c57eb2544eedfb525807a06">GetName</a> () const</td></tr>
<tr class="separator:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a4229d9bdaded622121f443cbb81626b8">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1utility_1_1_i_json_convertible')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl">open3d::utility::IJsonConvertible</a></td></tr>
<tr class="memitem:acf2f47a1d7f759ee0046b7a9f76a9ab0 inherit pub_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#acf2f47a1d7f759ee0046b7a9f76a9ab0">~IJsonConvertible</a> ()</td></tr>
<tr class="separator:acf2f47a1d7f759ee0046b7a9f76a9ab0 inherit pub_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7aaf69458ae9065121bf55cc21bfbcf inherit pub_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#aa7aaf69458ae9065121bf55cc21bfbcf">ToString</a> () const</td></tr>
<tr class="memdesc:aa7aaf69458ae9065121bf55cc21bfbcf inherit pub_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert to a styled string representation of JSON data for display.  <a href="classopen3d_1_1utility_1_1_i_json_convertibl#aa7aaf69458ae9065121bf55cc21bfbcf">More...</a><br /></td></tr>
<tr class="separator:aa7aaf69458ae9065121bf55cc21bfbcf inherit pub_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a7a5107072aedf61e160e05492ddfd775"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a7a5107072aedf61e160e05492ddfd775">IsPointInBound</a> (const Eigen::Vector3d &amp;point, const Eigen::Vector3d &amp;origin, const double &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)</td></tr>
<tr class="memdesc:a7a5107072aedf61e160e05492ddfd775"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if point within bound, that is, origin &lt;= point &lt; origin + size.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a7a5107072aedf61e160e05492ddfd775">More...</a><br /></td></tr>
<tr class="separator:a7a5107072aedf61e160e05492ddfd775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">GetRotationMatrixFromXYZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XYZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">More...</a><br /></td></tr>
<tr class="separator:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">GetRotationMatrixFromYZX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YZX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">More...</a><br /></td></tr>
<tr class="separator:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">GetRotationMatrixFromZXY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZXY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">More...</a><br /></td></tr>
<tr class="separator:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">GetRotationMatrixFromXZY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XZY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">More...</a><br /></td></tr>
<tr class="separator:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">GetRotationMatrixFromZYX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZYX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">More...</a><br /></td></tr>
<tr class="separator:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">GetRotationMatrixFromYXZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YXZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">More...</a><br /></td></tr>
<tr class="separator:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">GetRotationMatrixFromAxisAngle</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from AxisAngle RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">More...</a><br /></td></tr>
<tr class="separator:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">GetRotationMatrixFromQuaternion</a> (const Eigen::Vector4d &amp;rotation)</td></tr>
<tr class="memdesc:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from Quaternion.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">More...</a><br /></td></tr>
<tr class="separator:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl">open3d::utility::IJsonConvertible</a></td></tr>
<tr class="memitem:a25ee0ebf7aafc887fa917136f97dc623 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a25ee0ebf7aafc887fa917136f97dc623">EigenVector3dFromJsonArray</a> (Eigen::Vector3d &amp;vec, const Json::Value &amp;value)</td></tr>
<tr class="separator:a25ee0ebf7aafc887fa917136f97dc623 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa504e85fe0fab6eb9bf00c8870c64e7b inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#aa504e85fe0fab6eb9bf00c8870c64e7b">EigenVector3dToJsonArray</a> (const Eigen::Vector3d &amp;vec, Json::Value &amp;value)</td></tr>
<tr class="separator:aa504e85fe0fab6eb9bf00c8870c64e7b inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bc2a9c0c6377e4d90305766b5fb78d7 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a3bc2a9c0c6377e4d90305766b5fb78d7">EigenVector4dFromJsonArray</a> (Eigen::Vector4d &amp;vec, const Json::Value &amp;value)</td></tr>
<tr class="separator:a3bc2a9c0c6377e4d90305766b5fb78d7 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9aa39c74c435a61a328296908e85dcdd inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a9aa39c74c435a61a328296908e85dcdd">EigenVector4dToJsonArray</a> (const Eigen::Vector4d &amp;vec, Json::Value &amp;value)</td></tr>
<tr class="separator:a9aa39c74c435a61a328296908e85dcdd inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a654a42e83add5a3b19eccc09c31a9ca8 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a654a42e83add5a3b19eccc09c31a9ca8">EigenMatrix3dFromJsonArray</a> (Eigen::Matrix3d &amp;mat, const Json::Value &amp;value)</td></tr>
<tr class="separator:a654a42e83add5a3b19eccc09c31a9ca8 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace9dac52c3ee510e08f295ada0733b6b inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#ace9dac52c3ee510e08f295ada0733b6b">EigenMatrix3dToJsonArray</a> (const Eigen::Matrix3d &amp;mat, Json::Value &amp;value)</td></tr>
<tr class="separator:ace9dac52c3ee510e08f295ada0733b6b inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e8788f8bdac9878c74e3e8a7a760bb7 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a1e8788f8bdac9878c74e3e8a7a760bb7">EigenMatrix4dFromJsonArray</a> (Eigen::Matrix4d &amp;mat, const Json::Value &amp;value)</td></tr>
<tr class="separator:a1e8788f8bdac9878c74e3e8a7a760bb7 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98d6575885469a57787f6ff4c2a65839 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a98d6575885469a57787f6ff4c2a65839">EigenMatrix4dToJsonArray</a> (const Eigen::Matrix4d &amp;mat, Json::Value &amp;value)</td></tr>
<tr class="separator:a98d6575885469a57787f6ff4c2a65839 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a4d0a90b42bc56b5ae5cb595c0c27b5 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a3a4d0a90b42bc56b5ae5cb595c0c27b5">EigenMatrix4dFromJsonArray</a> (Eigen::Matrix4d_u &amp;mat, const Json::Value &amp;value)</td></tr>
<tr class="separator:a3a4d0a90b42bc56b5ae5cb595c0c27b5 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac27b2b52cd3d64f42e6ba8980fcd7132 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#ac27b2b52cd3d64f42e6ba8980fcd7132">EigenMatrix4dToJsonArray</a> (const Eigen::Matrix4d_u &amp;mat, Json::Value &amp;value)</td></tr>
<tr class="separator:ac27b2b52cd3d64f42e6ba8980fcd7132 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55b66a1bf7c520b528d81adc68a3f51a inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a55b66a1bf7c520b528d81adc68a3f51a">EigenMatrix6dFromJsonArray</a> (Eigen::Matrix6d &amp;mat, const Json::Value &amp;value)</td></tr>
<tr class="separator:a55b66a1bf7c520b528d81adc68a3f51a inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84d46a8fbdecc2ce0df15a6454396068 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a84d46a8fbdecc2ce0df15a6454396068">EigenMatrix6dToJsonArray</a> (const Eigen::Matrix6d &amp;mat, Json::Value &amp;value)</td></tr>
<tr class="separator:a84d46a8fbdecc2ce0df15a6454396068 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f1ece384c77ae3ec839c28666c3633 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#ae4f1ece384c77ae3ec839c28666c3633">EigenMatrix6dFromJsonArray</a> (Eigen::Matrix6d_u &amp;mat, const Json::Value &amp;value)</td></tr>
<tr class="separator:ae4f1ece384c77ae3ec839c28666c3633 inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b9ea2fed07b9cbbab565aca6b9417cd inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a4b9ea2fed07b9cbbab565aca6b9417cd">EigenMatrix6dToJsonArray</a> (const Eigen::Matrix6d_u &amp;mat, Json::Value &amp;value)</td></tr>
<tr class="separator:a4b9ea2fed07b9cbbab565aca6b9417cd inherit pub_static_methods_classopen3d_1_1utility_1_1_i_json_convertible"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a0eb38dd200eb15bf20c6cce6f4dcfbd5"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414">OctreeNode</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a0eb38dd200eb15bf20c6cce6f4dcfbd5">root_node_</a> = nullptr</td></tr>
<tr class="memdesc:a0eb38dd200eb15bf20c6cce6f4dcfbd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Root of the octree.  <a href="classopen3d_1_1geometry_1_1_octree.41a.delay#a0eb38dd200eb15bf20c6cce6f4dcfbd5">More...</a><br /></td></tr>
<tr class="separator:a0eb38dd200eb15bf20c6cce6f4dcfbd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41b98ecafe9c43da6943ed5208acad00"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a41b98ecafe9c43da6943ed5208acad00">origin_</a></td></tr>
<tr class="separator:a41b98ecafe9c43da6943ed5208acad00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56fde71b6cd1188d66811381b4f3fe0a"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a56fde71b6cd1188d66811381b4f3fe0a">size_</a></td></tr>
<tr class="separator:a56fde71b6cd1188d66811381b4f3fe0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a858fa99445efd5750064eaf3247d9e12"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a858fa99445efd5750064eaf3247d9e12">max_depth_</a></td></tr>
<tr class="separator:a858fa99445efd5750064eaf3247d9e12"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a69975c2b054d4fd12cf36866a030ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">More...</a><br /></td></tr>
<tr class="separator:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">Geometry3D</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">More...</a><br /></td></tr>
<tr class="separator:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">ComputeMinBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute min bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">More...</a><br /></td></tr>
<tr class="separator:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">ComputeMaxBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute max bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">More...</a><br /></td></tr>
<tr class="separator:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">ComputeCenter</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computer center of a list of points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">More...</a><br /></td></tr>
<tr class="separator:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">ResizeAndPaintUniformColor</a> (std::vector&lt; Eigen::Vector3d &gt; &amp;colors, const size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const Eigen::Vector3d &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>) const</td></tr>
<tr class="memdesc:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resizes the colors vector and paints a uniform color.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">More...</a><br /></td></tr>
<tr class="separator:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">TransformPoints</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all points with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">More...</a><br /></td></tr>
<tr class="separator:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">TransformNormals</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the normals with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">More...</a><br /></td></tr>
<tr class="separator:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">TransformCovariances</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all covariance matrices with the transformation.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">More...</a><br /></td></tr>
<tr class="separator:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">TranslatePoints</a> (const Eigen::Vector3d &amp;translation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, bool relative) const</td></tr>
<tr class="memdesc:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">More...</a><br /></td></tr>
<tr class="separator:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">ScalePoints</a> (const double scale, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the coordinates of all points by the scaling factor <code>scale</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">More...</a><br /></td></tr>
<tr class="separator:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">RotatePoints</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all points with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">More...</a><br /></td></tr>
<tr class="separator:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">RotateNormals</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all normals with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">More...</a><br /></td></tr>
<tr class="separator:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">RotateCovariances</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all covariance matrices with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">More...</a><br /></td></tr>
<tr class="separator:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">Geometry</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">More...</a><br /></td></tr>
<tr class="separator:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> datastructure. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="abef4567cb7d738538470c6441f736070"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abef4567cb7d738538470c6441f736070">&#9670;&nbsp;</a></span>Octree() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Octree::Octree </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Constructor. </p>

</div>
</div>
<a id="a870dea7a9d00d40fdcad614c3f639e9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a870dea7a9d00d40fdcad614c3f639e9b">&#9670;&nbsp;</a></span>Octree() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Octree::Octree </td>
          <td>(</td>
          <td class="paramtype">const size_t &amp;&#160;</td>
          <td class="paramname"><em>max_depth</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parameterized Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">max_depth</td><td>Sets the value of the max depth of the <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa6bc419c288c4305384bf770257a7633"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6bc419c288c4305384bf770257a7633">&#9670;&nbsp;</a></span>Octree() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Octree::Octree </td>
          <td>(</td>
          <td class="paramtype">const size_t &amp;&#160;</td>
          <td class="paramname"><em>max_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parameterized Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">max_depth</td><td>Sets the value of the max depth of the <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a>. </td></tr>
    <tr><td class="paramname">origin</td><td>Sets the global min bound of the <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a>. </td></tr>
    <tr><td class="paramname">size</td><td>Sets the outer bounding box edge size for the whole octree. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5438d986a417b44c86a2a79ae81134cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5438d986a417b44c86a2a79ae81134cf">&#9670;&nbsp;</a></span>Octree() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Octree::Octree </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td>
          <td class="paramname"><em>src_octree</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaba5903f87d219f95a7b3aab45991275"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaba5903f87d219f95a7b3aab45991275">&#9670;&nbsp;</a></span>~Octree()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Octree::~Octree </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a376f2e2c9eb1dfc92d9d0db13fda7161"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a376f2e2c9eb1dfc92d9d0db13fda7161">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp; open3d::geometry::Octree::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all elements in the geometry. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5d18d746cde60c2e79cd6109c505ea22">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a48cec1a67b692c2b4701f5d695828809"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48cec1a67b692c2b4701f5d695828809">&#9670;&nbsp;</a></span>ConvertFromJsonValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Octree::ConvertFromJsonValue </td>
          <td>(</td>
          <td class="paramtype">const Json::Value &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a42bfd942fd44e0318fa6a12866ce669d">open3d::utility::IJsonConvertible</a>.</p>

</div>
</div>
<a id="a032bf6ab5f66022bf4222c4ce7d91f97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a032bf6ab5f66022bf4222c4ce7d91f97">&#9670;&nbsp;</a></span>ConvertFromPointCloud()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Octree::ConvertFromPointCloud </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>point_cloud</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>size_expand</em> = <code>0.01</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert octree from point cloud. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point_cloud</td><td>Input point cloud. </td></tr>
    <tr><td class="paramname">size_expand</td><td>A small expansion size such that the octree is slightly bigger than the original point cloud bounds to accommodate all points. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2e08e51768c35382174ab4c369e68f4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e08e51768c35382174ab4c369e68f4e">&#9670;&nbsp;</a></span>ConvertToJsonValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Octree::ConvertToJsonValue </td>
          <td>(</td>
          <td class="paramtype">Json::Value &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classopen3d_1_1utility_1_1_i_json_convertibl#a95e320da6916f2f0417d7fa00b20793f">open3d::utility::IJsonConvertible</a>.</p>

</div>
</div>
<a id="a58659e7a9a1b603b9839a993437a4828"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58659e7a9a1b603b9839a993437a4828">&#9670;&nbsp;</a></span>CreateFromVoxelGrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Octree::CreateFromVoxelGrid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">geometry::VoxelGrid</a> &amp;&#160;</td>
          <td class="paramname"><em>voxel_grid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert from voxel grid. </p>

</div>
</div>
<a id="a579ce71bfa837f26ab08d11181b632d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a579ce71bfa837f26ab08d11181b632d0">&#9670;&nbsp;</a></span>GetAxisAlignedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> open3d::geometry::Octree::GetAxisAlignedBoundingBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates the axis-aligned bounding box around the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a2e4d811d697c9e1de0a35439d025d778" title="Default constructor.">AxisAlignedBoundingBox::AxisAlignedBoundingBox()</a> </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a6adfe40c8c59be751e3079a2a5cba874">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a196f8ba5a6dc1a0f6b88095bd8479dec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a196f8ba5a6dc1a0f6b88095bd8479dec">&#9670;&nbsp;</a></span>GetCenter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Octree::GetCenter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the center of the geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a32d884b24e1a680bf2adecd713182ffb">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="af88f589fe8c9d3a22f2a58211e41e71f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af88f589fe8c9d3a22f2a58211e41e71f">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Octree::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns max bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4ba1483835f630921a290c36d0dc0528">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a455ee9e47b4281372c5f651ac2719cc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a455ee9e47b4281372c5f651ac2719cc2">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Octree::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns min bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5ce0c9ab3b7c4addc07732e69ea0d48d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a4539e4e44f378b04dbfa83567f7c8aaf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4539e4e44f378b04dbfa83567f7c8aaf">&#9670;&nbsp;</a></span>GetMinimalOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::Octree::GetMinimalOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an oriented bounding box that is identical to the axis-aligned bounding from <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a579ce71bfa837f26ab08d11181b632d0">GetAxisAlignedBoundingBox()</a>. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a371b43251251c0873ca427b8dcb5f309">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a70f41d47bc4d0e17d97c0d6f4d3ea80d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70f41d47bc4d0e17d97c0d6f4d3ea80d">&#9670;&nbsp;</a></span>GetOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::Octree::GetOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an oriented bounding box that is identical to the axis-aligned bounding from <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay#a579ce71bfa837f26ab08d11181b632d0">GetAxisAlignedBoundingBox()</a>. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa390b8742e15d903bf394cc3b7518d08">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ad5a2c43b23d1a51d9b7e6de4d082cb14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5a2c43b23d1a51d9b7e6de4d082cb14">&#9670;&nbsp;</a></span>InsertPoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Octree::InsertPoint </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_leaf_node">OctreeLeafNode</a> &gt;()&gt; &amp;&#160;</td>
          <td class="paramname"><em>fl_init</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_leaf_node">OctreeLeafNode</a> &gt;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>fl_update</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_internal_">OctreeInternalNode</a> &gt;()&gt; &amp;&#160;</td>
          <td class="paramname"><em>fi_init</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_internal_">OctreeInternalNode</a> &gt;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>fi_update</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert a point to the octree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Coordinates of the point. </td></tr>
    <tr><td class="paramname">fl_init</td><td>Initialization fcn used to create new leaf node (if needed) associated with the point. </td></tr>
    <tr><td class="paramname">fl_update</td><td>Update fcn used to update the leaf node associated with the point. </td></tr>
    <tr><td class="paramname">fi_init</td><td>Initialize fcn used to create a new internal node (if needed) which is an ancestor of the point's leaf node. If omitted, the default <a class="el" href="classopen3d_1_1geometry_1_1_octree_internal_" title="OctreeInternalNode class, containing OctreeNode children.">OctreeInternalNode</a> function is used. </td></tr>
    <tr><td class="paramname">fi_update</td><td>Update fcn used to update the internal node which is an ancestor of the point's leaf node. If omitted, the default <a class="el" href="classopen3d_1_1geometry_1_1_octree_internal_" title="OctreeInternalNode class, containing OctreeNode children.">OctreeInternalNode</a> function is used. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1cf353fda3702ac381aa3c9f5fb9ea18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cf353fda3702ac381aa3c9f5fb9ea18">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Octree::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> iff the geometry is empty. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5cece4be56baea48a365ab22f88f89ea">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a7a5107072aedf61e160e05492ddfd775"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a5107072aedf61e160e05492ddfd775">&#9670;&nbsp;</a></span>IsPointInBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Octree::IsPointInBound </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if point within bound, that is, origin &lt;= point &lt; origin + size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Coordinates of the point. </td></tr>
    <tr><td class="paramname">origin</td><td>Origin coordinates. </td></tr>
    <tr><td class="paramname">size</td><td>Size of the <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4536d1b212b6a5feff084b0fffa4e66c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4536d1b212b6a5feff084b0fffa4e66c">&#9670;&nbsp;</a></span>LocateLeafNode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_leaf_node">OctreeLeafNode</a> &gt;, std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info">OctreeNodeInfo</a> &gt; &gt; open3d::geometry::Octree::LocateLeafNode </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns leaf <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414" title="The base class for octree node.">OctreeNode</a> and <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info" title="OctreeNode&#39;s information.">OctreeNodeInfo</a> where the querypoint should reside. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Coordinates of the point. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a407ef8bf0f55d45962c8f82eb3af20fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a407ef8bf0f55d45962c8f82eb3af20fc">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Octree::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> is completely the same, used for testing. </p>

</div>
</div>
<a id="a4c3eff1b9054cf135383220ea5ca7b8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c3eff1b9054cf135383220ea5ca7b8e">&#9670;&nbsp;</a></span>Rotate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp; open3d::geometry::Octree::Rotate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix </td></tr>
    <tr><td class="paramname">center</td><td>Rotation center that is used for the rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aab4555d0b3e65d35450a2ec57a14ff4d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ad5a514a45dd2a41340b6439d5b0706eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5a514a45dd2a41340b6439d5b0706eb">&#9670;&nbsp;</a></span>Scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp; open3d::geometry::Octree::Scale </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>The scale parameter that is multiplied to the points/vertices of the geometry. </td></tr>
    <tr><td class="paramname">center</td><td>Scale center that is used to resize the geometry. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a54876d016ceed8e4885dc25b22fa176e">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a641cce9133d13054de51ba1c8b0643a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a641cce9133d13054de51ba1c8b0643a6">&#9670;&nbsp;</a></span>ToVoxelGrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">geometry::VoxelGrid</a> &gt; open3d::geometry::Octree::ToVoxelGrid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert to <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a>. </p>

</div>
</div>
<a id="a5e1aef2589a20d524bf66edfe5452bc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e1aef2589a20d524bf66edfe5452bc7">&#9670;&nbsp;</a></span>Transform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp; open3d::geometry::Octree::Transform </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply transformation (4x4 matrix) to the geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab99e2171cafbe1039aaebd76d178db0d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a6175ca74328e9e5b0ea18d6916250e93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6175ca74328e9e5b0ea18d6916250e93">&#9670;&nbsp;</a></span>Translate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp; open3d::geometry::Octree::Translate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply translation to the geometry coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">translation</td><td>A 3D vector to transform the geometry. </td></tr>
    <tr><td class="paramname">relative</td><td>If <code>true</code>, the <code>translation</code> is directly applied to the geometry. Otherwise, the geometry center is moved to the <code>translation</code>. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a167e8cb72ba68af89c6f418d59dc8bfd">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a825edcfb9a7d802af6e63fa7eb18ce6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a825edcfb9a7d802af6e63fa7eb18ce6b">&#9670;&nbsp;</a></span>Traverse() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Octree::Traverse </td>
          <td>(</td>
          <td class="paramtype">const std::function&lt; bool(const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414">OctreeNode</a> &gt; &amp;, const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info">OctreeNodeInfo</a> &gt; &amp;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>DFS traversal of <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> from the root, with callback function called for each node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>Callback which fires with each traversed internal/leaf node. Arguments supply information about the node being traversed and other node-specific data. A Boolean return value is used for early-stopping. If f returns true, children of this node will not be traversed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9d315ec2dee5f8fe65bce51d7747f87c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d315ec2dee5f8fe65bce51d7747f87c">&#9670;&nbsp;</a></span>Traverse() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Octree::Traverse </td>
          <td>(</td>
          <td class="paramtype">const std::function&lt; bool(const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414">OctreeNode</a> &gt; &amp;, const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree_node_info">OctreeNodeInfo</a> &gt; &amp;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Const version of Traverse. DFS traversal of <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a> from the root, with callback function called for each node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>Callback which fires with each traversed internal/leaf node. Arguments supply information about the node being traversed and other node-specific data. A Boolean return value is used for early-stopping. If f returns true, children of this node will not be traversed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a858fa99445efd5750064eaf3247d9e12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a858fa99445efd5750064eaf3247d9e12">&#9670;&nbsp;</a></span>max_depth_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t open3d::geometry::Octree::max_depth_</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Max depth of octree. The depth is defined as the distance from the deepest leaf node to root. A tree with only the root node has depth 0. </p>

</div>
</div>
<a id="a41b98ecafe9c43da6943ed5208acad00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41b98ecafe9c43da6943ed5208acad00">&#9670;&nbsp;</a></span>origin_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::Octree::origin_</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Global min bound (include). A point is within bound iff origin_ &lt;= point &lt; origin_ + size_. </p>

</div>
</div>
<a id="a0eb38dd200eb15bf20c6cce6f4dcfbd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0eb38dd200eb15bf20c6cce6f4dcfbd5">&#9670;&nbsp;</a></span>root_node_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopen3d_1_1geometry_1_1_octree_node.414">OctreeNode</a>&gt; open3d::geometry::Octree::root_node_ = nullptr</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Root of the octree. </p>

</div>
</div>
<a id="a56fde71b6cd1188d66811381b4f3fe0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56fde71b6cd1188d66811381b4f3fe0a">&#9670;&nbsp;</a></span>size_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::Octree::size_</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Outer bounding box edge size for the whole octree. A point is within bound iff origin_ &lt;= point &lt; origin_ + size_. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_octree_8h_source.html">Octree.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_octree_8cpp.html">Octree.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_octree.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:08 GMT -->
</html>
