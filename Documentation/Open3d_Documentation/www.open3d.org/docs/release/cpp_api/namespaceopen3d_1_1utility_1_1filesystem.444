<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1utility_1_1filesystem.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:27 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::utility::filesystem Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1utility.html">utility</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444">filesystem</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::utility::filesystem Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f">CFile</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a310e38cd9373d62393783d5c4ca80339"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a310e38cd9373d62393783d5c4ca80339">GetHomeDirectory</a> ()</td></tr>
<tr class="memdesc:a310e38cd9373d62393783d5c4ca80339"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the HOME directory for the user.  <a href="namespaceopen3d_1_1utility_1_1filesystem.444#a310e38cd9373d62393783d5c4ca80339">More...</a><br /></td></tr>
<tr class="separator:a310e38cd9373d62393783d5c4ca80339"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8d73fa30b31b2e5ee3a7d60685c41a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a0e8d73fa30b31b2e5ee3a7d60685c41a">GetFileExtensionInLowerCase</a> (const std::string &amp;filename)</td></tr>
<tr class="separator:a0e8d73fa30b31b2e5ee3a7d60685c41a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d64b86638adc57d5d342f2c3fcaeeba"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a3d64b86638adc57d5d342f2c3fcaeeba">GetFileNameWithoutExtension</a> (const std::string &amp;filename)</td></tr>
<tr class="separator:a3d64b86638adc57d5d342f2c3fcaeeba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a076035c29ba9d6ddf316dc9d26f558fe"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a076035c29ba9d6ddf316dc9d26f558fe">GetFileNameWithoutDirectory</a> (const std::string &amp;filename)</td></tr>
<tr class="separator:a076035c29ba9d6ddf316dc9d26f558fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9254b5d0a312f1ed98692a7f7dea70e3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a9254b5d0a312f1ed98692a7f7dea70e3">GetFileParentDirectory</a> (const std::string &amp;filename)</td></tr>
<tr class="separator:a9254b5d0a312f1ed98692a7f7dea70e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae28888e60d2717f26f0945f732c211d3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#ae28888e60d2717f26f0945f732c211d3">GetRegularizedDirectoryName</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:ae28888e60d2717f26f0945f732c211d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad09ea9f49dff844f2209e14a739b3e18"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#ad09ea9f49dff844f2209e14a739b3e18">GetWorkingDirectory</a> ()</td></tr>
<tr class="separator:ad09ea9f49dff844f2209e14a739b3e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a479d1ed28500a20f14bc4e8aff44a1a2"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a479d1ed28500a20f14bc4e8aff44a1a2">GetPathComponents</a> (const std::string &amp;path)</td></tr>
<tr class="separator:a479d1ed28500a20f14bc4e8aff44a1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d460b0d7de3a74b9196375eb625d615"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a0d460b0d7de3a74b9196375eb625d615">GetTempDirectoryPath</a> ()</td></tr>
<tr class="separator:a0d460b0d7de3a74b9196375eb625d615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a034da52fc38de1dfc2b602f77c324306"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a034da52fc38de1dfc2b602f77c324306">ChangeWorkingDirectory</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:a034da52fc38de1dfc2b602f77c324306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c871b634a234404ada9df4059a20ac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a86c871b634a234404ada9df4059a20ac">DirectoryExists</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:a86c871b634a234404ada9df4059a20ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95213b3a2eb27613e58ae8e9486d6b02"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a95213b3a2eb27613e58ae8e9486d6b02">DirectoryIsEmpty</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:a95213b3a2eb27613e58ae8e9486d6b02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cbb5d0f972292f58288a6b4799809ee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a1cbb5d0f972292f58288a6b4799809ee">MakeDirectory</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:a1cbb5d0f972292f58288a6b4799809ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb7f8e082d083586fe93153918506212"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#acb7f8e082d083586fe93153918506212">MakeDirectoryHierarchy</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:acb7f8e082d083586fe93153918506212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6482e7f0ade4af83fb9b54def4eeb323"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a6482e7f0ade4af83fb9b54def4eeb323">DeleteDirectory</a> (const std::string &amp;directory)</td></tr>
<tr class="separator:a6482e7f0ade4af83fb9b54def4eeb323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c92e9439d2eeff46636d51391f912aa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a8c92e9439d2eeff46636d51391f912aa">FileExists</a> (const std::string &amp;filename)</td></tr>
<tr class="separator:a8c92e9439d2eeff46636d51391f912aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f59c531b5e1e271256a2623e42fcda0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a9f59c531b5e1e271256a2623e42fcda0">Copy</a> (const std::string &amp;src_path, const std::string &amp;dst_path)</td></tr>
<tr class="separator:a9f59c531b5e1e271256a2623e42fcda0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bee656aa4d1b6afaa2ef425473d3d69"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a1bee656aa4d1b6afaa2ef425473d3d69">RemoveFile</a> (const std::string &amp;filename)</td></tr>
<tr class="separator:a1bee656aa4d1b6afaa2ef425473d3d69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f60a7aba1ed6985ec9ceb315bc67edf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a2f60a7aba1ed6985ec9ceb315bc67edf">ListDirectory</a> (const std::string &amp;directory, std::vector&lt; std::string &gt; &amp;subdirs, std::vector&lt; std::string &gt; &amp;filenames)</td></tr>
<tr class="separator:a2f60a7aba1ed6985ec9ceb315bc67edf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af69d8e859b5423bab840cf38e95738bd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#af69d8e859b5423bab840cf38e95738bd">ListFilesInDirectory</a> (const std::string &amp;directory, std::vector&lt; std::string &gt; &amp;filenames)</td></tr>
<tr class="separator:af69d8e859b5423bab840cf38e95738bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bc214054611f9382f897672ca89b0d4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a7bc214054611f9382f897672ca89b0d4">ListFilesInDirectoryWithExtension</a> (const std::string &amp;directory, const std::string &amp;extname, std::vector&lt; std::string &gt; &amp;filenames)</td></tr>
<tr class="separator:a7bc214054611f9382f897672ca89b0d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2107a7701813ce1f1baec1c2990745b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#af2107a7701813ce1f1baec1c2990745b">FindFilesRecursively</a> (const std::string &amp;directory, std::function&lt; bool(const std::string &amp;)&gt; is_match)</td></tr>
<tr class="separator:af2107a7701813ce1f1baec1c2990745b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cc0b7ad6b2a97230427de1077c4d757"><td class="memItemLeft" align="right" valign="top">FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a5cc0b7ad6b2a97230427de1077c4d757">FOpen</a> (const std::string &amp;filename, const std::string &amp;mode)</td></tr>
<tr class="separator:a5cc0b7ad6b2a97230427de1077c4d757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af75587922e777d208ed0c10a32020afb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#af75587922e777d208ed0c10a32020afb">GetIOErrorString</a> (const int errnoVal)</td></tr>
<tr class="separator:af75587922e777d208ed0c10a32020afb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee19226268d9c90b908631d07744f7bd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#aee19226268d9c90b908631d07744f7bd">FReadToBuffer</a> (const std::string &amp;path, std::vector&lt; char &gt; &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#a9e760aa93cd29b661fe396a143126bc9">bytes</a>, std::string *errorStr)</td></tr>
<tr class="separator:aee19226268d9c90b908631d07744f7bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39a1810ec284103b0dd1d3a663069e0f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a39a1810ec284103b0dd1d3a663069e0f">JoinPath</a> (const std::string &amp;path_component1, const std::string &amp;path_component2)</td></tr>
<tr class="separator:a39a1810ec284103b0dd1d3a663069e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6190bd8d02ed1adb394454549ed3000c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a6190bd8d02ed1adb394454549ed3000c">JoinPath</a> (const std::vector&lt; std::string &gt; &amp;path_components)</td></tr>
<tr class="separator:a6190bd8d02ed1adb394454549ed3000c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e397de5937927c8135fad6bc392533"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444#a83e397de5937927c8135fad6bc392533">AddIfExist</a> (const std::string &amp;path, const std::vector&lt; std::string &gt; &amp;folder_names)</td></tr>
<tr class="separator:a83e397de5937927c8135fad6bc392533"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a83e397de5937927c8135fad6bc392533"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83e397de5937927c8135fad6bc392533">&#9670;&nbsp;</a></span>AddIfExist()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::AddIfExist </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>folder_names</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a034da52fc38de1dfc2b602f77c324306"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a034da52fc38de1dfc2b602f77c324306">&#9670;&nbsp;</a></span>ChangeWorkingDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::ChangeWorkingDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9f59c531b5e1e271256a2623e42fcda0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f59c531b5e1e271256a2623e42fcda0">&#9670;&nbsp;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::Copy </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>src_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>dst_path</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6482e7f0ade4af83fb9b54def4eeb323"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6482e7f0ade4af83fb9b54def4eeb323">&#9670;&nbsp;</a></span>DeleteDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::DeleteDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a86c871b634a234404ada9df4059a20ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86c871b634a234404ada9df4059a20ac">&#9670;&nbsp;</a></span>DirectoryExists()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::DirectoryExists </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a95213b3a2eb27613e58ae8e9486d6b02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95213b3a2eb27613e58ae8e9486d6b02">&#9670;&nbsp;</a></span>DirectoryIsEmpty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::DirectoryIsEmpty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8c92e9439d2eeff46636d51391f912aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c92e9439d2eeff46636d51391f912aa">&#9670;&nbsp;</a></span>FileExists()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::FileExists </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af2107a7701813ce1f1baec1c2990745b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2107a7701813ce1f1baec1c2990745b">&#9670;&nbsp;</a></span>FindFilesRecursively()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; open3d::utility::filesystem::FindFilesRecursively </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const std::string &amp;)&gt;&#160;</td>
          <td class="paramname"><em>is_match</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5cc0b7ad6b2a97230427de1077c4d757"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cc0b7ad6b2a97230427de1077c4d757">&#9670;&nbsp;</a></span>FOpen()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">FILE * open3d::utility::filesystem::FOpen </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aee19226268d9c90b908631d07744f7bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee19226268d9c90b908631d07744f7bd">&#9670;&nbsp;</a></span>FReadToBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::FReadToBuffer </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; char &gt; &amp;&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>errorStr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0e8d73fa30b31b2e5ee3a7d60685c41a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e8d73fa30b31b2e5ee3a7d60685c41a">&#9670;&nbsp;</a></span>GetFileExtensionInLowerCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetFileExtensionInLowerCase </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a076035c29ba9d6ddf316dc9d26f558fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a076035c29ba9d6ddf316dc9d26f558fe">&#9670;&nbsp;</a></span>GetFileNameWithoutDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetFileNameWithoutDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d64b86638adc57d5d342f2c3fcaeeba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d64b86638adc57d5d342f2c3fcaeeba">&#9670;&nbsp;</a></span>GetFileNameWithoutExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetFileNameWithoutExtension </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9254b5d0a312f1ed98692a7f7dea70e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9254b5d0a312f1ed98692a7f7dea70e3">&#9670;&nbsp;</a></span>GetFileParentDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetFileParentDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a310e38cd9373d62393783d5c4ca80339"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a310e38cd9373d62393783d5c4ca80339">&#9670;&nbsp;</a></span>GetHomeDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetHomeDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the HOME directory for the user. </p>
<p>The home directory is determined in the following order:</p><ul>
<li>On Unix:<ul>
<li>$HOME</li>
<li>/</li>
</ul>
</li>
<li>On Windows:<ul>
<li>USERPROFILE%</li>
<li>HOMEDRIVE%</li>
<li>HOMEPATH%</li>
<li>HOME%</li>
<li>C:/</li>
</ul>
</li>
</ul>
<p>This is the same logics as used in Qt.</p><ul>
<li>src/corelib/io/qfilesystemengine_win.cpp</li>
<li>src/corelib/io/qfilesystemengine_unix.cpp </li>
</ul>

</div>
</div>
<a id="af75587922e777d208ed0c10a32020afb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af75587922e777d208ed0c10a32020afb">&#9670;&nbsp;</a></span>GetIOErrorString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetIOErrorString </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>errnoVal</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a479d1ed28500a20f14bc4e8aff44a1a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a479d1ed28500a20f14bc4e8aff44a1a2">&#9670;&nbsp;</a></span>GetPathComponents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; open3d::utility::filesystem::GetPathComponents </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae28888e60d2717f26f0945f732c211d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae28888e60d2717f26f0945f732c211d3">&#9670;&nbsp;</a></span>GetRegularizedDirectoryName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetRegularizedDirectoryName </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0d460b0d7de3a74b9196375eb625d615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d460b0d7de3a74b9196375eb625d615">&#9670;&nbsp;</a></span>GetTempDirectoryPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetTempDirectoryPath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad09ea9f49dff844f2209e14a739b3e18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad09ea9f49dff844f2209e14a739b3e18">&#9670;&nbsp;</a></span>GetWorkingDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::GetWorkingDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a39a1810ec284103b0dd1d3a663069e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39a1810ec284103b0dd1d3a663069e0f">&#9670;&nbsp;</a></span>JoinPath() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::JoinPath </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path_component1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path_component2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6190bd8d02ed1adb394454549ed3000c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6190bd8d02ed1adb394454549ed3000c">&#9670;&nbsp;</a></span>JoinPath() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::JoinPath </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>path_components</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2f60a7aba1ed6985ec9ceb315bc67edf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f60a7aba1ed6985ec9ceb315bc67edf">&#9670;&nbsp;</a></span>ListDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::ListDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>subdirs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>filenames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af69d8e859b5423bab840cf38e95738bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af69d8e859b5423bab840cf38e95738bd">&#9670;&nbsp;</a></span>ListFilesInDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::ListFilesInDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>filenames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7bc214054611f9382f897672ca89b0d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bc214054611f9382f897672ca89b0d4">&#9670;&nbsp;</a></span>ListFilesInDirectoryWithExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::ListFilesInDirectoryWithExtension </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>extname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>filenames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1cbb5d0f972292f58288a6b4799809ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cbb5d0f972292f58288a6b4799809ee">&#9670;&nbsp;</a></span>MakeDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::MakeDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acb7f8e082d083586fe93153918506212"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb7f8e082d083586fe93153918506212">&#9670;&nbsp;</a></span>MakeDirectoryHierarchy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::MakeDirectoryHierarchy </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1bee656aa4d1b6afaa2ef425473d3d69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bee656aa4d1b6afaa2ef425473d3d69">&#9670;&nbsp;</a></span>RemoveFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::RemoveFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1utility_1_1filesystem.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:27 GMT -->
</html>
