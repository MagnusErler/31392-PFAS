<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_triangle_mesh.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:53:42 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::TriangleMesh Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::TriangleMesh Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A triangle mesh contains vertices and triangles.  
 <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="t_2geometry_2_triangle_mesh_8h_source.4ad.de">TriangleMesh.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::t::geometry::TriangleMesh:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1t_1_1geometry_1_1_triangle_me-2" usemap="#open3d::t::geometry::TriangleMesh_map" alt=""/>
  <map id="open3d::t::geometry::TriangleMesh_map" name="open3d::t::geometry::TriangleMesh_map">
<area href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class." alt="open3d::t::geometry::Geometry" shape="rect" coords="0,56,235,80"/>
<area href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge" title="Mix-in class for geometry types that can be visualized." alt="open3d::t::geometry::DrawableGeometry" shape="rect" coords="245,56,480,80"/>
<area href="classopen3d_1_1core_1_1_is_device.36f.delaye" alt="open3d::core::IsDevice" shape="rect" coords="0,0,235,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa1d4f27f04ee13d9bf7f485b08a1cfa8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa1d4f27f04ee13d9bf7f485b08a1cfa8">TriangleMesh</a> (const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:aa1d4f27f04ee13d9bf7f485b08a1cfa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a882aa9e107d6c530def1e5662bf7158c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a882aa9e107d6c530def1e5662bf7158c">TriangleMesh</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;vertex_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;triangle_indices)</td></tr>
<tr class="separator:a882aa9e107d6c530def1e5662bf7158c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a380219d72858e5322b1719dfed6cb384"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a380219d72858e5322b1719dfed6cb384">~TriangleMesh</a> () override</td></tr>
<tr class="separator:a380219d72858e5322b1719dfed6cb384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf5361535334a3864e181a60fcc4d866"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#adf5361535334a3864e181a60fcc4d866">ToString</a> () const</td></tr>
<tr class="memdesc:adf5361535334a3864e181a60fcc4d866"><td class="mdescLeft">&#160;</td><td class="mdescRight">Text description.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#adf5361535334a3864e181a60fcc4d866">More...</a><br /></td></tr>
<tr class="separator:adf5361535334a3864e181a60fcc4d866"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7713d94c42cae7857086a1d88c7cb209"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7713d94c42cae7857086a1d88c7cb209">To</a> (const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>=false) const</td></tr>
<tr class="separator:a7713d94c42cae7857086a1d88c7cb209"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c1ac6db6cbce3359f5f77c06276f119"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7c1ac6db6cbce3359f5f77c06276f119">Clone</a> () const</td></tr>
<tr class="memdesc:a7c1ac6db6cbce3359f5f77c06276f119"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns copy of the triangle mesh on the same device.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7c1ac6db6cbce3359f5f77c06276f119">More...</a><br /></td></tr>
<tr class="separator:a7c1ac6db6cbce3359f5f77c06276f119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13ae4cb4f2274e0f0e3c2751a9595d7a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a13ae4cb4f2274e0f0e3c2751a9595d7a">GetVertexAttr</a> () const</td></tr>
<tr class="memdesc:a13ae4cb4f2274e0f0e3c2751a9595d7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for vertex_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. Used in Pybind.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a13ae4cb4f2274e0f0e3c2751a9595d7a">More...</a><br /></td></tr>
<tr class="separator:a13ae4cb4f2274e0f0e3c2751a9595d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27bdf63cac9f206c77a8f53cd0fdc7c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a27bdf63cac9f206c77a8f53cd0fdc7c7">GetVertexAttr</a> ()</td></tr>
<tr class="memdesc:a27bdf63cac9f206c77a8f53cd0fdc7c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for vertex_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a27bdf63cac9f206c77a8f53cd0fdc7c7">More...</a><br /></td></tr>
<tr class="separator:a27bdf63cac9f206c77a8f53cd0fdc7c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af763c2d58e375b8f37e6e81301ba11ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af763c2d58e375b8f37e6e81301ba11ee">GetVertexAttr</a> (const std::string &amp;key)</td></tr>
<tr class="separator:af763c2d58e375b8f37e6e81301ba11ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cb67969e9e4ba97fd4a8e257bc29ed7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a1cb67969e9e4ba97fd4a8e257bc29ed7">GetVertexPositions</a> ()</td></tr>
<tr class="separator:a1cb67969e9e4ba97fd4a8e257bc29ed7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8937a067b77b3b39d135f95310a055c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa8937a067b77b3b39d135f95310a055c">GetVertexColors</a> ()</td></tr>
<tr class="separator:aa8937a067b77b3b39d135f95310a055c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe9bc8da73209fe58d9fbabd1ea4cc76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#afe9bc8da73209fe58d9fbabd1ea4cc76">GetVertexNormals</a> ()</td></tr>
<tr class="separator:afe9bc8da73209fe58d9fbabd1ea4cc76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9614a668f16e4600b814404d493508a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ae9614a668f16e4600b814404d493508a">GetTriangleAttr</a> () const</td></tr>
<tr class="memdesc:ae9614a668f16e4600b814404d493508a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for triangle_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. Used in Pybind.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ae9614a668f16e4600b814404d493508a">More...</a><br /></td></tr>
<tr class="separator:ae9614a668f16e4600b814404d493508a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5c8fa4d185d9fb611ed13923fcb00f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af5c8fa4d185d9fb611ed13923fcb00f5">GetTriangleAttr</a> ()</td></tr>
<tr class="memdesc:af5c8fa4d185d9fb611ed13923fcb00f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Getter for triangle_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af5c8fa4d185d9fb611ed13923fcb00f5">More...</a><br /></td></tr>
<tr class="separator:af5c8fa4d185d9fb611ed13923fcb00f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9662daa05df0a966b6ab19e209086361"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a9662daa05df0a966b6ab19e209086361">GetTriangleAttr</a> (const std::string &amp;key)</td></tr>
<tr class="separator:a9662daa05df0a966b6ab19e209086361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9ee851c8d29b2b2b0c570d5799d9ae5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa9ee851c8d29b2b2b0c570d5799d9ae5">GetTriangleIndices</a> ()</td></tr>
<tr class="separator:aa9ee851c8d29b2b2b0c570d5799d9ae5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a188eaf52c84e5445d8ac7f3460779dbd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a188eaf52c84e5445d8ac7f3460779dbd">GetTriangleNormals</a> ()</td></tr>
<tr class="separator:a188eaf52c84e5445d8ac7f3460779dbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af58d4270b7c2d6e1cb88c478cd066309"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af58d4270b7c2d6e1cb88c478cd066309">GetTriangleColors</a> ()</td></tr>
<tr class="separator:af58d4270b7c2d6e1cb88c478cd066309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7313133514cbf246ed9c281d637ad08"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ab7313133514cbf246ed9c281d637ad08">GetVertexAttr</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:ab7313133514cbf246ed9c281d637ad08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7454c61a3ba50308debd9bbaf9bbae0b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7454c61a3ba50308debd9bbaf9bbae0b">RemoveVertexAttr</a> (const std::string &amp;key)</td></tr>
<tr class="separator:a7454c61a3ba50308debd9bbaf9bbae0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9c893a7559cf598767b044027a4672d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa9c893a7559cf598767b044027a4672d">GetVertexPositions</a> () const</td></tr>
<tr class="separator:aa9c893a7559cf598767b044027a4672d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b051da8a6704da8505f229967492ad"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ad4b051da8a6704da8505f229967492ad">GetVertexColors</a> () const</td></tr>
<tr class="separator:ad4b051da8a6704da8505f229967492ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaca4a64e0f942726234d01be7ba2009a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aaca4a64e0f942726234d01be7ba2009a">GetVertexNormals</a> () const</td></tr>
<tr class="separator:aaca4a64e0f942726234d01be7ba2009a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a702a78f7a6c9d0f9f5bad93c51c668"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a8a702a78f7a6c9d0f9f5bad93c51c668">GetTriangleAttr</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a8a702a78f7a6c9d0f9f5bad93c51c668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a612ad39402d4c9e89be255f40c5430d4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a612ad39402d4c9e89be255f40c5430d4">RemoveTriangleAttr</a> (const std::string &amp;key)</td></tr>
<tr class="separator:a612ad39402d4c9e89be255f40c5430d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7b4562cd4cbb5f20989c70b19598f59"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ab7b4562cd4cbb5f20989c70b19598f59">GetTriangleIndices</a> () const</td></tr>
<tr class="separator:ab7b4562cd4cbb5f20989c70b19598f59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a270db5e5a5d68217f7e75293c52c0720"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a270db5e5a5d68217f7e75293c52c0720">GetTriangleNormals</a> () const</td></tr>
<tr class="separator:a270db5e5a5d68217f7e75293c52c0720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96e3b38d74f0b760942a83ff25b4ada9"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a96e3b38d74f0b760942a83ff25b4ada9">GetTriangleColors</a> () const</td></tr>
<tr class="separator:a96e3b38d74f0b760942a83ff25b4ada9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21bf4f66857550e4dd9e15dbafe0a0d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a21bf4f66857550e4dd9e15dbafe0a0d0">SetVertexAttr</a> (const std::string &amp;key, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:a21bf4f66857550e4dd9e15dbafe0a0d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214472cd2ed51bfc8867cc850d7fd9e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a214472cd2ed51bfc8867cc850d7fd9e8">SetVertexPositions</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:a214472cd2ed51bfc8867cc850d7fd9e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ae87b1a74c59ec49d6f751b9903c2a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a2ae87b1a74c59ec49d6f751b9903c2a4">SetVertexColors</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:a2ae87b1a74c59ec49d6f751b9903c2a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf332ed58fa13c1baab4781bc1be6a35"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#acf332ed58fa13c1baab4781bc1be6a35">SetVertexNormals</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:acf332ed58fa13c1baab4781bc1be6a35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a557d150c35205059334931af54fb3c20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a557d150c35205059334931af54fb3c20">SetTriangleAttr</a> (const std::string &amp;key, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:a557d150c35205059334931af54fb3c20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd8be2b61c84e3c918bee208ee8a666"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a0cd8be2b61c84e3c918bee208ee8a666">SetTriangleIndices</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="memdesc:a0cd8be2b61c84e3c918bee208ee8a666"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the value of the "indices" attribute in triangle_attr_.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a0cd8be2b61c84e3c918bee208ee8a666">More...</a><br /></td></tr>
<tr class="separator:a0cd8be2b61c84e3c918bee208ee8a666"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa53bfdee3760b7ab175bd1282c0444ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa53bfdee3760b7ab175bd1282c0444ec">SetTriangleNormals</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:aa53bfdee3760b7ab175bd1282c0444ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31b43c1625643758aa6ad95594a59824"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a31b43c1625643758aa6ad95594a59824">SetTriangleColors</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;value)</td></tr>
<tr class="separator:a31b43c1625643758aa6ad95594a59824"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6d372a589c2b97b214931a125ad847e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ac6d372a589c2b97b214931a125ad847e">HasVertexAttr</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:ac6d372a589c2b97b214931a125ad847e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb82ae79ec594aa6091a760217a8edeb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aeb82ae79ec594aa6091a760217a8edeb">HasVertexPositions</a> () const</td></tr>
<tr class="separator:aeb82ae79ec594aa6091a760217a8edeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44b5ce33df9d53710fefbc10819fc777"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a44b5ce33df9d53710fefbc10819fc777">HasVertexColors</a> () const</td></tr>
<tr class="separator:a44b5ce33df9d53710fefbc10819fc777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7077fc4f34295bf3a50b175286a6b16f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7077fc4f34295bf3a50b175286a6b16f">HasVertexNormals</a> () const</td></tr>
<tr class="separator:a7077fc4f34295bf3a50b175286a6b16f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac233c0a7a55a09257e2011742ce76b87"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ac233c0a7a55a09257e2011742ce76b87">HasTriangleAttr</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:ac233c0a7a55a09257e2011742ce76b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f43615037fb6c6b71476b6a74199146"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a3f43615037fb6c6b71476b6a74199146">HasTriangleIndices</a> () const</td></tr>
<tr class="separator:a3f43615037fb6c6b71476b6a74199146"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63e9a77fae5c3fbccdbce55281311eac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a63e9a77fae5c3fbccdbce55281311eac">HasTriangleNormals</a> () const</td></tr>
<tr class="separator:a63e9a77fae5c3fbccdbce55281311eac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa45f0d5088bfbc5b4d3f3cd9dae1fe0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aaa45f0d5088bfbc5b4d3f3cd9dae1fe0">HasTriangleColors</a> () const</td></tr>
<tr class="separator:aaa45f0d5088bfbc5b4d3f3cd9dae1fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60a6b14372285e6c8b9439e03fd7f63f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a60a6b14372285e6c8b9439e03fd7f63f">Clear</a> () override</td></tr>
<tr class="memdesc:a60a6b14372285e6c8b9439e03fd7f63f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear all data in the trianglemesh.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a60a6b14372285e6c8b9439e03fd7f63f">More...</a><br /></td></tr>
<tr class="separator:a60a6b14372285e6c8b9439e03fd7f63f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affedf09db3786240267d1b88bce88cf1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#affedf09db3786240267d1b88bce88cf1">IsEmpty</a> () const override</td></tr>
<tr class="memdesc:affedf09db3786240267d1b88bce88cf1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns !HasVertexPositions(), triangles are ignored.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#affedf09db3786240267d1b88bce88cf1">More...</a><br /></td></tr>
<tr class="separator:affedf09db3786240267d1b88bce88cf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ac9626b57633f3bd6c25a2b7cf7af17"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a1ac9626b57633f3bd6c25a2b7cf7af17">GetMinBound</a> () const</td></tr>
<tr class="separator:a1ac9626b57633f3bd6c25a2b7cf7af17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8005a1a3ff8530ce17afbc5ceb740e14"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a8005a1a3ff8530ce17afbc5ceb740e14">GetMaxBound</a> () const</td></tr>
<tr class="separator:a8005a1a3ff8530ce17afbc5ceb740e14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6028f616aaa0fbd8a8055af3049de8b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ad6028f616aaa0fbd8a8055af3049de8b">GetCenter</a> () const</td></tr>
<tr class="separator:ad6028f616aaa0fbd8a8055af3049de8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca39775b0c145079e839459f3d8ccbc0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aca39775b0c145079e839459f3d8ccbc0">Transform</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;transformation)</td></tr>
<tr class="memdesc:aca39775b0c145079e839459f3d8ccbc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the VertexPositions, VertexNormals and TriangleNormals (if exist) of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aca39775b0c145079e839459f3d8ccbc0">More...</a><br /></td></tr>
<tr class="separator:aca39775b0c145079e839459f3d8ccbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8a813b42c992c4725ab82e5e806c004"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af8a813b42c992c4725ab82e5e806c004">Translate</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;translation, bool relative=true)</td></tr>
<tr class="memdesc:af8a813b42c992c4725ab82e5e806c004"><td class="mdescLeft">&#160;</td><td class="mdescRight">Translates the VertexPositions of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af8a813b42c992c4725ab82e5e806c004">More...</a><br /></td></tr>
<tr class="separator:af8a813b42c992c4725ab82e5e806c004"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa385b74677d7657ca5eec073e64a6fa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa385b74677d7657ca5eec073e64a6fa3">Scale</a> (double scale, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;center)</td></tr>
<tr class="memdesc:aa385b74677d7657ca5eec073e64a6fa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scales the VertexPositions of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa385b74677d7657ca5eec073e64a6fa3">More...</a><br /></td></tr>
<tr class="separator:aa385b74677d7657ca5eec073e64a6fa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86893d3987f4de0a1bf05d04f4be0354"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a86893d3987f4de0a1bf05d04f4be0354">Rotate</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;R, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;center)</td></tr>
<tr class="memdesc:a86893d3987f4de0a1bf05d04f4be0354"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotates the VertexPositions, VertexNormals and TriangleNormals (if exists).  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a86893d3987f4de0a1bf05d04f4be0354">More...</a><br /></td></tr>
<tr class="separator:a86893d3987f4de0a1bf05d04f4be0354"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ae389c414a8ccaf0a11688b030da90c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7ae389c414a8ccaf0a11688b030da90c">NormalizeNormals</a> ()</td></tr>
<tr class="memdesc:a7ae389c414a8ccaf0a11688b030da90c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalize both triangle normals and vertex normals to length 1.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7ae389c414a8ccaf0a11688b030da90c">More...</a><br /></td></tr>
<tr class="separator:a7ae389c414a8ccaf0a11688b030da90c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22fdfb68591c8cb9162cd91ec451bbd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a22fdfb68591c8cb9162cd91ec451bbd3">ComputeTriangleNormals</a> (bool normalized=true)</td></tr>
<tr class="memdesc:a22fdfb68591c8cb9162cd91ec451bbd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute triangle normals, usually called before rendering.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a22fdfb68591c8cb9162cd91ec451bbd3">More...</a><br /></td></tr>
<tr class="separator:a22fdfb68591c8cb9162cd91ec451bbd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6225aeff9671412b996a28c24b1acc4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a6225aeff9671412b996a28c24b1acc4c">ComputeVertexNormals</a> (bool normalized=true)</td></tr>
<tr class="memdesc:a6225aeff9671412b996a28c24b1acc4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute vertex normals, usually called before rendering.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a6225aeff9671412b996a28c24b1acc4c">More...</a><br /></td></tr>
<tr class="separator:a6225aeff9671412b996a28c24b1acc4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a898e640aa3f36f1d75f270ce0391e819"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a898e640aa3f36f1d75f270ce0391e819">ClipPlane</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;point, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normal) const</td></tr>
<tr class="memdesc:a898e640aa3f36f1d75f270ce0391e819"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clip mesh with a plane. This method clips the triangle mesh with the specified plane. Parts of the mesh on the positive side of the plane will be kept and triangles intersected by the plane will be cut.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a898e640aa3f36f1d75f270ce0391e819">More...</a><br /></td></tr>
<tr class="separator:a898e640aa3f36f1d75f270ce0391e819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3f960b47daede5c2f60664c47873aad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ab3f960b47daede5c2f60664c47873aad">SlicePlane</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;point, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normal, const std::vector&lt; double &gt; contour_values={0.0}) const</td></tr>
<tr class="memdesc:ab3f960b47daede5c2f60664c47873aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract contour slices given a plane. This method extracts slices as <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49" title="A LineSet contains points and lines joining them and optionally attributes on the points and lines.">LineSet</a> from the mesh at specific contour values defined by the specified plane.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ab3f960b47daede5c2f60664c47873aad">More...</a><br /></td></tr>
<tr class="separator:ab3f960b47daede5c2f60664c47873aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f3c8d5cdf715a79a2274ae3c1975a1f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7f3c8d5cdf715a79a2274ae3c1975a1f">GetDevice</a> () const override</td></tr>
<tr class="memdesc:a7f3c8d5cdf715a79a2274ae3c1975a1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the device of the geometry.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7f3c8d5cdf715a79a2274ae3c1975a1f">More...</a><br /></td></tr>
<tr class="separator:a7f3c8d5cdf715a79a2274ae3c1975a1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a773e86e3f0bd010777af81c92e336d9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">open3d::geometry::TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a773e86e3f0bd010777af81c92e336d9b">ToLegacy</a> () const</td></tr>
<tr class="memdesc:a773e86e3f0bd010777af81c92e336d9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert to a legacy Open3D <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a773e86e3f0bd010777af81c92e336d9b">More...</a><br /></td></tr>
<tr class="separator:a773e86e3f0bd010777af81c92e336d9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a697b24466371d1c7123ebfa45ce0aaeb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a697b24466371d1c7123ebfa45ce0aaeb">ComputeConvexHull</a> (bool joggle_inputs=false) const</td></tr>
<tr class="separator:a697b24466371d1c7123ebfa45ce0aaeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaab272fd172ac9a49bd654df08dbca9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#afaab272fd172ac9a49bd654df08dbca9">SimplifyQuadricDecimation</a> (double target_reduction, bool preserve_volume=true) const</td></tr>
<tr class="separator:afaab272fd172ac9a49bd654df08dbca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef3aeead6a813eff63304e8ff51fa59a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aef3aeead6a813eff63304e8ff51fa59a">BooleanUnion</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;mesh, double tolerance=1e-6) const</td></tr>
<tr class="separator:aef3aeead6a813eff63304e8ff51fa59a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b221c9bf730faa2b559be329f94b02e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a9b221c9bf730faa2b559be329f94b02e">BooleanIntersection</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;mesh, double tolerance=1e-6) const</td></tr>
<tr class="separator:a9b221c9bf730faa2b559be329f94b02e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09b9559645690d318f5523e4cd0cf834"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a09b9559645690d318f5523e4cd0cf834">BooleanDifference</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;mesh, double tolerance=1e-6) const</td></tr>
<tr class="separator:a09b9559645690d318f5523e4cd0cf834"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9903611de48ea91bc426e938e007ac50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_axis_aligne">AxisAlignedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a9903611de48ea91bc426e938e007ac50">GetAxisAlignedBoundingBox</a> () const</td></tr>
<tr class="memdesc:a9903611de48ea91bc426e938e007ac50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an axis-aligned bounding box from vertex attribute "positions".  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a9903611de48ea91bc426e938e007ac50">More...</a><br /></td></tr>
<tr class="separator:a9903611de48ea91bc426e938e007ac50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60cf76c881ae3d377a39f3b19aa2a405"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_oriented_bo">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a60cf76c881ae3d377a39f3b19aa2a405">GetOrientedBoundingBox</a> () const</td></tr>
<tr class="memdesc:a60cf76c881ae3d377a39f3b19aa2a405"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an oriented bounding box from vertex attribute "positions".  <a href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a60cf76c881ae3d377a39f3b19aa2a405">More...</a><br /></td></tr>
<tr class="separator:a60cf76c881ae3d377a39f3b19aa2a405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3346d598c9b3b2474ad65036e248b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a0d3346d598c9b3b2474ad65036e248b5">FillHoles</a> (double hole_size=1e6) const</td></tr>
<tr class="separator:a0d3346d598c9b3b2474ad65036e248b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed862f85adc9d64a21c9018ea6a9af1"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; float, int, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a5ed862f85adc9d64a21c9018ea6a9af1">ComputeUVAtlas</a> (size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>=512, float gutter=1.0f, float max_stretch=1.f/6, int parallel_partitions=1, int nthreads=0)</td></tr>
<tr class="separator:a5ed862f85adc9d64a21c9018ea6a9af1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af31eb853603b0ff122a51f645fbe94ba"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af31eb853603b0ff122a51f645fbe94ba">BakeVertexAttrTextures</a> (int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const std::unordered_set&lt; std::string &gt; &amp;vertex_attr={}, double margin=2., double fill=0., bool update_material=true)</td></tr>
<tr class="separator:af31eb853603b0ff122a51f645fbe94ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa24ea2db3ec2361c09de11fabb0eee3"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aaa24ea2db3ec2361c09de11fabb0eee3">BakeTriangleAttrTextures</a> (int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const std::unordered_set&lt; std::string &gt; &amp;triangle_attr={}, double margin=2., double fill=0., bool update_material=true)</td></tr>
<tr class="separator:aaa24ea2db3ec2361c09de11fabb0eee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02757c68f1595b82e707baddd0469dc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a02757c68f1595b82e707baddd0469dc3">ExtrudeRotation</a> (double angle, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;axis, int resolution=16, double translation=0.0, bool capping=true) const</td></tr>
<tr class="separator:a02757c68f1595b82e707baddd0469dc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35ee04b4d5128d773064cb03c320c27b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a35ee04b4d5128d773064cb03c320c27b">ExtrudeLinear</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;vector, double scale=1.0, bool capping=true) const</td></tr>
<tr class="separator:a35ee04b4d5128d773064cb03c320c27b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1e2c07cb5a48c69e97e68d1e62f73a5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa1e2c07cb5a48c69e97e68d1e62f73a5">PCAPartition</a> (int max_faces)</td></tr>
<tr class="separator:aa1e2c07cb5a48c69e97e68d1e62f73a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92d7ab4798499bc4b4349b6b758ec2bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a92d7ab4798499bc4b4349b6b758ec2bf">SelectFacesByMask</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;mask) const</td></tr>
<tr class="separator:a92d7ab4798499bc4b4349b6b758ec2bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">open3d::t::geometry::Geometry</a></td></tr>
<tr class="memitem:aae3fa46ae2c36a9245da717db105a049 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#aae3fa46ae2c36a9245da717db105a049">~Geometry</a> ()</td></tr>
<tr class="separator:aae3fa46ae2c36a9245da717db105a049 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c02f58e26d56a742001b61d5ddb3aee inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a1c02f58e26d56a742001b61d5ddb3aee">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a1c02f58e26d56a742001b61d5ddb3aee inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a1c02f58e26d56a742001b61d5ddb3aee">More...</a><br /></td></tr>
<tr class="separator:a1c02f58e26d56a742001b61d5ddb3aee inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54d95d1e8e1a279d554140a507d0ece0 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a54d95d1e8e1a279d554140a507d0ece0">Dimension</a> () const</td></tr>
<tr class="memdesc:a54d95d1e8e1a279d554140a507d0ece0 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a54d95d1e8e1a279d554140a507d0ece0">More...</a><br /></td></tr>
<tr class="separator:a54d95d1e8e1a279d554140a507d0ece0 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f2d0f2491f0f14b3edc14a6eb458732 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a5f2d0f2491f0f14b3edc14a6eb458732">GetName</a> () const</td></tr>
<tr class="separator:a5f2d0f2491f0f14b3edc14a6eb458732 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f41994b219be5601876f12fe76974de inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a0f41994b219be5601876f12fe76974de">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a0f41994b219be5601876f12fe76974de inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1core_1_1_is_device"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1core_1_1_is_device')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye">open3d::core::IsDevice</a></td></tr>
<tr class="memitem:ac8a6c234c0f58bedb9159dd3c4234265 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#ac8a6c234c0f58bedb9159dd3c4234265">IsDevice</a> ()=default</td></tr>
<tr class="separator:ac8a6c234c0f58bedb9159dd3c4234265 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2c84a4d0808e4c7c2cbf0412097fc7c inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#af2c84a4d0808e4c7c2cbf0412097fc7c">~IsDevice</a> ()=default</td></tr>
<tr class="separator:af2c84a4d0808e4c7c2cbf0412097fc7c inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad123cbf1de3a6b6946af444fa1fc5b39 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#ad123cbf1de3a6b6946af444fa1fc5b39">IsCPU</a> () const</td></tr>
<tr class="separator:ad123cbf1de3a6b6946af444fa1fc5b39 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c611931dafc12b6a40c22799e2316b6 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#a0c611931dafc12b6a40c22799e2316b6">IsCUDA</a> () const</td></tr>
<tr class="separator:a0c611931dafc12b6a40c22799e2316b6 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge">open3d::t::geometry::DrawableGeometry</a></td></tr>
<tr class="memitem:a72987c98386c0a92919cdd2c945af2a2 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#a72987c98386c0a92919cdd2c945af2a2">DrawableGeometry</a> ()</td></tr>
<tr class="separator:a72987c98386c0a92919cdd2c945af2a2 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a212ff1f5ddbe6d15294176f3e1a74fe9 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#a212ff1f5ddbe6d15294176f3e1a74fe9">~DrawableGeometry</a> ()</td></tr>
<tr class="separator:a212ff1f5ddbe6d15294176f3e1a74fe9 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acabee211f04815b00ceb40719359383b inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#acabee211f04815b00ceb40719359383b">HasMaterial</a> () const</td></tr>
<tr class="memdesc:acabee211f04815b00ceb40719359383b inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a material has been applied to this <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a> with SetMaterial.  <a href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#acabee211f04815b00ceb40719359383b">More...</a><br /></td></tr>
<tr class="separator:acabee211f04815b00ceb40719359383b inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea8e535253dcc2e15fef36f065b68585 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">visualization::rendering::Material</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#aea8e535253dcc2e15fef36f065b68585">GetMaterial</a> ()</td></tr>
<tr class="memdesc:aea8e535253dcc2e15fef36f065b68585 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get material associated with this <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#aea8e535253dcc2e15fef36f065b68585">More...</a><br /></td></tr>
<tr class="separator:aea8e535253dcc2e15fef36f065b68585 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0d741c69411327df29f4b1701219ce inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">visualization::rendering::Material</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#a2e0d741c69411327df29f4b1701219ce">GetMaterial</a> () const</td></tr>
<tr class="memdesc:a2e0d741c69411327df29f4b1701219ce inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get const reference to material associated with this <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#a2e0d741c69411327df29f4b1701219ce">More...</a><br /></td></tr>
<tr class="separator:a2e0d741c69411327df29f4b1701219ce inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf79ffa4c2bff4e4c4ca97131bef1288 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#acf79ffa4c2bff4e4c4ca97131bef1288">SetMaterial</a> (const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">visualization::rendering::Material</a> &amp;material)</td></tr>
<tr class="memdesc:acf79ffa4c2bff4e4c4ca97131bef1288 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the material properties associate with this <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_drawable_ge#acf79ffa4c2bff4e4c4ca97131bef1288">More...</a><br /></td></tr>
<tr class="separator:acf79ffa4c2bff4e4c4ca97131bef1288 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_drawable_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a432531af9db8d8a0f09eff6cd4f62a10"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a432531af9db8d8a0f09eff6cd4f62a10">CreateBox</a> (double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>=1.0, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>=1.0, double depth=1.0, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a432531af9db8d8a0f09eff6cd4f62a10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd1203a9a1a94bb5e22f7dcb1f6a165b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#acd1203a9a1a94bb5e22f7dcb1f6a165b">CreateSphere</a> (double radius=1.0, int resolution=20, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:acd1203a9a1a94bb5e22f7dcb1f6a165b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af09160cb2a64bd7e20ec7e7d549f89f4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af09160cb2a64bd7e20ec7e7d549f89f4">CreateTetrahedron</a> (double radius=1.0, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:af09160cb2a64bd7e20ec7e7d549f89f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a955a267482449b314195ef51d43b94f3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a955a267482449b314195ef51d43b94f3">CreateOctahedron</a> (double radius=1.0, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a955a267482449b314195ef51d43b94f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac59f221b355d37e7b1ec595a9370bdea"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ac59f221b355d37e7b1ec595a9370bdea">CreateIcosahedron</a> (double radius=1.0, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:ac59f221b355d37e7b1ec595a9370bdea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2a4bacfa127ab7ae8b3c0f007b6dc2a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af2a4bacfa127ab7ae8b3c0f007b6dc2a">CreateCylinder</a> (double radius=1.0, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>=2.0, int resolution=20, int split=4, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:af2a4bacfa127ab7ae8b3c0f007b6dc2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ef728e17405b256564e3723e58aa38"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af8ef728e17405b256564e3723e58aa38">CreateCone</a> (double radius=1.0, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>=2.0, int resolution=20, int split=1, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:af8ef728e17405b256564e3723e58aa38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f65b8818d9425e635a67b8eb8eeedee"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a8f65b8818d9425e635a67b8eb8eeedee">CreateTorus</a> (double torus_radius=1.0, double tube_radius=0.5, int radial_resolution=30, int tubular_resolution=20, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a8f65b8818d9425e635a67b8eb8eeedee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a080933fec31308f2698a04af421dad83"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a080933fec31308f2698a04af421dad83">CreateArrow</a> (double cylinder_radius=1.0, double cone_radius=1.5, double cylinder_height=5.0, double cone_height=4.0, int resolution=20, int cylinder_split=4, int cone_split=1, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a080933fec31308f2698a04af421dad83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25e6c912fc2e356806c000adc43a2a19"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a25e6c912fc2e356806c000adc43a2a19">CreateCoordinateFrame</a> (double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>=1.0, const Eigen::Vector3d &amp;origin=Eigen::Vector3d(0.0, 0.0, 0.0), <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a25e6c912fc2e356806c000adc43a2a19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab577a979178dd536aeef7e0f1c615a84"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ab577a979178dd536aeef7e0f1c615a84">CreateMobius</a> (int length_split=70, int width_split=15, int twists=1, double radius=1, double flatness=1, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>=1, double scale=1, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:ab577a979178dd536aeef7e0f1c615a84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a004b363cb27715686e77e67d47121a38"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a004b363cb27715686e77e67d47121a38">CreateText</a> (const std::string &amp;text, double depth=0.0, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a004b363cb27715686e77e67d47121a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a708872d9e98f5dedaf34d8680f994242"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">geometry::TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a708872d9e98f5dedaf34d8680f994242">FromLegacy</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">open3d::geometry::TriangleMesh</a> &amp;mesh_legacy, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> float_dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> int_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a708872d9e98f5dedaf34d8680f994242"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a59141d381614c7c740fbb67eb06f8d94"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a59141d381614c7c740fbb67eb06f8d94">device_</a> = <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</td></tr>
<tr class="separator:a59141d381614c7c740fbb67eb06f8d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad666fbcc6b46f4c8bd2622f233984462"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#ad666fbcc6b46f4c8bd2622f233984462">vertex_attr_</a></td></tr>
<tr class="separator:ad666fbcc6b46f4c8bd2622f233984462"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d26d5641662f35889807057151fba06"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a2d26d5641662f35889807057151fba06">triangle_attr_</a></td></tr>
<tr class="separator:a2d26d5641662f35889807057151fba06"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">open3d::t::geometry::Geometry</a></td></tr>
<tr class="memitem:a2058abb1036dfbfb2a9c13fbb7e2a88d inherit pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88daee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88dae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88daa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88dabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88daff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a2058abb1036dfbfb2a9c13fbb7e2a88d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">More...</a><br /></td></tr>
<tr class="separator:a2058abb1036dfbfb2a9c13fbb7e2a88d inherit pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">open3d::t::geometry::Geometry</a></td></tr>
<tr class="memitem:a940a78b9e256dbca68764761a4706bcf inherit pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a940a78b9e256dbca68764761a4706bcf">Geometry</a> (<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:a940a78b9e256dbca68764761a4706bcf inherit pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a940a78b9e256dbca68764761a4706bcf">More...</a><br /></td></tr>
<tr class="separator:a940a78b9e256dbca68764761a4706bcf inherit pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A triangle mesh contains vertices and triangles. </p>
<p>The triangle mesh class stores the attribute data in key-value maps. There are two maps: the vertex attributes map, and the triangle attribute map.</p>
<ul>
<li>Default attribute: vertex_attr_["positions"], triangle_attr_["indices"]<ul>
<li>Vertex positions<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a1cb67969e9e4ba97fd4a8e257bc29ed7">TriangleMesh::GetVertexPositions()</a></li>
<li>TriangleMesh::SetVertexPositions(const Tensor&amp; vertex_positions)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aeb82ae79ec594aa6091a760217a8edeb">TriangleMesh::HasVertexPositions()</a></li>
<li>Value tensor must have shape {num_vertices, 3}.</li>
</ul>
</li>
<li>Triangle indices<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa9ee851c8d29b2b2b0c570d5799d9ae5">TriangleMesh::GetTriangleIndices()</a></li>
<li>TriangleMesh::SetTriangleIndices(const Tensor&amp; triangle_indices)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a3f43615037fb6c6b71476b6a74199146">TriangleMesh::HasTriangleIndices()</a></li>
<li>Value tensor must have shape {num_triangles, 3}.</li>
</ul>
</li>
<li>Created by default, required for all triangle meshes.</li>
<li>The device of vertex positions and triangle indices must be the same. They determine the device of the trianglemesh.</li>
</ul>
</li>
<li>Common attributes: vertex_attr_["normals"], vertex_attr_["colors"] triangle_attr_["normals"], triangle_attr_["colors"]<ul>
<li>Vertex normals<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#afe9bc8da73209fe58d9fbabd1ea4cc76">TriangleMesh::GetVertexNormals()</a></li>
<li>TriangleMesh::SetVertexNormals(const Tensor&amp; vertex_normals)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a7077fc4f34295bf3a50b175286a6b16f">TriangleMesh::HasVertexNormals()</a></li>
<li>Value tensor must have shape {num_vertices, 3}.</li>
<li>Value tensor can have any dtype.</li>
</ul>
</li>
<li>Vertex colors<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aa8937a067b77b3b39d135f95310a055c">TriangleMesh::GetVertexColors()</a></li>
<li>TriangleMesh::SetVertexColors(const Tensor&amp; vertex_colors)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a44b5ce33df9d53710fefbc10819fc777">TriangleMesh::HasVertexColors()</a></li>
<li>Value tensor must have shape {num_vertices, 3}.</li>
<li>Value tensor can have any dtype.</li>
</ul>
</li>
<li>Triangle normals<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a188eaf52c84e5445d8ac7f3460779dbd">TriangleMesh::GetTriangleNormals()</a></li>
<li>TriangleMesh::SetTriangleNormals(const Tensor&amp; triangle_normals)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a63e9a77fae5c3fbccdbce55281311eac">TriangleMesh::HasTriangleNormals()</a></li>
<li>Value tensor must have shape {num_triangles, 3}.</li>
<li>Value tensor can have any dtype.</li>
</ul>
</li>
<li>Triangle colors<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af58d4270b7c2d6e1cb88c478cd066309">TriangleMesh::GetTriangleColors()</a></li>
<li>TriangleMesh::SetTriangleColors(const Tensor&amp; triangle_colors)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#aaa45f0d5088bfbc5b4d3f3cd9dae1fe0">TriangleMesh::HasTriangleColors()</a></li>
<li>Value tensor must have shape {num_triangles, 3}.</li>
<li>Value tensor can have any dtype.</li>
</ul>
</li>
<li>Not created by default.</li>
<li>For all attributes above, the device must be consistent with the device of the triangle mesh.</li>
</ul>
</li>
<li>Custom attributes: e.g. vetex_attr_["labels"], triangle_attr_["labels"]<ul>
<li>Use generalized helper functions, e.g.:<ul>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#af763c2d58e375b8f37e6e81301ba11ee">TriangleMesh::GetVertexAttr(const std::string&amp; key)</a></li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a21bf4f66857550e4dd9e15dbafe0a0d0">TriangleMesh::SetVertexAttr</a>(const std::string&amp; key, const Tensor&amp; value)</li>
<li>TriangleMesh::HasVertexAttr(const std::string&amp; key)</li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a9662daa05df0a966b6ab19e209086361">TriangleMesh::GetTriangleAttr(const std::string&amp; key)</a></li>
<li><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me#a557d150c35205059334931af54fb3c20">TriangleMesh::SetTriangleAttr</a>(const std::string&amp; key, const Tensor&amp; value)</li>
<li>TriangleMesh::HasTriangleAttr(const std::string&amp; key)</li>
</ul>
</li>
<li>Not created by default. Users can add their own custom attributes.</li>
<li>Value tensor must be on the same device as the triangle mesh.</li>
</ul>
</li>
</ul>
<p>Note that the we can also use the generalized helper functions for the default and common attributes. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa1d4f27f04ee13d9bf7f485b08a1cfa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1d4f27f04ee13d9bf7f485b08a1cfa8">&#9670;&nbsp;</a></span>TriangleMesh() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TriangleMesh::TriangleMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty pointcloud on the provided device. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">device</td><td>The device on which to initialize the trianglemesh (default: 'CPU:0'). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a882aa9e107d6c530def1e5662bf7158c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a882aa9e107d6c530def1e5662bf7158c">&#9670;&nbsp;</a></span>TriangleMesh() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TriangleMesh::TriangleMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>vertex_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>triangle_indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a trianglemesh from vertices and triangles.</p>
<p>The input tensors will be directly used as the underlying storage of the triangle mesh (no memory copy). The device for <code>vertex_positions</code> must be consistent with <code>triangle_indices</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertex_positions</td><td>A tensor with element shape {3}. </td></tr>
    <tr><td class="paramname">triangle_indices</td><td>A tensor with element shape {3}. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a380219d72858e5322b1719dfed6cb384"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a380219d72858e5322b1719dfed6cb384">&#9670;&nbsp;</a></span>~TriangleMesh()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual open3d::t::geometry::TriangleMesh::~TriangleMesh </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aaa24ea2db3ec2361c09de11fabb0eee3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa24ea2db3ec2361c09de11fabb0eee3">&#9670;&nbsp;</a></span>BakeTriangleAttrTextures()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::geometry::TriangleMesh::BakeTriangleAttrTextures </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>triangle_attr</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>margin</em> = <code>2.</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fill</em> = <code>0.</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>update_material</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Bake triangle attributes into textures.</p>
<p>This function assumes a triangle attribute with name 'texture_uvs'.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>The width and height of the texture in pixels. Only square textures are supported.</td></tr>
    <tr><td class="paramname">vertex_attr</td><td>The vertex attributes for which textures should be generated.</td></tr>
    <tr><td class="paramname">margin</td><td>The margin in pixels. The recommended value is 2. The margin are additional pixels around the UV islands to avoid discontinuities.</td></tr>
    <tr><td class="paramname">fill</td><td>The value used for filling texels outside the UV islands.</td></tr>
    <tr><td class="paramname">update_material</td><td>If true updates the material of the mesh. Baking a vertex attribute with the name 'albedo' will become the albedo texture in the material. Existing textures in the material will be overwritten.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A dictionary of textures. </dd></dl>

</div>
</div>
<a id="af31eb853603b0ff122a51f645fbe94ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af31eb853603b0ff122a51f645fbe94ba">&#9670;&nbsp;</a></span>BakeVertexAttrTextures()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::geometry::TriangleMesh::BakeVertexAttrTextures </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>vertex_attr</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>margin</em> = <code>2.</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fill</em> = <code>0.</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>update_material</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Bake vertex attributes into textures.</p>
<p>This function assumes a triangle attribute with name 'texture_uvs'. Only float type attributes can be baked to textures.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>The width and height of the texture in pixels. Only square textures are supported.</td></tr>
    <tr><td class="paramname">vertex_attr</td><td>The vertex attributes for which textures should be generated.</td></tr>
    <tr><td class="paramname">margin</td><td>The margin in pixels. The recommended value is 2. The margin are additional pixels around the UV islands to avoid discontinuities.</td></tr>
    <tr><td class="paramname">fill</td><td>The value used for filling texels outside the UV islands.</td></tr>
    <tr><td class="paramname">update_material</td><td>If true updates the material of the mesh. Baking a vertex attribute with the name 'albedo' will become the albedo texture in the material. Existing textures in the material will be overwritten.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A dictionary of textures. </dd></dl>

</div>
</div>
<a id="a09b9559645690d318f5523e4cd0cf834"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09b9559645690d318f5523e4cd0cf834">&#9670;&nbsp;</a></span>BooleanDifference()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::BooleanDifference </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tolerance</em> = <code>1e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes the mesh that encompasses the volume after subtracting the volume of the second operand. Both meshes should be manifold.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mesh</td><td>This is the second operand for the boolean operation. </td></tr>
    <tr><td class="paramname">tolerance</td><td>Threshold which determines when point distances are considered to be 0.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The mesh describing the difference volume. </dd></dl>

</div>
</div>
<a id="a9b221c9bf730faa2b559be329f94b02e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b221c9bf730faa2b559be329f94b02e">&#9670;&nbsp;</a></span>BooleanIntersection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::BooleanIntersection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tolerance</em> = <code>1e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes the mesh that encompasses the intersection of the volumes of two meshes. Both meshes should be manifold.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mesh</td><td>This is the second operand for the boolean operation. </td></tr>
    <tr><td class="paramname">tolerance</td><td>Threshold which determines when point distances are considered to be 0.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The mesh describing the intersection volume. </dd></dl>

</div>
</div>
<a id="aef3aeead6a813eff63304e8ff51fa59a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef3aeead6a813eff63304e8ff51fa59a">&#9670;&nbsp;</a></span>BooleanUnion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::BooleanUnion </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tolerance</em> = <code>1e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes the mesh that encompasses the union of the volumes of two meshes. Both meshes should be manifold.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mesh</td><td>This is the second operand for the boolean operation. </td></tr>
    <tr><td class="paramname">tolerance</td><td>Threshold which determines when point distances are considered to be 0.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The mesh describing the union volume. </dd></dl>

</div>
</div>
<a id="a60a6b14372285e6c8b9439e03fd7f63f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60a6b14372285e6c8b9439e03fd7f63f">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&amp; open3d::t::geometry::TriangleMesh::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all data in the trianglemesh. </p>

<p>Implements <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#adc2716f5911ea8a88501ce9d2f029a56">open3d::t::geometry::Geometry</a>.</p>

</div>
</div>
<a id="a898e640aa3f36f1d75f270ce0391e819"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a898e640aa3f36f1d75f270ce0391e819">&#9670;&nbsp;</a></span>ClipPlane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::ClipPlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clip mesh with a plane. This method clips the triangle mesh with the specified plane. Parts of the mesh on the positive side of the plane will be kept and triangles intersected by the plane will be cut. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>A point on the plane as [Tensor of dim {3}]. </td></tr>
    <tr><td class="paramname">normal</td><td>The normal of the plane as [Tensor of dim {3}]. The normal points to the positive side of the plane for which the geometry will be kept. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>New triangle mesh clipped with the plane. </dd></dl>

</div>
</div>
<a id="a7c1ac6db6cbce3359f5f77c06276f119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c1ac6db6cbce3359f5f77c06276f119">&#9670;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::Clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns copy of the triangle mesh on the same device. </p>

</div>
</div>
<a id="a697b24466371d1c7123ebfa45ce0aaeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a697b24466371d1c7123ebfa45ce0aaeb">&#9670;&nbsp;</a></span>ComputeConvexHull()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::ComputeConvexHull </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>joggle_inputs</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the convex hull of the triangle mesh using qhull.</p>
<p>This runs on the CPU.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">joggle_inputs</td><td>(default False). Handle precision problems by randomly perturbing the input data. Set to True if perturbing the input iis acceptable but you need convex simplicial output. If False, neighboring facets may be merged in case of precision problems. See <a href="http://www.qhull.org/html/qh-impre.htm#joggle">QHull docs</a> for more details.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> representing the convexh hull. This contains an extra vertex property "point_map" that contains the index of the corresponding vertex in the original mesh. </dd></dl>

</div>
</div>
<a id="a22fdfb68591c8cb9162cd91ec451bbd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22fdfb68591c8cb9162cd91ec451bbd3">&#9670;&nbsp;</a></span>ComputeTriangleNormals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::ComputeTriangleNormals </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>normalized</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to compute triangle normals, usually called before rendering. </p>

</div>
</div>
<a id="a5ed862f85adc9d64a21c9018ea6a9af1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ed862f85adc9d64a21c9018ea6a9af1">&#9670;&nbsp;</a></span>ComputeUVAtlas()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; float, int, int &gt; open3d::t::geometry::TriangleMesh::ComputeUVAtlas </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em> = <code>512</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>gutter</em> = <code>1.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max_stretch</em> = <code>1.f&#160;/&#160;6</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>parallel_partitions</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nthreads</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates an UV atlas and adds it as triangle attr 'texture_uvs' to the mesh.</p>
<p>Input meshes must be manifold for this method to work.</p>
<p>The algorithm is based on:</p><ul>
<li>Zhou et al, "Iso-charts: Stretch-driven Mesh Parameterization using
Spectral Analysis", Eurographics Symposium on <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a> Processing (2004)</li>
<li>Sander et al. "Signal-Specialized Parametrization" Europgraphics 2002</li>
</ul>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>The target size of the texture (size x size). The uv coordinates will still be in the range [0..1] but parameters like gutter use pixels as units. </td></tr>
    <tr><td class="paramname">gutter</td><td>This is the space around the uv islands in pixels. </td></tr>
    <tr><td class="paramname">max_stretch</td><td>The maximum amount of stretching allowed. The parameter range is [0..1] with 0 meaning no stretch allowed. </td></tr>
    <tr><td class="paramname">parallel_partitions</td><td>The approximate number of partitions created before computing the UV atlas for parallelizing the computation. Parallelization can be enabled with values &gt; 1. Note that parallelization increases the number of UV islands and can lead to results with lower quality. </td></tr>
    <tr><td class="paramname">nthreads</td><td>The number of threads used when parallel_partitions is &gt; 1. Set to 0 for automatic number of thread detection.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tuple with (max stretch, num_charts, num_partitions) storing the actual amount of stretch, the number of created charts, and the number of parallel partitions created. </dd></dl>

</div>
</div>
<a id="a6225aeff9671412b996a28c24b1acc4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6225aeff9671412b996a28c24b1acc4c">&#9670;&nbsp;</a></span>ComputeVertexNormals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::ComputeVertexNormals </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>normalized</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to compute vertex normals, usually called before rendering. </p>

</div>
</div>
<a id="a080933fec31308f2698a04af421dad83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a080933fec31308f2698a04af421dad83">&#9670;&nbsp;</a></span>CreateArrow()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateArrow </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cylinder_radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cone_radius</em> = <code>1.5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cylinder_height</em> = <code>5.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cone_height</em> = <code>4.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>20</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cylinder_split</em> = <code>4</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cone_split</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a arrow triangle mesh. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cylinder_radius</td><td>defines the radius of the cylinder. </td></tr>
    <tr><td class="paramname">cone_radius</td><td>defines the radius of the cone. </td></tr>
    <tr><td class="paramname">cylinder_height</td><td>defines the height of the cylinder. The axis of cylinder is from (0, 0, 0) to (0, 0, cylinder_height). </td></tr>
    <tr><td class="paramname">cone_height</td><td>defines the height of the cone. The axis of the cone will be from (0, 0, cylinder_height) to (0, 0, cylinder_height + cone_height).</td></tr>
    <tr><td class="paramname">resolution</td><td>defines the resolution of the cone. The circle will be split into resolution segments.</td></tr>
    <tr><td class="paramname">cylinder_split</td><td>defines the number of segments along the cylinder_height direction. </td></tr>
    <tr><td class="paramname">cone_split</td><td>defines the number of segments along the cone_height direction. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a432531af9db8d8a0f09eff6cd4f62a10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a432531af9db8d8a0f09eff6cd4f62a10">&#9670;&nbsp;</a></span>CreateBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateBox </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a box triangle mesh. One vertex of the box will be placed at the origin and the box aligns with the positive x, y, and z axes. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>is x-directional length. </td></tr>
    <tr><td class="paramname">height</td><td>is y-directional length. </td></tr>
    <tr><td class="paramname">depth</td><td>is z-directional length. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af8ef728e17405b256564e3723e58aa38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8ef728e17405b256564e3723e58aa38">&#9670;&nbsp;</a></span>CreateCone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateCone </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em> = <code>2.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>20</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>split</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a cone triangle mesh. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>defines the radius of the cone. </td></tr>
    <tr><td class="paramname">height</td><td>defines the height of the cone. The axis of the cone will be from (0, 0, 0) to (0, 0, height). </td></tr>
    <tr><td class="paramname">resolution</td><td>defines the resolution of the cone. The circle will be split into resolution segments. </td></tr>
    <tr><td class="paramname">split</td><td>defines the number of segments along the height direction. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a25e6c912fc2e356806c000adc43a2a19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25e6c912fc2e356806c000adc43a2a19">&#9670;&nbsp;</a></span>CreateCoordinateFrame()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateCoordinateFrame </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>size</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em> = <code>Eigen::Vector3d(0.0,&#160;0.0,&#160;0.0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a coordinate frame mesh. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>defines the size of the coordinate frame. </td></tr>
    <tr><td class="paramname">origin</td><td>defines the origin of the coordinate frame. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af2a4bacfa127ab7ae8b3c0f007b6dc2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2a4bacfa127ab7ae8b3c0f007b6dc2a">&#9670;&nbsp;</a></span>CreateCylinder()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateCylinder </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em> = <code>2.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>20</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>split</em> = <code>4</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a cylinder triangle mesh. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>defines the radius of the cylinder. </td></tr>
    <tr><td class="paramname">height</td><td>defines the height of the cylinder. The axis of the cylinder will be from (0, 0, -height/2) to (0, 0, height/2). </td></tr>
    <tr><td class="paramname">resolution</td><td>defines the resolution of the cylinder. The circle will be split into resolution segments </td></tr>
    <tr><td class="paramname">split</td><td>defines the number of segments along the height direction. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac59f221b355d37e7b1ec595a9370bdea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac59f221b355d37e7b1ec595a9370bdea">&#9670;&nbsp;</a></span>CreateIcosahedron()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateIcosahedron </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a icosahedron triangle mesh. The centroid of the mesh will be placed at (0, 0, 0) and the vertices have a distance of radius to the center. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>defines the distance from centroid to mesh vetices. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab577a979178dd536aeef7e0f1c615a84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab577a979178dd536aeef7e0f1c615a84">&#9670;&nbsp;</a></span>CreateMobius()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateMobius </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length_split</em> = <code>70</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width_split</em> = <code>15</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>twists</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>flatness</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a Mobius strip. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">length_split</td><td>defines the number of segments along the Mobius strip. </td></tr>
    <tr><td class="paramname">width_split</td><td>defines the number of segments along the width of the Mobius strip. </td></tr>
    <tr><td class="paramname">twists</td><td>defines the number of twists of the strip. </td></tr>
    <tr><td class="paramname">radius</td><td>defines the radius of the Mobius strip. </td></tr>
    <tr><td class="paramname">flatness</td><td>controls the height of the strip. </td></tr>
    <tr><td class="paramname">width</td><td>controls the width of the Mobius strip. </td></tr>
    <tr><td class="paramname">scale</td><td>is used to scale the entire Mobius strip. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a955a267482449b314195ef51d43b94f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a955a267482449b314195ef51d43b94f3">&#9670;&nbsp;</a></span>CreateOctahedron()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateOctahedron </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a octahedron triangle mesh. The centroid of the mesh will be placed at (0, 0, 0) and the vertices have a distance of radius to the center. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>defines the distance from centroid to mesh vetices. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acd1203a9a1a94bb5e22f7dcb1f6a165b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd1203a9a1a94bb5e22f7dcb1f6a165b">&#9670;&nbsp;</a></span>CreateSphere()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateSphere </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>20</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a sphere triangle mesh. The sphere with radius will be centered at (0, 0, 0). Its axis is aligned with z-axis. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>defines the radius of the sphere. </td></tr>
    <tr><td class="paramname">resolution</td><td>defines the resolution of the sphere. The longitudes will be split into resolution segments (i.e. there are resolution + 1 latitude lines including the north and south pole). The latitudes will be split into `2 * resolution segments (i.e. there are 2 * resolution longitude lines.) </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af09160cb2a64bd7e20ec7e7d549f89f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af09160cb2a64bd7e20ec7e7d549f89f4">&#9670;&nbsp;</a></span>CreateTetrahedron()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateTetrahedron </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a tetrahedron triangle mesh. The centroid of the mesh will be placed at (0, 0, 0) and the vertices have a distance of radius to the center. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>defines the distance from centroid to mesh vetices. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a004b363cb27715686e77e67d47121a38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a004b363cb27715686e77e67d47121a38">&#9670;&nbsp;</a></span>CreateText()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateText </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a text triangle mesh. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">text</td><td>The text for generating the mesh. ASCII characters 32-126 are supported (includes alphanumeric characters and punctuation). In addition the line feed '<br  />
' is supported to start a new line. </td></tr>
    <tr><td class="paramname">depth</td><td>The depth of the generated mesh. If depth is 0 then a flat mesh will be generated. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8f65b8818d9425e635a67b8eb8eeedee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f65b8818d9425e635a67b8eb8eeedee">&#9670;&nbsp;</a></span>CreateTorus()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::CreateTorus </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>torus_radius</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tube_radius</em> = <code>0.5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>radial_resolution</em> = <code>30</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>tubular_resolution</em> = <code>20</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a torus triangle mesh. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">torus_radius</td><td>defines the radius from the center of the torus to the center of the tube. </td></tr>
    <tr><td class="paramname">tube_radius</td><td>defines the radius of the torus tube. </td></tr>
    <tr><td class="paramname">radial_resolution</td><td>defines the number of segments along the radial direction. </td></tr>
    <tr><td class="paramname">tubular_resolution</td><td>defines the number of segments along the tubular direction. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a35ee04b4d5128d773064cb03c320c27b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35ee04b4d5128d773064cb03c320c27b">&#9670;&nbsp;</a></span>ExtrudeLinear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::ExtrudeLinear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>capping</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sweeps the triangle mesh along a direction vector. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vector</td><td>The direction vector. </td></tr>
    <tr><td class="paramname">scale</td><td>Scalar factor which essentially scales the direction vector.</td></tr>
    <tr><td class="paramname">capping</td><td>If true adds caps to the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A triangle mesh with the result of the sweep operation. </dd></dl>

</div>
</div>
<a id="a02757c68f1595b82e707baddd0469dc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02757c68f1595b82e707baddd0469dc3">&#9670;&nbsp;</a></span>ExtrudeRotation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::ExtrudeRotation </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>16</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>translation</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>capping</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sweeps the triangle mesh rotationally about an axis. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>The rotation angle in degree. </td></tr>
    <tr><td class="paramname">axis</td><td>The rotation axis. </td></tr>
    <tr><td class="paramname">resolution</td><td>The resolution defines the number of intermediate sweeps about the rotation axis. </td></tr>
    <tr><td class="paramname">translation</td><td>The translation along the rotation axis. </td></tr>
    <tr><td class="paramname">capping</td><td>If true adds caps to the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A triangle mesh with the result of the sweep operation. </dd></dl>

</div>
</div>
<a id="a0d3346d598c9b3b2474ad65036e248b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d3346d598c9b3b2474ad65036e248b5">&#9670;&nbsp;</a></span>FillHoles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::FillHoles </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>hole_size</em> = <code>1e6</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Fill holes by triangulating boundary edges.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hole_size</td><td>This is the approximate threshold for filling holes. The value describes the maximum radius of holes to be filled.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>New mesh after filling holes. </dd></dl>

</div>
</div>
<a id="a708872d9e98f5dedaf34d8680f994242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a708872d9e98f5dedaf34d8680f994242">&#9670;&nbsp;</a></span>FromLegacy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">geometry::TriangleMesh</a> open3d::t::geometry::TriangleMesh::FromLegacy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">open3d::geometry::TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh_legacy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>float_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>int_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> from a legacy Open3D <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mesh_legacy</td><td>Legacy Open3D <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </td></tr>
    <tr><td class="paramname">float_dtype</td><td>Float32 or Float64, used to store floating point values, e.g. vertices, normals, colors. </td></tr>
    <tr><td class="paramname">int_dtype</td><td>Int32 or Int64, used to store index values, e.g. triangles. </td></tr>
    <tr><td class="paramname">device</td><td>The device where the resulting <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> resides in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9903611de48ea91bc426e938e007ac50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9903611de48ea91bc426e938e007ac50">&#9670;&nbsp;</a></span>GetAxisAlignedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_axis_aligne">AxisAlignedBoundingBox</a> open3d::t::geometry::TriangleMesh::GetAxisAlignedBoundingBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an axis-aligned bounding box from vertex attribute "positions". </p>

</div>
</div>
<a id="ad6028f616aaa0fbd8a8055af3049de8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6028f616aaa0fbd8a8055af3049de8b">&#9670;&nbsp;</a></span>GetCenter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::TriangleMesh::GetCenter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7f3c8d5cdf715a79a2274ae3c1975a1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f3c8d5cdf715a79a2274ae3c1975a1f">&#9670;&nbsp;</a></span>GetDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> open3d::t::geometry::TriangleMesh::GetDevice </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the device of the geometry. </p>

<p>Implements <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a409482298c1e3140f1b06f2410c86dee">open3d::t::geometry::Geometry</a>.</p>

</div>
</div>
<a id="a8005a1a3ff8530ce17afbc5ceb740e14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8005a1a3ff8530ce17afbc5ceb740e14">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::TriangleMesh::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1ac9626b57633f3bd6c25a2b7cf7af17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ac9626b57633f3bd6c25a2b7cf7af17">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::TriangleMesh::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a60cf76c881ae3d377a39f3b19aa2a405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60cf76c881ae3d377a39f3b19aa2a405">&#9670;&nbsp;</a></span>GetOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_oriented_bo">OrientedBoundingBox</a> open3d::t::geometry::TriangleMesh::GetOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an oriented bounding box from vertex attribute "positions". </p>

</div>
</div>
<a id="af5c8fa4d185d9fb611ed13923fcb00f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5c8fa4d185d9fb611ed13923fcb00f5">&#9670;&nbsp;</a></span>GetTriangleAttr() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleAttr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Getter for triangle_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. </p>

</div>
</div>
<a id="ae9614a668f16e4600b814404d493508a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9614a668f16e4600b814404d493508a">&#9670;&nbsp;</a></span>GetTriangleAttr() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleAttr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Getter for triangle_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. Used in Pybind. </p>

</div>
</div>
<a id="a9662daa05df0a966b6ab19e209086361"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9662daa05df0a966b6ab19e209086361">&#9670;&nbsp;</a></span>GetTriangleAttr() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get triangle attributes in triangle_attr_. Throws exception if the attribute does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8a702a78f7a6c9d0f9f5bad93c51c668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a702a78f7a6c9d0f9f5bad93c51c668">&#9670;&nbsp;</a></span>GetTriangleAttr() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get triangle attributes in triangle_attr_. Throws exception if the attribute does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af58d4270b7c2d6e1cb88c478cd066309"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af58d4270b7c2d6e1cb88c478cd066309">&#9670;&nbsp;</a></span>GetTriangleColors() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "colors" attribute in triangle_attr_. Convenience function. </p>

</div>
</div>
<a id="a96e3b38d74f0b760942a83ff25b4ada9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96e3b38d74f0b760942a83ff25b4ada9">&#9670;&nbsp;</a></span>GetTriangleColors() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "colors" attribute in triangle_attr_. Convenience function. </p>

</div>
</div>
<a id="aa9ee851c8d29b2b2b0c570d5799d9ae5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9ee851c8d29b2b2b0c570d5799d9ae5">&#9670;&nbsp;</a></span>GetTriangleIndices() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleIndices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "indices" attribute in triangle_attr_. Convenience function. </p>

</div>
</div>
<a id="ab7b4562cd4cbb5f20989c70b19598f59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7b4562cd4cbb5f20989c70b19598f59">&#9670;&nbsp;</a></span>GetTriangleIndices() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleIndices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "indices" attribute in triangle_attr_. Convenience function. </p>

</div>
</div>
<a id="a188eaf52c84e5445d8ac7f3460779dbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a188eaf52c84e5445d8ac7f3460779dbd">&#9670;&nbsp;</a></span>GetTriangleNormals() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "normals" attribute in triangle_attr_. Convenience function. </p>

</div>
</div>
<a id="a270db5e5a5d68217f7e75293c52c0720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a270db5e5a5d68217f7e75293c52c0720">&#9670;&nbsp;</a></span>GetTriangleNormals() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetTriangleNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "normals" attribute in triangle_attr_. Convenience function. </p>

</div>
</div>
<a id="a27bdf63cac9f206c77a8f53cd0fdc7c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27bdf63cac9f206c77a8f53cd0fdc7c7">&#9670;&nbsp;</a></span>GetVertexAttr() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexAttr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Getter for vertex_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. </p>

</div>
</div>
<a id="a13ae4cb4f2274e0f0e3c2751a9595d7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13ae4cb4f2274e0f0e3c2751a9595d7a">&#9670;&nbsp;</a></span>GetVertexAttr() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexAttr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Getter for vertex_attr_ <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. Used in Pybind. </p>

</div>
</div>
<a id="af763c2d58e375b8f37e6e81301ba11ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af763c2d58e375b8f37e6e81301ba11ee">&#9670;&nbsp;</a></span>GetVertexAttr() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get vertex attributes in vertex_attr_. Throws exception if the attribute does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab7313133514cbf246ed9c281d637ad08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7313133514cbf246ed9c281d637ad08">&#9670;&nbsp;</a></span>GetVertexAttr() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get vertex attributes. Throws exception if the attribute does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa8937a067b77b3b39d135f95310a055c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8937a067b77b3b39d135f95310a055c">&#9670;&nbsp;</a></span>GetVertexColors() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "colors" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="ad4b051da8a6704da8505f229967492ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4b051da8a6704da8505f229967492ad">&#9670;&nbsp;</a></span>GetVertexColors() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "colors" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="afe9bc8da73209fe58d9fbabd1ea4cc76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe9bc8da73209fe58d9fbabd1ea4cc76">&#9670;&nbsp;</a></span>GetVertexNormals() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "normals" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="aaca4a64e0f942726234d01be7ba2009a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaca4a64e0f942726234d01be7ba2009a">&#9670;&nbsp;</a></span>GetVertexNormals() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "normals" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="a1cb67969e9e4ba97fd4a8e257bc29ed7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cb67969e9e4ba97fd4a8e257bc29ed7">&#9670;&nbsp;</a></span>GetVertexPositions() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexPositions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "positions" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="aa9c893a7559cf598767b044027a4672d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9c893a7559cf598767b044027a4672d">&#9670;&nbsp;</a></span>GetVertexPositions() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&amp; open3d::t::geometry::TriangleMesh::GetVertexPositions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the value of the "positions" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="ac233c0a7a55a09257e2011742ce76b87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac233c0a7a55a09257e2011742ce76b87">&#9670;&nbsp;</a></span>HasTriangleAttr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasTriangleAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if all of the following are true in triangle_attr_: 1) attribute key exist 2) attribute's length as triangles' length 3) attribute's length &gt; 0 </p>

</div>
</div>
<a id="aaa45f0d5088bfbc5b4d3f3cd9dae1fe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa45f0d5088bfbc5b4d3f3cd9dae1fe0">&#9670;&nbsp;</a></span>HasTriangleColors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasTriangleColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if all of the following are true in triangle_attr_: 1) attribute "colors" exist 2) attribute "colors"'s length as vertices' length 3) attribute "colors"'s length &gt; 0 Convenience function. </p>

</div>
</div>
<a id="a3f43615037fb6c6b71476b6a74199146"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f43615037fb6c6b71476b6a74199146">&#9670;&nbsp;</a></span>HasTriangleIndices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasTriangleIndices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check if the "indices" attribute's value in triangle_attr_ has length </p><blockquote class="doxtable">
<p>0. </p>
</blockquote>
<p>Convenience function. </p>

</div>
</div>
<a id="a63e9a77fae5c3fbccdbce55281311eac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63e9a77fae5c3fbccdbce55281311eac">&#9670;&nbsp;</a></span>HasTriangleNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasTriangleNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if all of the following are true in triangle_attr_: 1) attribute "normals" exist 2) attribute "normals"'s length as vertices' length 3) attribute "normals"'s length &gt; 0 Convenience function. </p>

</div>
</div>
<a id="ac6d372a589c2b97b214931a125ad847e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6d372a589c2b97b214931a125ad847e">&#9670;&nbsp;</a></span>HasVertexAttr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasVertexAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if all of the following are true in vertex_attr_: 1) attribute key exist 2) attribute's length as vertices' length 3) attribute's length &gt; 0 </p>

</div>
</div>
<a id="a44b5ce33df9d53710fefbc10819fc777"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44b5ce33df9d53710fefbc10819fc777">&#9670;&nbsp;</a></span>HasVertexColors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasVertexColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if all of the following are true in vertex_attr_: 1) attribute "colors" exist 2) attribute "colors"'s length as vertices' length 3) attribute "colors"'s length &gt; 0 Convenience function. </p>

</div>
</div>
<a id="a7077fc4f34295bf3a50b175286a6b16f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7077fc4f34295bf3a50b175286a6b16f">&#9670;&nbsp;</a></span>HasVertexNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasVertexNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if all of the following are true in vertex_attr_: 1) attribute "normals" exist 2) attribute "normals"'s length as vertices' length 3) attribute "normals"'s length &gt; 0 Convenience function. </p>

</div>
</div>
<a id="aeb82ae79ec594aa6091a760217a8edeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb82ae79ec594aa6091a760217a8edeb">&#9670;&nbsp;</a></span>HasVertexPositions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::HasVertexPositions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check if the "positions" attribute's value in vertex_attr_ has length &gt; 0. Convenience function. </p>

</div>
</div>
<a id="affedf09db3786240267d1b88bce88cf1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affedf09db3786240267d1b88bce88cf1">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TriangleMesh::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns !HasVertexPositions(), triangles are ignored. </p>

<p>Implements <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a96fee92f85f6aa6ea262c38459a85f2d">open3d::t::geometry::Geometry</a>.</p>

</div>
</div>
<a id="a7ae389c414a8ccaf0a11688b030da90c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ae389c414a8ccaf0a11688b030da90c">&#9670;&nbsp;</a></span>NormalizeNormals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::NormalizeNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Normalize both triangle normals and vertex normals to length 1. </p>

</div>
</div>
<a id="aa1e2c07cb5a48c69e97e68d1e62f73a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1e2c07cb5a48c69e97e68d1e62f73a5">&#9670;&nbsp;</a></span>PCAPartition()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::t::geometry::TriangleMesh::PCAPartition </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>max_faces</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Partition the mesh by recursively doing PCA. This function creates a new triangle attribute with the name "partition_ids". </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">max_faces</td><td>The maximum allowed number of faces in a partition. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of partitions. </dd></dl>

</div>
</div>
<a id="a612ad39402d4c9e89be255f40c5430d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a612ad39402d4c9e89be255f40c5430d4">&#9670;&nbsp;</a></span>RemoveTriangleAttr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::RemoveTriangleAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Removes triangle attribute by key value. Primary attribute "indices" cannot be removed. Throws warning if attribute key does not exists.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7454c61a3ba50308debd9bbaf9bbae0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7454c61a3ba50308debd9bbaf9bbae0b">&#9670;&nbsp;</a></span>RemoveVertexAttr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::RemoveVertexAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Removes vertex attribute by key value. Primary attribute "positions" cannot be removed. Throws warning if attribute key does not exists.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a86893d3987f4de0a1bf05d04f4be0354"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86893d3987f4de0a1bf05d04f4be0354">&#9670;&nbsp;</a></span>Rotate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::Rotate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rotates the VertexPositions, VertexNormals and TriangleNormals (if exists). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>Rotation [Tensor of dim {3,3}]. </td></tr>
    <tr><td class="paramname">center</td><td>Center [Tensor of dim {3}] about which the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> is to be scaled. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Rotated <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> </dd></dl>

</div>
</div>
<a id="aa385b74677d7657ca5eec073e64a6fa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa385b74677d7657ca5eec073e64a6fa3">&#9670;&nbsp;</a></span>Scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::Scale </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Scales the VertexPositions of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>Scale [double] of dimension </td></tr>
    <tr><td class="paramname">center</td><td>Center [Tensor of dim {3}] about which the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> is to be scaled. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Scaled <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> </dd></dl>

</div>
</div>
<a id="a92d7ab4798499bc4b4349b6b758ec2bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92d7ab4798499bc4b4349b6b758ec2bf">&#9670;&nbsp;</a></span>SelectFacesByMask()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::SelectFacesByMask </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a new mesh with the faces selected by a boolean mask. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mask</td><td>A boolean mask with the shape (N) with N as the number of faces in the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A new mesh with the selected faces. </dd></dl>

</div>
</div>
<a id="a557d150c35205059334931af54fb3c20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a557d150c35205059334931af54fb3c20">&#9670;&nbsp;</a></span>SetTriangleAttr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetTriangleAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set triangle attributes. If the attribute key already exists, its value will be overwritten, otherwise, the new key will be created.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
    <tr><td class="paramname">value</td><td>A tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a31b43c1625643758aa6ad95594a59824"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31b43c1625643758aa6ad95594a59824">&#9670;&nbsp;</a></span>SetTriangleColors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetTriangleColors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the value of the "colors" attribute in triangle_attr_. This is a convenience function. </p>

</div>
</div>
<a id="a0cd8be2b61c84e3c918bee208ee8a666"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cd8be2b61c84e3c918bee208ee8a666">&#9670;&nbsp;</a></span>SetTriangleIndices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetTriangleIndices </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the value of the "indices" attribute in triangle_attr_. </p>

</div>
</div>
<a id="aa53bfdee3760b7ab175bd1282c0444ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa53bfdee3760b7ab175bd1282c0444ec">&#9670;&nbsp;</a></span>SetTriangleNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetTriangleNormals </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the value of the "normals" attribute in triangle_attr_. This is a convenience function. </p>

</div>
</div>
<a id="a21bf4f66857550e4dd9e15dbafe0a0d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21bf4f66857550e4dd9e15dbafe0a0d0">&#9670;&nbsp;</a></span>SetVertexAttr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetVertexAttr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set vertex attributes. If the attribute key already exists, its value will be overwritten, otherwise, the new key will be created.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Attribute name. </td></tr>
    <tr><td class="paramname">value</td><td>A tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2ae87b1a74c59ec49d6f751b9903c2a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ae87b1a74c59ec49d6f751b9903c2a4">&#9670;&nbsp;</a></span>SetVertexColors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetVertexColors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the value of the "colors" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="acf332ed58fa13c1baab4781bc1be6a35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf332ed58fa13c1baab4781bc1be6a35">&#9670;&nbsp;</a></span>SetVertexNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetVertexNormals </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the value of the "normals" attribute in vertex_attr_. This is a convenience function. </p>

</div>
</div>
<a id="a214472cd2ed51bfc8867cc850d7fd9e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a214472cd2ed51bfc8867cc850d7fd9e8">&#9670;&nbsp;</a></span>SetVertexPositions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TriangleMesh::SetVertexPositions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the value of the "positions" attribute in vertex_attr_. Convenience function. </p>

</div>
</div>
<a id="afaab272fd172ac9a49bd654df08dbca9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaab272fd172ac9a49bd654df08dbca9">&#9670;&nbsp;</a></span>SimplifyQuadricDecimation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::SimplifyQuadricDecimation </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>target_reduction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>preserve_volume</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to simplify mesh using Quadric Error Metric Decimation by Garland and Heckbert.</p>
<p>This function always uses the CPU device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target_reduction</td><td>The factor of triangles to delete, i.e., setting this to 0.9 will return a mesh with about 10% of the original triangle count. It is not guaranteed that the target reduction factor will be reached. </td></tr>
    <tr><td class="paramname">preserve_volume</td><td>If set to true this enables volume preservation which reduces the error in triangle normal direction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Simplified <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </dd></dl>

</div>
</div>
<a id="ab3f960b47daede5c2f60664c47873aad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3f960b47daede5c2f60664c47873aad">&#9670;&nbsp;</a></span>SlicePlane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a> open3d::t::geometry::TriangleMesh::SlicePlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>contour_values</em> = <code>{0.0}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Extract contour slices given a plane. This method extracts slices as <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49" title="A LineSet contains points and lines joining them and optionally attributes on the points and lines.">LineSet</a> from the mesh at specific contour values defined by the specified plane. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>A point on the plane as [Tensor of dim {3}]. </td></tr>
    <tr><td class="paramname">normal</td><td>The normal of the plane as [Tensor of dim {3}]. </td></tr>
    <tr><td class="paramname">contour_values</td><td>Contour values at which slices will be generated. The value describes the signed distance to the plane. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49" title="A LineSet contains points and lines joining them and optionally attributes on the points and lines.">LineSet</a> with the extracted contours. </dd></dl>

</div>
</div>
<a id="a7713d94c42cae7857086a1d88c7cb209"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7713d94c42cae7857086a1d88c7cb209">&#9670;&nbsp;</a></span>To()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::TriangleMesh::To </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Transfer the triangle mesh to a specified device. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">device</td><td>The targeted device to convert to. </td></tr>
    <tr><td class="paramname">copy</td><td>If true, a new triangle mesh is always created; if false, the copy is avoided when the original triangle mesh is already on the targeted device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a773e86e3f0bd010777af81c92e336d9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a773e86e3f0bd010777af81c92e336d9b">&#9670;&nbsp;</a></span>ToLegacy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">open3d::geometry::TriangleMesh</a> open3d::t::geometry::TriangleMesh::ToLegacy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert to a legacy Open3D <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </p>

</div>
</div>
<a id="adf5361535334a3864e181a60fcc4d866"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf5361535334a3864e181a60fcc4d866">&#9670;&nbsp;</a></span>ToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::t::geometry::TriangleMesh::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Text description. </p>

</div>
</div>
<a id="aca39775b0c145079e839459f3d8ccbc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca39775b0c145079e839459f3d8ccbc0">&#9670;&nbsp;</a></span>Transform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::Transform </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>transformation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transforms the VertexPositions, VertexNormals and TriangleNormals (if exist) of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </p>
<p>Transformation matrix is a 4x4 matrix. T (4x4) = [[ R(3x3) t(3x1) ], [ O(1x3) s(1x1) ]] (s = 1 for Transformation without scaling)</p>
<p>It applies the following general transform to each <code>positions</code> and <code>normals</code>. |x'| | R(0,0) R(0,1) R(0,2) t(0)| |x| |y'| = | R(1,0) R(1,1) R(1,2) t(1)| @ |y| |z'| | R(2,0) R(2,1) R(2,2) t(2)| |z| |w'| | O(0,0) O(0,1) O(0,2) s | |1|</p>
<p>[x, y, z] = [x', y', z'] / w'</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">transformation</td><td>Transformation [Tensor of dim {4,4}]. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> </dd></dl>

</div>
</div>
<a id="af8a813b42c992c4725ab82e5e806c004"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8a813b42c992c4725ab82e5e806c004">&#9670;&nbsp;</a></span>Translate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp; open3d::t::geometry::TriangleMesh::Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates the VertexPositions of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">translation</td><td>translation tensor of dimension {3} </td></tr>
    <tr><td class="paramname">relative</td><td>if true (default): translates relative to Center </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Translated <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a59141d381614c7c740fbb67eb06f8d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59141d381614c7c740fbb67eb06f8d94">&#9670;&nbsp;</a></span>device_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> open3d::t::geometry::TriangleMesh::device_ = <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2d26d5641662f35889807057151fba06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d26d5641662f35889807057151fba06">&#9670;&nbsp;</a></span>triangle_attr_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> open3d::t::geometry::TriangleMesh::triangle_attr_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad666fbcc6b46f4c8bd2622f233984462"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad666fbcc6b46f4c8bd2622f233984462">&#9670;&nbsp;</a></span>vertex_attr_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> open3d::t::geometry::TriangleMesh::vertex_attr_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="t_2geometry_2_triangle_mesh_8h_source.4ad.de">TriangleMesh.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="t_2geometry_2_triangle_mesh_8cpp.html">TriangleMesh.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="t_2geometry_2_triangle_mesh_factory_8cpp.4b1">TriangleMeshFactory.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_triangle_mesh.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:53:44 GMT -->
</html>
