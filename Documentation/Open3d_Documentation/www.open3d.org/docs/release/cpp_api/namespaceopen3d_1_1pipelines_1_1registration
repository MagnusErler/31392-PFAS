<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1pipelines_1_1registration.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:26 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::pipelines::registration Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1pipelines.html">pipelines</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration">registration</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::pipelines::registration Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-6">TransformationEstimationForColoredICP</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-7">CorrespondenceChecker</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class that checks if two (small) point clouds can be aligned.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-7#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-8">CorrespondenceCheckerBasedOnEdgeLength</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if two point clouds build the polygons with similar edge lengths.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-8#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-9">CorrespondenceCheckerBasedOnDistance</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if two aligned point clouds are close.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-9#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-10">CorrespondenceCheckerBasedOnNormal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to check if two aligned point clouds have similar normals.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-10#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Options for FastGlobalRegistration.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-11#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to store featrues for registration.  <a href="classopen3d_1_1pipelines_1_1registration_1_1#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-12">TransformationEstimationForGeneralizedICP</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-13">GlobalOptimizationOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Option for GlobalOptimization.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-13#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-14">GlobalOptimizationConvergenceCriteria</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convergence criteria of GlobalOptimization.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-14#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-15">GlobalOptimizationMethod</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for global optimization method.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-15#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-16">GlobalOptimizationGaussNewton</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Global optimization with Gauss-Newton algorithm.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-16#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-17">GlobalOptimizationLevenbergMarquardt</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Global optimization with Levenberg-Marquardt algorithm.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-17#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-4">PoseGraphNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Node of <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2" title="Data structure defining the pose graph.">PoseGraph</a>.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-4#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-3">PoseGraphEdge</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Edge of <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2" title="Data structure defining the pose graph.">PoseGraph</a>.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-3#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data structure defining the pose graph.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-2#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class that defines the convergence criteria of ICP.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-18#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class that defines the convergence criteria of RANSAC.  <a href="classopen3d_1_1pipelines_1_1registration_1_1-19#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-21">RobustKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-22">L2Loss</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-23">L1Loss</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-24">HuberLoss</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-25">CauchyLoss</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-26">GMLoss</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-27">TukeyLoss</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-30">TransformationEstimationPointToPlane</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:adb60cb02adaab7415a344cfb22ba97b9"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; Eigen::Vector2i &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#adb60cb02adaab7415a344cfb22ba97b9">CorrespondenceSet</a></td></tr>
<tr class="separator:adb60cb02adaab7415a344cfb22ba97b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aaf8e61a7f9992214af86587563163447"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447">TransformationEstimationType</a> { <br />
&#160;&#160;<a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447a6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447acabf254f8195fce8d901b3cce7092ea9">PointToPoint</a> = 1
, <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447a621eeaff7db1283a0db27b4e7233a8ed">PointToPlane</a> = 2
, <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447aa1e9a6b08bcbd78287bb35ce9dbcdf13">ColoredICP</a> = 3
, <br />
&#160;&#160;<a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447ae78a7b63d1bd95c17728614ac5c9228e">GeneralizedICP</a> = 4
<br />
 }</td></tr>
<tr class="separator:aaf8e61a7f9992214af86587563163447"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aebefb3a27b84b0d20384f685cba6284f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aebefb3a27b84b0d20384f685cba6284f">RegistrationColoredICP</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, double max_distance, const Eigen::Matrix4d &amp;init=Eigen::Matrix4d::Identity(), const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-6">TransformationEstimationForColoredICP</a> &amp;estimation=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-6">TransformationEstimationForColoredICP</a>(), const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a> &amp;criteria=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a>())</td></tr>
<tr class="memdesc:aebefb3a27b84b0d20384f685cba6284f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function for Colored ICP registration.  <a href="namespaceopen3d_1_1pipelines_1_1registration#aebefb3a27b84b0d20384f685cba6284f">More...</a><br /></td></tr>
<tr class="separator:aebefb3a27b84b0d20384f685cba6284f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e089b989e99e2685d505706eddeaf8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a79e089b989e99e2685d505706eddeaf8">FastGlobalRegistrationBasedOnCorrespondence</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, const <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#adb60cb02adaab7415a344cfb22ba97b9">CorrespondenceSet</a> &amp;corres, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a> &amp;option=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a>())</td></tr>
<tr class="memdesc:a79e089b989e99e2685d505706eddeaf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Global Registration based on a given set of correspondences.  <a href="namespaceopen3d_1_1pipelines_1_1registration#a79e089b989e99e2685d505706eddeaf8">More...</a><br /></td></tr>
<tr class="separator:a79e089b989e99e2685d505706eddeaf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1e0a05f4a29f8dc2096189460ea085a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aa1e0a05f4a29f8dc2096189460ea085a">FastGlobalRegistrationBasedOnFeatureMatching</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;source_feature, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;target_feature, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a> &amp;option=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a>())</td></tr>
<tr class="memdesc:aa1e0a05f4a29f8dc2096189460ea085a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast Global Registration based on a given set of FPFH features.  <a href="namespaceopen3d_1_1pipelines_1_1registration#aa1e0a05f4a29f8dc2096189460ea085a">More...</a><br /></td></tr>
<tr class="separator:aa1e0a05f4a29f8dc2096189460ea085a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685ecef60ae5afd65ac62f31c2efa808"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a685ecef60ae5afd65ac62f31c2efa808">ComputeFPFHFeature</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;input, const <a class="el" href="classopen3d_1_1geometry_1_1_k_d_tree_search_">geometry::KDTreeSearchParam</a> &amp;search_param)</td></tr>
<tr class="separator:a685ecef60ae5afd65ac62f31c2efa808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26ad771a46768ca95ba1ca72d338e690"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a26ad771a46768ca95ba1ca72d338e690">RegistrationGeneralizedICP</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, double max_correspondence_distance, const Eigen::Matrix4d &amp;init=Eigen::Matrix4d::Identity(), const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-12">TransformationEstimationForGeneralizedICP</a> &amp;estimation=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-12">TransformationEstimationForGeneralizedICP</a>(), const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a> &amp;criteria=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a>())</td></tr>
<tr class="memdesc:a26ad771a46768ca95ba1ca72d338e690"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function for Generalized ICP registration.  <a href="namespaceopen3d_1_1pipelines_1_1registration#a26ad771a46768ca95ba1ca72d338e690">More...</a><br /></td></tr>
<tr class="separator:a26ad771a46768ca95ba1ca72d338e690"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4889722906a872bc57c8689bbc5e2b2e"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a4889722906a872bc57c8689bbc5e2b2e">CreatePoseGraphWithoutInvalidEdges</a> (const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a> &amp;pose_graph, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-13">GlobalOptimizationOption</a> &amp;option)</td></tr>
<tr class="separator:a4889722906a872bc57c8689bbc5e2b2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a2db3de1c33b6e40f71af1608491640"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a9a2db3de1c33b6e40f71af1608491640">GlobalOptimization</a> (<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a> &amp;pose_graph, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-15">GlobalOptimizationMethod</a> &amp;method, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-14">GlobalOptimizationConvergenceCriteria</a> &amp;criteria, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-13">GlobalOptimizationOption</a> &amp;option)</td></tr>
<tr class="separator:a9a2db3de1c33b6e40f71af1608491640"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275a4a21be00b120493accad97e70cbb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a275a4a21be00b120493accad97e70cbb">EvaluateRegistration</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, double max_correspondence_distance, const Eigen::Matrix4d &amp;transformation=Eigen::Matrix4d::Identity())</td></tr>
<tr class="memdesc:a275a4a21be00b120493accad97e70cbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function for evaluating registration between point clouds.  <a href="namespaceopen3d_1_1pipelines_1_1registration#a275a4a21be00b120493accad97e70cbb">More...</a><br /></td></tr>
<tr class="separator:a275a4a21be00b120493accad97e70cbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a6bb0594a8f52adabf9c140d2fdc519"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a8a6bb0594a8f52adabf9c140d2fdc519">RegistrationICP</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, double max_correspondence_distance, const Eigen::Matrix4d &amp;init=Eigen::Matrix4d::Identity(), const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a> &amp;estimation=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a>(false), const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a> &amp;criteria=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a>())</td></tr>
<tr class="memdesc:a8a6bb0594a8f52adabf9c140d2fdc519"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions for ICP registration.  <a href="namespaceopen3d_1_1pipelines_1_1registration#a8a6bb0594a8f52adabf9c140d2fdc519">More...</a><br /></td></tr>
<tr class="separator:a8a6bb0594a8f52adabf9c140d2fdc519"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c291ea8aed76007f034e7191c12d35a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a5c291ea8aed76007f034e7191c12d35a">RegistrationRANSACBasedOnCorrespondence</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, const <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#adb60cb02adaab7415a344cfb22ba97b9">CorrespondenceSet</a> &amp;corres, double max_correspondence_distance, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a> &amp;estimation=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a>(false), int ransac_n=3, const std::vector&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-7">CorrespondenceChecker</a> &gt;&gt; &amp;checkers={}, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a> &amp;criteria=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a>())</td></tr>
<tr class="memdesc:a5c291ea8aed76007f034e7191c12d35a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function for global RANSAC registration based on a given set of correspondences.  <a href="namespaceopen3d_1_1pipelines_1_1registration#a5c291ea8aed76007f034e7191c12d35a">More...</a><br /></td></tr>
<tr class="separator:a5c291ea8aed76007f034e7191c12d35a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1a42fb45ae2fccb4bb827d9db453ed4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#af1a42fb45ae2fccb4bb827d9db453ed4">RegistrationRANSACBasedOnFeatureMatching</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;source_feature, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;target_feature, bool mutual_filter, double max_correspondence_distance, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a> &amp;estimation=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a>(false), int ransac_n=3, const std::vector&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-7">CorrespondenceChecker</a> &gt;&gt; &amp;checkers={}, const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a> &amp;criteria=<a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a>())</td></tr>
<tr class="memdesc:af1a42fb45ae2fccb4bb827d9db453ed4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function for global RANSAC registration based on feature matching.  <a href="namespaceopen3d_1_1pipelines_1_1registration#af1a42fb45ae2fccb4bb827d9db453ed4">More...</a><br /></td></tr>
<tr class="separator:af1a42fb45ae2fccb4bb827d9db453ed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e1fa7c0919f63de726d19360e8dcec0"><td class="memItemLeft" align="right" valign="top">Eigen::Matrix6d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#a0e1fa7c0919f63de726d19360e8dcec0">GetInformationMatrixFromPointClouds</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;target, double max_correspondence_distance, const Eigen::Matrix4d &amp;transformation)</td></tr>
<tr class="separator:a0e1fa7c0919f63de726d19360e8dcec0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="adb60cb02adaab7415a344cfb22ba97b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb60cb02adaab7415a344cfb22ba97b9">&#9670;&nbsp;</a></span>CorrespondenceSet</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;Eigen::Vector2i&gt; <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#adb60cb02adaab7415a344cfb22ba97b9">open3d::pipelines::registration::CorrespondenceSet</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="aaf8e61a7f9992214af86587563163447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf8e61a7f9992214af86587563163447">&#9670;&nbsp;</a></span>TransformationEstimationType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#aaf8e61a7f9992214af86587563163447">open3d::pipelines::registration::TransformationEstimationType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aaf8e61a7f9992214af86587563163447a6fcdc090caeade09d0efd6253932b6f5"></a>Unspecified&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaf8e61a7f9992214af86587563163447acabf254f8195fce8d901b3cce7092ea9"></a>PointToPoint&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaf8e61a7f9992214af86587563163447a621eeaff7db1283a0db27b4e7233a8ed"></a>PointToPlane&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaf8e61a7f9992214af86587563163447aa1e9a6b08bcbd78287bb35ce9dbcdf13"></a>ColoredICP&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaf8e61a7f9992214af86587563163447ae78a7b63d1bd95c17728614ac5c9228e"></a>GeneralizedICP&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a685ecef60ae5afd65ac62f31c2efa808"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685ecef60ae5afd65ac62f31c2efa808">&#9670;&nbsp;</a></span>ComputeFPFHFeature()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &gt; open3d::pipelines::registration::ComputeFPFHFeature </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_k_d_tree_search_">geometry::KDTreeSearchParam</a> &amp;&#160;</td>
          <td class="paramname"><em>search_param</em> = <code><a class="el" href="classopen3d_1_1geometry_1_1_k_d_tree_search_-2">geometry::KDTreeSearchParamKNN</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to compute FPFH feature for a point cloud.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The Input point cloud. </td></tr>
    <tr><td class="paramname">search_param</td><td>KDTree KNN search parameter. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4889722906a872bc57c8689bbc5e2b2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4889722906a872bc57c8689bbc5e2b2e">&#9670;&nbsp;</a></span>CreatePoseGraphWithoutInvalidEdges()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a> &gt; open3d::pipelines::registration::CreatePoseGraphWithoutInvalidEdges </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>pose_graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-13">GlobalOptimizationOption</a> &amp;&#160;</td>
          <td class="paramname"><em>option</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to prune out uncertain edges having confidence_ &lt; .edge_prune_threshold_ </p>

</div>
</div>
<a id="a275a4a21be00b120493accad97e70cbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a275a4a21be00b120493accad97e70cbb">&#9670;&nbsp;</a></span>EvaluateRegistration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::EvaluateRegistration </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em> = <code>Eigen::Matrix4d::Identity()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function for evaluating registration between point clouds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance.</td></tr>
    <tr><td class="paramname">transformation</td><td>The 4x4 transformation matrix to transform source to target. Default value: array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a79e089b989e99e2685d505706eddeaf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79e089b989e99e2685d505706eddeaf8">&#9670;&nbsp;</a></span>FastGlobalRegistrationBasedOnCorrespondence()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::FastGlobalRegistrationBasedOnCorrespondence </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#adb60cb02adaab7415a344cfb22ba97b9">CorrespondenceSet</a> &amp;&#160;</td>
          <td class="paramname"><em>corres</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a> &amp;&#160;</td>
          <td class="paramname"><em>option</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fast Global Registration based on a given set of correspondences. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">corres</td><td>Correspondence indices between source and target point clouds. </td></tr>
    <tr><td class="paramname">option</td><td>FGR options </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa1e0a05f4a29f8dc2096189460ea085a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1e0a05f4a29f8dc2096189460ea085a">&#9670;&nbsp;</a></span>FastGlobalRegistrationBasedOnFeatureMatching()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::FastGlobalRegistrationBasedOnFeatureMatching </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;&#160;</td>
          <td class="paramname"><em>source_feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;&#160;</td>
          <td class="paramname"><em>target_feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a> &amp;&#160;</td>
          <td class="paramname"><em>option</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-11">FastGlobalRegistrationOption</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fast Global Registration based on a given set of FPFH features. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">corres</td><td>Correspondence indices between source and target point clouds. </td></tr>
    <tr><td class="paramname">option</td><td>FGR options </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0e1fa7c0919f63de726d19360e8dcec0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e1fa7c0919f63de726d19360e8dcec0">&#9670;&nbsp;</a></span>GetInformationMatrixFromPointClouds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Matrix6d open3d::pipelines::registration::GetInformationMatrixFromPointClouds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance.</td></tr>
    <tr><td class="paramname">transformation</td><td>The 4x4 transformation matrix to transform <code>source</code> to <code>target</code>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9a2db3de1c33b6e40f71af1608491640"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a2db3de1c33b6e40f71af1608491640">&#9670;&nbsp;</a></span>GlobalOptimization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::pipelines::registration::GlobalOptimization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2">PoseGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>pose_graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-15">GlobalOptimizationMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>method</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-17">GlobalOptimizationLevenbergMarquardt</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-14">GlobalOptimizationConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-14">GlobalOptimizationConvergenceCriteria</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-13">GlobalOptimizationOption</a> &amp;&#160;</td>
          <td class="paramname"><em>option</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-13">GlobalOptimizationOption</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to optimize a <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-2" title="Data structure defining the pose graph.">PoseGraph</a> Reference: [Kümmerle et al 2011] R Kümmerle, G. Grisetti, H. Strasdat, K. Konolige, W. Burgard g2o: A General Framework for Graph Optimization, ICRA 2011 [Choi et al 2015] S. Choi, Q.-Y. Zhou, V. Koltun, Robust Reconstruction of Indoor Scenes, CVPR 2015 [M. Lourakis 2009] M. Lourakis, SBA: A Software Package for Generic Sparse Bundle Adjustment, Transactions on Mathematical Software, 2009 </p>

</div>
</div>
<a id="aebefb3a27b84b0d20384f685cba6284f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebefb3a27b84b0d20384f685cba6284f">&#9670;&nbsp;</a></span>RegistrationColoredICP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::RegistrationColoredICP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>init</em> = <code>Eigen::Matrix4d::Identity()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-6">TransformationEstimationForColoredICP</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-6">TransformationEstimationForColoredICP</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function for Colored ICP registration. </p>
<p>This is implementation of following paper J. Park, Q.-Y. Zhou, V. Koltun, Colored Point Cloud Registration Revisited, ICCV 2017.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">max_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">init</td><td>Initial transformation estimation. Default value: array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]). </td></tr>
    <tr><td class="paramname">estimation</td><td><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-6">TransformationEstimationForColoredICP</a> method. Can only change the lambda_geometric value and the robust kernel used in the optimization </td></tr>
    <tr><td class="paramname">criteria</td><td>Convergence criteria. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a26ad771a46768ca95ba1ca72d338e690"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26ad771a46768ca95ba1ca72d338e690">&#9670;&nbsp;</a></span>RegistrationGeneralizedICP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::RegistrationGeneralizedICP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>init</em> = <code>Eigen::Matrix4d::Identity()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-12">TransformationEstimationForGeneralizedICP</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-12">TransformationEstimationForGeneralizedICP</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function for Generalized ICP registration. </p>
<p>This is implementation of following paper Generalized-ICP, RSS 2009.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">max_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">init</td><td>Initial transformation estimation. Default value: array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]).</td></tr>
    <tr><td class="paramname">criteria</td><td>Convergence criteria.</td></tr>
    <tr><td class="paramname"></td><td></td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8a6bb0594a8f52adabf9c140d2fdc519"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a6bb0594a8f52adabf9c140d2fdc519">&#9670;&nbsp;</a></span>RegistrationICP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::RegistrationICP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>init</em> = <code>Eigen::Matrix4d::Identity()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a>(false)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-18">ICPConvergenceCriteria</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Functions for ICP registration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance.</td></tr>
    <tr><td class="paramname">init</td><td>Initial transformation estimation. Default value: array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) </td></tr>
    <tr><td class="paramname">estimation</td><td>Estimation method. </td></tr>
    <tr><td class="paramname">criteria</td><td>Convergence criteria. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5c291ea8aed76007f034e7191c12d35a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c291ea8aed76007f034e7191c12d35a">&#9670;&nbsp;</a></span>RegistrationRANSACBasedOnCorrespondence()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::RegistrationRANSACBasedOnCorrespondence </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1pipelines_1_1registration#adb60cb02adaab7415a344cfb22ba97b9">CorrespondenceSet</a> &amp;&#160;</td>
          <td class="paramname"><em>corres</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a>(false)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ransac_n</em> = <code>3</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-7">CorrespondenceChecker</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>checkers</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function for global RANSAC registration based on a given set of correspondences. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">corres</td><td>Correspondence indices between source and target point clouds. </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">estimation</td><td>Estimation method. </td></tr>
    <tr><td class="paramname">ransac_n</td><td>Fit ransac with <code>ransac_n</code> correspondences. </td></tr>
    <tr><td class="paramname">checkers</td><td>Correspondence checker. </td></tr>
    <tr><td class="paramname">criteria</td><td>Convergence criteria. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af1a42fb45ae2fccb4bb827d9db453ed4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1a42fb45ae2fccb4bb827d9db453ed4">&#9670;&nbsp;</a></span>RegistrationRANSACBasedOnFeatureMatching()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-20">RegistrationResult</a> open3d::pipelines::registration::RegistrationRANSACBasedOnFeatureMatching </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;&#160;</td>
          <td class="paramname"><em>source_feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1">Feature</a> &amp;&#160;</td>
          <td class="paramname"><em>target_feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mutual_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-28">TransformationEstimation</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-29">TransformationEstimationPointToPoint</a>(false)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ransac_n</em> = <code>3</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-7">CorrespondenceChecker</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>checkers</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1pipelines_1_1registration_1_1-19">RANSACConvergenceCriteria</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function for global RANSAC registration based on feature matching. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. </td></tr>
    <tr><td class="paramname">source_feature</td><td>Source point cloud feature. </td></tr>
    <tr><td class="paramname">target_feature</td><td>Target point cloud feature. </td></tr>
    <tr><td class="paramname">mutual_filter</td><td>Enables mutual filter such that the correspondence of the source point's correspondence is itself. </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">ransac_n</td><td>Fit ransac with <code>ransac_n</code> correspondences. </td></tr>
    <tr><td class="paramname">checkers</td><td>Correspondence checker. </td></tr>
    <tr><td class="paramname">criteria</td><td>Convergence criteria. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1pipelines_1_1registration.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:26 GMT -->
</html>
