<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1visualization_1_1glsl.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:44 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::visualization::glsl Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization.html">visualization</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469">glsl</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">open3d::visualization::glsl Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">GeometryRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_poi">PointCloudRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_poi-2">PointCloudPickingRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_lin">LineSetRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_tet">TetraMeshRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_ori">OrientedBoundingBoxRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_axi">AxisAlignedBoundingBoxRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_tri">TriangleMeshRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_vox">VoxelGridRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_oct">OctreeRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_ima">ImageRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_r_g">RGBDImageRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_coo">CoordinateFrameRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sel">SelectionPolygonRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_poi-3">PointCloudPickerRenderer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_ima-2">ImageMaskShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_ima-3">ImageMaskShaderForImage</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_ima-4">ImageShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_ima-5">ImageShaderForImage</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_nor">NormalShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_nor-2">NormalShaderForPointCloud</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_nor-3">NormalShaderForTriangleMesh</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_pho">PhongShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_pho-2">PhongShaderForPointCloud</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_pho-3">PhongShaderForTriangleMesh</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_pic">PickingShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_pic-2">PickingShaderForPointCloud</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_r_g-2">RGBDImageShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_r_g-3">RGBDImageShaderForImage</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sha">ShaderWrapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim">Simple2DShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-2">Simple2DShaderForSelectionPolygon</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-3">SimpleBlackShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-4">SimpleBlackShaderForPointCloudNormal</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-5">SimpleBlackShaderForTriangleMeshWireFrame</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-6">SimpleShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-7">SimpleShaderForPointCloud</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-8">SimpleShaderForLineSet</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-9">SimpleShaderForTetraMesh</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-10">SimpleShaderForOrientedBoundingBox</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-11">SimpleShaderForAxisAlignedBoundingBox</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-12">SimpleShaderForTriangleMesh</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-13">SimpleShaderForVoxelGridLine</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-14">SimpleShaderForVoxelGridFace</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-15">SimpleShaderForOctreeLine</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_sim-16">SimpleShaderForOctreeFace</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_tex">TexturePhongShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_tex-2">TexturePhongShaderForTriangleMesh</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_tex-3">TextureSimpleShader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_tex-4">TextureSimpleShaderForTriangleMesh</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:adfe12601afd2099f7b96150473d78874"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#adfe12601afd2099f7b96150473d78874">ImageTextureMode</a> { <a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#adfe12601afd2099f7b96150473d78874a3e279a1c7b38a8eb633d7b6321080c02">Depth</a> = 0
, <a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#adfe12601afd2099f7b96150473d78874a2bda29ffd6b8557112e705b06f785629">RGB</a> = 1
, <a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#adfe12601afd2099f7b96150473d78874aaafde69bc903452b364782df56bda927">Grayscale</a> = 2
 }</td></tr>
<tr class="separator:adfe12601afd2099f7b96150473d78874"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a969bd58eda51c4196b652690ffff70c2"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a969bd58eda51c4196b652690ffff70c2">ImageFragmentShader</a></td></tr>
<tr class="separator:a969bd58eda51c4196b652690ffff70c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d9534e0fdd75c29b25a974fc9d4838c"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a3d9534e0fdd75c29b25a974fc9d4838c">ImageMaskFragmentShader</a></td></tr>
<tr class="separator:a3d9534e0fdd75c29b25a974fc9d4838c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21081cd1ce8bb614b474d1f85245b0e"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#aa21081cd1ce8bb614b474d1f85245b0e">ImageMaskVertexShader</a></td></tr>
<tr class="separator:aa21081cd1ce8bb614b474d1f85245b0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31315287ea8806d3c3587f7e8bc81873"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a31315287ea8806d3c3587f7e8bc81873">ImageVertexShader</a></td></tr>
<tr class="separator:a31315287ea8806d3c3587f7e8bc81873"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3975a1cbecd3b90af03fad7bfd0e7b09"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a3975a1cbecd3b90af03fad7bfd0e7b09">NormalFragmentShader</a></td></tr>
<tr class="separator:a3975a1cbecd3b90af03fad7bfd0e7b09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03b0affa29926c3bac1cbab70bc6091f"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a03b0affa29926c3bac1cbab70bc6091f">NormalVertexShader</a></td></tr>
<tr class="separator:a03b0affa29926c3bac1cbab70bc6091f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9efbce31b15d1eef9f80c0a472f5b98"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#ab9efbce31b15d1eef9f80c0a472f5b98">PhongFragmentShader</a></td></tr>
<tr class="separator:ab9efbce31b15d1eef9f80c0a472f5b98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad239adb61f924dce852bd2e405d56b0c"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#ad239adb61f924dce852bd2e405d56b0c">PhongVertexShader</a></td></tr>
<tr class="separator:ad239adb61f924dce852bd2e405d56b0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37949eda6d30114657aeafdd9c6a0bdb"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a37949eda6d30114657aeafdd9c6a0bdb">PickingFragmentShader</a></td></tr>
<tr class="separator:a37949eda6d30114657aeafdd9c6a0bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae72fda94ab673b19ab7eb8d277e5661b"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#ae72fda94ab673b19ab7eb8d277e5661b">PickingVertexShader</a></td></tr>
<tr class="separator:ae72fda94ab673b19ab7eb8d277e5661b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa68d497fa9edeafcd037fdb66615be8b"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#aa68d497fa9edeafcd037fdb66615be8b">RGBDImageFragmentShader</a></td></tr>
<tr class="separator:aa68d497fa9edeafcd037fdb66615be8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fc574c00b26057f918eaa6bf9745bf3"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a5fc574c00b26057f918eaa6bf9745bf3">Simple2DFragmentShader</a></td></tr>
<tr class="separator:a5fc574c00b26057f918eaa6bf9745bf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87fe3657feeb2d08771127904919042a"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a87fe3657feeb2d08771127904919042a">Simple2DVertexShader</a></td></tr>
<tr class="separator:a87fe3657feeb2d08771127904919042a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affacf177a9aab033fbed9ead3e2dffcf"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#affacf177a9aab033fbed9ead3e2dffcf">SimpleBlackFragmentShader</a></td></tr>
<tr class="separator:affacf177a9aab033fbed9ead3e2dffcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca66b4c7f18479f37f223c5a52ea3265"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#aca66b4c7f18479f37f223c5a52ea3265">SimpleBlackVertexShader</a></td></tr>
<tr class="separator:aca66b4c7f18479f37f223c5a52ea3265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f5ffc6c46fffd6533907e1c756fe0d2"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a8f5ffc6c46fffd6533907e1c756fe0d2">SimpleFragmentShader</a></td></tr>
<tr class="separator:a8f5ffc6c46fffd6533907e1c756fe0d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31cf87253a59a83ede438e3eb76a025a"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a31cf87253a59a83ede438e3eb76a025a">SimpleVertexShader</a></td></tr>
<tr class="separator:a31cf87253a59a83ede438e3eb76a025a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3239b15ec50d41271671c3b794c6f8ff"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a3239b15ec50d41271671c3b794c6f8ff">TexturePhongFragmentShader</a></td></tr>
<tr class="separator:a3239b15ec50d41271671c3b794c6f8ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a837a475c471addb4ee5dcaad8e9795"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a8a837a475c471addb4ee5dcaad8e9795">TexturePhongVertexShader</a></td></tr>
<tr class="separator:a8a837a475c471addb4ee5dcaad8e9795"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7abca3b7b395149035a4dc274dc53e92"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a7abca3b7b395149035a4dc274dc53e92">TextureSimpleFragmentShader</a></td></tr>
<tr class="separator:a7abca3b7b395149035a4dc274dc53e92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60460cb59e76b61dbbbfd49f40dc9400"><td class="memItemLeft" align="right" valign="top">const char *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#a60460cb59e76b61dbbbfd49f40dc9400">TextureSimpleVertexShader</a></td></tr>
<tr class="separator:a60460cb59e76b61dbbbfd49f40dc9400"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="adfe12601afd2099f7b96150473d78874"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfe12601afd2099f7b96150473d78874">&#9670;&nbsp;</a></span>ImageTextureMode</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceopen3d_1_1visualization_1_1glsl.469#adfe12601afd2099f7b96150473d78874">open3d::visualization::glsl::ImageTextureMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="adfe12601afd2099f7b96150473d78874a3e279a1c7b38a8eb633d7b6321080c02"></a>Depth&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="adfe12601afd2099f7b96150473d78874a2bda29ffd6b8557112e705b06f785629"></a>RGB&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="adfe12601afd2099f7b96150473d78874aaafde69bc903452b364782df56bda927"></a>Grayscale&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a969bd58eda51c4196b652690ffff70c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a969bd58eda51c4196b652690ffff70c2">&#9670;&nbsp;</a></span>ImageFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::ImageFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec2 UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform sampler2D image_texture;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = texture(image_texture, UV);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d9534e0fdd75c29b25a974fc9d4838c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d9534e0fdd75c29b25a974fc9d4838c">&#9670;&nbsp;</a></span>ImageMaskFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::ImageMaskFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec2 UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform sampler2D image_texture;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform vec3 mask_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform float mask_alpha;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = vec4(mask_color, texture(image_texture, UV).r * mask_alpha);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa21081cd1ce8bb614b474d1f85245b0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21081cd1ce8bb614b474d1f85245b0e">&#9670;&nbsp;</a></span>ImageMaskVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::ImageMaskVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec2 vertex_UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec2 UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    UV = vertex_UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a31315287ea8806d3c3587f7e8bc81873"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31315287ea8806d3c3587f7e8bc81873">&#9670;&nbsp;</a></span>ImageVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::ImageVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec2 vertex_UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec2 UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform vec3 vertex_scale;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = vec4(vertex_position * vertex_scale, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    UV = vertex_UV;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3975a1cbecd3b90af03fad7bfd0e7b09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3975a1cbecd3b90af03fad7bfd0e7b09">&#9670;&nbsp;</a></span>NormalFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::NormalFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_normal_camera;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = vec4(vertex_normal_camera * 0.5 + 0.5, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a03b0affa29926c3bac1cbab70bc6091f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03b0affa29926c3bac1cbab70bc6091f">&#9670;&nbsp;</a></span>NormalVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::NormalVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_normal;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec3 vertex_normal_camera;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 MVP;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 V;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 M;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = MVP * vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    vertex_normal_camera = (V * M * vec4(vertex_normal, 0)).xyz;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab9efbce31b15d1eef9f80c0a472f5b98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9efbce31b15d1eef9f80c0a472f5b98">&#9670;&nbsp;</a></span>PhongFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::PhongFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad239adb61f924dce852bd2e405d56b0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad239adb61f924dce852bd2e405d56b0c">&#9670;&nbsp;</a></span>PhongVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::PhongVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a37949eda6d30114657aeafdd9c6a0bdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37949eda6d30114657aeafdd9c6a0bdb">&#9670;&nbsp;</a></span>PickingFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::PickingFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec4 fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae72fda94ab673b19ab7eb8d277e5661b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae72fda94ab673b19ab7eb8d277e5661b">&#9670;&nbsp;</a></span>PickingVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::PickingVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in float vertex_index;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 MVP;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    float r, g, b, a;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = MVP * vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    r = floor(vertex_index / 16777216.0) / 255.0;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    g = mod(floor(vertex_index / 65536.0), 256.0) / 255.0;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    b = mod(floor(vertex_index / 256.0), 256.0) / 255.0;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    a = mod(vertex_index, 256.0) / 255.0;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    fragment_color = vec4(r, g, b, a);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa68d497fa9edeafcd037fdb66615be8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa68d497fa9edeafcd037fdb66615be8b">&#9670;&nbsp;</a></span>RGBDImageFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::RGBDImageFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5fc574c00b26057f918eaa6bf9745bf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fc574c00b26057f918eaa6bf9745bf3">&#9670;&nbsp;</a></span>Simple2DFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::Simple2DFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = vec4(fragment_color, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a87fe3657feeb2d08771127904919042a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87fe3657feeb2d08771127904919042a">&#9670;&nbsp;</a></span>Simple2DVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::Simple2DVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec3 fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    fragment_color = vertex_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="affacf177a9aab033fbed9ead3e2dffcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affacf177a9aab033fbed9ead3e2dffcf">&#9670;&nbsp;</a></span>SimpleBlackFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::SimpleBlackFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = vec4(0.1, 0.1, 0.1, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca66b4c7f18479f37f223c5a52ea3265"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca66b4c7f18479f37f223c5a52ea3265">&#9670;&nbsp;</a></span>SimpleBlackVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::SimpleBlackVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 MVP;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = MVP * vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8f5ffc6c46fffd6533907e1c756fe0d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f5ffc6c46fffd6533907e1c756fe0d2">&#9670;&nbsp;</a></span>SimpleFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::SimpleFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = vec4(fragment_color, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a31cf87253a59a83ede438e3eb76a025a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31cf87253a59a83ede438e3eb76a025a">&#9670;&nbsp;</a></span>SimpleVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::SimpleVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 MVP;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec3 fragment_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = MVP * vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    fragment_color = vertex_color;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3239b15ec50d41271671c3b794c6f8ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3239b15ec50d41271671c3b794c6f8ff">&#9670;&nbsp;</a></span>TexturePhongFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::TexturePhongFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a837a475c471addb4ee5dcaad8e9795"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a837a475c471addb4ee5dcaad8e9795">&#9670;&nbsp;</a></span>TexturePhongVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::TexturePhongVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7abca3b7b395149035a4dc274dc53e92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7abca3b7b395149035a4dc274dc53e92">&#9670;&nbsp;</a></span>TextureSimpleFragmentShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::TextureSimpleFragmentShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec2 fragment_uv;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec4 FragColor;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform sampler2D diffuse_texture;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    FragColor = texture(diffuse_texture, fragment_uv);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="a60460cb59e76b61dbbbfd49f40dc9400"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60460cb59e76b61dbbbfd49f40dc9400">&#9670;&nbsp;</a></span>TextureSimpleVertexShader</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* const open3d::visualization::glsl::TextureSimpleVertexShader</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= </div>
<div class="line"><span class="stringliteral">&quot;#version 330\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec3 vertex_position;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;in vec2 vertex_uv;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;uniform mat4 MVP;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;out vec2 fragment_uv;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;void main()\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    gl_Position = MVP * vec4(vertex_position, 1);\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;    fragment_uv = vertex_uv;\n&quot;</span></div>
<div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1visualization_1_1glsl.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:44 GMT -->
</html>
