<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1utility_1_1optional.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:28 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::utility::optional&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1utility.html">utility</a></li><li class="navelem"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::utility::optional&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_optional_8h_source.html">Optional.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::utility::optional&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1utility_1_1optional.59d.delay" alt=""/>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a27f4a6497fe21f63af331e07bba786d0"><td class="memItemLeft" align="right" valign="top">typedef T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a27f4a6497fe21f63af331e07bba786d0">value_type</a></td></tr>
<tr class="separator:a27f4a6497fe21f63af331e07bba786d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a470e83de2dccf8f38848d505738dc19b"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a470e83de2dccf8f38848d505738dc19b">optional</a> () noexcept</td></tr>
<tr class="separator:a470e83de2dccf8f38848d505738dc19b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65d4f25bc1e9e2c22f33c39ff02e744"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#ae65d4f25bc1e9e2c22f33c39ff02e744">optional</a> (<a class="el" href="structopen3d_1_1utility_1_1nullopt__t.3c8.de">nullopt_t</a>) noexcept</td></tr>
<tr class="separator:ae65d4f25bc1e9e2c22f33c39ff02e744"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1645860af73af0305ad93fbd22ec02cf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a1645860af73af0305ad93fbd22ec02cf">optional</a> (const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;rhs)</td></tr>
<tr class="separator:a1645860af73af0305ad93fbd22ec02cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad4ee396f459fa7e164f023b64835068"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#aad4ee396f459fa7e164f023b64835068">optional</a> (<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;&amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>)</td></tr>
<tr class="separator:aad4ee396f459fa7e164f023b64835068"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65539336402f72752cd5353761732ad3"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, TR2_OPTIONAL_REQUIRES(std::is_constructible&lt; T, U &amp;&amp; &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, in_place_t &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, optional&lt; T &gt;&gt;::value &amp;&amp; std::is_convertible&lt; U &amp;&amp;, T &gt;) &gt; </td></tr>
<tr class="memitem:a65539336402f72752cd5353761732ad3"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a65539336402f72752cd5353761732ad3">optional</a> (U &amp;&amp;u)</td></tr>
<tr class="separator:a65539336402f72752cd5353761732ad3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65539336402f72752cd5353761732ad3"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, TR2_OPTIONAL_REQUIRES(std::is_constructible&lt; T, U &amp;&amp; &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, in_place_t &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, optional&lt; T &gt;&gt;::value &amp;&amp; !std::is_convertible&lt; U &amp;&amp;, T &gt;) &gt; </td></tr>
<tr class="memitem:a65539336402f72752cd5353761732ad3"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a65539336402f72752cd5353761732ad3">optional</a> (U &amp;&amp;u)</td></tr>
<tr class="separator:a65539336402f72752cd5353761732ad3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2c0bf384784badd845ea6b4c93ae969"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:ab2c0bf384784badd845ea6b4c93ae969"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#ab2c0bf384784badd845ea6b4c93ae969">optional</a> (<a class="el" href="structopen3d_1_1utility_1_1in__place__t.452">in_place_t</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:ab2c0bf384784badd845ea6b4c93ae969"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2c00d6f1dedc034344cc4e29a492dac"><td class="memTemplParams" colspan="2">template&lt;class U , class... Args, TR2_OPTIONAL_REQUIRES( std::is_constructible&lt; T, std::initializer_list&lt; U &gt;&gt;) &gt; </td></tr>
<tr class="memitem:aa2c00d6f1dedc034344cc4e29a492dac"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#aa2c00d6f1dedc034344cc4e29a492dac">optional</a> (<a class="el" href="structopen3d_1_1utility_1_1in__place__t.452">in_place_t</a>, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</td></tr>
<tr class="separator:aa2c00d6f1dedc034344cc4e29a492dac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64ee98cad84360b7fca74b22f70f9997"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a64ee98cad84360b7fca74b22f70f9997">~optional</a> ()=default</td></tr>
<tr class="separator:a64ee98cad84360b7fca74b22f70f9997"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4db4548f1eaedea33e05e03379ee9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a1f4db4548f1eaedea33e05e03379ee9c">operator=</a> (<a class="el" href="structopen3d_1_1utility_1_1nullopt__t.3c8.de">nullopt_t</a>) noexcept</td></tr>
<tr class="separator:a1f4db4548f1eaedea33e05e03379ee9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e05d46a0c4b5ae63b12215b221527cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a0e05d46a0c4b5ae63b12215b221527cd">operator=</a> (const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;rhs)</td></tr>
<tr class="separator:a0e05d46a0c4b5ae63b12215b221527cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cf2ea3010059c0d51d9385e33cc93a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a4cf2ea3010059c0d51d9385e33cc93a1">operator=</a> (<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp;&amp;rhs) noexcept(std::is_nothrow_move_assignable&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> &amp;&amp;std::is_nothrow_move_constructible&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>)</td></tr>
<tr class="separator:a4cf2ea3010059c0d51d9385e33cc93a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd07408197ee0bc1561967b8a43c7ec"><td class="memTemplParams" colspan="2">template&lt;class U  = T&gt; </td></tr>
<tr class="memitem:a7cd07408197ee0bc1561967b8a43c7ec"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a7cd07408197ee0bc1561967b8a43c7ec">operator=</a> (U &amp;&amp;v) -&gt; typename std::enable_if&lt; std::is_constructible&lt; T, U &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> &amp;&amp;!std::is_same&lt; typename std::decay&lt; U &gt;::<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt;&gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> &amp;&amp;(std::is_scalar&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>||std::is_same&lt; typename std::decay&lt; U &gt;::<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>) &amp;&amp;std::is_assignable&lt; T &amp;, U &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> &amp; &gt;::<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a></td></tr>
<tr class="separator:a7cd07408197ee0bc1561967b8a43c7ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b0258836f97f6b8a13203cdeac5bedc"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a7b0258836f97f6b8a13203cdeac5bedc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a7b0258836f97f6b8a13203cdeac5bedc">emplace</a> (Args &amp;&amp;... args)</td></tr>
<tr class="separator:a7b0258836f97f6b8a13203cdeac5bedc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60e6562289c3e270d3f36004ef3d3029"><td class="memTemplParams" colspan="2">template&lt;class U , class... Args&gt; </td></tr>
<tr class="memitem:a60e6562289c3e270d3f36004ef3d3029"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a60e6562289c3e270d3f36004ef3d3029">emplace</a> (std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</td></tr>
<tr class="separator:a60e6562289c3e270d3f36004ef3d3029"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4f4eff2fe2c4c426660aae98bc44fc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#ab4f4eff2fe2c4c426660aae98bc44fc0">swap</a> (<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt; &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> &amp;&amp;noexcept(std::swap(std::declval&lt; T &amp; &gt;(), std::declval&lt; T &amp; &gt;())))</td></tr>
<tr class="separator:ab4f4eff2fe2c4c426660aae98bc44fc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11a9835fc9dfabb72da46cf1ef654f8a"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a11a9835fc9dfabb72da46cf1ef654f8a">operator bool</a> () const noexcept</td></tr>
<tr class="separator:a11a9835fc9dfabb72da46cf1ef654f8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a085236a0cec9d0bf26d9099d11818f39"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a085236a0cec9d0bf26d9099d11818f39">has_value</a> () const noexcept</td></tr>
<tr class="separator:a085236a0cec9d0bf26d9099d11818f39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1eb7b6e6aff8ec9fc2825554bc285aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T const  *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#ac1eb7b6e6aff8ec9fc2825554bc285aa">operator-&gt;</a> () const</td></tr>
<tr class="separator:ac1eb7b6e6aff8ec9fc2825554bc285aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91a8ea693485f314348a38d8e0fb7873"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a91a8ea693485f314348a38d8e0fb7873">operator-&gt;</a> ()</td></tr>
<tr class="separator:a91a8ea693485f314348a38d8e0fb7873"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54d30581877891d0e0ff1eb9e53fd75b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T const  &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a54d30581877891d0e0ff1eb9e53fd75b">operator*</a> () const &amp;</td></tr>
<tr class="separator:a54d30581877891d0e0ff1eb9e53fd75b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a8b7ba05e9d19bedabefc2b9b424292"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a3a8b7ba05e9d19bedabefc2b9b424292">operator*</a> () &amp;</td></tr>
<tr class="separator:a3a8b7ba05e9d19bedabefc2b9b424292"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df187ca793b80db72e2dd47bbfea5d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a1df187ca793b80db72e2dd47bbfea5d6">operator*</a> () &amp;&amp;</td></tr>
<tr class="separator:a1df187ca793b80db72e2dd47bbfea5d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35b4051fdf95f75fef135514053e63a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T const  &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> () const &amp;</td></tr>
<tr class="separator:a35b4051fdf95f75fef135514053e63a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bf38d351deb609c257a923404c1c537"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a5bf38d351deb609c257a923404c1c537">value</a> () &amp;</td></tr>
<tr class="separator:a5bf38d351deb609c257a923404c1c537"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf2e1371fc9e0411195f2b95338ec0aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#acf2e1371fc9e0411195f2b95338ec0aa">value</a> () &amp;&amp;</td></tr>
<tr class="separator:acf2e1371fc9e0411195f2b95338ec0aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f43557c0a6d95bfae19bb2d3363d7fa"><td class="memTemplParams" colspan="2">template&lt;class V &gt; </td></tr>
<tr class="memitem:a3f43557c0a6d95bfae19bb2d3363d7fa"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a3f43557c0a6d95bfae19bb2d3363d7fa">value_or</a> (V &amp;&amp;v) const &amp;</td></tr>
<tr class="separator:a3f43557c0a6d95bfae19bb2d3363d7fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a666459ee71564a4d4b28302d8735e8c6"><td class="memTemplParams" colspan="2">template&lt;class V &gt; </td></tr>
<tr class="memitem:a666459ee71564a4d4b28302d8735e8c6"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a666459ee71564a4d4b28302d8735e8c6">value_or</a> (V &amp;&amp;v) &amp;&amp;</td></tr>
<tr class="separator:a666459ee71564a4d4b28302d8735e8c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d8b79dbd30963c12ba39a1389baa36a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a8d8b79dbd30963c12ba39a1389baa36a">reset</a> () noexcept</td></tr>
<tr class="separator:a8d8b79dbd30963c12ba39a1389baa36a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a27f4a6497fe21f63af331e07bba786d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27f4a6497fe21f63af331e07bba786d0">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef T <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a27f4a6497fe21f63af331e07bba786d0">value_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a470e83de2dccf8f38848d505738dc19b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a470e83de2dccf8f38848d505738dc19b">&#9670;&nbsp;</a></span>optional() <span class="overload">[1/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae65d4f25bc1e9e2c22f33c39ff02e744"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae65d4f25bc1e9e2c22f33c39ff02e744">&#9670;&nbsp;</a></span>optional() <span class="overload">[2/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1utility_1_1nullopt__t.3c8.de">nullopt_t</a>&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1645860af73af0305ad93fbd22ec02cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1645860af73af0305ad93fbd22ec02cf">&#9670;&nbsp;</a></span>optional() <span class="overload">[3/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aad4ee396f459fa7e164f023b64835068"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad4ee396f459fa7e164f023b64835068">&#9670;&nbsp;</a></span>optional() <span class="overload">[4/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a65539336402f72752cd5353761732ad3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65539336402f72752cd5353761732ad3">&#9670;&nbsp;</a></span>optional() <span class="overload">[5/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, TR2_OPTIONAL_REQUIRES(std::is_constructible&lt; T, U &amp;&amp; &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, in_place_t &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, optional&lt; T &gt;&gt;::value &amp;&amp; std::is_convertible&lt; U &amp;&amp;, T &gt;) &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a65539336402f72752cd5353761732ad3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65539336402f72752cd5353761732ad3">&#9670;&nbsp;</a></span>optional() <span class="overload">[6/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, TR2_OPTIONAL_REQUIRES(std::is_constructible&lt; T, U &amp;&amp; &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, in_place_t &gt;::value &amp;&amp; !std::is_same&lt; typename std::decay&lt; U &gt;::type, optional&lt; T &gt;&gt;::value &amp;&amp; !std::is_convertible&lt; U &amp;&amp;, T &gt;) &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab2c0bf384784badd845ea6b4c93ae969"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2c0bf384784badd845ea6b4c93ae969">&#9670;&nbsp;</a></span>optional() <span class="overload">[7/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1utility_1_1in__place__t.452">in_place_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa2c00d6f1dedc034344cc4e29a492dac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2c00d6f1dedc034344cc4e29a492dac">&#9670;&nbsp;</a></span>optional() <span class="overload">[8/8]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class U , class... Args, TR2_OPTIONAL_REQUIRES( std::is_constructible&lt; T, std::initializer_list&lt; U &gt;&gt;) &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1utility_1_1in__place__t.452">in_place_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; U &gt;&#160;</td>
          <td class="paramname"><em>il</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a64ee98cad84360b7fca74b22f70f9997"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64ee98cad84360b7fca74b22f70f9997">&#9670;&nbsp;</a></span>~optional()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::~<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7b0258836f97f6b8a13203cdeac5bedc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b0258836f97f6b8a13203cdeac5bedc">&#9670;&nbsp;</a></span>emplace() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a60e6562289c3e270d3f36004ef3d3029"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60e6562289c3e270d3f36004ef3d3029">&#9670;&nbsp;</a></span>emplace() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class U , class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; U &gt;&#160;</td>
          <td class="paramname"><em>il</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a085236a0cec9d0bf26d9099d11818f39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a085236a0cec9d0bf26d9099d11818f39">&#9670;&nbsp;</a></span>has_value()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::has_value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a11a9835fc9dfabb72da46cf1ef654f8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11a9835fc9dfabb72da46cf1ef654f8a">&#9670;&nbsp;</a></span>operator bool()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator bool </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3a8b7ba05e9d19bedabefc2b9b424292"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a8b7ba05e9d19bedabefc2b9b424292">&#9670;&nbsp;</a></span>operator*() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1df187ca793b80db72e2dd47bbfea5d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1df187ca793b80db72e2dd47bbfea5d6">&#9670;&nbsp;</a></span>operator*() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T&amp;&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> &amp;&amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a54d30581877891d0e0ff1eb9e53fd75b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54d30581877891d0e0ff1eb9e53fd75b">&#9670;&nbsp;</a></span>operator*() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T const&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a91a8ea693485f314348a38d8e0fb7873"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91a8ea693485f314348a38d8e0fb7873">&#9670;&nbsp;</a></span>operator-&gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T* <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1eb7b6e6aff8ec9fc2825554bc285aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1eb7b6e6aff8ec9fc2825554bc285aa">&#9670;&nbsp;</a></span>operator-&gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T const* <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0e05d46a0c4b5ae63b12215b221527cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e05d46a0c4b5ae63b12215b221527cd">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1f4db4548f1eaedea33e05e03379ee9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f4db4548f1eaedea33e05e03379ee9c">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1utility_1_1nullopt__t.3c8.de">nullopt_t</a>&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4cf2ea3010059c0d51d9385e33cc93a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cf2ea3010059c0d51d9385e33cc93a1">&#9670;&nbsp;</a></span>operator=() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7cd07408197ee0bc1561967b8a43c7ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cd07408197ee0bc1561967b8a43c7ec">&#9670;&nbsp;</a></span>operator=() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class U  = T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">U &amp;&amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td> -&gt; typename std::enable_if&lt;
            std::is_constructible&lt;T, U&gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> &amp;&amp;
                    !std::is_same&lt;typename std::decay&lt;U&gt;::<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>,
                                  <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt;T&gt;&gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> &amp;&amp;
                    (std::is_scalar&lt;T&gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a> ||
                     std::is_same&lt;typename std::decay&lt;U&gt;::<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, T&gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>) &amp;&amp;
                    std::is_assignable&lt;T&amp;, U&gt;::<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay#a35b4051fdf95f75fef135514053e63a6">value</a>,
            <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&amp;&gt;::<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a> </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8d8b79dbd30963c12ba39a1389baa36a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d8b79dbd30963c12ba39a1389baa36a">&#9670;&nbsp;</a></span>reset()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::reset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab4f4eff2fe2c4c426660aae98bc44fc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4f4eff2fe2c4c426660aae98bc44fc0">&#9670;&nbsp;</a></span>swap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">optional</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5bf38d351deb609c257a923404c1c537"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bf38d351deb609c257a923404c1c537">&#9670;&nbsp;</a></span>value() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acf2e1371fc9e0411195f2b95338ec0aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf2e1371fc9e0411195f2b95338ec0aa">&#9670;&nbsp;</a></span>value() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T&amp;&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> &amp;&amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a35b4051fdf95f75fef135514053e63a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35b4051fdf95f75fef135514053e63a6">&#9670;&nbsp;</a></span>value() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_optional_8h.html#a8df785cb8c5588e7ac8b1cf377f419c5">TR2_OPTIONAL_HOST_CONSTEXPR</a> T const&amp; <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a666459ee71564a4d4b28302d8735e8c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a666459ee71564a4d4b28302d8735e8c6">&#9670;&nbsp;</a></span>value_or() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class V &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::value_or </td>
          <td>(</td>
          <td class="paramtype">V &amp;&amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td> &amp;&amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3f43557c0a6d95bfae19bb2d3363d7fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f43557c0a6d95bfae19bb2d3363d7fa">&#9670;&nbsp;</a></span>value_or() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<div class="memtemplate">
template&lt;class V &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">open3d::utility::optional</a>&lt; T &gt;::value_or </td>
          <td>(</td>
          <td class="paramtype">V &amp;&amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td> const &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/utility/<a class="el" href="_optional_8h_source.html">Optional.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1utility_1_1optional.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:29 GMT -->
</html>
