<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1kernel.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:55 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::pipelines::kernel Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines.33e.delaye">pipelines</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel">kernel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::pipelines::kernel Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_">odometry</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab4cc01bf102c509ac0e602db04d66c84"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ab4cc01bf102c509ac0e602db04d66c84">ComputeFPFHFeature</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;indices, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;distance2, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;counts, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;fpfhs)</td></tr>
<tr class="separator:ab4cc01bf102c509ac0e602db04d66c84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac02d7fefe9a4e97ede4bcc1cc248a099"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ac02d7fefe9a4e97ede4bcc1cc248a099">ComputeFPFHFeatureCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;indices, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;distance2, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;counts, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;fpfhs)</td></tr>
<tr class="separator:ac02d7fefe9a4e97ede4bcc1cc248a099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a202004528f68680021b645b1b1219a20"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a202004528f68680021b645b1b1219a20"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a202004528f68680021b645b1b1219a20">ComputePairFeature</a> (const scalar_t *p1, const scalar_t *n1, const scalar_t *p2, const scalar_t *n2, scalar_t *feature)</td></tr>
<tr class="separator:a202004528f68680021b645b1b1219a20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa419a62c496dcec9b6ee68adcecced5e"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:aa419a62c496dcec9b6ee68adcecced5e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#aa419a62c496dcec9b6ee68adcecced5e">UpdateSPFHFeature</a> (const scalar_t *feature, int64_t idx, scalar_t hist_incr, scalar_t *spfh)</td></tr>
<tr class="separator:aa419a62c496dcec9b6ee68adcecced5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdd8bfa0e77af52d3f637e94fdada6f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#acdd8bfa0e77af52d3f637e94fdada6f2">FillInRigidAlignmentTerm</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ti_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Tj_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ri_normal_ps, int i, int j, float threshold)</td></tr>
<tr class="separator:acdd8bfa0e77af52d3f637e94fdada6f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c83970325b9e37836fc4a3e9afaf0ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a8c83970325b9e37836fc4a3e9afaf0ac">FillInSLACAlignmentTerm</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ti_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Tj_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normal_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ri_normal_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;RjT_Ri_normal_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_idx_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_idx_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_ratio_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_ratio_ps, int i, int j, int n, float threshold)</td></tr>
<tr class="separator:a8c83970325b9e37836fc4a3e9afaf0ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45a260d66e35fff2949e00501574ec67"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a45a260d66e35fff2949e00501574ec67">FillInSLACRegularizerTerm</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_idx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_nbs_idx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_nbs_mask, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;positions_init, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;positions_curr, float weight, int n, int anchor_idx)</td></tr>
<tr class="separator:a45a260d66e35fff2949e00501574ec67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a706728cc875042e1e929f669adb8c817"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a706728cc875042e1e929f669adb8c817">FillInRigidAlignmentTermCPU</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ti_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Tj_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ri_normal_ps, int i, int j, float threshold)</td></tr>
<tr class="separator:a706728cc875042e1e929f669adb8c817"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22495f16b69ff188a9915b2d075cb17a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a22495f16b69ff188a9915b2d075cb17a">FillInSLACAlignmentTermCPU</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ti_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Tj_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normal_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ri_normal_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;RjT_Ri_normal_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_idx_ps, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_idx_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_ratio_qs, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_ratio_ps, int i, int j, int n, float threshold)</td></tr>
<tr class="separator:a22495f16b69ff188a9915b2d075cb17a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1587b9e8be2fa06a101269797ca13d1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#af1587b9e8be2fa06a101269797ca13d1">FillInSLACRegularizerTermCPU</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_idx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_nbs_idx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_nbs_mask, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;positions_init, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;positions_curr, float weight, int n, int anchor_idx)</td></tr>
<tr class="separator:af1587b9e8be2fa06a101269797ca13d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fcf43c5bb7ba457c12e58629f2f30e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a9fcf43c5bb7ba457c12e58629f2f30e9">ComputePosePointToPlane</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;kernel)</td></tr>
<tr class="memdesc:a9fcf43c5bb7ba457c12e58629f2f30e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes pose for point to plane registration method.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a9fcf43c5bb7ba457c12e58629f2f30e9">More...</a><br /></td></tr>
<tr class="separator:a9fcf43c5bb7ba457c12e58629f2f30e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d121cf1e5069b9488fc05567c6fd25a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a9d121cf1e5069b9488fc05567c6fd25a">ComputePoseColoredICP</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_color_gradients, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;kernel, const double &amp;lambda_geometric)</td></tr>
<tr class="memdesc:a9d121cf1e5069b9488fc05567c6fd25a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes pose for colored-icp registration method.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a9d121cf1e5069b9488fc05567c6fd25a">More...</a><br /></td></tr>
<tr class="separator:a9d121cf1e5069b9488fc05567c6fd25a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd60e7f343efdf99987dd0261f220a1"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#aedd60e7f343efdf99987dd0261f220a1">ComputeRtPointToPoint</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices)</td></tr>
<tr class="memdesc:aedd60e7f343efdf99987dd0261f220a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes (R) Rotation {3,3} and (t) translation {3,} for point to point registration method.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#aedd60e7f343efdf99987dd0261f220a1">More...</a><br /></td></tr>
<tr class="separator:aedd60e7f343efdf99987dd0261f220a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d0c92e5f9238fd4e21164ba5b8a6fb9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a7d0c92e5f9238fd4e21164ba5b8a6fb9">ComputeInformationMatrix</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_positions, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices)</td></tr>
<tr class="memdesc:a7d0c92e5f9238fd4e21164ba5b8a6fb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes <code>Information Matrix</code> of shape {6, 6}, of dtype <code>Float64</code> on device <code>CPU:0</code>, from the target point cloud and correspondence indices w.r.t. target point cloud. Only target positions and correspondence indices are required.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a7d0c92e5f9238fd4e21164ba5b8a6fb9">More...</a><br /></td></tr>
<tr class="separator:a7d0c92e5f9238fd4e21164ba5b8a6fb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30eaca436055b0c611b552177ac4a2e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a30eaca436055b0c611b552177ac4a2e9">ComputePosePointToPlaneCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;pose, float &amp;residual, int &amp;inlier_count, const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;dtype, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;kernel)</td></tr>
<tr class="separator:a30eaca436055b0c611b552177ac4a2e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8244ba7612b8202dfdfbb79b1c2bcfdc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a8244ba7612b8202dfdfbb79b1c2bcfdc">ComputePoseColoredICPCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_color_gradients, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;pose, float &amp;residual, int &amp;inlier_count, const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;dtype, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;kernel, const double &amp;lambda_geometric)</td></tr>
<tr class="separator:a8244ba7612b8202dfdfbb79b1c2bcfdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1900dd51ddd838bd5c97b81678abbcdc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a1900dd51ddd838bd5c97b81678abbcdc">ComputeRtPointToPointCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;corres, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;R, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;t, int &amp;inlier_count, const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;dtype, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device)</td></tr>
<tr class="separator:a1900dd51ddd838bd5c97b81678abbcdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8938ae9e3d995c22bbdd7565ee2f002b"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a8938ae9e3d995c22bbdd7565ee2f002b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a8938ae9e3d995c22bbdd7565ee2f002b">ComputeInformationMatrixKernelCPU</a> (const scalar_t *target_points_ptr, const int64_t *correspondence_indices, const int n, scalar_t *global_sum)</td></tr>
<tr class="separator:a8938ae9e3d995c22bbdd7565ee2f002b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11b827e2d567a09e34045e0f66e5152c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a11b827e2d567a09e34045e0f66e5152c">ComputeInformationMatrixCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;correspondence_indices, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;information_matrix, const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;dtype, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device)</td></tr>
<tr class="separator:a11b827e2d567a09e34045e0f66e5152c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03851e37dc2e142c6fdde71675fc6717"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a03851e37dc2e142c6fdde71675fc6717"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a03851e37dc2e142c6fdde71675fc6717">GetJacobianPointToPlane</a> (int64_t workload_idx, const scalar_t *source_points_ptr, const scalar_t *target_points_ptr, const scalar_t *target_normals_ptr, const int64_t *correspondence_indices, scalar_t *J_ij, scalar_t &amp;r)</td></tr>
<tr class="separator:a03851e37dc2e142c6fdde71675fc6717"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1b344aae0333d3103182f2fd91afa23"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ae1b344aae0333d3103182f2fd91afa23">GetJacobianPointToPlane</a> (int64_t workload_idx, const float *source_points_ptr, const float *target_points_ptr, const float *target_normals_ptr, const int64_t *correspondence_indices, float *J_ij, float &amp;r)</td></tr>
<tr class="separator:ae1b344aae0333d3103182f2fd91afa23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33db380a56af698f56323716fd9f8ddd"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a33db380a56af698f56323716fd9f8ddd">GetJacobianPointToPlane</a> (int64_t workload_idx, const double *source_points_ptr, const double *target_points_ptr, const double *target_normals_ptr, const int64_t *correspondence_indices, double *J_ij, double &amp;r)</td></tr>
<tr class="separator:a33db380a56af698f56323716fd9f8ddd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb57089da1e9c9be13dd1fe62194cb8"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:abeb57089da1e9c9be13dd1fe62194cb8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#abeb57089da1e9c9be13dd1fe62194cb8">GetJacobianColoredICP</a> (const int64_t workload_idx, const scalar_t *source_points_ptr, const scalar_t *source_colors_ptr, const scalar_t *target_points_ptr, const scalar_t *target_normals_ptr, const scalar_t *target_colors_ptr, const scalar_t *target_color_gradients_ptr, const int64_t *correspondence_indices, const scalar_t &amp;sqrt_lambda_geometric, const scalar_t &amp;sqrt_lambda_photometric, scalar_t *J_G, scalar_t *J_I, scalar_t &amp;r_G, scalar_t &amp;r_I)</td></tr>
<tr class="separator:abeb57089da1e9c9be13dd1fe62194cb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88ed9a13e3beba97b97326ee55f1455c"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a88ed9a13e3beba97b97326ee55f1455c">GetJacobianColoredICP</a> (const int64_t workload_idx, const float *source_points_ptr, const float *source_colors_ptr, const float *target_points_ptr, const float *target_normals_ptr, const float *target_colors_ptr, const float *target_color_gradients_ptr, const int64_t *correspondence_indices, const float &amp;sqrt_lambda_geometric, const float &amp;sqrt_lambda_photometric, float *J_G, float *J_I, float &amp;r_G, float &amp;r_I)</td></tr>
<tr class="separator:a88ed9a13e3beba97b97326ee55f1455c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a187e1e9c563d7762ec419866c6fedbdc"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a187e1e9c563d7762ec419866c6fedbdc">GetJacobianColoredICP</a> (const int64_t workload_idx, const double *source_points_ptr, const double *source_colors_ptr, const double *target_points_ptr, const double *target_normals_ptr, const double *target_colors_ptr, const double *target_color_gradients_ptr, const int64_t *correspondence_indices, const double &amp;sqrt_lambda_geometric, const double &amp;sqrt_lambda_photometric, double *J_G, double *J_I, double &amp;r_G, double &amp;r_I)</td></tr>
<tr class="separator:a187e1e9c563d7762ec419866c6fedbdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa6da1daf96f9b097786c78528dae846"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:afa6da1daf96f9b097786c78528dae846"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#afa6da1daf96f9b097786c78528dae846">GetInformationJacobians</a> (int64_t workload_idx, const scalar_t *target_points_ptr, const int64_t *correspondence_indices, scalar_t *jacobian_x, scalar_t *jacobian_y, scalar_t *jacobian_z)</td></tr>
<tr class="separator:afa6da1daf96f9b097786c78528dae846"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a484d4509b62152afbe83da2cc9959af5"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a484d4509b62152afbe83da2cc9959af5">GetInformationJacobians</a> (int64_t workload_idx, const float *target_points_ptr, const int64_t *correspondence_indices, float *jacobian_x, float *jacobian_y, float *jacobian_z)</td></tr>
<tr class="separator:a484d4509b62152afbe83da2cc9959af5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90e85690149481c6c07b0f08cc2a8550"><td class="memItemLeft" align="right" valign="top">template bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a90e85690149481c6c07b0f08cc2a8550">GetInformationJacobians</a> (int64_t workload_idx, const double *target_points_ptr, const int64_t *correspondence_indices, double *jacobian_x, double *jacobian_y, double *jacobian_z)</td></tr>
<tr class="separator:a90e85690149481c6c07b0f08cc2a8550"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae965cb8ee31e1ee93ba370d1dd807b34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ae965cb8ee31e1ee93ba370d1dd807b34">RtToTransformation</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;R, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;t)</td></tr>
<tr class="memdesc:ae965cb8ee31e1ee93ba370d1dd807b34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert rotation and translation to the transformation matrix.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ae965cb8ee31e1ee93ba370d1dd807b34">More...</a><br /></td></tr>
<tr class="separator:ae965cb8ee31e1ee93ba370d1dd807b34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74f8e96901786e124d265191b293138"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ac74f8e96901786e124d265191b293138">PoseToTransformation</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;pose)</td></tr>
<tr class="memdesc:ac74f8e96901786e124d265191b293138"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert pose to the transformation matrix.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#ac74f8e96901786e124d265191b293138">More...</a><br /></td></tr>
<tr class="separator:ac74f8e96901786e124d265191b293138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1f9319035e96ad8be4fca953b38c181"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#aa1f9319035e96ad8be4fca953b38c181">DecodeAndSolve6x6</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;A_reduction, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count)</td></tr>
<tr class="memdesc:aa1f9319035e96ad8be4fca953b38c181"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes a 6x6 linear system from a compressed 29x1 tensor.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#aa1f9319035e96ad8be4fca953b38c181">More...</a><br /></td></tr>
<tr class="separator:aa1f9319035e96ad8be4fca953b38c181"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88341cf8659cae2a15c8eb9c84012ad4"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a88341cf8659cae2a15c8eb9c84012ad4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a88341cf8659cae2a15c8eb9c84012ad4">PoseToTransformationImpl</a> (scalar_t *transformation_ptr, const scalar_t *pose_ptr)</td></tr>
<tr class="memdesc:a88341cf8659cae2a15c8eb9c84012ad4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shared implementation for PoseToTransformation function.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a88341cf8659cae2a15c8eb9c84012ad4">More...</a><br /></td></tr>
<tr class="separator:a88341cf8659cae2a15c8eb9c84012ad4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab4cc01bf102c509ac0e602db04d66c84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4cc01bf102c509ac0e602db04d66c84">&#9670;&nbsp;</a></span>ComputeFPFHFeature()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputeFPFHFeature </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>distance2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>counts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>fpfhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac02d7fefe9a4e97ede4bcc1cc248a099"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac02d7fefe9a4e97ede4bcc1cc248a099">&#9670;&nbsp;</a></span>ComputeFPFHFeatureCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputeFPFHFeatureCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>distance2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>counts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>fpfhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7d0c92e5f9238fd4e21164ba5b8a6fb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d0c92e5f9238fd4e21164ba5b8a6fb9">&#9670;&nbsp;</a></span>ComputeInformationMatrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::kernel::ComputeInformationMatrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes <code>Information Matrix</code> of shape {6, 6}, of dtype <code>Float64</code> on device <code>CPU:0</code>, from the target point cloud and correspondence indices w.r.t. target point cloud. Only target positions and correspondence indices are required. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target_positions</td><td>The target point positions. </td></tr>
    <tr><td class="paramname">correspondence_indices</td><td>Tensor of type Int64 containing indices of corresponding target positions, where the value is the target index and the index of the value itself is the source index. It contains -1 as value at index with no correspondence. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a11b827e2d567a09e34045e0f66e5152c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11b827e2d567a09e34045e0f66e5152c">&#9670;&nbsp;</a></span>ComputeInformationMatrixCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputeInformationMatrixCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>information_matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8938ae9e3d995c22bbdd7565ee2f002b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8938ae9e3d995c22bbdd7565ee2f002b">&#9670;&nbsp;</a></span>ComputeInformationMatrixKernelCPU()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputeInformationMatrixKernelCPU </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>global_sum</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a202004528f68680021b645b1b1219a20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a202004528f68680021b645b1b1219a20">&#9670;&nbsp;</a></span>ComputePairFeature()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::pipelines::kernel::ComputePairFeature </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>n1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>n2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>feature</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9d121cf1e5069b9488fc05567c6fd25a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d121cf1e5069b9488fc05567c6fd25a">&#9670;&nbsp;</a></span>ComputePoseColoredICP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::kernel::ComputePoseColoredICP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_color_gradients</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lambda_geometric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes pose for colored-icp registration method. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source_positions</td><td>source point positions of Float32 or Float64 dtype. </td></tr>
    <tr><td class="paramname">source_colors</td><td>source point colors of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">target_positions</td><td>target point positions of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">target_normals</td><td>target point normals of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">target_colors</td><td>target point colors of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">target_color_gradients</td><td>targets point color gradients of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">correspondence_indices</td><td>Tensor of type Int64 containing indices of corresponding target positions, where the value is the target index and the index of the value itself is the source index. It contains -1 as value at index with no correspondence. </td></tr>
    <tr><td class="paramname">kernel</td><td>statistical robust kernel for outlier rejection. </td></tr>
    <tr><td class="paramname">lambda_geometric</td><td><code>λ ∈ [0,1]</code> in the overall energy <code>λEG + (1−λ)EC</code>. Refer the documentation of Colored-ICP for more information. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pose [alpha beta gamma, tx, ty, tz], a shape {6} tensor of dtype Float64, where alpha, beta, gamma are the Euler angles in the ZYX order. </dd></dl>

</div>
</div>
<a id="a8244ba7612b8202dfdfbb79b1c2bcfdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8244ba7612b8202dfdfbb79b1c2bcfdc">&#9670;&nbsp;</a></span>ComputePoseColoredICPCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputePoseColoredICPCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_color_gradients</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>pose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>lambda_geometric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9fcf43c5bb7ba457c12e58629f2f30e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fcf43c5bb7ba457c12e58629f2f30e9">&#9670;&nbsp;</a></span>ComputePosePointToPlane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::kernel::ComputePosePointToPlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes pose for point to plane registration method. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source_positions</td><td>source point positions of Float32 or Float64 dtype. </td></tr>
    <tr><td class="paramname">target_positions</td><td>target point positions of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">target_normals</td><td>target point normals of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">correspondence_indices</td><td>Tensor of type Int64 containing indices of corresponding target positions, where the value is the target index and the index of the value itself is the source index. It contains -1 as value at index with no correspondence. </td></tr>
    <tr><td class="paramname">kernel</td><td>statistical robust kernel for outlier rejection. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pose [alpha beta gamma, tx, ty, tz], a shape {6} tensor of dtype Float64, where alpha, beta, gamma are the Euler angles in the ZYX order. </dd></dl>

</div>
</div>
<a id="a30eaca436055b0c611b552177ac4a2e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30eaca436055b0c611b552177ac4a2e9">&#9670;&nbsp;</a></span>ComputePosePointToPlaneCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputePosePointToPlaneCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>pose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">registration::RobustKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aedd60e7f343efdf99987dd0261f220a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedd60e7f343efdf99987dd0261f220a1">&#9670;&nbsp;</a></span>ComputeRtPointToPoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::pipelines::kernel::ComputeRtPointToPoint </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_positions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes (R) Rotation {3,3} and (t) translation {3,} for point to point registration method. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source_positions</td><td>source point positions of Float32 or Float64 dtype. </td></tr>
    <tr><td class="paramname">target_positions</td><td>target point positions of same dtype as source point positions. </td></tr>
    <tr><td class="paramname">correspondence_indices</td><td>Tensor of type Int64 containing indices of corresponding target positions, where the value is the target index and the index of the value itself is the source index. It contains -1 as value at index with no correspondence. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>tuple of (R, t). [Dtype: Float64]. </dd></dl>

</div>
</div>
<a id="a1900dd51ddd838bd5c97b81678abbcdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1900dd51ddd838bd5c97b81678abbcdc">&#9670;&nbsp;</a></span>ComputeRtPointToPointCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::ComputeRtPointToPointCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>corres</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa1f9319035e96ad8be4fca953b38c181"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1f9319035e96ad8be4fca953b38c181">&#9670;&nbsp;</a></span>DecodeAndSolve6x6()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::DecodeAndSolve6x6 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>A_reduction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Decodes a 6x6 linear system from a compressed 29x1 tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">A_reduction</td><td>1x29 tensor storing a linear system, (21 for \(J^T J\) matrix, 6 for \(J^T r\), 1 for residual, 1 for inlier count). </td></tr>
    <tr><td class="paramname">delta</td><td>6d tensor for a se3 tangent vector. </td></tr>
    <tr><td class="paramname">inlier_residual</td><td>Float residual for the inliers. </td></tr>
    <tr><td class="paramname">inlier_count</td><td>Int number of inliers. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acdd8bfa0e77af52d3f637e94fdada6f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdd8bfa0e77af52d3f637e94fdada6f2">&#9670;&nbsp;</a></span>FillInRigidAlignmentTerm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::FillInRigidAlignmentTerm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>AtA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Atb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ti_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Tj_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ri_normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a706728cc875042e1e929f669adb8c817"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a706728cc875042e1e929f669adb8c817">&#9670;&nbsp;</a></span>FillInRigidAlignmentTermCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::FillInRigidAlignmentTermCPU </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>AtA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Atb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ti_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Tj_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ri_normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8c83970325b9e37836fc4a3e9afaf0ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c83970325b9e37836fc4a3e9afaf0ac">&#9670;&nbsp;</a></span>FillInSLACAlignmentTerm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::FillInSLACAlignmentTerm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>AtA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Atb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ti_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Tj_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ri_normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>RjT_Ri_normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_idx_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_idx_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_ratio_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_ratio_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a22495f16b69ff188a9915b2d075cb17a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22495f16b69ff188a9915b2d075cb17a">&#9670;&nbsp;</a></span>FillInSLACAlignmentTermCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::FillInSLACAlignmentTermCPU </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>AtA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Atb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ti_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Tj_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Ri_normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>RjT_Ri_normal_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_idx_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_idx_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_ratio_qs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>cgrid_ratio_ps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a45a260d66e35fff2949e00501574ec67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45a260d66e35fff2949e00501574ec67">&#9670;&nbsp;</a></span>FillInSLACRegularizerTerm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::FillInSLACRegularizerTerm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>AtA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Atb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>grid_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>grid_nbs_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>grid_nbs_mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>positions_init</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>positions_curr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>anchor_idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1587b9e8be2fa06a101269797ca13d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1587b9e8be2fa06a101269797ca13d1">&#9670;&nbsp;</a></span>FillInSLACRegularizerTermCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::FillInSLACRegularizerTermCPU </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>AtA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>Atb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>grid_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>grid_nbs_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>grid_nbs_mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>positions_init</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>positions_curr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>anchor_idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a90e85690149481c6c07b0f08cc2a8550"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90e85690149481c6c07b0f08cc2a8550">&#9670;&nbsp;</a></span>GetInformationJacobians() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template bool open3d::t::pipelines::kernel::GetInformationJacobians </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>jacobian_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>jacobian_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>jacobian_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a484d4509b62152afbe83da2cc9959af5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a484d4509b62152afbe83da2cc9959af5">&#9670;&nbsp;</a></span>GetInformationJacobians() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template bool open3d::t::pipelines::kernel::GetInformationJacobians </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>jacobian_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>jacobian_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>jacobian_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afa6da1daf96f9b097786c78528dae846"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa6da1daf96f9b097786c78528dae846">&#9670;&nbsp;</a></span>GetInformationJacobians() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::GetInformationJacobians </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>jacobian_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>jacobian_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>jacobian_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a187e1e9c563d7762ec419866c6fedbdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a187e1e9c563d7762ec419866c6fedbdc">&#9670;&nbsp;</a></span>GetJacobianColoredICP() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template bool open3d::t::pipelines::kernel::GetJacobianColoredICP </td>
          <td>(</td>
          <td class="paramtype">const int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>source_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>source_colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_color_gradients_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>sqrt_lambda_geometric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>sqrt_lambda_photometric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>J_G</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>J_I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>r_G</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>r_I</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a88ed9a13e3beba97b97326ee55f1455c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88ed9a13e3beba97b97326ee55f1455c">&#9670;&nbsp;</a></span>GetJacobianColoredICP() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template bool open3d::t::pipelines::kernel::GetJacobianColoredICP </td>
          <td>(</td>
          <td class="paramtype">const int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>source_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>source_colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_color_gradients_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>sqrt_lambda_geometric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>sqrt_lambda_photometric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_G</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r_G</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r_I</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abeb57089da1e9c9be13dd1fe62194cb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeb57089da1e9c9be13dd1fe62194cb8">&#9670;&nbsp;</a></span>GetJacobianColoredICP() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::GetJacobianColoredICP </td>
          <td>(</td>
          <td class="paramtype">const int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>source_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>source_colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_color_gradients_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t &amp;&#160;</td>
          <td class="paramname"><em>sqrt_lambda_geometric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t &amp;&#160;</td>
          <td class="paramname"><em>sqrt_lambda_photometric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>J_G</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>J_I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t &amp;&#160;</td>
          <td class="paramname"><em>r_G</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t &amp;&#160;</td>
          <td class="paramname"><em>r_I</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a33db380a56af698f56323716fd9f8ddd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33db380a56af698f56323716fd9f8ddd">&#9670;&nbsp;</a></span>GetJacobianPointToPlane() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template bool open3d::t::pipelines::kernel::GetJacobianPointToPlane </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>source_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>target_normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>J_ij</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae1b344aae0333d3103182f2fd91afa23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1b344aae0333d3103182f2fd91afa23">&#9670;&nbsp;</a></span>GetJacobianPointToPlane() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template bool open3d::t::pipelines::kernel::GetJacobianPointToPlane </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>source_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>target_normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_ij</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a03851e37dc2e142c6fdde71675fc6717"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03851e37dc2e142c6fdde71675fc6717">&#9670;&nbsp;</a></span>GetJacobianPointToPlane() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::GetJacobianPointToPlane </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>workload_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>source_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>target_normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t *&#160;</td>
          <td class="paramname"><em>correspondence_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>J_ij</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t &amp;&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac74f8e96901786e124d265191b293138"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac74f8e96901786e124d265191b293138">&#9670;&nbsp;</a></span>PoseToTransformation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::kernel::PoseToTransformation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>pose</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert pose to the transformation matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pose</td><td>Pose [alpha beta gamma, tx, ty, tz], a shape {6} tensor of dtype Float32, where alpha, beta, gamma are the Euler angles in the ZYX order. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformation, a tensor of shape {4, 4}, dtype and device same as pose. </dd></dl>

</div>
</div>
<a id="a88341cf8659cae2a15c8eb9c84012ad4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88341cf8659cae2a15c8eb9c84012ad4">&#9670;&nbsp;</a></span>PoseToTransformationImpl()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::pipelines::kernel::PoseToTransformationImpl </td>
          <td>(</td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>transformation_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>pose_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shared implementation for PoseToTransformation function. </p>

</div>
</div>
<a id="ae965cb8ee31e1ee93ba370d1dd807b34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae965cb8ee31e1ee93ba370d1dd807b34">&#9670;&nbsp;</a></span>RtToTransformation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::kernel::RtToTransformation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert rotation and translation to the transformation matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>Rotation, a tensor of shape {3, 3}. </td></tr>
    <tr><td class="paramname">t</td><td>Translation, a tensor of shape {3,}. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformation, a tensor of shape {4, 4}, dtype and device same as R and t. </dd></dl>

</div>
</div>
<a id="aa419a62c496dcec9b6ee68adcecced5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa419a62c496dcec9b6ee68adcecced5e">&#9670;&nbsp;</a></span>UpdateSPFHFeature()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::pipelines::kernel::UpdateSPFHFeature </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t&#160;</td>
          <td class="paramname"><em>hist_incr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>spfh</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1kernel.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:55 GMT -->
</html>
