<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_std_allocator.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:23 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::StdAllocator&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::StdAllocator&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_std_allocator_8h_source.html">StdAllocator.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a5642540c2a9446e0b31a1ae6092ab175"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a5642540c2a9446e0b31a1ae6092ab175">value_type</a> = T</td></tr>
<tr class="memdesc:a5642540c2a9446e0b31a1ae6092ab175"><td class="mdescLeft">&#160;</td><td class="mdescRight">T.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a5642540c2a9446e0b31a1ae6092ab175">More...</a><br /></td></tr>
<tr class="separator:a5642540c2a9446e0b31a1ae6092ab175"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adbc29935230de46c02e90a089885ea68"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#adbc29935230de46c02e90a089885ea68">StdAllocator</a> ()=default</td></tr>
<tr class="memdesc:adbc29935230de46c02e90a089885ea68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#adbc29935230de46c02e90a089885ea68">More...</a><br /></td></tr>
<tr class="separator:adbc29935230de46c02e90a089885ea68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa159336b599fd920ac3c70b2fe0107ce"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#aa159336b599fd920ac3c70b2fe0107ce">StdAllocator</a> (int device_id)</td></tr>
<tr class="memdesc:aa159336b599fd920ac3c70b2fe0107ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor from device.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#aa159336b599fd920ac3c70b2fe0107ce">More...</a><br /></td></tr>
<tr class="separator:aa159336b599fd920ac3c70b2fe0107ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a342176a83e4529849720a3c3a801bd6b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a342176a83e4529849720a3c3a801bd6b">StdAllocator</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;)=default</td></tr>
<tr class="memdesc:a342176a83e4529849720a3c3a801bd6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default copy constructor.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a342176a83e4529849720a3c3a801bd6b">More...</a><br /></td></tr>
<tr class="separator:a342176a83e4529849720a3c3a801bd6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80a4aa737a016b7f2505d6d64a0a4f29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a80a4aa737a016b7f2505d6d64a0a4f29">operator=</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;)=default</td></tr>
<tr class="memdesc:a80a4aa737a016b7f2505d6d64a0a4f29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default copy assignment operator.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a80a4aa737a016b7f2505d6d64a0a4f29">More...</a><br /></td></tr>
<tr class="separator:a80a4aa737a016b7f2505d6d64a0a4f29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae760a9568ff2fd507a57dd3eef38803f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#ae760a9568ff2fd507a57dd3eef38803f">StdAllocator</a> (<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ae760a9568ff2fd507a57dd3eef38803f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#ae760a9568ff2fd507a57dd3eef38803f">More...</a><br /></td></tr>
<tr class="separator:ae760a9568ff2fd507a57dd3eef38803f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affb2db3ddd018a6c29215f3f8bbeed72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#affb2db3ddd018a6c29215f3f8bbeed72">operator=</a> (<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:affb2db3ddd018a6c29215f3f8bbeed72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#affb2db3ddd018a6c29215f3f8bbeed72">More...</a><br /></td></tr>
<tr class="separator:affb2db3ddd018a6c29215f3f8bbeed72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79b30151d86fee05d29255d404d3e613"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:a79b30151d86fee05d29255d404d3e613"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a79b30151d86fee05d29255d404d3e613">StdAllocator</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:a79b30151d86fee05d29255d404d3e613"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rebind copy constructor.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a79b30151d86fee05d29255d404d3e613">More...</a><br /></td></tr>
<tr class="separator:a79b30151d86fee05d29255d404d3e613"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bdc0fe488215e6d1c84f4e2c31788b1"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a7bdc0fe488215e6d1c84f4e2c31788b1">allocate</a> (std::size_t n)</td></tr>
<tr class="memdesc:a7bdc0fe488215e6d1c84f4e2c31788b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory of size <code>n</code>.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a7bdc0fe488215e6d1c84f4e2c31788b1">More...</a><br /></td></tr>
<tr class="separator:a7bdc0fe488215e6d1c84f4e2c31788b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2389211966765a8d14d684496cad1307"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a2389211966765a8d14d684496cad1307">deallocate</a> (T *p, std::size_t n)</td></tr>
<tr class="memdesc:a2389211966765a8d14d684496cad1307"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deallocates memory from pointer <code>p</code> of size <code>n</code> .  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a2389211966765a8d14d684496cad1307">More...</a><br /></td></tr>
<tr class="separator:a2389211966765a8d14d684496cad1307"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a74262de92b720590828d4d8f8541ca"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a3a74262de92b720590828d4d8f8541ca">operator==</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;other) const</td></tr>
<tr class="memdesc:a3a74262de92b720590828d4d8f8541ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the instances are equal, false otherwise.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a3a74262de92b720590828d4d8f8541ca">More...</a><br /></td></tr>
<tr class="separator:a3a74262de92b720590828d4d8f8541ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6acea8ce6089f3a83360e221848959c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a6acea8ce6089f3a83360e221848959c4">operator!=</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> &amp;other) const</td></tr>
<tr class="memdesc:a6acea8ce6089f3a83360e221848959c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the instances are not equal, false otherwise.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a6acea8ce6089f3a83360e221848959c4">More...</a><br /></td></tr>
<tr class="separator:a6acea8ce6089f3a83360e221848959c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20535fbe42ad972b55a235a055780ce2"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a20535fbe42ad972b55a235a055780ce2">GetDeviceID</a> () const</td></tr>
<tr class="memdesc:a20535fbe42ad972b55a235a055780ce2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the device on which memory is allocated.  <a href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a20535fbe42ad972b55a235a055780ce2">More...</a><br /></td></tr>
<tr class="separator:a20535fbe42ad972b55a235a055780ce2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aa4803f852fd3000f5c7397a49d5688cf"><td class="memTemplParams" colspan="2">template&lt;typename T2 &gt; </td></tr>
<tr class="memitem:aa4803f852fd3000f5c7397a49d5688cf"><td class="memTemplItemLeft" align="right" valign="top">class&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#aa4803f852fd3000f5c7397a49d5688cf">StdAllocator</a></td></tr>
<tr class="separator:aa4803f852fd3000f5c7397a49d5688cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class open3d::core::StdAllocator&lt; T &gt;</h3>

<p>Class satisfying the Allocator requirements defined by the C++ standard. This bridge makes the <a class="el" href="classopen3d_1_1core_1_1_memory_manager.3a6.d">MemoryManager</a> interface accessible to all classes and containers that use the standard Allocator interface.</p>
<p>This is particularly useful to allocate (potentially cached) GPU memory or different types of memory depending on the provided device. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a5642540c2a9446e0b31a1ae6092ab175"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5642540c2a9446e0b31a1ae6092ab175">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de#a5642540c2a9446e0b31a1ae6092ab175">value_type</a> =  T</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>T. </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adbc29935230de46c02e90a089885ea68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbc29935230de46c02e90a089885ea68">&#9670;&nbsp;</a></span>StdAllocator() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a id="aa159336b599fd920ac3c70b2fe0107ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa159336b599fd920ac3c70b2fe0107ce">&#9670;&nbsp;</a></span>StdAllocator() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>device_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor from device. </p>

</div>
</div>
<a id="a342176a83e4529849720a3c3a801bd6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a342176a83e4529849720a3c3a801bd6b">&#9670;&nbsp;</a></span>StdAllocator() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default copy constructor. </p>

</div>
</div>
<a id="ae760a9568ff2fd507a57dd3eef38803f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae760a9568ff2fd507a57dd3eef38803f">&#9670;&nbsp;</a></span>StdAllocator() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move constructor. </p>

</div>
</div>
<a id="a79b30151d86fee05d29255d404d3e613"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79b30151d86fee05d29255d404d3e613">&#9670;&nbsp;</a></span>StdAllocator() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rebind copy constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7bdc0fe488215e6d1c84f4e2c31788b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bdc0fe488215e6d1c84f4e2c31788b1">&#9670;&nbsp;</a></span>allocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::allocate </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates memory of size <code>n</code>. </p>

</div>
</div>
<a id="a2389211966765a8d14d684496cad1307"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2389211966765a8d14d684496cad1307">&#9670;&nbsp;</a></span>deallocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::deallocate </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deallocates memory from pointer <code>p</code> of size <code>n</code> . </p>

</div>
</div>
<a id="a20535fbe42ad972b55a235a055780ce2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20535fbe42ad972b55a235a055780ce2">&#9670;&nbsp;</a></span>GetDeviceID()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::GetDeviceID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the device on which memory is allocated. </p>

</div>
</div>
<a id="a6acea8ce6089f3a83360e221848959c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6acea8ce6089f3a83360e221848959c4">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the instances are not equal, false otherwise. </p>

</div>
</div>
<a id="a80a4aa737a016b7f2505d6d64a0a4f29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80a4aa737a016b7f2505d6d64a0a4f29">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&amp; <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default copy assignment operator. </p>

</div>
</div>
<a id="affb2db3ddd018a6c29215f3f8bbeed72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affb2db3ddd018a6c29215f3f8bbeed72">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&amp; <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<a id="a3a74262de92b720590828d4d8f8541ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a74262de92b720590828d4d8f8541ca">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the instances are equal, false otherwise. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="aa4803f852fd3000f5c7397a49d5688cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4803f852fd3000f5c7397a49d5688cf">&#9670;&nbsp;</a></span>StdAllocator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<div class="memtemplate">
template&lt;typename T2 &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/<a class="el" href="_std_allocator_8h_source.html">StdAllocator.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_std_allocator.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:24 GMT -->
</html>
