<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_image.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:53:45 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::Image Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::Image Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> class stores image with customizable rows, cols, channels, dtype and device.  
 <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="t_2geometry_2_image_8h_source.html">Image.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::t::geometry::Image:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1t_1_1geometry_1_1_image.4b4.d" usemap="#open3d::t::geometry::Image_map" alt=""/>
  <map id="open3d::t::geometry::Image_map" name="open3d::t::geometry::Image_map">
<area href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class." alt="open3d::t::geometry::Geometry" shape="rect" coords="0,56,181,80"/>
<area href="classopen3d_1_1core_1_1_is_device.36f.delaye" alt="open3d::core::IsDevice" shape="rect" coords="0,0,181,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a420fd4b2cc8c006bc8901d6e2c181b7a"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7a">InterpType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aa60494f02d440f316319dd0fad40ad007">Nearest</a> = 0
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aa32a843da6ea40ab3b17a3421ccdf671b">Linear</a> = 1
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aaec6b5414eb175379ff9efc9b3eef5814">Cubic</a> = 2
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aa32970f54c315ab41c0582e2ed8eb4a7c">Lanczos</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aa0ce3266d4eb71ad50f7a90aee6d21dcd">Super</a> = 4
<br />
 }</td></tr>
<tr class="memdesc:a420fd4b2cc8c006bc8901d6e2c181b7a"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> interpolation algorithms.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7a">More...</a><br /></td></tr>
<tr class="separator:a420fd4b2cc8c006bc8901d6e2c181b7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">open3d::t::geometry::Geometry</a></td></tr>
<tr class="memitem:a2058abb1036dfbfb2a9c13fbb7e2a88d inherit pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88daee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88dae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88daa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88dabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88daff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88da0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a2058abb1036dfbfb2a9c13fbb7e2a88d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">More...</a><br /></td></tr>
<tr class="separator:a2058abb1036dfbfb2a9c13fbb7e2a88d inherit pub_types_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2d38abcdf4d00bdd17fc68a95ad1f4f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a2d38abcdf4d00bdd17fc68a95ad1f4f9">Image</a> (int64_t rows=0, int64_t cols=0, int64_t channels=1, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="memdesc:a2d38abcdf4d00bdd17fc68a95ad1f4f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor for image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a2d38abcdf4d00bdd17fc68a95ad1f4f9">More...</a><br /></td></tr>
<tr class="separator:a2d38abcdf4d00bdd17fc68a95ad1f4f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fa6df8a2892487d29a8872bd2dfe83"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae9fa6df8a2892487d29a8872bd2dfe83">Image</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;tensor)</td></tr>
<tr class="memdesc:ae9fa6df8a2892487d29a8872bd2dfe83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a tensor. The tensor won't be copied and memory will be shared.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae9fa6df8a2892487d29a8872bd2dfe83">More...</a><br /></td></tr>
<tr class="separator:ae9fa6df8a2892487d29a8872bd2dfe83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f89f8052179dad5e2a939f6ebd0c333"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a9f89f8052179dad5e2a939f6ebd0c333">~Image</a> () override</td></tr>
<tr class="separator:a9f89f8052179dad5e2a939f6ebd0c333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac75881cb4c47597b5e9e9ba5e4b9cae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aac75881cb4c47597b5e9e9ba5e4b9cae">Clear</a> () override</td></tr>
<tr class="memdesc:aac75881cb4c47597b5e9e9ba5e4b9cae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear image contents by resetting the rows and cols to 0, while keeping channels, dtype and device unchanged.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aac75881cb4c47597b5e9e9ba5e4b9cae">More...</a><br /></td></tr>
<tr class="separator:aac75881cb4c47597b5e9e9ba5e4b9cae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55563448f87f7534b6ec3da042b319a7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a55563448f87f7534b6ec3da042b319a7">IsEmpty</a> () const override</td></tr>
<tr class="memdesc:a55563448f87f7534b6ec3da042b319a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if rows * cols * channels == 0.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a55563448f87f7534b6ec3da042b319a7">More...</a><br /></td></tr>
<tr class="separator:a55563448f87f7534b6ec3da042b319a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3c37013c5e29a8c1c9346c4154b484"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ade3c37013c5e29a8c1c9346c4154b484">Reset</a> (int64_t rows=0, int64_t cols=0, int64_t channels=1, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> dtype=<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="memdesc:ade3c37013c5e29a8c1c9346c4154b484"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reinitialize image with new parameters.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ade3c37013c5e29a8c1c9346c4154b484">More...</a><br /></td></tr>
<tr class="separator:ade3c37013c5e29a8c1c9346c4154b484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b7349f943a9cc86ad4b62395728c997"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a2b7349f943a9cc86ad4b62395728c997">GetRows</a> () const</td></tr>
<tr class="memdesc:a2b7349f943a9cc86ad4b62395728c997"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of rows of the image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a2b7349f943a9cc86ad4b62395728c997">More...</a><br /></td></tr>
<tr class="separator:a2b7349f943a9cc86ad4b62395728c997"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8350aea7244f982e3b8ce04bd5447d45"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a8350aea7244f982e3b8ce04bd5447d45">GetCols</a> () const</td></tr>
<tr class="memdesc:a8350aea7244f982e3b8ce04bd5447d45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of columns of the image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a8350aea7244f982e3b8ce04bd5447d45">More...</a><br /></td></tr>
<tr class="separator:a8350aea7244f982e3b8ce04bd5447d45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21960cca383b53e8c4277239729d8b34"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a21960cca383b53e8c4277239729d8b34">GetChannels</a> () const</td></tr>
<tr class="memdesc:a21960cca383b53e8c4277239729d8b34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of channels of the image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a21960cca383b53e8c4277239729d8b34">More...</a><br /></td></tr>
<tr class="separator:a21960cca383b53e8c4277239729d8b34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8c1b15da7a37fcd619dad212ee3b5e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae8c1b15da7a37fcd619dad212ee3b5e8">GetDtype</a> () const</td></tr>
<tr class="memdesc:ae8c1b15da7a37fcd619dad212ee3b5e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get dtype of the image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae8c1b15da7a37fcd619dad212ee3b5e8">More...</a><br /></td></tr>
<tr class="separator:ae8c1b15da7a37fcd619dad212ee3b5e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fa0588371644a1521e26cc032b5faf0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a1fa0588371644a1521e26cc032b5faf0">GetDevice</a> () const override</td></tr>
<tr class="memdesc:a1fa0588371644a1521e26cc032b5faf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get device of the image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a1fa0588371644a1521e26cc032b5faf0">More...</a><br /></td></tr>
<tr class="separator:a1fa0588371644a1521e26cc032b5faf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae69c2a21af51f7262268df168a5579c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae69c2a21af51f7262268df168a5579c0">At</a> (int64_t r, int64_t c) const</td></tr>
<tr class="memdesc:ae69c2a21af51f7262268df168a5579c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get pixel(s) in the image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae69c2a21af51f7262268df168a5579c0">More...</a><br /></td></tr>
<tr class="separator:ae69c2a21af51f7262268df168a5579c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22743a0eb6feeda5595b69977071179e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a22743a0eb6feeda5595b69977071179e">At</a> (int64_t r, int64_t c, int64_t ch) const</td></tr>
<tr class="memdesc:a22743a0eb6feeda5595b69977071179e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get pixel(s) in the image. Returns a tensor with shape {}.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a22743a0eb6feeda5595b69977071179e">More...</a><br /></td></tr>
<tr class="separator:a22743a0eb6feeda5595b69977071179e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0acd9d8078e52ea1d0429ae30e98c84e"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a0acd9d8078e52ea1d0429ae30e98c84e">GetDataPtr</a> ()</td></tr>
<tr class="memdesc:a0acd9d8078e52ea1d0429ae30e98c84e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get raw buffer of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> data.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a0acd9d8078e52ea1d0429ae30e98c84e">More...</a><br /></td></tr>
<tr class="separator:a0acd9d8078e52ea1d0429ae30e98c84e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a930188d5811f1691d811d6a4a5862ec3"><td class="memItemLeft" align="right" valign="top">const void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a930188d5811f1691d811d6a4a5862ec3">GetDataPtr</a> () const</td></tr>
<tr class="memdesc:a930188d5811f1691d811d6a4a5862ec3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get raw buffer of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> data.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a930188d5811f1691d811d6a4a5862ec3">More...</a><br /></td></tr>
<tr class="separator:a930188d5811f1691d811d6a4a5862ec3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14044e5f522c41181f346c38e8e095e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a14044e5f522c41181f346c38e8e095e5">AsTensor</a> () const</td></tr>
<tr class="memdesc:a14044e5f522c41181f346c38e8e095e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the underlying Tensor of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a14044e5f522c41181f346c38e8e095e5">More...</a><br /></td></tr>
<tr class="separator:a14044e5f522c41181f346c38e8e095e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5892da1602a097cc6f0642167fafcd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae5892da1602a097cc6f0642167fafcd7">To</a> (const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>=false) const</td></tr>
<tr class="memdesc:ae5892da1602a097cc6f0642167fafcd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfer the image to a specified device.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae5892da1602a097cc6f0642167fafcd7">More...</a><br /></td></tr>
<tr class="separator:ae5892da1602a097cc6f0642167fafcd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07a2bc9bc57fd515a9a74a603741e8c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a07a2bc9bc57fd515a9a74a603741e8c9">Clone</a> () const</td></tr>
<tr class="memdesc:a07a2bc9bc57fd515a9a74a603741e8c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns copy of the image on the same device.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a07a2bc9bc57fd515a9a74a603741e8c9">More...</a><br /></td></tr>
<tr class="separator:a07a2bc9bc57fd515a9a74a603741e8c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa864590929ffc3f3f4dcd07521792a3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aa864590929ffc3f3f4dcd07521792a3e">To</a> (<a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> dtype, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>=false, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; scale=<a class="el" href="namespaceopen3d_1_1utility.html#aecfc2255664b95bf9a25f06442b978e2">utility::nullopt</a>, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>=0.0) const</td></tr>
<tr class="memdesc:aa864590929ffc3f3f4dcd07521792a3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> with the specified <code>dtype</code>.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aa864590929ffc3f3f4dcd07521792a3e">More...</a><br /></td></tr>
<tr class="separator:aa864590929ffc3f3f4dcd07521792a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264ed4a7f3a313da08869d66c3bd0ac2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a264ed4a7f3a313da08869d66c3bd0ac2">LinearTransform</a> (double scale=1.0, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>=0.0)</td></tr>
<tr class="memdesc:a264ed4a7f3a313da08869d66c3bd0ac2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to linearly transform pixel intensities in place.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a264ed4a7f3a313da08869d66c3bd0ac2">More...</a><br /></td></tr>
<tr class="separator:a264ed4a7f3a313da08869d66c3bd0ac2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e1b50821ecdd631853d0a7e71523ac3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a5e1b50821ecdd631853d0a7e71523ac3">RGBToGray</a> () const</td></tr>
<tr class="memdesc:a5e1b50821ecdd631853d0a7e71523ac3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a 3-channel RGB image to a new 1-channel Grayscale image.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a5e1b50821ecdd631853d0a7e71523ac3">More...</a><br /></td></tr>
<tr class="separator:a5e1b50821ecdd631853d0a7e71523ac3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91c9294ebb2567ceccec9bd5ec7d6a2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a91c9294ebb2567ceccec9bd5ec7d6a2c">Resize</a> (float sampling_rate=0.5f, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7a">InterpType</a> interp_type=<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aa60494f02d440f316319dd0fad40ad007">InterpType::Nearest</a>) const</td></tr>
<tr class="memdesc:a91c9294ebb2567ceccec9bd5ec7d6a2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a new image after resizing with specified interpolation type.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a91c9294ebb2567ceccec9bd5ec7d6a2c">More...</a><br /></td></tr>
<tr class="separator:a91c9294ebb2567ceccec9bd5ec7d6a2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4016f4e81afb0978f327c643c807fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a8b4016f4e81afb0978f327c643c807fa">Dilate</a> (int kernel_size=3) const</td></tr>
<tr class="memdesc:a8b4016f4e81afb0978f327c643c807fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a new image after performing morphological dilation.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a8b4016f4e81afb0978f327c643c807fa">More...</a><br /></td></tr>
<tr class="separator:a8b4016f4e81afb0978f327c643c807fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab256c2db0996f549ac63fade5cf0db15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ab256c2db0996f549ac63fade5cf0db15">Filter</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;kernel) const</td></tr>
<tr class="memdesc:ab256c2db0996f549ac63fade5cf0db15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a new image after filtering with the given kernel.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ab256c2db0996f549ac63fade5cf0db15">More...</a><br /></td></tr>
<tr class="separator:ab256c2db0996f549ac63fade5cf0db15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a262890a419fb3f382da2b1d6374af01b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a262890a419fb3f382da2b1d6374af01b">FilterBilateral</a> (int kernel_size=3, float value_sigma=20.0f, float distance_sigma=10.0f) const</td></tr>
<tr class="memdesc:a262890a419fb3f382da2b1d6374af01b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a new image after bilateral filtering.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a262890a419fb3f382da2b1d6374af01b">More...</a><br /></td></tr>
<tr class="separator:a262890a419fb3f382da2b1d6374af01b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a926b6387acffd9bbe3652a4969c631a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a926b6387acffd9bbe3652a4969c631a2">FilterGaussian</a> (int kernel_size=3, float sigma=1.0f) const</td></tr>
<tr class="memdesc:a926b6387acffd9bbe3652a4969c631a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a new image after Gaussian filtering.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a926b6387acffd9bbe3652a4969c631a2">More...</a><br /></td></tr>
<tr class="separator:a926b6387acffd9bbe3652a4969c631a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a762b9ceed11b2adb581bb0315e3c5fd0"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a762b9ceed11b2adb581bb0315e3c5fd0">FilterSobel</a> (int kernel_size=3) const</td></tr>
<tr class="memdesc:a762b9ceed11b2adb581bb0315e3c5fd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pair of new gradient images (dx, dy) after Sobel filtering.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a762b9ceed11b2adb581bb0315e3c5fd0">More...</a><br /></td></tr>
<tr class="separator:a762b9ceed11b2adb581bb0315e3c5fd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e87378ef727ff324e27ee579ab6bbba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a4e87378ef727ff324e27ee579ab6bbba">PyrDown</a> () const</td></tr>
<tr class="memdesc:a4e87378ef727ff324e27ee579ab6bbba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a new downsampled image with pyramid downsampling.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a4e87378ef727ff324e27ee579ab6bbba">More...</a><br /></td></tr>
<tr class="separator:a4e87378ef727ff324e27ee579ab6bbba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c947e79a928c9a6fc132b5948dfacd1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a5c947e79a928c9a6fc132b5948dfacd1">PyrDownDepth</a> (float diff_threshold, float invalid_fill=0.f) const</td></tr>
<tr class="memdesc:a5c947e79a928c9a6fc132b5948dfacd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Edge and invalid value preserving downsampling by 2 specifically for depth images.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a5c947e79a928c9a6fc132b5948dfacd1">More...</a><br /></td></tr>
<tr class="separator:a5c947e79a928c9a6fc132b5948dfacd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb637935719a846adfb38621c6f3e58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a6bb637935719a846adfb38621c6f3e58">ClipTransform</a> (float scale, float min_value, float max_value, float clip_fill=0.0f) const</td></tr>
<tr class="memdesc:a6bb637935719a846adfb38621c6f3e58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return new image after scaling and clipping image values.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a6bb637935719a846adfb38621c6f3e58">More...</a><br /></td></tr>
<tr class="separator:a6bb637935719a846adfb38621c6f3e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88769467c54f5f4af01e16e39ac8efaa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a88769467c54f5f4af01e16e39ac8efaa">CreateVertexMap</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, float invalid_fill=0.0f)</td></tr>
<tr class="memdesc:a88769467c54f5f4af01e16e39ac8efaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a vertex map from a depth image using unprojection.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a88769467c54f5f4af01e16e39ac8efaa">More...</a><br /></td></tr>
<tr class="separator:a88769467c54f5f4af01e16e39ac8efaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2d83871c00fe2a3abfcddd64d1b6de8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ab2d83871c00fe2a3abfcddd64d1b6de8">CreateNormalMap</a> (float invalid_fill=0.0f)</td></tr>
<tr class="memdesc:ab2d83871c00fe2a3abfcddd64d1b6de8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a normal map from a vertex map.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ab2d83871c00fe2a3abfcddd64d1b6de8">More...</a><br /></td></tr>
<tr class="separator:ab2d83871c00fe2a3abfcddd64d1b6de8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32af97cfce27c779da73ca1d26c608fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a32af97cfce27c779da73ca1d26c608fe">ColorizeDepth</a> (float scale, float min_value, float max_value)</td></tr>
<tr class="memdesc:a32af97cfce27c779da73ca1d26c608fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colorize an input depth image (with Dtype UInt16 or Float32).  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a32af97cfce27c779da73ca1d26c608fe">More...</a><br /></td></tr>
<tr class="separator:a32af97cfce27c779da73ca1d26c608fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ab22f12ec694e360aca36464d8102d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a4ab22f12ec694e360aca36464d8102d4">GetMinBound</a> () const</td></tr>
<tr class="memdesc:a4ab22f12ec694e360aca36464d8102d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute min 2D coordinates for the data (always {0, 0}).  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a4ab22f12ec694e360aca36464d8102d4">More...</a><br /></td></tr>
<tr class="separator:a4ab22f12ec694e360aca36464d8102d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed3efded7d8de5578b0779b22f6901f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aed3efded7d8de5578b0779b22f6901f2">GetMaxBound</a> () const</td></tr>
<tr class="memdesc:aed3efded7d8de5578b0779b22f6901f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute max 2D coordinates for the data ({rows, cols}).  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aed3efded7d8de5578b0779b22f6901f2">More...</a><br /></td></tr>
<tr class="separator:aed3efded7d8de5578b0779b22f6901f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad846f877280552e013d8aa84e898856"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">open3d::geometry::Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aad846f877280552e013d8aa84e898856">ToLegacy</a> () const</td></tr>
<tr class="memdesc:aad846f877280552e013d8aa84e898856"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert to legacy <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> type.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#aad846f877280552e013d8aa84e898856">More...</a><br /></td></tr>
<tr class="separator:aad846f877280552e013d8aa84e898856"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6c6d1f8c5db362e92ddd02b28a7e66d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae6c6d1f8c5db362e92ddd02b28a7e66d">ToString</a> () const</td></tr>
<tr class="memdesc:ae6c6d1f8c5db362e92ddd02b28a7e66d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Text description.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae6c6d1f8c5db362e92ddd02b28a7e66d">More...</a><br /></td></tr>
<tr class="separator:ae6c6d1f8c5db362e92ddd02b28a7e66d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">open3d::t::geometry::Geometry</a></td></tr>
<tr class="memitem:aae3fa46ae2c36a9245da717db105a049 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#aae3fa46ae2c36a9245da717db105a049">~Geometry</a> ()</td></tr>
<tr class="separator:aae3fa46ae2c36a9245da717db105a049 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c02f58e26d56a742001b61d5ddb3aee inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a1c02f58e26d56a742001b61d5ddb3aee">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a1c02f58e26d56a742001b61d5ddb3aee inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a1c02f58e26d56a742001b61d5ddb3aee">More...</a><br /></td></tr>
<tr class="separator:a1c02f58e26d56a742001b61d5ddb3aee inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54d95d1e8e1a279d554140a507d0ece0 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a54d95d1e8e1a279d554140a507d0ece0">Dimension</a> () const</td></tr>
<tr class="memdesc:a54d95d1e8e1a279d554140a507d0ece0 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a54d95d1e8e1a279d554140a507d0ece0">More...</a><br /></td></tr>
<tr class="separator:a54d95d1e8e1a279d554140a507d0ece0 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f2d0f2491f0f14b3edc14a6eb458732 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a5f2d0f2491f0f14b3edc14a6eb458732">GetName</a> () const</td></tr>
<tr class="separator:a5f2d0f2491f0f14b3edc14a6eb458732 inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f41994b219be5601876f12fe76974de inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a0f41994b219be5601876f12fe76974de">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a0f41994b219be5601876f12fe76974de inherit pub_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1core_1_1_is_device"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1core_1_1_is_device')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye">open3d::core::IsDevice</a></td></tr>
<tr class="memitem:ac8a6c234c0f58bedb9159dd3c4234265 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#ac8a6c234c0f58bedb9159dd3c4234265">IsDevice</a> ()=default</td></tr>
<tr class="separator:ac8a6c234c0f58bedb9159dd3c4234265 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2c84a4d0808e4c7c2cbf0412097fc7c inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#af2c84a4d0808e4c7c2cbf0412097fc7c">~IsDevice</a> ()=default</td></tr>
<tr class="separator:af2c84a4d0808e4c7c2cbf0412097fc7c inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad123cbf1de3a6b6946af444fa1fc5b39 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#ad123cbf1de3a6b6946af444fa1fc5b39">IsCPU</a> () const</td></tr>
<tr class="separator:ad123cbf1de3a6b6946af444fa1fc5b39 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c611931dafc12b6a40c22799e2316b6 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_is_device.36f.delaye#a0c611931dafc12b6a40c22799e2316b6">IsCUDA</a> () const</td></tr>
<tr class="separator:a0c611931dafc12b6a40c22799e2316b6 inherit pub_methods_classopen3d_1_1core_1_1_is_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a60df7f51b73795bc16b721422fb1be97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a60df7f51b73795bc16b721422fb1be97">FromLegacy</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">open3d::geometry::Image</a> &amp;image_legacy, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;Device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="memdesc:a60df7f51b73795bc16b721422fb1be97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create from a legacy Open3D <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a60df7f51b73795bc16b721422fb1be97">More...</a><br /></td></tr>
<tr class="separator:a60df7f51b73795bc16b721422fb1be97"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a47edb3f9a8351c6ca3b861c72141aca9"><td class="memItemLeft" align="right" valign="top">static constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a47edb3f9a8351c6ca3b861c72141aca9">HAVE_IPPICV</a> = false</td></tr>
<tr class="memdesc:a47edb3f9a8351c6ca3b861c72141aca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do we use IPP ICV for accelerating image processing operations?  <a href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a47edb3f9a8351c6ca3b861c72141aca9">More...</a><br /></td></tr>
<tr class="separator:a47edb3f9a8351c6ca3b861c72141aca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ae5c5785324c1c1c33f7088dc6103dcd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#ae5c5785324c1c1c33f7088dc6103dcd5">data_</a></td></tr>
<tr class="separator:ae5c5785324c1c1c33f7088dc6103dcd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">open3d::t::geometry::Geometry</a></td></tr>
<tr class="memitem:a940a78b9e256dbca68764761a4706bcf inherit pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a940a78b9e256dbca68764761a4706bcf">Geometry</a> (<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a2058abb1036dfbfb2a9c13fbb7e2a88d">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:a940a78b9e256dbca68764761a4706bcf inherit pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a940a78b9e256dbca68764761a4706bcf">More...</a><br /></td></tr>
<tr class="separator:a940a78b9e256dbca68764761a4706bcf inherit pro_methods_classopen3d_1_1t_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> class stores image with customizable rows, cols, channels, dtype and device. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a420fd4b2cc8c006bc8901d6e2c181b7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a420fd4b2cc8c006bc8901d6e2c181b7a">&#9670;&nbsp;</a></span>InterpType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7a">open3d::t::geometry::Image::InterpType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> interpolation algorithms. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a420fd4b2cc8c006bc8901d6e2c181b7aa60494f02d440f316319dd0fad40ad007"></a>Nearest&#160;</td><td class="fielddoc"><p>Nearest neighbors interpolation. </p>
</td></tr>
<tr><td class="fieldname"><a id="a420fd4b2cc8c006bc8901d6e2c181b7aa32a843da6ea40ab3b17a3421ccdf671b"></a>Linear&#160;</td><td class="fielddoc"><p>Bilinear interpolation. </p>
</td></tr>
<tr><td class="fieldname"><a id="a420fd4b2cc8c006bc8901d6e2c181b7aaec6b5414eb175379ff9efc9b3eef5814"></a>Cubic&#160;</td><td class="fielddoc"><p>Bicubic interpolation. </p>
</td></tr>
<tr><td class="fieldname"><a id="a420fd4b2cc8c006bc8901d6e2c181b7aa32970f54c315ab41c0582e2ed8eb4a7c"></a>Lanczos&#160;</td><td class="fielddoc"><p>Lanczos filter interpolation. </p>
</td></tr>
<tr><td class="fieldname"><a id="a420fd4b2cc8c006bc8901d6e2c181b7aa0ce3266d4eb71ad50f7a90aee6d21dcd"></a>Super&#160;</td><td class="fielddoc"><p>Super sampling interpolation (only downsample). </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2d38abcdf4d00bdd17fc68a95ad1f4f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d38abcdf4d00bdd17fc68a95ad1f4f9">&#9670;&nbsp;</a></span>Image() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::Image::Image </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>rows</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>cols</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor for image. </p>
<p>Row-major storage is used, similar to OpenCV. Use (row, col, channel) indexing order for image creation and accessing. In general, (r, c, ch) are the preferred variable names for consistency, and avoid using width, height, u, v, x, y for coordinates.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rows</td><td>Number of rows of the image, i.e. image height. <code>rows</code> must be non-negative. </td></tr>
    <tr><td class="paramname">cols</td><td>Number of columns of the image, i.e. image width. <code>cols</code> must be non-negative. </td></tr>
    <tr><td class="paramname">channels</td><td>Number of channels of the image. E.g. for RGB image, channels == 3; for grayscale image, channels == 1. <code>channels</code> must be greater than 0. </td></tr>
    <tr><td class="paramname">dtype</td><td>Data type of the image. </td></tr>
    <tr><td class="paramname">device</td><td>Device where the image is stored. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae9fa6df8a2892487d29a8872bd2dfe83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fa6df8a2892487d29a8872bd2dfe83">&#9670;&nbsp;</a></span>Image() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::Image::Image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from a tensor. The tensor won't be copied and memory will be shared. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensor</td><td>Tensor of the image. The tensor must be contiguous. The tensor must be 2D (rows, cols) or 3D (rows, cols, channels). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9f89f8052179dad5e2a939f6ebd0c333"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f89f8052179dad5e2a939f6ebd0c333">&#9670;&nbsp;</a></span>~Image()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual open3d::t::geometry::Image::~Image </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a14044e5f522c41181f346c38e8e095e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14044e5f522c41181f346c38e8e095e5">&#9670;&nbsp;</a></span>AsTensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::Image::AsTensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the underlying Tensor of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a>. </p>

</div>
</div>
<a id="ae69c2a21af51f7262268df168a5579c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae69c2a21af51f7262268df168a5579c0">&#9670;&nbsp;</a></span>At() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::Image::At </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get pixel(s) in the image. </p>
<p>If channels == 1, returns a tensor with shape {}, otherwise returns a tensor with shape {channels,}. The returned tensor is a slice of the image's tensor, so when modifying the slice, the original tensor will also be modified. </p>

</div>
</div>
<a id="a22743a0eb6feeda5595b69977071179e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22743a0eb6feeda5595b69977071179e">&#9670;&nbsp;</a></span>At() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::Image::At </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get pixel(s) in the image. Returns a tensor with shape {}. </p>

</div>
</div>
<a id="aac75881cb4c47597b5e9e9ba5e4b9cae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac75881cb4c47597b5e9e9ba5e4b9cae">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&amp; open3d::t::geometry::Image::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear image contents by resetting the rows and cols to 0, while keeping channels, dtype and device unchanged. </p>

<p>Implements <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#adc2716f5911ea8a88501ce9d2f029a56">open3d::t::geometry::Geometry</a>.</p>

</div>
</div>
<a id="a6bb637935719a846adfb38621c6f3e58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb637935719a846adfb38621c6f3e58">&#9670;&nbsp;</a></span>ClipTransform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::ClipTransform </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>min_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>clip_fill</em> = <code>0.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return new image after scaling and clipping image values. </p>
<p>This is typically used for preprocessing a depth image. Images of shape (rows, cols, channels=1) and Dtypes UInt16 and Float32 are supported. Each pixel will be transformed by</p><ul>
<li>x = x / <code>scale</code> </li>
<li>x = x &lt; <code>min_value</code> ? <code>clip_fill</code> : x</li>
<li>x = x &gt; <code>max_value</code> ? <code>clip_fill</code> : x</li>
</ul>
<p>Use INFINITY, NAN or 0.0 (default) for <code>clip_fill</code>. </p><dl class="section return"><dt>Returns</dt><dd>Transformed image of type Float32, with out-of-range pixels clipped and assigned the <code>clip_fill</code> value. </dd></dl>

</div>
</div>
<a id="a07a2bc9bc57fd515a9a74a603741e8c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07a2bc9bc57fd515a9a74a603741e8c9">&#9670;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::Clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns copy of the image on the same device. </p>

</div>
</div>
<a id="a32af97cfce27c779da73ca1d26c608fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32af97cfce27c779da73ca1d26c608fe">&#9670;&nbsp;</a></span>ColorizeDepth()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::ColorizeDepth </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>min_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Colorize an input depth image (with Dtype UInt16 or Float32). </p>
<p>The image values are divided by scale, then clamped within [min_value, max_value] and finally converted to an RGB image using the Turbo colormap as a lookup table.</p>
<dl class="section return"><dt>Returns</dt><dd>Full color depth map of shape (rows, cols, channels=3) and Dtype UInt8. </dd></dl>

</div>
</div>
<a id="ab2d83871c00fe2a3abfcddd64d1b6de8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2d83871c00fe2a3abfcddd64d1b6de8">&#9670;&nbsp;</a></span>CreateNormalMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::CreateNormalMap </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>invalid_fill</em> = <code>0.0f</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a normal map from a vertex map. </p>
<p>The input vertex map image should be of shape (rows, cols, channels=3) and Dtype Float32. This uses a cross product of \(V(r, c+1)-V(r, c)\) and \(V(r+1, c)-V(r, c)\). The input vertex map is expected to be the output of CreateVertexMap. You may need to start with a filtered depth image (e.g. with FilterBilateral) to obtain good results.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">invalid_fill</td><td>Value to fill in for invalid points, and to fill-in if no valid neighbor is found. Use NAN, INFINITY or 0.0 (default). Must be consistent with <code>clip_fill</code> in CreateVertexMap.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Normal map of shape (rows, cols, channels=3) and Dtype Float32, with invalid normals assigned the <code>invalid_fill</code> value. </dd></dl>

</div>
</div>
<a id="a88769467c54f5f4af01e16e39ac8efaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88769467c54f5f4af01e16e39ac8efaa">&#9670;&nbsp;</a></span>CreateVertexMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::CreateVertexMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>invalid_fill</em> = <code>0.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a vertex map from a depth image using unprojection. </p>
<p>The input depth (of shape (rows, cols, channels=1) and Dtype Float32) is expected to be the output of ClipTransform.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">intrinsics</td><td>Pinhole camera model of (3, 3) in Float64. </td></tr>
    <tr><td class="paramname">invalid_fill</td><td>Value to fill in for invalid depths. Use NAN, INFINITY or 0.0 (default). Must be consistent with <code>clip_fill</code> in ClipTransform.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Vertex map of shape (rows, cols, channels=3) and Dtype Float32, with invalid points assigned the <code>invalid_fill</code> value. </dd></dl>

</div>
</div>
<a id="a8b4016f4e81afb0978f327c643c807fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b4016f4e81afb0978f327c643c807fa">&#9670;&nbsp;</a></span>Dilate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::Dilate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_size</em> = <code>3</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a new image after performing morphological dilation. </p>
<p>Supported datatypes are UInt8, UInt16 and Float32 with {1, 3, 4} channels. An 8-connected neighborhood is used to create the dilation mask.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">kernel_size</td><td>An odd number &gt;= 3. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab256c2db0996f549ac63fade5cf0db15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab256c2db0996f549ac63fade5cf0db15">&#9670;&nbsp;</a></span>Filter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::Filter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a new image after filtering with the given kernel. </p>

</div>
</div>
<a id="a262890a419fb3f382da2b1d6374af01b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a262890a419fb3f382da2b1d6374af01b">&#9670;&nbsp;</a></span>FilterBilateral()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::FilterBilateral </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_size</em> = <code>3</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value_sigma</em> = <code>20.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>distance_sigma</em> = <code>10.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a new image after bilateral filtering. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value_sigma</td><td>Standard deviation for the image content. </td></tr>
    <tr><td class="paramname">distance_sigma</td><td>Standard deviation for the image pixel positions.</td></tr>
  </table>
  </dd>
</dl>
<p>Note: CPU (IPP) and CUDA (NPP) versions use different algorithms and will give different results:<br  />
CPU uses a round kernel (radius = floor(kernel_size / 2)),<br  />
while CUDA uses a square kernel (width = kernel_size).<br  />
Make sure to tune parameters accordingly. </p>

</div>
</div>
<a id="a926b6387acffd9bbe3652a4969c631a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a926b6387acffd9bbe3652a4969c631a2">&#9670;&nbsp;</a></span>FilterGaussian()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::FilterGaussian </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_size</em> = <code>3</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sigma</em> = <code>1.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a new image after Gaussian filtering. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">kernel_size</td><td>Odd numbers &gt;= 3 are supported. </td></tr>
    <tr><td class="paramname">sigma</td><td>Standard deviation of the Gaussian distribution. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a762b9ceed11b2adb581bb0315e3c5fd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a762b9ceed11b2adb581bb0315e3c5fd0">&#9670;&nbsp;</a></span>FilterSobel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &gt; open3d::t::geometry::Image::FilterSobel </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_size</em> = <code>3</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a pair of new gradient images (dx, dy) after Sobel filtering. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">kernel_size</td><td>Sobel filter kernel size, either 3 or 5. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a60df7f51b73795bc16b721422fb1be97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60df7f51b73795bc16b721422fb1be97">&#9670;&nbsp;</a></span>FromLegacy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::FromLegacy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">open3d::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image_legacy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>Device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create from a legacy Open3D <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a>. </p>

</div>
</div>
<a id="a21960cca383b53e8c4277239729d8b34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21960cca383b53e8c4277239729d8b34">&#9670;&nbsp;</a></span>GetChannels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::t::geometry::Image::GetChannels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of channels of the image. </p>

</div>
</div>
<a id="a8350aea7244f982e3b8ce04bd5447d45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8350aea7244f982e3b8ce04bd5447d45">&#9670;&nbsp;</a></span>GetCols()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::t::geometry::Image::GetCols </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of columns of the image. </p>

</div>
</div>
<a id="a0acd9d8078e52ea1d0429ae30e98c84e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0acd9d8078e52ea1d0429ae30e98c84e">&#9670;&nbsp;</a></span>GetDataPtr() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void* open3d::t::geometry::Image::GetDataPtr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get raw buffer of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> data. </p>

</div>
</div>
<a id="a930188d5811f1691d811d6a4a5862ec3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a930188d5811f1691d811d6a4a5862ec3">&#9670;&nbsp;</a></span>GetDataPtr() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const void* open3d::t::geometry::Image::GetDataPtr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get raw buffer of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> data. </p>

</div>
</div>
<a id="a1fa0588371644a1521e26cc032b5faf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fa0588371644a1521e26cc032b5faf0">&#9670;&nbsp;</a></span>GetDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> open3d::t::geometry::Image::GetDevice </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get device of the image. </p>

<p>Implements <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a409482298c1e3140f1b06f2410c86dee">open3d::t::geometry::Geometry</a>.</p>

</div>
</div>
<a id="ae8c1b15da7a37fcd619dad212ee3b5e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8c1b15da7a37fcd619dad212ee3b5e8">&#9670;&nbsp;</a></span>GetDtype()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> open3d::t::geometry::Image::GetDtype </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get dtype of the image. </p>

</div>
</div>
<a id="aed3efded7d8de5578b0779b22f6901f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed3efded7d8de5578b0779b22f6901f2">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::Image::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute max 2D coordinates for the data ({rows, cols}). </p>

</div>
</div>
<a id="a4ab22f12ec694e360aca36464d8102d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ab22f12ec694e360aca36464d8102d4">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::Image::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute min 2D coordinates for the data (always {0, 0}). </p>

</div>
</div>
<a id="a2b7349f943a9cc86ad4b62395728c997"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b7349f943a9cc86ad4b62395728c997">&#9670;&nbsp;</a></span>GetRows()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::t::geometry::Image::GetRows </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of rows of the image. </p>

</div>
</div>
<a id="a55563448f87f7534b6ec3da042b319a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55563448f87f7534b6ec3da042b319a7">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::Image::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if rows * cols * channels == 0. </p>

<p>Implements <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36#a96fee92f85f6aa6ea262c38459a85f2d">open3d::t::geometry::Geometry</a>.</p>

</div>
</div>
<a id="a264ed4a7f3a313da08869d66c3bd0ac2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a264ed4a7f3a313da08869d66c3bd0ac2">&#9670;&nbsp;</a></span>LinearTransform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a>&amp; open3d::t::geometry::Image::LinearTransform </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to linearly transform pixel intensities in place. </p>
<p>\(image = scale * image + offset\).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>First multiply image pixel values with this factor. This should be positive for unsigned dtypes. </td></tr>
    <tr><td class="paramname">offset</td><td>Then add this factor to all image pixel values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to self. </dd></dl>

</div>
</div>
<a id="a4e87378ef727ff324e27ee579ab6bbba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e87378ef727ff324e27ee579ab6bbba">&#9670;&nbsp;</a></span>PyrDown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::PyrDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a new downsampled image with pyramid downsampling. </p>
<p>The returned image is formed by a chained Gaussian filter (kernel_size = 5, sigma = 1.0) and a resize (ratio = 0.5) operation.</p>
<dl class="section return"><dt>Returns</dt><dd>Half sized downsampled depth image. </dd></dl>

</div>
</div>
<a id="a5c947e79a928c9a6fc132b5948dfacd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c947e79a928c9a6fc132b5948dfacd1">&#9670;&nbsp;</a></span>PyrDownDepth()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::PyrDownDepth </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>diff_threshold</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>invalid_fill</em> = <code>0.f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Edge and invalid value preserving downsampling by 2 specifically for depth images. </p>
<p>Only 1 channel Float32 images are supported. The returned image is formed by a chained Gaussian filter (kernel_size = 5, sigma = 1.0) and a resize (ratio = 0.5) operation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">diff_threshold</td><td>The Gaussian filter averaging ignores neighboring values if the depth difference is larger than this value. </td></tr>
    <tr><td class="paramname">invalid_fill</td><td>The Gaussian filter ignores these values (may be specified as NAN, INFINITY or 0.0 (default)).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Half sized downsampled Float32 depth image. </dd></dl>

</div>
</div>
<a id="ade3c37013c5e29a8c1c9346c4154b484"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade3c37013c5e29a8c1c9346c4154b484">&#9670;&nbsp;</a></span>Reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp; open3d::t::geometry::Image::Reset </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>rows</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>cols</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reinitialize image with new parameters. </p>

</div>
</div>
<a id="a91c9294ebb2567ceccec9bd5ec7d6a2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91c9294ebb2567ceccec9bd5ec7d6a2c">&#9670;&nbsp;</a></span>Resize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::Resize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_rate</em> = <code>0.5f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7a">InterpType</a>&#160;</td>
          <td class="paramname"><em>interp_type</em> = <code><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d#a420fd4b2cc8c006bc8901d6e2c181b7aa60494f02d440f316319dd0fad40ad007">InterpType::Nearest</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a new image after resizing with specified interpolation type. </p>
<p>Downsample if sampling rate is &lt; 1. Upsample if sampling rate &gt; 1. Aspect ratio is always preserved. </p>

</div>
</div>
<a id="a5e1b50821ecdd631853d0a7e71523ac3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e1b50821ecdd631853d0a7e71523ac3">&#9670;&nbsp;</a></span>RGBToGray()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::RGBToGray </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a 3-channel RGB image to a new 1-channel Grayscale image. </p>
<p>Uses formula \(I = 0.299 * R + 0.587 * G + 0.114 * B\). </p>

</div>
</div>
<a id="ae5892da1602a097cc6f0642167fafcd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5892da1602a097cc6f0642167fafcd7">&#9670;&nbsp;</a></span>To() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::To </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfer the image to a specified device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">device</td><td>The targeted device to convert to. </td></tr>
    <tr><td class="paramname">copy</td><td>If true, a new image is always created; if false, the copy is avoided when the original image is already on the targeted device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa864590929ffc3f3f4dcd07521792a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa864590929ffc3f3f4dcd07521792a3e">&#9670;&nbsp;</a></span>To() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> open3d::t::geometry::Image::To </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a>&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>scale</em> = <code><a class="el" href="namespaceopen3d_1_1utility.html#aecfc2255664b95bf9a25f06442b978e2">utility::nullopt</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> with the specified <code>dtype</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dtype</td><td>The targeted dtype to convert to. </td></tr>
    <tr><td class="paramname">copy</td><td>If true, a new tensor is always created; if false, the copy is avoided when the original tensor already has the targeted dtype. </td></tr>
    <tr><td class="paramname">scale</td><td>Optional scale value. This is 1./255 for UInt8 -&gt; Float{32,64}, 1./65535 for UInt16 -&gt; Float{32,64} and 1 otherwise </td></tr>
    <tr><td class="paramname">offset</td><td>Optional shift value. Default 0. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aad846f877280552e013d8aa84e898856"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad846f877280552e013d8aa84e898856">&#9670;&nbsp;</a></span>ToLegacy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">open3d::geometry::Image</a> open3d::t::geometry::Image::ToLegacy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert to legacy <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> type. </p>

</div>
</div>
<a id="ae6c6d1f8c5db362e92ddd02b28a7e66d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6c6d1f8c5db362e92ddd02b28a7e66d">&#9670;&nbsp;</a></span>ToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::t::geometry::Image::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Text description. </p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="ae5c5785324c1c1c33f7088dc6103dcd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5c5785324c1c1c33f7088dc6103dcd5">&#9670;&nbsp;</a></span>data_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::Image::data_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Internal data of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a>, represented as a contiguous 3D tensor of shape {rows, cols, channels}. <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d" title="The Image class stores image with customizable rows, cols, channels, dtype and device.">Image</a> properties can be obtained from the tensor. </p>

</div>
</div>
<a id="a47edb3f9a8351c6ca3b861c72141aca9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47edb3f9a8351c6ca3b861c72141aca9">&#9670;&nbsp;</a></span>HAVE_IPPICV</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool open3d::t::geometry::Image::HAVE_IPPICV = false</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Do we use IPP ICV for accelerating image processing operations? </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="t_2geometry_2_image_8h_source.html">Image.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="t_2geometry_2_image_8cpp.html">Image.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_image.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:53:47 GMT -->
</html>
