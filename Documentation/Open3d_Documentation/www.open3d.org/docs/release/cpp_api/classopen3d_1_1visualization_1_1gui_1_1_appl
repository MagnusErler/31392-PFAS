<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1gui_1_1_application.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:01:07 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::visualization::gui::Application Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization.html">visualization</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a">gui</a></li><li class="navelem"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl">Application</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::visualization::gui::Application Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_application_8h_source.html">Application.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl-2">EnvUnlocker</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_app">Impl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4a23847bbcce8a538e29bfa1ccbee5c5"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a4a23847bbcce8a538e29bfa1ccbee5c5">~Application</a> ()</td></tr>
<tr class="separator:a4a23847bbcce8a538e29bfa1ccbee5c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad52500c7da7dc18f0f9d811ad5aadfe2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#ad52500c7da7dc18f0f9d811ad5aadfe2">Initialize</a> ()</td></tr>
<tr class="separator:ad52500c7da7dc18f0f9d811ad5aadfe2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95db78a4098cdd1a7568213114aa2e7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a95db78a4098cdd1a7568213114aa2e7e">Initialize</a> (int argc, const char *argv[])</td></tr>
<tr class="separator:a95db78a4098cdd1a7568213114aa2e7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e569d8314524f47c52ed480c245f0c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a3e569d8314524f47c52ed480c245f0c6">Initialize</a> (const char *resource_path)</td></tr>
<tr class="memdesc:a3e569d8314524f47c52ed480c245f0c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the application, with a specific path to the resources.  <a href="classopen3d_1_1visualization_1_1gui_1_1_appl#a3e569d8314524f47c52ed480c245f0c6">More...</a><br /></td></tr>
<tr class="separator:a3e569d8314524f47c52ed480c245f0c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c0a7d18c0014f71fa1c900cc576feb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#afd08cbfb6f8791d2e062fb299dbfb1a4">FontId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a06c0a7d18c0014f71fa1c900cc576feb">AddFont</a> (const <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_font">FontDescription</a> &amp;fd)</td></tr>
<tr class="separator:a06c0a7d18c0014f71fa1c900cc576feb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954fc1db0ce2c755a8ed5d9c6e25decf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a954fc1db0ce2c755a8ed5d9c6e25decf">SetFont</a> (<a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#afd08cbfb6f8791d2e062fb299dbfb1a4">FontId</a> id, const <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_font">FontDescription</a> &amp;fd)</td></tr>
<tr class="separator:a954fc1db0ce2c755a8ed5d9c6e25decf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6695c17e9dfb48451bddca92bd90d993"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993">Run</a> ()</td></tr>
<tr class="memdesc:a6695c17e9dfb48451bddca92bd90d993"><td class="mdescLeft">&#160;</td><td class="mdescRight">Does not return until the UI is completely finished.  <a href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993">More...</a><br /></td></tr>
<tr class="separator:a6695c17e9dfb48451bddca92bd90d993"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afac784fac9e4869027f3a5aec7ff9f6e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#afac784fac9e4869027f3a5aec7ff9f6e">Quit</a> ()</td></tr>
<tr class="memdesc:afac784fac9e4869027f3a5aec7ff9f6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Closes all the windows, which exits as a result.  <a href="classopen3d_1_1visualization_1_1gui_1_1_appl#afac784fac9e4869027f3a5aec7ff9f6e">More...</a><br /></td></tr>
<tr class="separator:afac784fac9e4869027f3a5aec7ff9f6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bf35b458905ad217b0622f2696f8923"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a4bf35b458905ad217b0622f2696f8923">RunInThread</a> (std::function&lt; void()&gt; f)</td></tr>
<tr class="separator:a4bf35b458905ad217b0622f2696f8923"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a243f4d66ed41d15a5d5b8748283fe0ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a243f4d66ed41d15a5d5b8748283fe0ac">PostToMainThread</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> *window, std::function&lt; void()&gt; f)</td></tr>
<tr class="separator:a243f4d66ed41d15a5d5b8748283fe0ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a082a8719e6bfb4dcaac0825c549e9777"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu">Menu</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a082a8719e6bfb4dcaac0825c549e9777">GetMenubar</a> () const</td></tr>
<tr class="separator:a082a8719e6bfb4dcaac0825c549e9777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e9b727d39873b879df8fba12cf10ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a70e9b727d39873b879df8fba12cf10ee">SetMenubar</a> (std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu">Menu</a> &gt; menubar)</td></tr>
<tr class="separator:a70e9b727d39873b879df8fba12cf10ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cf315f9c0421b1b15babb9a9d2d1bff"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a8cf315f9c0421b1b15babb9a9d2d1bff">AddWindow</a> (std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> &gt; window)</td></tr>
<tr class="memdesc:a8cf315f9c0421b1b15babb9a9d2d1bff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be called on the same thread that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Run()</a>  <a href="classopen3d_1_1visualization_1_1gui_1_1_appl#a8cf315f9c0421b1b15babb9a9d2d1bff">More...</a><br /></td></tr>
<tr class="separator:a8cf315f9c0421b1b15babb9a9d2d1bff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98c14255ad9a5cae10c1e5121ec3ba38"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a98c14255ad9a5cae10c1e5121ec3ba38">RemoveWindow</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> *window)</td></tr>
<tr class="separator:a98c14255ad9a5cae10c1e5121ec3ba38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a729623070bacc01ec1d997ac479e67"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a4a729623070bacc01ec1d997ac479e67">ShowMessageBox</a> (const char *title, const char *message)</td></tr>
<tr class="separator:a4a729623070bacc01ec1d997ac479e67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36ebcff3d363bf9e69a503798b26a54b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2">WindowSystem</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a36ebcff3d363bf9e69a503798b26a54b">GetWindowSystem</a> () const</td></tr>
<tr class="separator:a36ebcff3d363bf9e69a503798b26a54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc31292a8831c62ab72148251389081"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#abfc31292a8831c62ab72148251389081">GetResourcePath</a> () const</td></tr>
<tr class="separator:abfc31292a8831c62ab72148251389081"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25634c4a39afa06aeca505cab11c22cf"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_the">Theme</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a25634c4a39afa06aeca505cab11c22cf">GetTheme</a> () const</td></tr>
<tr class="separator:a25634c4a39afa06aeca505cab11c22cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a183076aa1d4dbd2315207289a648c81f"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a183076aa1d4dbd2315207289a648c81f">Now</a> () const</td></tr>
<tr class="separator:a183076aa1d4dbd2315207289a648c81f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafbc627c032c78e3511bf98f6f25d3ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#aafbc627c032c78e3511bf98f6f25d3ee">OnMenuItemSelected</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu-2#a752daf3b64834af5720b97cae883387c">Menu::ItemId</a> itemId)</td></tr>
<tr class="memdesc:aafbc627c032c78e3511bf98f6f25d3ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delivers the itemId to the active window. Used internally.  <a href="classopen3d_1_1visualization_1_1gui_1_1_appl#aafbc627c032c78e3511bf98f6f25d3ee">More...</a><br /></td></tr>
<tr class="separator:aafbc627c032c78e3511bf98f6f25d3ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f68a927ac7693d0adc3b624d1bc5be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a34f68a927ac7693d0adc3b624d1bc5be">OnTerminate</a> ()</td></tr>
<tr class="separator:a34f68a927ac7693d0adc3b624d1bc5be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8371333a7aa27b96702e2893eea32456"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a8371333a7aa27b96702e2893eea32456">RunOneTick</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl-2">EnvUnlocker</a> &amp;unlocker, bool cleanup_if_no_windows=true)</td></tr>
<tr class="separator:a8371333a7aa27b96702e2893eea32456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a224e6d1ad691b4a4ced08151c4529c85"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a224e6d1ad691b4a4ced08151c4529c85">SetWindowSystem</a> (std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2">WindowSystem</a> &gt; ws)</td></tr>
<tr class="separator:a224e6d1ad691b4a4ced08151c4529c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a099fded87d8416b732d6d9de15432a44"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a099fded87d8416b732d6d9de15432a44">UsingNativeWindows</a> () const</td></tr>
<tr class="separator:a099fded87d8416b732d6d9de15432a44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0117529987144e27ebee5bec7857bd00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a0117529987144e27ebee5bec7857bd00">VerifyIsInitialized</a> ()</td></tr>
<tr class="separator:a0117529987144e27ebee5bec7857bd00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af83b691d710a54f045a96b1171e74353"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_font">FontDescription</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#af83b691d710a54f045a96b1171e74353">GetFontDescriptions</a> () const</td></tr>
<tr class="separator:af83b691d710a54f045a96b1171e74353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a928d2a5cb11e998fce3121443abc010e"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a928d2a5cb11e998fce3121443abc010e">RenderToImage</a> (<a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">rendering::Renderer</a> &amp;renderer, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-35">rendering::View</a> *view, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">rendering::Scene</a> *scene, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>)</td></tr>
<tr class="separator:a928d2a5cb11e998fce3121443abc010e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a920e8cd3f05c6793cb6e41505ef13b23"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a920e8cd3f05c6793cb6e41505ef13b23">RenderToDepthImage</a> (<a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">rendering::Renderer</a> &amp;renderer, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-35">rendering::View</a> *view, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">rendering::Scene</a> *scene, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>, bool z_in_view_space=false)</td></tr>
<tr class="separator:a920e8cd3f05c6793cb6e41505ef13b23"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ade352525c81890891c171ae16f9f163d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl">Application</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#ade352525c81890891c171ae16f9f163d">GetInstance</a> ()</td></tr>
<tr class="separator:ade352525c81890891c171ae16f9f163d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:aa4deddfe0c3c16d2537f488f489440e1"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#afd08cbfb6f8791d2e062fb299dbfb1a4">FontId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#aa4deddfe0c3c16d2537f488f489440e1">DEFAULT_FONT_ID</a> = 0</td></tr>
<tr class="memdesc:aa4deddfe0c3c16d2537f488f489440e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifier for font used by default for all UI elements.  <a href="classopen3d_1_1visualization_1_1gui_1_1_appl#aa4deddfe0c3c16d2537f488f489440e1">More...</a><br /></td></tr>
<tr class="separator:aa4deddfe0c3c16d2537f488f489440e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4a23847bbcce8a538e29bfa1ccbee5c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a23847bbcce8a538e29bfa1ccbee5c5">&#9670;&nbsp;</a></span>~Application()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::gui::Application::~Application </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a06c0a7d18c0014f71fa1c900cc576feb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06c0a7d18c0014f71fa1c900cc576feb">&#9670;&nbsp;</a></span>AddFont()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#afd08cbfb6f8791d2e062fb299dbfb1a4">FontId</a> open3d::visualization::gui::Application::AddFont </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_font">FontDescription</a> &amp;&#160;</td>
          <td class="paramname"><em>fd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds a font. Must be called after <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#ad52500c7da7dc18f0f9d811ad5aadfe2">Initialize()</a> and before a window is created. </p>

</div>
</div>
<a id="a8cf315f9c0421b1b15babb9a9d2d1bff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cf315f9c0421b1b15babb9a9d2d1bff">&#9670;&nbsp;</a></span>AddWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::AddWindow </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> &gt;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Must be called on the same thread that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Run()</a> </p>

</div>
</div>
<a id="af83b691d710a54f045a96b1171e74353"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af83b691d710a54f045a96b1171e74353">&#9670;&nbsp;</a></span>GetFontDescriptions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_font">FontDescription</a> &gt; &amp; open3d::visualization::gui::Application::GetFontDescriptions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ade352525c81890891c171ae16f9f163d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade352525c81890891c171ae16f9f163d">&#9670;&nbsp;</a></span>GetInstance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl">Application</a> &amp; open3d::visualization::gui::Application::GetInstance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a082a8719e6bfb4dcaac0825c549e9777"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a082a8719e6bfb4dcaac0825c549e9777">&#9670;&nbsp;</a></span>GetMenubar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu">Menu</a> &gt; open3d::visualization::gui::Application::GetMenubar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abfc31292a8831c62ab72148251389081"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc31292a8831c62ab72148251389081">&#9670;&nbsp;</a></span>GetResourcePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * open3d::visualization::gui::Application::GetResourcePath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a25634c4a39afa06aeca505cab11c22cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25634c4a39afa06aeca505cab11c22cf">&#9670;&nbsp;</a></span>GetTheme()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_the">Theme</a> &amp; open3d::visualization::gui::Application::GetTheme </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This is primarily intended for use by the <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> class. Any size-related fields (for example, fontSize) should be accessed through <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a23ee69da890f8edd058bcfae46d25b57">Window::GetTheme()</a> as they are updated to reflect the pixel scaling on the monitor where the <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> is displayed. </p>

</div>
</div>
<a id="a36ebcff3d363bf9e69a503798b26a54b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36ebcff3d363bf9e69a503798b26a54b">&#9670;&nbsp;</a></span>GetWindowSystem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2">WindowSystem</a> &amp; open3d::visualization::gui::Application::GetWindowSystem </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad52500c7da7dc18f0f9d811ad5aadfe2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad52500c7da7dc18f0f9d811ad5aadfe2">&#9670;&nbsp;</a></span>Initialize() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::Initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes the application, and in particular, finds the path for the resources. If you can provide the argc/argv arguments it is more reliable. </p>

</div>
</div>
<a id="a3e569d8314524f47c52ed480c245f0c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e569d8314524f47c52ed480c245f0c6">&#9670;&nbsp;</a></span>Initialize() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::Initialize </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>resource_path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the application, with a specific path to the resources. </p>

</div>
</div>
<a id="a95db78a4098cdd1a7568213114aa2e7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95db78a4098cdd1a7568213114aa2e7e">&#9670;&nbsp;</a></span>Initialize() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::Initialize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes the application, and in particular, finds the path for the resources. If you can provide the argc/argv arguments it is more reliable. </p>

</div>
</div>
<a id="a183076aa1d4dbd2315207289a648c81f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a183076aa1d4dbd2315207289a648c81f">&#9670;&nbsp;</a></span>Now()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::visualization::gui::Application::Now </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns high-resolution counter value (in seconds). Not valid until <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#ad52500c7da7dc18f0f9d811ad5aadfe2">Initialize()</a> is called. </p>

</div>
</div>
<a id="aafbc627c032c78e3511bf98f6f25d3ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafbc627c032c78e3511bf98f6f25d3ee">&#9670;&nbsp;</a></span>OnMenuItemSelected()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::OnMenuItemSelected </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu-2#a752daf3b64834af5720b97cae883387c">Menu::ItemId</a>&#160;</td>
          <td class="paramname"><em>itemId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delivers the itemId to the active window. Used internally. </p>

</div>
</div>
<a id="a34f68a927ac7693d0adc3b624d1bc5be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f68a927ac7693d0adc3b624d1bc5be">&#9670;&nbsp;</a></span>OnTerminate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::OnTerminate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Cleanup everything right now. An example of usage is Cocoa's -applicationWillTermiate: AppDelegate message. Using Quit would result in a crash (and an unsightly message from macOS) due to destructing the windows at the wrong time. </p>

</div>
</div>
<a id="a243f4d66ed41d15a5d5b8748283fe0ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a243f4d66ed41d15a5d5b8748283fe0ac">&#9670;&nbsp;</a></span>PostToMainThread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::PostToMainThread </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> *&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; void()&gt;&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Runs <code>f</code> on the main thread at some point in the near future. Proper context will be setup for <code>window</code>. <code>f</code> will block the UI, so it should run quickly. If you need to do something slow (e.g. load a file) consider using <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a4bf35b458905ad217b0622f2696f8923">RunInThread()</a> and have the function pass off UI calls to <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a243f4d66ed41d15a5d5b8748283fe0ac">PostToMainThread()</a>. </p>

</div>
</div>
<a id="afac784fac9e4869027f3a5aec7ff9f6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afac784fac9e4869027f3a5aec7ff9f6e">&#9670;&nbsp;</a></span>Quit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::Quit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Closes all the windows, which exits as a result. </p>

</div>
</div>
<a id="a98c14255ad9a5cae10c1e5121ec3ba38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98c14255ad9a5cae10c1e5121ec3ba38">&#9670;&nbsp;</a></span>RemoveWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::RemoveWindow </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> *&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Must be called on the same thread that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Run()</a>. This is normally called from <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aa002b1e159e09c3f28aa9bc97a895db3">Window::Close()</a> and should not need to be called in user code. </p>

</div>
</div>
<a id="a920e8cd3f05c6793cb6e41505ef13b23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a920e8cd3f05c6793cb6e41505ef13b23">&#9670;&nbsp;</a></span>RenderToDepthImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt; open3d::visualization::gui::Application::RenderToDepthImage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">rendering::Renderer</a> &amp;&#160;</td>
          <td class="paramname"><em>renderer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-35">rendering::View</a> *&#160;</td>
          <td class="paramname"><em>view</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">rendering::Scene</a> *&#160;</td>
          <td class="paramname"><em>scene</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>z_in_view_space</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a928d2a5cb11e998fce3121443abc010e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a928d2a5cb11e998fce3121443abc010e">&#9670;&nbsp;</a></span>RenderToImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt; open3d::visualization::gui::Application::RenderToImage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">rendering::Renderer</a> &amp;&#160;</td>
          <td class="paramname"><em>renderer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-35">rendering::View</a> *&#160;</td>
          <td class="paramname"><em>view</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">rendering::Scene</a> *&#160;</td>
          <td class="paramname"><em>scene</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the scene rendered to an image. This MUST NOT be called while in <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Run()</a>. It is intended for use when no windows are shown. If you need to render from a GUI, use Scene::RenderToImage(). </p>

</div>
</div>
<a id="a6695c17e9dfb48451bddca92bd90d993"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6695c17e9dfb48451bddca92bd90d993">&#9670;&nbsp;</a></span>Run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::Run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Does not return until the UI is completely finished. </p>

</div>
</div>
<a id="a4bf35b458905ad217b0622f2696f8923"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bf35b458905ad217b0622f2696f8923">&#9670;&nbsp;</a></span>RunInThread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::RunInThread </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; void()&gt;&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Runs</p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>in a separate thread. Do NOT call UI functions in <code>f</code>; if you have a long running function that needs to call UI functions (e.g. updating a progress bar), have your function call <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a243f4d66ed41d15a5d5b8748283fe0ac">PostToMainThread()</a> with code that will do the UI (note: your function may finish before the code given to PostToMainThread will run, so if using lambdas, capture by copy and make sure whatever you use will still be alive). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8371333a7aa27b96702e2893eea32456"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8371333a7aa27b96702e2893eea32456">&#9670;&nbsp;</a></span>RunOneTick()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::gui::Application::RunOneTick </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl-2">EnvUnlocker</a> &amp;&#160;</td>
          <td class="paramname"><em>unlocker</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cleanup_if_no_windows</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>For internal use. Returns true if the run loop has not finished, and false if the last window has closed or <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#afac784fac9e4869027f3a5aec7ff9f6e" title="Closes all the windows, which exits as a result.">Quit()</a> has been called. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl-2">EnvUnlocker</a> allows an external environment to provide a way to unlock the environment while we wait for the next event. This is useful to release the Python GIL, for example. Callers of of Open3D's GUI from languages such as scripting languages which do not expect the author to need to clean up after themselves may want to write their own <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Run()</a> function that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a8371333a7aa27b96702e2893eea32456">RunOneTick()</a> with cleanup_if_no_windows=false and schedule a call to <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a34f68a927ac7693d0adc3b624d1bc5be">OnTerminate()</a> with atexit(). </p>

</div>
</div>
<a id="a954fc1db0ce2c755a8ed5d9c6e25decf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a954fc1db0ce2c755a8ed5d9c6e25decf">&#9670;&nbsp;</a></span>SetFont()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::SetFont </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#afd08cbfb6f8791d2e062fb299dbfb1a4">FontId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_font">FontDescription</a> &amp;&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replaces font. Must be called after <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#ad52500c7da7dc18f0f9d811ad5aadfe2">Initialize()</a> and before a window is created. </p>

</div>
</div>
<a id="a70e9b727d39873b879df8fba12cf10ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70e9b727d39873b879df8fba12cf10ee">&#9670;&nbsp;</a></span>SetMenubar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::SetMenubar </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu">Menu</a> &gt;&#160;</td>
          <td class="paramname"><em>menubar</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a224e6d1ad691b4a4ced08151c4529c85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a224e6d1ad691b4a4ced08151c4529c85">&#9670;&nbsp;</a></span>SetWindowSystem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::SetWindowSystem </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2">WindowSystem</a> &gt;&#160;</td>
          <td class="paramname"><em>ws</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2">WindowSystem</a> to given object. Can be used to override the default <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_g_l_">GLFWWindowSystem</a> (e.g. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_bitm">BitmapWindowSystem</a>). Must be called before creating any Windows. </p>

</div>
</div>
<a id="a4a729623070bacc01ec1d997ac479e67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a729623070bacc01ec1d997ac479e67">&#9670;&nbsp;</a></span>ShowMessageBox()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::ShowMessageBox </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a message box window the next time the event loop processes. This message box will be a separate window and not associated with any of the other windows shown with <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a8cf315f9c0421b1b15babb9a9d2d1bff" title="Must be called on the same thread that calls Run()">AddWindow()</a>. THIS FUNCTION SHOULD BE USED ONLY AS A LAST RESORT! If you have a window, you should use <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a73896ee552da53936cfbea4c2280184c">Window::ShowMessageBox()</a> so that the message box will be modal to that window. If you do not have a window it is better to use <a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#a5600c5a4b389c901971cd0bfea18e045">ShowNativeAlert()</a>. If the platform does not have an alert (like Linux), then this can be used as a last resort. </p>

</div>
</div>
<a id="a099fded87d8416b732d6d9de15432a44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a099fded87d8416b732d6d9de15432a44">&#9670;&nbsp;</a></span>UsingNativeWindows()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::gui::Application::UsingNativeWindows </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns true if using the native OS window system, false otherwise. This is useful for choosing to display some features that are only useful with native windows. For instance, when embedded in a Jupyter notebook, a "Close Window" menu item is not necessary. </p>

</div>
</div>
<a id="a0117529987144e27ebee5bec7857bd00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0117529987144e27ebee5bec7857bd00">&#9670;&nbsp;</a></span>VerifyIsInitialized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Application::VerifyIsInitialized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Verifies that <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#ad52500c7da7dc18f0f9d811ad5aadfe2">Initialize()</a> has been called, printing out an error and exiting if not. </p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="aa4deddfe0c3c16d2537f488f489440e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4deddfe0c3c16d2537f488f489440e1">&#9670;&nbsp;</a></span>DEFAULT_FONT_ID</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a#afd08cbfb6f8791d2e062fb299dbfb1a4">FontId</a> open3d::visualization::gui::Application::DEFAULT_FONT_ID = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Identifier for font used by default for all UI elements. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/gui/<a class="el" href="_application_8h_source.html">Application.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/gui/<a class="el" href="_application_8cpp.html">Application.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1gui_1_1_application.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:01:08 GMT -->
</html>
