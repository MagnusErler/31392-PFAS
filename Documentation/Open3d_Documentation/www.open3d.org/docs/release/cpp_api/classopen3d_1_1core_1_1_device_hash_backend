<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_device_hash_backend.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:13 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::DeviceHashBackend Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend">DeviceHashBackend</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::DeviceHashBackend Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_device_hash_backend_8h_source.html">DeviceHashBackend.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::core::DeviceHashBackend:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1core_1_1_device_hash_backend-2" usemap="#open3d::core::DeviceHashBackend_map" alt=""/>
  <map id="open3d::core::DeviceHashBackend_map" name="open3d::core::DeviceHashBackend_map">
<area href="classopen3d_1_1core_1_1_slab_hash_backend.39" alt="open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;" shape="rect" coords="0,56,320,80"/>
<area href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe" alt="open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;" shape="rect" coords="330,56,650,80"/>
<area href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3" alt="open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;" shape="rect" coords="660,56,980,80"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af882033ff231e0a1a8b301e8e80dac78"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#af882033ff231e0a1a8b301e8e80dac78">DeviceHashBackend</a> (int64_t init_capacity, int64_t key_dsize, const std::vector&lt; int64_t &gt; &amp;value_dsizes, const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;device)</td></tr>
<tr class="separator:af882033ff231e0a1a8b301e8e80dac78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e4af8fc8af05bd37fce0eeb8f2c19b1"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a9e4af8fc8af05bd37fce0eeb8f2c19b1">~DeviceHashBackend</a> ()</td></tr>
<tr class="separator:a9e4af8fc8af05bd37fce0eeb8f2c19b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a845cfc534da177bae1fe9566d9c9c01f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a845cfc534da177bae1fe9566d9c9c01f">Reserve</a> (int64_t capacity)=0</td></tr>
<tr class="separator:a845cfc534da177bae1fe9566d9c9c01f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0356b7abac97e6ae75597cef969686ac"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a0356b7abac97e6ae75597cef969686ac">Insert</a> (const void *input_keys, const std::vector&lt; const void * &gt; &amp;input_values, <a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *output_buf_indices, bool *output_masks, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>)=0</td></tr>
<tr class="memdesc:a0356b7abac97e6ae75597cef969686ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel insert contiguous arrays of keys and values.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a0356b7abac97e6ae75597cef969686ac">More...</a><br /></td></tr>
<tr class="separator:a0356b7abac97e6ae75597cef969686ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeba0dc0427070a21e551d0f701f2afdc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#aeba0dc0427070a21e551d0f701f2afdc">Find</a> (const void *input_keys, <a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *output_buf_indices, bool *output_masks, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>)=0</td></tr>
<tr class="memdesc:aeba0dc0427070a21e551d0f701f2afdc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel find a contiguous array of keys.  <a href="classopen3d_1_1core_1_1_device_hash_backend#aeba0dc0427070a21e551d0f701f2afdc">More...</a><br /></td></tr>
<tr class="separator:aeba0dc0427070a21e551d0f701f2afdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23b88c0a8fd28bdd091f1c821c8d2152"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a23b88c0a8fd28bdd091f1c821c8d2152">Erase</a> (const void *input_keys, bool *output_masks, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>)=0</td></tr>
<tr class="memdesc:a23b88c0a8fd28bdd091f1c821c8d2152"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel erase a contiguous array of keys.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a23b88c0a8fd28bdd091f1c821c8d2152">More...</a><br /></td></tr>
<tr class="separator:a23b88c0a8fd28bdd091f1c821c8d2152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad36c2bfcaef4e52e6e726faa1490faa0"><td class="memItemLeft" align="right" valign="top">virtual int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#ad36c2bfcaef4e52e6e726faa1490faa0">GetActiveIndices</a> (<a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *output_buf_indices)=0</td></tr>
<tr class="memdesc:ad36c2bfcaef4e52e6e726faa1490faa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel collect all iterators in the hash table.  <a href="classopen3d_1_1core_1_1_device_hash_backend#ad36c2bfcaef4e52e6e726faa1490faa0">More...</a><br /></td></tr>
<tr class="separator:ad36c2bfcaef4e52e6e726faa1490faa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3390cf8e17b4859fba04d66c44fd1840"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a3390cf8e17b4859fba04d66c44fd1840">Clear</a> ()=0</td></tr>
<tr class="memdesc:a3390cf8e17b4859fba04d66c44fd1840"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear stored map without reallocating memory.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a3390cf8e17b4859fba04d66c44fd1840">More...</a><br /></td></tr>
<tr class="separator:a3390cf8e17b4859fba04d66c44fd1840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cce0c33ef8dbde16d713aa9a515c9f"><td class="memItemLeft" align="right" valign="top">virtual int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#af8cce0c33ef8dbde16d713aa9a515c9f">Size</a> () const =0</td></tr>
<tr class="memdesc:af8cce0c33ef8dbde16d713aa9a515c9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size (number of valid entries) of the hash map.  <a href="classopen3d_1_1core_1_1_device_hash_backend#af8cce0c33ef8dbde16d713aa9a515c9f">More...</a><br /></td></tr>
<tr class="separator:af8cce0c33ef8dbde16d713aa9a515c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca42a6b9ae0d42f4752f5e01b9ce14a2"><td class="memItemLeft" align="right" valign="top">virtual int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#aca42a6b9ae0d42f4752f5e01b9ce14a2">GetBucketCount</a> () const =0</td></tr>
<tr class="memdesc:aca42a6b9ae0d42f4752f5e01b9ce14a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of buckets of the hash map.  <a href="classopen3d_1_1core_1_1_device_hash_backend#aca42a6b9ae0d42f4752f5e01b9ce14a2">More...</a><br /></td></tr>
<tr class="separator:aca42a6b9ae0d42f4752f5e01b9ce14a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e1f89cbf8f2afd0a0966bec0768963"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#ad5e1f89cbf8f2afd0a0966bec0768963">LoadFactor</a> () const =0</td></tr>
<tr class="memdesc:ad5e1f89cbf8f2afd0a0966bec0768963"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current load factor, defined as size / bucket count.  <a href="classopen3d_1_1core_1_1_device_hash_backend#ad5e1f89cbf8f2afd0a0966bec0768963">More...</a><br /></td></tr>
<tr class="separator:ad5e1f89cbf8f2afd0a0966bec0768963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a155c2aba1bdc2622c839af6f5c696d4f"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a155c2aba1bdc2622c839af6f5c696d4f">GetCapacity</a> () const</td></tr>
<tr class="memdesc:a155c2aba1bdc2622c839af6f5c696d4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the maximum capacity of the hash map.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a155c2aba1bdc2622c839af6f5c696d4f">More...</a><br /></td></tr>
<tr class="separator:a155c2aba1bdc2622c839af6f5c696d4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37592de66ebaf9a6fd0d1d8d314468e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a37592de66ebaf9a6fd0d1d8d314468e5">GetDevice</a> () const</td></tr>
<tr class="memdesc:a37592de66ebaf9a6fd0d1d8d314468e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current device.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a37592de66ebaf9a6fd0d1d8d314468e5">More...</a><br /></td></tr>
<tr class="separator:a37592de66ebaf9a6fd0d1d8d314468e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5c56ac52a6032ab6265bec4b0a68842"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; int64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#aa5c56ac52a6032ab6265bec4b0a68842">BucketSizes</a> () const =0</td></tr>
<tr class="memdesc:aa5c56ac52a6032ab6265bec4b0a68842"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of entries per bucket.  <a href="classopen3d_1_1core_1_1_device_hash_backend#aa5c56ac52a6032ab6265bec4b0a68842">More...</a><br /></td></tr>
<tr class="separator:aa5c56ac52a6032ab6265bec4b0a68842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83abd46916b932938758be387f63492b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a83abd46916b932938758be387f63492b">GetKeyBuffer</a> ()</td></tr>
<tr class="memdesc:a83abd46916b932938758be387f63492b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the key buffer that stores actual keys.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a83abd46916b932938758be387f63492b">More...</a><br /></td></tr>
<tr class="separator:a83abd46916b932938758be387f63492b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d5d053395bfa8e927313b1409b843f1"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a3d5d053395bfa8e927313b1409b843f1">GetValueBuffers</a> ()</td></tr>
<tr class="memdesc:a3d5d053395bfa8e927313b1409b843f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value buffers that store actual array of values.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a3d5d053395bfa8e927313b1409b843f1">More...</a><br /></td></tr>
<tr class="separator:a3d5d053395bfa8e927313b1409b843f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80145ae0d13444648c1503cf0c8aebf8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a80145ae0d13444648c1503cf0c8aebf8">GetValueBuffer</a> (size_t i=0)</td></tr>
<tr class="memdesc:a80145ae0d13444648c1503cf0c8aebf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the i-th value buffer that store an actual value array.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a80145ae0d13444648c1503cf0c8aebf8">More...</a><br /></td></tr>
<tr class="separator:a80145ae0d13444648c1503cf0c8aebf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a246ba51b66d0753f71d8e1456fea97ad"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a246ba51b66d0753f71d8e1456fea97ad">Allocate</a> (int64_t capacity)=0</td></tr>
<tr class="separator:a246ba51b66d0753f71d8e1456fea97ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4169dbb3043ae3239cea3eddced73447"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a4169dbb3043ae3239cea3eddced73447">Free</a> ()=0</td></tr>
<tr class="separator:a4169dbb3043ae3239cea3eddced73447"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a8a6f1b6445a9c2805c01d9940300e0b0"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a8a6f1b6445a9c2805c01d9940300e0b0">capacity_</a></td></tr>
<tr class="separator:a8a6f1b6445a9c2805c01d9940300e0b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c9c3ff3cc524042a18ed7f9d4e91703"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a5c9c3ff3cc524042a18ed7f9d4e91703">key_dsize_</a></td></tr>
<tr class="separator:a5c9c3ff3cc524042a18ed7f9d4e91703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a453de3ac93dd0294aad25ab6936c6423"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a453de3ac93dd0294aad25ab6936c6423">value_dsizes_</a></td></tr>
<tr class="separator:a453de3ac93dd0294aad25ab6936c6423"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58c8985584dd94b36f9ebc65db78b8f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a58c8985584dd94b36f9ebc65db78b8f2">device_</a></td></tr>
<tr class="separator:a58c8985584dd94b36f9ebc65db78b8f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50cb13b4eb8eeaa3e979aac3ac5cf7bf"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1core_1_1_hash_backend_buffer">HashBackendBuffer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a50cb13b4eb8eeaa3e979aac3ac5cf7bf">buffer_</a></td></tr>
<tr class="separator:a50cb13b4eb8eeaa3e979aac3ac5cf7bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af882033ff231e0a1a8b301e8e80dac78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af882033ff231e0a1a8b301e8e80dac78">&#9670;&nbsp;</a></span>DeviceHashBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::DeviceHashBackend::DeviceHashBackend </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>init_capacity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>key_dsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>value_dsizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9e4af8fc8af05bd37fce0eeb8f2c19b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e4af8fc8af05bd37fce0eeb8f2c19b1">&#9670;&nbsp;</a></span>~DeviceHashBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual open3d::core::DeviceHashBackend::~DeviceHashBackend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a246ba51b66d0753f71d8e1456fea97ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a246ba51b66d0753f71d8e1456fea97ad">&#9670;&nbsp;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Allocate </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>capacity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a25b25ef81fed3b6a7c2dca47c9be4de4">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#aa67f22fd324bf5b0803ea98dd0a1a23d">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="aa5c56ac52a6032ab6265bec4b0a68842"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5c56ac52a6032ab6265bec4b0a68842">&#9670;&nbsp;</a></span>BucketSizes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::vector&lt;int64_t&gt; open3d::core::DeviceHashBackend::BucketSizes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of entries per bucket. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#acbc040307c0ff22c45aacf1f1d78396d">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a41f01efe0a415abf7aded985810eee4a">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="a3390cf8e17b4859fba04d66c44fd1840"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3390cf8e17b4859fba04d66c44fd1840">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear stored map without reallocating memory. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#aae710f2ef01f103bee8c8b24127db440">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a725a0e48f959f03a9232e832ef190ad4">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="a23b88c0a8fd28bdd091f1c821c8d2152"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23b88c0a8fd28bdd091f1c821c8d2152">&#9670;&nbsp;</a></span>Erase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Erase </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>output_masks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel erase a contiguous array of keys. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#af4de3d1ecc0b9ada42fbe980f2789294">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a14d462f51f13fc6b20913418ba0f73ee">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="aeba0dc0427070a21e551d0f701f2afdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeba0dc0427070a21e551d0f701f2afdc">&#9670;&nbsp;</a></span>Find()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Find </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *&#160;</td>
          <td class="paramname"><em>output_buf_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>output_masks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel find a contiguous array of keys. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#ae20101cb56e9743bee199aa43d071ab5">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a125a94518c4fa2e4b01ff3274ba4970d">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="a4169dbb3043ae3239cea3eddced73447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4169dbb3043ae3239cea3eddced73447">&#9670;&nbsp;</a></span>Free()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Free </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a18230c8d527f19d31447f0f912bce4de">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a92a1d5a25fa9f13e3f53e091b162bd4a">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a7f1890bf25420708d1f671049bf97279">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="ad36c2bfcaef4e52e6e726faa1490faa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad36c2bfcaef4e52e6e726faa1490faa0">&#9670;&nbsp;</a></span>GetActiveIndices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int64_t open3d::core::DeviceHashBackend::GetActiveIndices </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *&#160;</td>
          <td class="paramname"><em>output_buf_indices</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel collect all iterators in the hash table. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a4bd4d1506c4f8fb21ceba54b06e67260">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a6b825912de9c4ef7c124c1a2d16e2423">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="aca42a6b9ae0d42f4752f5e01b9ce14a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca42a6b9ae0d42f4752f5e01b9ce14a2">&#9670;&nbsp;</a></span>GetBucketCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int64_t open3d::core::DeviceHashBackend::GetBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of buckets of the hash map. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a7f57e1172f090429728a62cb2c2809bc">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a8f42ffeca74635f54b32920ec2332ec3">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="a155c2aba1bdc2622c839af6f5c696d4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a155c2aba1bdc2622c839af6f5c696d4f">&#9670;&nbsp;</a></span>GetCapacity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::DeviceHashBackend::GetCapacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the maximum capacity of the hash map. </p>

</div>
</div>
<a id="a37592de66ebaf9a6fd0d1d8d314468e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37592de66ebaf9a6fd0d1d8d314468e5">&#9670;&nbsp;</a></span>GetDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> open3d::core::DeviceHashBackend::GetDevice </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current device. </p>

</div>
</div>
<a id="a83abd46916b932938758be387f63492b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83abd46916b932938758be387f63492b">&#9670;&nbsp;</a></span>GetKeyBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> open3d::core::DeviceHashBackend::GetKeyBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the key buffer that stores actual keys. </p>

</div>
</div>
<a id="a80145ae0d13444648c1503cf0c8aebf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80145ae0d13444648c1503cf0c8aebf8">&#9670;&nbsp;</a></span>GetValueBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> open3d::core::DeviceHashBackend::GetValueBuffer </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>i</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the i-th value buffer that store an actual value array. </p>

</div>
</div>
<a id="a3d5d053395bfa8e927313b1409b843f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d5d053395bfa8e927313b1409b843f1">&#9670;&nbsp;</a></span>GetValueBuffers()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&gt; open3d::core::DeviceHashBackend::GetValueBuffers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the value buffers that store actual array of values. </p>

</div>
</div>
<a id="a0356b7abac97e6ae75597cef969686ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0356b7abac97e6ae75597cef969686ac">&#9670;&nbsp;</a></span>Insert()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Insert </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; const void * &gt; &amp;&#160;</td>
          <td class="paramname"><em>input_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *&#160;</td>
          <td class="paramname"><em>output_buf_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>output_masks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel insert contiguous arrays of keys and values. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a7110b8bcc58978fe56f4e014ac62f4cb">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a0c15728e96276e5e3040c7b6e5270e52">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="ad5e1f89cbf8f2afd0a0966bec0768963"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5e1f89cbf8f2afd0a0966bec0768963">&#9670;&nbsp;</a></span>LoadFactor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float open3d::core::DeviceHashBackend::LoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current load factor, defined as size / bucket count. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a301383d3d531fea3888e5ec3027f50c1">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#adf62573862d1da9997fba0a3fcad05fe">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="a845cfc534da177bae1fe9566d9c9c01f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a845cfc534da177bae1fe9566d9c9c01f">&#9670;&nbsp;</a></span>Reserve()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::core::DeviceHashBackend::Reserve </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>capacity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reserve expects a lot of extra memory space at runtime, since it consists of 1) dumping all key value pairs to a buffer 2) creating a new hash table 3) parallel inserting dumped key value pairs 4) deallocating old hash table </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ac3d7d31adc70dd721cea1c446e08a885">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#aabbcf408688c2a8b31bc3364a420569c">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#a4dac325c92cadba2837392e35c004d55">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<a id="af8cce0c33ef8dbde16d713aa9a515c9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8cce0c33ef8dbde16d713aa9a515c9f">&#9670;&nbsp;</a></span>Size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int64_t open3d::core::DeviceHashBackend::Size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size (number of valid entries) of the hash map. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;</a>, <a class="el" href="classopen3d_1_1core_1_1_slab_hash_backend.39#a76008b99b3b0bbd31745c43539488fa3">open3d::core::SlabHashBackend&lt; Key, Hash, Eq &gt;</a>, and <a class="el" href="classopen3d_1_1core_1_1_t_b_b_hash_backend.3#ab0cfe1a1eb2451ba17a5b541b67ac7ef">open3d::core::TBBHashBackend&lt; Key, Hash, Eq &gt;</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a50cb13b4eb8eeaa3e979aac3ac5cf7bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50cb13b4eb8eeaa3e979aac3ac5cf7bf">&#9670;&nbsp;</a></span>buffer_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopen3d_1_1core_1_1_hash_backend_buffer">HashBackendBuffer</a>&gt; open3d::core::DeviceHashBackend::buffer_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a6f1b6445a9c2805c01d9940300e0b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a6f1b6445a9c2805c01d9940300e0b0">&#9670;&nbsp;</a></span>capacity_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::DeviceHashBackend::capacity_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a58c8985584dd94b36f9ebc65db78b8f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58c8985584dd94b36f9ebc65db78b8f2">&#9670;&nbsp;</a></span>device_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> open3d::core::DeviceHashBackend::device_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c9c3ff3cc524042a18ed7f9d4e91703"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c9c3ff3cc524042a18ed7f9d4e91703">&#9670;&nbsp;</a></span>key_dsize_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::DeviceHashBackend::key_dsize_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a453de3ac93dd0294aad25ab6936c6423"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a453de3ac93dd0294aad25ab6936c6423">&#9670;&nbsp;</a></span>value_dsizes_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int64_t&gt; open3d::core::DeviceHashBackend::value_dsizes_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/hashmap/<a class="el" href="_device_hash_backend_8h_source.html">DeviceHashBackend.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_device_hash_backend.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:14 GMT -->
</html>
