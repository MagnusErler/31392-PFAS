<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_coordinate_transformation_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:41 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/ml/impl/continuous_conv/CoordinateTransformation.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_b383250e6a9804e003b118f7109c729e.4d9.del">ml</a></li><li class="navelem"><a class="el" href="dir_d2402e7861dbbf5555a99e031eda3ca3.8e8.del">impl</a></li><li class="navelem"><a class="el" href="dir_4b58b113595680d998266bc1fc8ab010.c11.del">continuous_conv</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CoordinateTransformation.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_coordinate_transformation_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;Eigen/Geometry&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_continuous_conv_types_8h.html">open3d/ml/impl/continuous_conv/ContinuousConvTypes.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span>ml {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span>impl {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1ml_1_1impl.html#a8396125aae3812d1757ef005bc4c3ce4">   21</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a8396125aae3812d1757ef005bc4c3ce4">MapSphereToCylinder</a>(Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; x,</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;                                Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; y,</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                                Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; z) {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    Eigen::Array&lt;T, VECSIZE, 1&gt; sq_norm = x * x + y * y + z * z;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    Eigen::Array&lt;T, VECSIZE, 1&gt; norm = sq_norm.sqrt();</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>; ++i) {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">if</span> (sq_norm(i) &lt; T(1e-12)) {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            x(i) = y(i) = z(i) = T(0);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (T(5.0 / 4) * z(i) * z(i) &gt; (x(i) * x(i) + y(i) * y(i))) {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            T s = std::sqrt(3 * norm(i) / (norm(i) + std::abs(z(i))));</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            x(i) *= s;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            y(i) *= s;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            z(i) = std::copysign(norm(i), z(i));</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            T s = norm(i) / std::sqrt(x(i) * x(i) + y(i) * y(i));</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            x(i) *= s;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            y(i) *= s;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            z(i) *= T(3.0 / 2);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1ml_1_1impl.html#a9dfff6f757e20d8bb7a1d4d91ef51a6e">   47</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a9dfff6f757e20d8bb7a1d4d91ef51a6e">MapCylinderToCube</a>(Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; x,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                              Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; y,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                              Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; z) {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Eigen::Array&lt;T, VECSIZE, 1&gt; sq_norm_xy = x * x + y * y;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Eigen::Array&lt;T, VECSIZE, 1&gt; norm_xy = sq_norm_xy.sqrt();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>; ++i) {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">if</span> (sq_norm_xy(i) &lt; T(1e-12)) {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            x(i) = y(i) = T(0);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::abs(y(i)) &lt;= std::abs(x(i))) {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            T tmp = std::copysign(norm_xy(i), x(i));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            y(i) = tmp * T(4 / M_PI) * std::atan(y(i) / x(i));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            x(i) = tmp;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        } <span class="keywordflow">else</span>  <span class="comment">// if( std::abs(x(i)) &lt;= y(i) )</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            T tmp = std::copysign(norm_xy(i), y(i));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            x(i) = tmp * T(4 / M_PI) * std::atan(x(i) / y(i));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            y(i) = tmp;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> ALIGN_CORNERS, CoordinateMapping MAPPING, <span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1ml_1_1impl.html#ad572103472cf4e42c90b41aa88b6d51e">  107</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#ad572103472cf4e42c90b41aa88b6d51e">ComputeFilterCoordinates</a>(</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; x,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; y,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; z,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">const</span> Eigen::Array&lt;int, 3, 1&gt;&amp; filter_size,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 3&gt;&amp; inv_extents,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> Eigen::Array&lt;T, 3, 1&gt;&amp; <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span> (MAPPING == <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fba128eca8782c4ff1d0e70ee09d99ec5d7">CoordinateMapping::BALL_TO_CUBE_RADIAL</a>) {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">// x,y,z is now in the range [-1,1]</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        x *= 2 * inv_extents.col(0);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        y *= 2 * inv_extents.col(1);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        z *= 2 * inv_extents.col(2);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        Eigen::Array&lt;T, VECSIZE, 1&gt; radius = (x * x + y * y + z * z).sqrt();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>; ++i) {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            T abs_max = std::max(std::abs(x(i)),</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                 std::max(std::abs(y(i)), std::abs(z(i))));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">if</span> (abs_max &lt; T(1e-8)) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                x(i) = 0;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                y(i) = 0;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                z(i) = 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="comment">// map to the unit cube with edge length 1 and range [-0.5,0.5]</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                x(i) *= T(0.5) * radius(i) / abs_max;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                y(i) *= T(0.5) * radius(i) / abs_max;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                z(i) *= T(0.5) * radius(i) / abs_max;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (MAPPING == <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fba3bdf207d9ebb484a4aa36673674fa69f">CoordinateMapping::BALL_TO_CUBE_VOLUME_PRESERVING</a>) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">// x,y,z is now in the range [-1,1]</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        x *= 2 * inv_extents.col(0);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        y *= 2 * inv_extents.col(1);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        z *= 2 * inv_extents.col(2);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a8396125aae3812d1757ef005bc4c3ce4">MapSphereToCylinder</a>(x, y, z);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a9dfff6f757e20d8bb7a1d4d91ef51a6e">MapCylinderToCube</a>(x, y, z);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        x *= T(0.5);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        y *= T(0.5);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        z *= T(0.5);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// map to the unit cube with edge length 1 and range [-0.5,0.5]</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        x *= inv_extents.col(0);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        y *= inv_extents.col(1);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        z *= inv_extents.col(2);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">if</span> (ALIGN_CORNERS) {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        x += T(0.5);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        y += T(0.5);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        z += T(0.5);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        x *= filter_size.x() - 1;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        y *= filter_size.y() - 1;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        z *= filter_size.z() - 1;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        x *= filter_size.x();</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        y *= filter_size.y();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        z *= filter_size.z();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        x += <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>.x();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        y += <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>.y();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        z += <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>.z();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// integer div</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        x += filter_size.x() / 2;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        y += filter_size.y() / 2;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        z += filter_size.z() / 2;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="comment">// shift if the filter size is even</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">if</span> (filter_size.x() % 2 == 0) x -= T(0.5);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span> (filter_size.y() % 2 == 0) y -= T(0.5);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">if</span> (filter_size.z() % 2 == 0) z -= T(0.5);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE, InterpolationMode INTERPOLATION&gt;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation">  185</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation">InterpolationVec</a> {};</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2">  189</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation">InterpolationVec</a>&lt;T, <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>, <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">InterpolationMode</a>::<a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a2902d456779f799905d50574750e1f62a4c3ea169e4887079fcee81e2d9c07a60">NEAREST_NEIGHBOR</a>&gt; {</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a4e166aad07471ad60a6ee7aca2635aab">  190</a></span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;T, 1, VECSIZE&gt; <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a4e166aad07471ad60a6ee7aca2635aab">Weight_t</a>;</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#afa0c0560141e2cd4035af7952fc04da4">  191</a></span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;int, 1, VECSIZE&gt; <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#afa0c0560141e2cd4035af7952fc04da4">Idx_t</a>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a8982fe6d71de77f97cfa499b22683494">  195</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">int</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a8982fe6d71de77f97cfa499b22683494">Size</a>() { <span class="keywordflow">return</span> 1; };</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a6ab26804e7344b867fd7878523cd5763">  214</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a6ab26804e7344b867fd7878523cd5763">Interpolate</a>(Eigen::Array&lt;T, 1, VECSIZE&gt;&amp; w,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                            Eigen::Array&lt;int, 1, VECSIZE&gt;&amp; idx,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; x,</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; y,</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; z,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;int, 3, 1&gt;&amp; filter_size,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            <span class="keywordtype">int</span> num_channels = 1)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        Eigen::Array&lt;int, VECSIZE, 1&gt; xi, yi, zi;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        xi = x.round().template cast&lt;int&gt;();</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        yi = y.round().template cast&lt;int&gt;();</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        zi = z.round().template cast&lt;int&gt;();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="comment">// clamp to the valid range</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        xi = xi.min(filter_size.x() - 1).max(0);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        yi = yi.min(filter_size.y() - 1).max(0);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        zi = zi.min(filter_size.z() - 1).max(0);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        idx = num_channels * (zi * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                              yi * filter_size.x() + xi);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        w = 1;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;};</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3">  239</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation">InterpolationVec</a>&lt;T, <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>, <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">InterpolationMode</a>::<a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8daaac544aacc3615aada24897a215f5046">LINEAR</a>&gt; {</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a4ba41aa02430dd261fc0daedd7f8de3b">  240</a></span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;T, 8, VECSIZE&gt; <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a4ba41aa02430dd261fc0daedd7f8de3b">Weight_t</a>;</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a7dabf3e3ea06c126433bb29c8b7177f0">  241</a></span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;int, 8, VECSIZE&gt; <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a7dabf3e3ea06c126433bb29c8b7177f0">Idx_t</a>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a6ba49f8160348f9058bef3b5eac70d52">  243</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">int</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a6ba49f8160348f9058bef3b5eac70d52">Size</a>() { <span class="keywordflow">return</span> 8; };</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#ae28bbd30430cfa67cb83332106bacc11">  245</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#ae28bbd30430cfa67cb83332106bacc11">Interpolate</a>(Eigen::Array&lt;T, 8, VECSIZE&gt;&amp; w,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                            Eigen::Array&lt;int, 8, VECSIZE&gt;&amp; idx,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; x,</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; y,</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; z,</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;int, 3, 1&gt;&amp; filter_size,</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                            <span class="keywordtype">int</span> num_channels = 1)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>; ++i) {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordtype">int</span> xi0 = std::max(0, std::min(<span class="keywordtype">int</span>(x(i)), filter_size.x() - 1));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordtype">int</span> xi1 = std::max(0, std::min(xi0 + 1, filter_size.x() - 1));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordtype">int</span> yi0 = std::max(0, std::min(<span class="keywordtype">int</span>(y(i)), filter_size.y() - 1));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordtype">int</span> yi1 = std::max(0, std::min(yi0 + 1, filter_size.y() - 1));</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordtype">int</span> zi0 = std::max(0, std::min(<span class="keywordtype">int</span>(z(i)), filter_size.z() - 1));</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordtype">int</span> zi1 = std::max(0, std::min(zi0 + 1, filter_size.z() - 1));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            T a = std::max(T(0), std::min(x(i) - xi0, T(1)));</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            T b = std::max(T(0), std::min(y(i) - yi0, T(1)));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            T c = std::max(T(0), std::min(z(i) - zi0, T(1)));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            w.col(i) &lt;&lt; (1 - a) * (1 - b) * (1 - c), (a) * (1 - b) * (1 - c),</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    (1 - a) * (b) * (1 - c), (a) * (b) * (1 - c),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    (1 - a) * (1 - b) * (c), (a) * (1 - b) * (c),</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    (1 - a) * (b) * (c), (a) * (b) * (c);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            idx.col(i) &lt;&lt; zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                  yi0 * filter_size.x() + xi0,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                            yi0 * filter_size.x() + xi1,</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            yi1 * filter_size.x() + xi0,</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                            yi1 * filter_size.x() + xi1,</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            yi0 * filter_size.x() + xi0,</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                            yi0 * filter_size.x() + xi1,</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                            yi1 * filter_size.x() + xi0,</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                            yi1 * filter_size.x() + xi1;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        idx *= num_channels;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;};</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4">  294</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation">InterpolationVec</a>&lt;T, <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>, <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">InterpolationMode</a>::<a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8daedc71d68a68ed5f29b9a3e9cb2e680d9">LINEAR_BORDER</a>&gt; {</div>
<div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#a29302b3cf36bdaa967912090759c152e">  295</a></span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;T, 8, VECSIZE&gt; <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#a29302b3cf36bdaa967912090759c152e">Weight_t</a>;</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#ab5cb4536b4ccf3414feae3489ee329cc">  296</a></span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;int, 8, VECSIZE&gt; <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#ab5cb4536b4ccf3414feae3489ee329cc">Idx_t</a>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#a0811cccbd012903cb574ae7bf302c1c3">  298</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">int</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#a0811cccbd012903cb574ae7bf302c1c3">Size</a>() { <span class="keywordflow">return</span> 8; };</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#ae572472f6920e8e21995d5aa0da254fb">  300</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#ae572472f6920e8e21995d5aa0da254fb">Interpolate</a>(Eigen::Array&lt;T, 8, VECSIZE&gt;&amp; w,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                            Eigen::Array&lt;int, 8, VECSIZE&gt;&amp; idx,</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; x,</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; y,</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;T, VECSIZE, 1&gt;&amp; z,</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                            <span class="keyword">const</span> Eigen::Array&lt;int, 3, 1&gt;&amp; filter_size,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                            <span class="keywordtype">int</span> num_channels = 1)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>; ++i) {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordtype">int</span> xi0 = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(<a class="code" href="namespaceopen3d_1_1utility.html#adc7d2fe3359fe2c3df71efb13eb3b1c6">std::floor</a>(x(i)));</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordtype">int</span> xi1 = xi0 + 1;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordtype">int</span> yi0 = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(<a class="code" href="namespaceopen3d_1_1utility.html#adc7d2fe3359fe2c3df71efb13eb3b1c6">std::floor</a>(y(i)));</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordtype">int</span> yi1 = yi0 + 1;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordtype">int</span> zi0 = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(<a class="code" href="namespaceopen3d_1_1utility.html#adc7d2fe3359fe2c3df71efb13eb3b1c6">std::floor</a>(z(i)));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordtype">int</span> zi1 = zi0 + 1;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            T a = x(i) - xi0;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            T b = y(i) - yi0;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            T c = z(i) - zi0;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordflow">if</span> (zi0 &lt; 0 || yi0 &lt; 0 || xi0 &lt; 0 || zi0 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                yi0 &gt;= filter_size.y() || xi0 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                idx(0, i) = 0;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                w(0, i) = 0;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                idx(0, i) = zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                            yi0 * filter_size.x() + xi0;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                w(0, i) = (1 - a) * (1 - b) * (1 - c);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">if</span> (zi0 &lt; 0 || yi0 &lt; 0 || xi1 &lt; 0 || zi0 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                yi0 &gt;= filter_size.y() || xi1 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                idx(1, i) = 0;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                w(1, i) = 0;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                idx(1, i) = zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                            yi0 * filter_size.x() + xi1;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                w(1, i) = (a) * (1 - b) * (1 - c);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">if</span> (zi0 &lt; 0 || yi1 &lt; 0 || xi0 &lt; 0 || zi0 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                yi1 &gt;= filter_size.y() || xi0 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                idx(2, i) = 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                w(2, i) = 0;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                idx(2, i) = zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            yi1 * filter_size.x() + xi0;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                w(2, i) = (1 - a) * (b) * (1 - c);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">if</span> (zi0 &lt; 0 || yi1 &lt; 0 || xi1 &lt; 0 || zi0 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                yi1 &gt;= filter_size.y() || xi1 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                idx(3, i) = 0;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                w(3, i) = 0;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                idx(3, i) = zi0 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            yi1 * filter_size.x() + xi1;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                w(3, i) = (a) * (b) * (1 - c);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">if</span> (zi1 &lt; 0 || yi0 &lt; 0 || xi0 &lt; 0 || zi1 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                yi0 &gt;= filter_size.y() || xi0 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                idx(4, i) = 0;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                w(4, i) = 0;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                idx(4, i) = zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            yi0 * filter_size.x() + xi0;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                w(4, i) = (1 - a) * (1 - b) * (c);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="keywordflow">if</span> (zi1 &lt; 0 || yi0 &lt; 0 || xi1 &lt; 0 || zi1 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                yi0 &gt;= filter_size.y() || xi1 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                idx(5, i) = 0;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                w(5, i) = 0;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                idx(5, i) = zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                            yi0 * filter_size.x() + xi1;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                w(5, i) = (a) * (1 - b) * (c);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keywordflow">if</span> (zi1 &lt; 0 || yi1 &lt; 0 || xi0 &lt; 0 || zi1 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                yi1 &gt;= filter_size.y() || xi0 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                idx(6, i) = 0;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                w(6, i) = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                idx(6, i) = zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                            yi1 * filter_size.x() + xi0;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                w(6, i) = (1 - a) * (b) * (c);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keywordflow">if</span> (zi1 &lt; 0 || yi1 &lt; 0 || xi1 &lt; 0 || zi1 &gt;= filter_size.z() ||</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                yi1 &gt;= filter_size.y() || xi1 &gt;= filter_size.x()) {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                idx(7, i) = 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                w(7, i) = 0;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                idx(7, i) = zi1 * filter_size.y() * filter_size.x() +</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                            yi1 * filter_size.x() + xi1;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                w(7, i) = (a) * (b) * (c);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        idx *= num_channels;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;};</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}  <span class="comment">// namespace impl</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}  <span class="comment">// namespace ml</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_continuous_conv_types_8h_html"><div class="ttname"><a href="_continuous_conv_types_8h.html">ContinuousConvTypes.h</a></div></div>
<div class="ttc" id="a_fixed_radius_search_impl_8h_html_a36a1e768e2eb11edcae1d9081eb07394"><div class="ttname"><a href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a></div><div class="ttdeci">#define VECSIZE</div></div>
<div class="ttc" id="aio_2file__format_2_file_p_c_d_8cpp_html_aed7ea92f45bd273dde380a45ddced592"><div class="ttname"><a href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a></div><div class="ttdeci">int offset</div><div class="ttdef"><b>Definition:</b> FilePCD.cpp:45</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_a56444bbf00a8b57cbf3aaef24f882123"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">open3d::io::k4a_plugin::int</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample playback_handle k4a_logging_message_cb_t void min_level device_handle k4a_imu_sample_t timeout_in_ms capture_handle capture_handle capture_handle image_handle temperature_c int</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:474</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a1cdea72ec606986b7ada2e619ea41a8d"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">open3d::ml::impl::InterpolationMode</a></div><div class="ttdeci">InterpolationMode</div><div class="ttdef"><b>Definition:</b> ContinuousConvTypes.h:18</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a1cdea72ec606986b7ada2e619ea41a8daaac544aacc3615aada24897a215f5046"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8daaac544aacc3615aada24897a215f5046">open3d::ml::impl::InterpolationMode::LINEAR</a></div><div class="ttdeci">@ LINEAR</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a1cdea72ec606986b7ada2e619ea41a8daedc71d68a68ed5f29b9a3e9cb2e680d9"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8daedc71d68a68ed5f29b9a3e9cb2e680d9">open3d::ml::impl::InterpolationMode::LINEAR_BORDER</a></div><div class="ttdeci">@ LINEAR_BORDER</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a2902d456779f799905d50574750e1f62a4c3ea169e4887079fcee81e2d9c07a60"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a2902d456779f799905d50574750e1f62a4c3ea169e4887079fcee81e2d9c07a60">open3d::ml::impl::NEAREST_NEIGHBOR</a></div><div class="ttdeci">@ NEAREST_NEIGHBOR</div><div class="ttdef"><b>Definition:</b> VoxelPooling.h:21</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a8396125aae3812d1757ef005bc4c3ce4"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a8396125aae3812d1757ef005bc4c3ce4">open3d::ml::impl::MapSphereToCylinder</a></div><div class="ttdeci">void MapSphereToCylinder(Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;x, Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;y, Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;z)</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:21</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a9dfff6f757e20d8bb7a1d4d91ef51a6e"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a9dfff6f757e20d8bb7a1d4d91ef51a6e">open3d::ml::impl::MapCylinderToCube</a></div><div class="ttdeci">void MapCylinderToCube(Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;x, Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;y, Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;z)</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:47</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_ad39d07a9288168e9ecab8f34e24d27fba128eca8782c4ff1d0e70ee09d99ec5d7"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fba128eca8782c4ff1d0e70ee09d99ec5d7">open3d::ml::impl::CoordinateMapping::BALL_TO_CUBE_RADIAL</a></div><div class="ttdeci">@ BALL_TO_CUBE_RADIAL</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_ad39d07a9288168e9ecab8f34e24d27fba3bdf207d9ebb484a4aa36673674fa69f"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fba3bdf207d9ebb484a4aa36673674fa69f">open3d::ml::impl::CoordinateMapping::BALL_TO_CUBE_VOLUME_PRESERVING</a></div><div class="ttdeci">@ BALL_TO_CUBE_VOLUME_PRESERVING</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_ad572103472cf4e42c90b41aa88b6d51e"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#ad572103472cf4e42c90b41aa88b6d51e">open3d::ml::impl::ComputeFilterCoordinates</a></div><div class="ttdeci">void ComputeFilterCoordinates(Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;x, Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;y, Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;z, const Eigen::Array&lt; int, 3, 1 &gt; &amp;filter_size, const Eigen::Array&lt; T, VECSIZE, 3 &gt; &amp;inv_extents, const Eigen::Array&lt; T, 3, 1 &gt; &amp;offset)</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:107</div></div>
<div class="ttc" id="anamespaceopen3d_1_1utility_html_adc7d2fe3359fe2c3df71efb13eb3b1c6"><div class="ttname"><a href="namespaceopen3d_1_1utility.html#adc7d2fe3359fe2c3df71efb13eb3b1c6">open3d::utility::floor</a></div><div class="ttdeci">FN_SPECIFIERS MiniVec&lt; float, N &gt; floor(const MiniVec&lt; float, N &gt; &amp;a)</div><div class="ttdef"><b>Definition:</b> MiniVec.h:75</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_95485d4a2b201b34eb24195f71135bf0_html_a0811cccbd012903cb574ae7bf302c1c3"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#a0811cccbd012903cb574ae7bf302c1c3">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR_BORDER &gt;::Size</a></div><div class="ttdeci">static constexpr int Size()</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:298</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_95485d4a2b201b34eb24195f71135bf0_html_a29302b3cf36bdaa967912090759c152e"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#a29302b3cf36bdaa967912090759c152e">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR_BORDER &gt;::Weight_t</a></div><div class="ttdeci">Eigen::Array&lt; T, 8, VECSIZE &gt; Weight_t</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:295</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_95485d4a2b201b34eb24195f71135bf0_html_ab5cb4536b4ccf3414feae3489ee329cc"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#ab5cb4536b4ccf3414feae3489ee329cc">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR_BORDER &gt;::Idx_t</a></div><div class="ttdeci">Eigen::Array&lt; int, 8, VECSIZE &gt; Idx_t</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:296</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_95485d4a2b201b34eb24195f71135bf0_html_ae572472f6920e8e21995d5aa0da254fb"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-4#ae572472f6920e8e21995d5aa0da254fb">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR_BORDER &gt;::Interpolate</a></div><div class="ttdeci">void Interpolate(Eigen::Array&lt; T, 8, VECSIZE &gt; &amp;w, Eigen::Array&lt; int, 8, VECSIZE &gt; &amp;idx, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;x, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;y, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;z, const Eigen::Array&lt; int, 3, 1 &gt; &amp;filter_size, int num_channels=1) const</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:300</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_cd597b204d877719caa3e7255081e4a8_html_a4e166aad07471ad60a6ee7aca2635aab"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a4e166aad07471ad60a6ee7aca2635aab">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::NEAREST_NEIGHBOR &gt;::Weight_t</a></div><div class="ttdeci">Eigen::Array&lt; T, 1, VECSIZE &gt; Weight_t</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:190</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_cd597b204d877719caa3e7255081e4a8_html_a6ab26804e7344b867fd7878523cd5763"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a6ab26804e7344b867fd7878523cd5763">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::NEAREST_NEIGHBOR &gt;::Interpolate</a></div><div class="ttdeci">void Interpolate(Eigen::Array&lt; T, 1, VECSIZE &gt; &amp;w, Eigen::Array&lt; int, 1, VECSIZE &gt; &amp;idx, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;x, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;y, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;z, const Eigen::Array&lt; int, 3, 1 &gt; &amp;filter_size, int num_channels=1) const</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:214</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_cd597b204d877719caa3e7255081e4a8_html_a8982fe6d71de77f97cfa499b22683494"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#a8982fe6d71de77f97cfa499b22683494">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::NEAREST_NEIGHBOR &gt;::Size</a></div><div class="ttdeci">static constexpr int Size()</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:195</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_cd597b204d877719caa3e7255081e4a8_html_afa0c0560141e2cd4035af7952fc04da4"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-2#afa0c0560141e2cd4035af7952fc04da4">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::NEAREST_NEIGHBOR &gt;::Idx_t</a></div><div class="ttdeci">Eigen::Array&lt; int, 1, VECSIZE &gt; Idx_t</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:191</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_mode_1_1_l_i_n_e_a_r_01_4_html_a4ba41aa02430dd261fc0daedd7f8de3b"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a4ba41aa02430dd261fc0daedd7f8de3b">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR &gt;::Weight_t</a></div><div class="ttdeci">Eigen::Array&lt; T, 8, VECSIZE &gt; Weight_t</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:240</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_mode_1_1_l_i_n_e_a_r_01_4_html_a6ba49f8160348f9058bef3b5eac70d52"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a6ba49f8160348f9058bef3b5eac70d52">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR &gt;::Size</a></div><div class="ttdeci">static constexpr int Size()</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:243</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_mode_1_1_l_i_n_e_a_r_01_4_html_a7dabf3e3ea06c126433bb29c8b7177f0"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#a7dabf3e3ea06c126433bb29c8b7177f0">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR &gt;::Idx_t</a></div><div class="ttdeci">Eigen::Array&lt; int, 8, VECSIZE &gt; Idx_t</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:241</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_3_01_t_00_01_v_e_c_s_i_z_e_00_01_interpolation_mode_1_1_l_i_n_e_a_r_01_4_html_ae28bbd30430cfa67cb83332106bacc11"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation-3#ae28bbd30430cfa67cb83332106bacc11">open3d::ml::impl::InterpolationVec&lt; T, VECSIZE, InterpolationMode::LINEAR &gt;::Interpolate</a></div><div class="ttdeci">void Interpolate(Eigen::Array&lt; T, 8, VECSIZE &gt; &amp;w, Eigen::Array&lt; int, 8, VECSIZE &gt; &amp;idx, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;x, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;y, const Eigen::Array&lt; T, VECSIZE, 1 &gt; &amp;z, const Eigen::Array&lt; int, 3, 1 &gt; &amp;filter_size, int num_channels=1) const</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:245</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_html"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation">open3d::ml::impl::InterpolationVec</a></div><div class="ttdoc">Class for computing interpolation weights.</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:185</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_coordinate_transformation_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:41 GMT -->
</html>
