<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1core_1_1shape__util.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:03 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::shape_util Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d">shape_util</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::shape_util Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8e642c40e3e2a9ad0f31b0794c1c90bc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#a8e642c40e3e2a9ad0f31b0794c1c90bc">IsCompatibleBroadcastShape</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;l_shape, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;r_shape)</td></tr>
<tr class="memdesc:a8e642c40e3e2a9ad0f31b0794c1c90bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if two shapes are compatible for broadcasting.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#a8e642c40e3e2a9ad0f31b0794c1c90bc">More...</a><br /></td></tr>
<tr class="separator:a8e642c40e3e2a9ad0f31b0794c1c90bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5092e29260f402102618524fe6c0cd88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#a5092e29260f402102618524fe6c0cd88">BroadcastedShape</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;l_shape, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;r_shape)</td></tr>
<tr class="memdesc:a5092e29260f402102618524fe6c0cd88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the broadcasted shape of two shapes.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#a5092e29260f402102618524fe6c0cd88">More...</a><br /></td></tr>
<tr class="separator:a5092e29260f402102618524fe6c0cd88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd6f74cb042a1150d4b69d1cd4c5cb78"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#abd6f74cb042a1150d4b69d1cd4c5cb78">CanBeBrocastedToShape</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;src_shape, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;dst_shape)</td></tr>
<tr class="memdesc:abd6f74cb042a1150d4b69d1cd4c5cb78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if <code>src_shape</code> can be brocasted to <code>dst_shape</code>.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#abd6f74cb042a1150d4b69d1cd4c5cb78">More...</a><br /></td></tr>
<tr class="separator:abd6f74cb042a1150d4b69d1cd4c5cb78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b2f984b1fe121ec6c9a97a6737ba9f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#a7b2f984b1fe121ec6c9a97a6737ba9f2">ReductionShape</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;src_shape, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;dims, bool keepdim)</td></tr>
<tr class="memdesc:a7b2f984b1fe121ec6c9a97a6737ba9f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the shape after reduction.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#a7b2f984b1fe121ec6c9a97a6737ba9f2">More...</a><br /></td></tr>
<tr class="separator:a7b2f984b1fe121ec6c9a97a6737ba9f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3997c75eb03b9de96a3cbb5f4a39601"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#ab3997c75eb03b9de96a3cbb5f4a39601">WrapDim</a> (int64_t dim, int64_t max_dim, bool inclusive=false)</td></tr>
<tr class="memdesc:ab3997c75eb03b9de96a3cbb5f4a39601"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrap around negative <code>dim</code>.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#ab3997c75eb03b9de96a3cbb5f4a39601">More...</a><br /></td></tr>
<tr class="separator:ab3997c75eb03b9de96a3cbb5f4a39601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a693101e789f6069f59454c801283f8da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#a693101e789f6069f59454c801283f8da">InferShape</a> (<a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> shape, int64_t num_elements)</td></tr>
<tr class="separator:a693101e789f6069f59454c801283f8da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae651748e40cf8b3cc7516be5d96a1f38"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#ae651748e40cf8b3cc7516be5d96a1f38">Concat</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;l_shape, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;r_shape)</td></tr>
<tr class="memdesc:ae651748e40cf8b3cc7516be5d96a1f38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Concatenate two shapes.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#ae651748e40cf8b3cc7516be5d96a1f38">More...</a><br /></td></tr>
<tr class="separator:ae651748e40cf8b3cc7516be5d96a1f38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aa4d3b227e9ea49466d325d3fc548a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#a4aa4d3b227e9ea49466d325d3fc548a0">Iota</a> (int64_t n)</td></tr>
<tr class="memdesc:a4aa4d3b227e9ea49466d325d3fc548a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> of {0, 1, ..., n - 1}, similar to std::iota.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#a4aa4d3b227e9ea49466d325d3fc548a0">More...</a><br /></td></tr>
<tr class="separator:a4aa4d3b227e9ea49466d325d3fc548a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab48ccb4729a1422940bb0badfa6ab9f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#ab48ccb4729a1422940bb0badfa6ab9f2">DefaultStrides</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;shape)</td></tr>
<tr class="memdesc:ab48ccb4729a1422940bb0badfa6ab9f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute default strides for a shape when a tensor is contiguous.  <a href="namespaceopen3d_1_1core_1_1shape__util.380.d#ab48ccb4729a1422940bb0badfa6ab9f2">More...</a><br /></td></tr>
<tr class="separator:ab48ccb4729a1422940bb0badfa6ab9f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1eb1631c686c1b00d71a4bb894ff4d7"><td class="memItemLeft" align="right" valign="top">std::pair&lt; bool, <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1core_1_1shape__util.380.d#ab1eb1631c686c1b00d71a4bb894ff4d7">Restride</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;old_shape, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;old_strides, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;new_shape)</td></tr>
<tr class="separator:ab1eb1631c686c1b00d71a4bb894ff4d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a5092e29260f402102618524fe6c0cd88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5092e29260f402102618524fe6c0cd88">&#9670;&nbsp;</a></span>BroadcastedShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::shape_util::BroadcastedShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>l_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>r_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the broadcasted shape of two shapes. </p>
<p>E.g. BroadcastedShape({3, 1, 2}, {5, 1}) -&gt; {3, 5, 2} BroadcastedShape({3, 1, 2}, {5, 3}) -&gt; Exception </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">l_shape</td><td>Shape of the left-hand-side <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>. </td></tr>
    <tr><td class="paramname">r_shape</td><td>Shape of the left-hand-side <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The broadcasted shape. </dd></dl>

</div>
</div>
<a id="abd6f74cb042a1150d4b69d1cd4c5cb78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd6f74cb042a1150d4b69d1cd4c5cb78">&#9670;&nbsp;</a></span>CanBeBrocastedToShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::shape_util::CanBeBrocastedToShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>src_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>dst_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if <code>src_shape</code> can be brocasted to <code>dst_shape</code>. </p>
<p>E.g. CanBeBrocastedToShape({1, 2}, {3, 5, 2}) -&gt; true CanBeBrocastedToShape({1, 2}, {3, 5, 3}) -&gt; false </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src_shape</td><td>Source tensor shape. </td></tr>
    <tr><td class="paramname">dst_shape</td><td>Destination tensor shape. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if <code>src_shape</code> can be brocasted to <code>dst_shape</code>. </dd></dl>

</div>
</div>
<a id="ae651748e40cf8b3cc7516be5d96a1f38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae651748e40cf8b3cc7516be5d96a1f38">&#9670;&nbsp;</a></span>Concat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::shape_util::Concat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>l_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>r_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Concatenate two shapes. </p>

</div>
</div>
<a id="ab48ccb4729a1422940bb0badfa6ab9f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab48ccb4729a1422940bb0badfa6ab9f2">&#9670;&nbsp;</a></span>DefaultStrides()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::shape_util::DefaultStrides </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute default strides for a shape when a tensor is contiguous. </p>

</div>
</div>
<a id="a693101e789f6069f59454c801283f8da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a693101e789f6069f59454c801283f8da">&#9670;&nbsp;</a></span>InferShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::shape_util::InferShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>num_elements</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Infers the size of a dim with size -1, if it exists. Also checks that new shape is compatible with the number of elements.</p>
<p>E.g. Shape({2, -1, 4}) with num_elemnts 24, will be inferred as {2, 3, 4}.</p>
<p>Ref: PyTorch's aten/src/ATen/InferSize.h </p>

</div>
</div>
<a id="a4aa4d3b227e9ea49466d325d3fc548a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4aa4d3b227e9ea49466d325d3fc548a0">&#9670;&nbsp;</a></span>Iota()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::shape_util::Iota </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> of {0, 1, ..., n - 1}, similar to std::iota. </p>

</div>
</div>
<a id="a8e642c40e3e2a9ad0f31b0794c1c90bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e642c40e3e2a9ad0f31b0794c1c90bc">&#9670;&nbsp;</a></span>IsCompatibleBroadcastShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::shape_util::IsCompatibleBroadcastShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>l_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>r_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if two shapes are compatible for broadcasting. </p>
<p>E.g. IsCompatibleBroadcastShape({3, 1, 2}, {5, 1}) -&gt; true IsCompatibleBroadcastShape({3, 1, 2}, {5, 3}) -&gt; false </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">l_shape</td><td>Shape of the left-hand-side <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>. </td></tr>
    <tr><td class="paramname">r_shape</td><td>Shape of the left-hand-side <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if <code>l_shape</code> and <code>r_shape</code> are compatible for broadcasting. </dd></dl>

</div>
</div>
<a id="a7b2f984b1fe121ec6c9a97a6737ba9f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b2f984b1fe121ec6c9a97a6737ba9f2">&#9670;&nbsp;</a></span>ReductionShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::shape_util::ReductionShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>src_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keepdim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the shape after reduction. </p>
<p>E.g. CanBeBrocastedToShape({1, 2}, {3, 5, 2}) -&gt; true CanBeBrocastedToShape({1, 2}, {3, 5, 3}) -&gt; false </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src_shape</td><td>shape to reduce </td></tr>
    <tr><td class="paramname">dims</td><td>A list of dimensions to be reduced. </td></tr>
    <tr><td class="paramname">keepdim</td><td>If true, the reduced dims will be retained as size 1. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab1eb1631c686c1b00d71a4bb894ff4d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1eb1631c686c1b00d71a4bb894ff4d7">&#9670;&nbsp;</a></span>Restride()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; bool, <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &gt; open3d::core::shape_util::Restride </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>old_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>old_strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>new_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<ol type="1">
<li>Separate <code>oldshape</code> into chunks of dimensions, where the dimensions are `&lsquo;contiguous&rsquo;' in each chunk, i.e., oldstride[i] = oldshape[i+1] * oldstride[i+1]</li>
<li><code>newshape</code> must be able to be separated into same number of chunks as <code>oldshape</code> was separated into, where each chunk of newshape has matching `&lsquo;numel&rsquo;', i.e., number of subspaces, as the corresponding chunk of <code>oldshape</code>. Ref: aten/src/ATen/TensorUtils.cpp </li>
</ol>

</div>
</div>
<a id="ab3997c75eb03b9de96a3cbb5f4a39601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3997c75eb03b9de96a3cbb5f4a39601">&#9670;&nbsp;</a></span>WrapDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::shape_util::WrapDim </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>max_dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>inclusive</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wrap around negative <code>dim</code>. </p>
<p>E.g. If max_dim == 5, dim -1 will be converted to 4.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dim</td><td>Dimension index </td></tr>
    <tr><td class="paramname">max_dim</td><td>Maximum dimension index </td></tr>
    <tr><td class="paramname">inclusive</td><td>Set to true to allow dim == max_dim. E.g. for slice T[start:end], we allow end == max_dim. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1core_1_1shape__util.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:03 GMT -->
</html>
