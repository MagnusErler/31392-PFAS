<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1geometry_1_1kernel_1_1pointcloud.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:02:13 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::kernel::pointcloud Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4">kernel</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3">pointcloud</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::kernel::pointcloud Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8b60362dce76067d7947d3a67fe757aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a8b60362dce76067d7947d3a67fe757aa">Unproject</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;depth, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; image_colors, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsics, float depth_scale, float depth_max, int64_t <a class="el" href="_triangle_mesh_buffers_8cpp.html#a3f19cd85df5258a38e4618a89bd5ff46">stride</a>)</td></tr>
<tr class="separator:a8b60362dce76067d7947d3a67fe757aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8ad1f9ee80aaadc25175d8b4c187a74"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#aa8ad1f9ee80aaadc25175d8b4c187a74">Project</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;depth, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; image_colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsics, float depth_scale, float depth_max)</td></tr>
<tr class="separator:aa8ad1f9ee80aaadc25175d8b4c187a74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a166fe3f736d5e0c39370f3a787c92823"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a166fe3f736d5e0c39370f3a787c92823">GetPointMaskWithinAABB</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;min_bound, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;max_bound, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;mask)</td></tr>
<tr class="separator:a166fe3f736d5e0c39370f3a787c92823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaefce435467df18716fe4fd2a7cc7453"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#aaefce435467df18716fe4fd2a7cc7453">GetPointMaskWithinOBB</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;center, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;rotation, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extent, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;mask)</td></tr>
<tr class="separator:aaefce435467df18716fe4fd2a7cc7453"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cbc05afdd14097db52a47f346e2e589"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a2cbc05afdd14097db52a47f346e2e589">UnprojectCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;depth, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; image_colors, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsics, float depth_scale, float depth_max, int64_t <a class="el" href="_triangle_mesh_buffers_8cpp.html#a3f19cd85df5258a38e4618a89bd5ff46">stride</a>)</td></tr>
<tr class="separator:a2cbc05afdd14097db52a47f346e2e589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b042231916761c6157e808b534d9920"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a4b042231916761c6157e808b534d9920">ProjectCPU</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;depth, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; image_colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt; colors, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsics, float depth_scale, float depth_max)</td></tr>
<tr class="separator:a4b042231916761c6157e808b534d9920"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c61432731583a51461f18d6648df775"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a6c61432731583a51461f18d6648df775">GetPointMaskWithinAABBCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;min_bound, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;max_bound, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;mask)</td></tr>
<tr class="separator:a6c61432731583a51461f18d6648df775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7ae2c168f4995ee53cfbbc35571ef91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#ad7ae2c168f4995ee53cfbbc35571ef91">GetPointMaskWithinOBBCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;center, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;rotation, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extent, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;mask)</td></tr>
<tr class="separator:ad7ae2c168f4995ee53cfbbc35571ef91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9327d0bae8fe340002c931b2e7d6a7b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a9327d0bae8fe340002c931b2e7d6a7b6">NormalizeNormalsCPU</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals)</td></tr>
<tr class="separator:a9327d0bae8fe340002c931b2e7d6a7b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af375a28ea2864482582af7c8e64eb29a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#af375a28ea2864482582af7c8e64eb29a">OrientNormalsToAlignWithDirectionCPU</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;direction)</td></tr>
<tr class="separator:af375a28ea2864482582af7c8e64eb29a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a469e2b9f194a9cd8c5ca928be7a1135a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a469e2b9f194a9cd8c5ca928be7a1135a">OrientNormalsTowardsCameraLocationCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;camera)</td></tr>
<tr class="separator:a469e2b9f194a9cd8c5ca928be7a1135a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a701effd361818a96d61fda2dfb80274d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a701effd361818a96d61fda2dfb80274d">ComputeBoundaryPointsCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;indices, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;counts, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;mask, double angle_threshold)</td></tr>
<tr class="separator:a701effd361818a96d61fda2dfb80274d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08070fb2fb86132ea420e56fd69cdb50"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a08070fb2fb86132ea420e56fd69cdb50">EstimateCovariancesUsingHybridSearchCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;covariances, const double &amp;radius, const int64_t &amp;max_nn)</td></tr>
<tr class="separator:a08070fb2fb86132ea420e56fd69cdb50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af587cc48ce989abe0dedd33d2ee3f0f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#af587cc48ce989abe0dedd33d2ee3f0f4">EstimateCovariancesUsingKNNSearchCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;covariances, const int64_t &amp;max_nn)</td></tr>
<tr class="separator:af587cc48ce989abe0dedd33d2ee3f0f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a276d226256a7e9447746b150e6d2696f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a276d226256a7e9447746b150e6d2696f">EstimateCovariancesUsingRadiusSearchCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;covariances, const double &amp;radius)</td></tr>
<tr class="separator:a276d226256a7e9447746b150e6d2696f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30c0bdec1fc9d93431c5606ecec5e819"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a30c0bdec1fc9d93431c5606ecec5e819">EstimateNormalsFromCovariancesCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;covariances, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const bool <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#abb697d81df2187149a94f865ce8cdf65">has_normals</a>)</td></tr>
<tr class="separator:a30c0bdec1fc9d93431c5606ecec5e819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbad6f50f677302d61722759258ac2f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#adbad6f50f677302d61722759258ac2f0">EstimateColorGradientsUsingHybridSearchCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;colors, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;color_gradient, const double &amp;radius, const int64_t &amp;max_nn)</td></tr>
<tr class="separator:adbad6f50f677302d61722759258ac2f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b7ed23af4e84ee162251fe9da5d344a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a7b7ed23af4e84ee162251fe9da5d344a">EstimateColorGradientsUsingKNNSearchCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;colors, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;color_gradient, const int64_t &amp;max_nn)</td></tr>
<tr class="separator:a7b7ed23af4e84ee162251fe9da5d344a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5f4a461d41510cfcb2b6ef5899ed649"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#ad5f4a461d41510cfcb2b6ef5899ed649">EstimateColorGradientsUsingRadiusSearchCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;normals, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;colors, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;color_gradient, const double &amp;radius)</td></tr>
<tr class="separator:ad5f4a461d41510cfcb2b6ef5899ed649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2845a37a81208c4633a88d3ee4421cb6"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a2845a37a81208c4633a88d3ee4421cb6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a2845a37a81208c4633a88d3ee4421cb6">GetCoordinateSystemOnPlane</a> (const scalar_t *query, scalar_t *u, scalar_t *v)</td></tr>
<tr class="separator:a2845a37a81208c4633a88d3ee4421cb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d222b8143b2f95949ed05a1a3a8e2f8"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a6d222b8143b2f95949ed05a1a3a8e2f8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a6d222b8143b2f95949ed05a1a3a8e2f8">Swap</a> (scalar_t *x, scalar_t *y)</td></tr>
<tr class="separator:a6d222b8143b2f95949ed05a1a3a8e2f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1f6fac2ce8f8086d854b71e1f9764b7"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:af1f6fac2ce8f8086d854b71e1f9764b7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#af1f6fac2ce8f8086d854b71e1f9764b7">Heapify</a> (scalar_t *arr, int n, int root)</td></tr>
<tr class="separator:af1f6fac2ce8f8086d854b71e1f9764b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af667fca4fd4509dcc416d0c3e256609a"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:af667fca4fd4509dcc416d0c3e256609a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#af667fca4fd4509dcc416d0c3e256609a">HeapSort</a> (scalar_t *arr, int n)</td></tr>
<tr class="separator:af667fca4fd4509dcc416d0c3e256609a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e7d3453ad705208541fcbeb6809aea7"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a6e7d3453ad705208541fcbeb6809aea7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a6e7d3453ad705208541fcbeb6809aea7">IsBoundaryPoints</a> (const scalar_t *angles, int counts, double angle_threshold)</td></tr>
<tr class="separator:a6e7d3453ad705208541fcbeb6809aea7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69b2a90ed4e772f97497ff37e58bcb79"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a69b2a90ed4e772f97497ff37e58bcb79"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a69b2a90ed4e772f97497ff37e58bcb79">EstimatePointWiseRobustNormalizedCovarianceKernel</a> (const scalar_t *points_ptr, const int32_t *indices_ptr, const int32_t &amp;indices_count, scalar_t *covariance_ptr)</td></tr>
<tr class="separator:a69b2a90ed4e772f97497ff37e58bcb79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4576972522e394e66bab91b5a814a303"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:a4576972522e394e66bab91b5a814a303"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#a4576972522e394e66bab91b5a814a303">ComputeEigenvector0</a> (const scalar_t *A, const scalar_t eval0, scalar_t *eigen_vector0)</td></tr>
<tr class="separator:a4576972522e394e66bab91b5a814a303"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace30d4ee717eb7756416c47267c2d428"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:ace30d4ee717eb7756416c47267c2d428"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#ace30d4ee717eb7756416c47267c2d428">ComputeEigenvector1</a> (const scalar_t *A, const scalar_t *evec0, const scalar_t eval1, scalar_t *eigen_vector1)</td></tr>
<tr class="separator:ace30d4ee717eb7756416c47267c2d428"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae51feb1d083ee9563afd158b54516e21"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:ae51feb1d083ee9563afd158b54516e21"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#ae51feb1d083ee9563afd158b54516e21">EstimatePointWiseNormalsWithFastEigen3x3</a> (const scalar_t *covariance_ptr, scalar_t *normals_ptr)</td></tr>
<tr class="separator:ae51feb1d083ee9563afd158b54516e21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceaa2964f648c82b4099a881a96478ee"><td class="memTemplParams" colspan="2">template&lt;typename scalar_t &gt; </td></tr>
<tr class="memitem:aceaa2964f648c82b4099a881a96478ee"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel_1-3#aceaa2964f648c82b4099a881a96478ee">EstimatePointWiseColorGradientKernel</a> (const scalar_t *points_ptr, const scalar_t *normals_ptr, const scalar_t *colors_ptr, const int32_t &amp;idx_offset, const int32_t *indices_ptr, const int32_t &amp;indices_count, scalar_t *color_gradients_ptr)</td></tr>
<tr class="separator:aceaa2964f648c82b4099a881a96478ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a701effd361818a96d61fda2dfb80274d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a701effd361818a96d61fda2dfb80274d">&#9670;&nbsp;</a></span>ComputeBoundaryPointsCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::ComputeBoundaryPointsCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>counts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>angle_threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4576972522e394e66bab91b5a814a303"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4576972522e394e66bab91b5a814a303">&#9670;&nbsp;</a></span>ComputeEigenvector0()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::ComputeEigenvector0 </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t&#160;</td>
          <td class="paramname"><em>eval0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>eigen_vector0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ace30d4ee717eb7756416c47267c2d428"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace30d4ee717eb7756416c47267c2d428">&#9670;&nbsp;</a></span>ComputeEigenvector1()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::ComputeEigenvector1 </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>evec0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t&#160;</td>
          <td class="paramname"><em>eval1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>eigen_vector1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adbad6f50f677302d61722759258ac2f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbad6f50f677302d61722759258ac2f0">&#9670;&nbsp;</a></span>EstimateColorGradientsUsingHybridSearchCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateColorGradientsUsingHybridSearchCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>color_gradient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>radius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t &amp;&#160;</td>
          <td class="paramname"><em>max_nn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7b7ed23af4e84ee162251fe9da5d344a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b7ed23af4e84ee162251fe9da5d344a">&#9670;&nbsp;</a></span>EstimateColorGradientsUsingKNNSearchCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateColorGradientsUsingKNNSearchCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>color_gradient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t &amp;&#160;</td>
          <td class="paramname"><em>max_nn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad5f4a461d41510cfcb2b6ef5899ed649"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5f4a461d41510cfcb2b6ef5899ed649">&#9670;&nbsp;</a></span>EstimateColorGradientsUsingRadiusSearchCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateColorGradientsUsingRadiusSearchCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>color_gradient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>radius</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a08070fb2fb86132ea420e56fd69cdb50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08070fb2fb86132ea420e56fd69cdb50">&#9670;&nbsp;</a></span>EstimateCovariancesUsingHybridSearchCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateCovariancesUsingHybridSearchCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>covariances</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>radius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t &amp;&#160;</td>
          <td class="paramname"><em>max_nn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af587cc48ce989abe0dedd33d2ee3f0f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af587cc48ce989abe0dedd33d2ee3f0f4">&#9670;&nbsp;</a></span>EstimateCovariancesUsingKNNSearchCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateCovariancesUsingKNNSearchCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>covariances</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int64_t &amp;&#160;</td>
          <td class="paramname"><em>max_nn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a276d226256a7e9447746b150e6d2696f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a276d226256a7e9447746b150e6d2696f">&#9670;&nbsp;</a></span>EstimateCovariancesUsingRadiusSearchCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateCovariancesUsingRadiusSearchCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>covariances</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>radius</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a30c0bdec1fc9d93431c5606ecec5e819"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30c0bdec1fc9d93431c5606ecec5e819">&#9670;&nbsp;</a></span>EstimateNormalsFromCovariancesCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::EstimateNormalsFromCovariancesCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>covariances</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>has_normals</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aceaa2964f648c82b4099a881a96478ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aceaa2964f648c82b4099a881a96478ee">&#9670;&nbsp;</a></span>EstimatePointWiseColorGradientKernel()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::EstimatePointWiseColorGradientKernel </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>normals_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>colors_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>idx_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname"><em>indices_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>indices_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>color_gradients_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae51feb1d083ee9563afd158b54516e21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae51feb1d083ee9563afd158b54516e21">&#9670;&nbsp;</a></span>EstimatePointWiseNormalsWithFastEigen3x3()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::EstimatePointWiseNormalsWithFastEigen3x3 </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>covariance_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>normals_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a69b2a90ed4e772f97497ff37e58bcb79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69b2a90ed4e772f97497ff37e58bcb79">&#9670;&nbsp;</a></span>EstimatePointWiseRobustNormalizedCovarianceKernel()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::EstimatePointWiseRobustNormalizedCovarianceKernel </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>points_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname"><em>indices_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>indices_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>covariance_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2845a37a81208c4633a88d3ee4421cb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2845a37a81208c4633a88d3ee4421cb6">&#9670;&nbsp;</a></span>GetCoordinateSystemOnPlane()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::GetCoordinateSystemOnPlane </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a166fe3f736d5e0c39370f3a787c92823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a166fe3f736d5e0c39370f3a787c92823">&#9670;&nbsp;</a></span>GetPointMaskWithinAABB()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::GetPointMaskWithinAABB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>min_bound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>max_bound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6c61432731583a51461f18d6648df775"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c61432731583a51461f18d6648df775">&#9670;&nbsp;</a></span>GetPointMaskWithinAABBCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::GetPointMaskWithinAABBCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>min_bound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>max_bound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaefce435467df18716fe4fd2a7cc7453"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaefce435467df18716fe4fd2a7cc7453">&#9670;&nbsp;</a></span>GetPointMaskWithinOBB()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::GetPointMaskWithinOBB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>rotation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad7ae2c168f4995ee53cfbbc35571ef91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7ae2c168f4995ee53cfbbc35571ef91">&#9670;&nbsp;</a></span>GetPointMaskWithinOBBCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::GetPointMaskWithinOBBCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>rotation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1f6fac2ce8f8086d854b71e1f9764b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1f6fac2ce8f8086d854b71e1f9764b7">&#9670;&nbsp;</a></span>Heapify()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::Heapify </td>
          <td>(</td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>root</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af667fca4fd4509dcc416d0c3e256609a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af667fca4fd4509dcc416d0c3e256609a">&#9670;&nbsp;</a></span>HeapSort()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::HeapSort </td>
          <td>(</td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e7d3453ad705208541fcbeb6809aea7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e7d3453ad705208541fcbeb6809aea7">&#9670;&nbsp;</a></span>IsBoundaryPoints()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::geometry::kernel::pointcloud::IsBoundaryPoints </td>
          <td>(</td>
          <td class="paramtype">const scalar_t *&#160;</td>
          <td class="paramname"><em>angles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>counts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>angle_threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9327d0bae8fe340002c931b2e7d6a7b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9327d0bae8fe340002c931b2e7d6a7b6">&#9670;&nbsp;</a></span>NormalizeNormalsCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::NormalizeNormalsCPU </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af375a28ea2864482582af7c8e64eb29a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af375a28ea2864482582af7c8e64eb29a">&#9670;&nbsp;</a></span>OrientNormalsToAlignWithDirectionCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::OrientNormalsToAlignWithDirectionCPU </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a469e2b9f194a9cd8c5ca928be7a1135a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a469e2b9f194a9cd8c5ca928be7a1135a">&#9670;&nbsp;</a></span>OrientNormalsTowardsCameraLocationCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::OrientNormalsTowardsCameraLocationCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>camera</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa8ad1f9ee80aaadc25175d8b4c187a74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8ad1f9ee80aaadc25175d8b4c187a74">&#9670;&nbsp;</a></span>Project()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::Project </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>image_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4b042231916761c6157e808b534d9920"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b042231916761c6157e808b534d9920">&#9670;&nbsp;</a></span>ProjectCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::ProjectCPU </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>image_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6d222b8143b2f95949ed05a1a3a8e2f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d222b8143b2f95949ed05a1a3a8e2f8">&#9670;&nbsp;</a></span>Swap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename scalar_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> void open3d::t::geometry::kernel::pointcloud::Swap </td>
          <td>(</td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">scalar_t *&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8b60362dce76067d7947d3a67fe757aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b60362dce76067d7947d3a67fe757aa">&#9670;&nbsp;</a></span>Unproject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::Unproject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>image_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2cbc05afdd14097db52a47f346e2e589"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cbc05afdd14097db52a47f346e2e589">&#9670;&nbsp;</a></span>UnprojectCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::kernel::pointcloud::UnprojectCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>image_colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; std::reference_wrapper&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1geometry_1_1kernel_1_1pointcloud.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:02:13 GMT -->
</html>
