<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_std_g_p_u_hash_backend_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:00:01 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/core/hashmap/CUDA/StdGPUHashBackend.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_559a533dc613f808f5747b65451c8a78.48c.del">core</a></li><li class="navelem"><a class="el" href="dir_ffa67b2964f7855cb8806476a13cb367.5a0.del">hashmap</a></li><li class="navelem"><a class="el" href="dir_6af912363938fcacd9d19a6bfa1e46ca.5a3.del">CUDA</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">StdGPUHashBackend.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_std_g_p_u_hash_backend_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;stdgpu/memory.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;thrust/device_vector.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;thrust/transform.h&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;stdgpu/unordered_map.cuh&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_u_d_a_utils_8h.html">open3d/core/CUDAUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_std_allocator_8h.html">open3d/core/StdAllocator.h</a>&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_u_d_a_hash_backend_buffer_accessor_8h.9d9">open3d/core/hashmap/CUDA/CUDAHashBackendBufferAccessor.h</a>&quot;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_device_hash_backend_8h.html">open3d/core/hashmap/DeviceHashBackend.h</a>&quot;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="hashmap_2_dispatch_8h.html">open3d/core/hashmap/Dispatch.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">namespace </span>core {</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">   32</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac0cc68e4a486f4a4561999e02236aa31">   35</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac0cc68e4a486f4a4561999e02236aa31">value_type</a> = T;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a3569fde5a091935de0ddd934564a1aa3">   38</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a3569fde5a091935de0ddd934564a1aa3">StdGPUAllocator</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59c42ff6f73c100a49d11dbd51efd27f">   41</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59c42ff6f73c100a49d11dbd51efd27f">StdGPUAllocator</a>(<span class="keywordtype">int</span> device_id) : std_allocator_(device_id) {}</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59f61dba084aa411dfd7513cd5f37bf0">   44</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59f61dba084aa411dfd7513cd5f37bf0">StdGPUAllocator</a>(<span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ad426fba0f26b655ebcf80a3295fae65b">   47</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp; <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ad426fba0f26b655ebcf80a3295fae65b">operator=</a>(<span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#abecaeb2743648dc95d0eaa250d6f6566">   50</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#abecaeb2743648dc95d0eaa250d6f6566">StdGPUAllocator</a>(<a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac8dc63698b8ee7229aae3169eca640b7">   53</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp; <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac8dc63698b8ee7229aae3169eca640b7">operator=</a>(<a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ae5307b960412f4c21cb7593d993522a0">   57</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ae5307b960412f4c21cb7593d993522a0">StdGPUAllocator</a>(<span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator&lt;U&gt;</a>&amp; other)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        : std_allocator_(other.std_allocator_) {}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a0df4be9afce871bc087dc571445cd8e7">   61</a></span>&#160;    T* <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a0df4be9afce871bc087dc571445cd8e7">allocate</a>(<a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a550ae900deb35c2c638a899170251ee9">std::size_t</a> n) {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        T* p = std_allocator_.allocate(n);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        stdgpu::register_memory(p, n, stdgpu::dynamic_memory_type::device);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> p;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a66736f553393e6a50946ce92261143c8">   68</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a66736f553393e6a50946ce92261143c8">deallocate</a>(T* p, <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a550ae900deb35c2c638a899170251ee9">std::size_t</a> n) {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        stdgpu::deregister_memory(p, n, stdgpu::dynamic_memory_type::device);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        std_allocator_.deallocate(p, n);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a7a80f51411debcd3c66f4b73480e0efe">   74</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a7a80f51411debcd3c66f4b73480e0efe">operator==</a>(<span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp; other) {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> std_allocator_ == other.std_allocator_;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#adbb4660d529be9fc142edb023f0ec45e">   79</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#adbb4660d529be9fc142edb023f0ec45e">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp; other) { <span class="keywordflow">return</span> !<a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a7a80f51411debcd3c66f4b73480e0efe">operator==</a>(other); }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Allow access in rebind constructor.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T2&gt;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a571bce86c518f625a0c7ab180382d18f">   84</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_allocator.3bf.de">StdAllocator&lt;T&gt;</a> std_allocator_;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;};</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">// These typedefs must be defined outside of StdGPUHashBackend to make them</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">// accessible in raw CUDA kernels.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key&gt;</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core.html#a4ce1b0846591bb08906a9a51932923c7">   92</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">InternalStdGPUHashBackendAllocator</a> =</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator&lt;thrust::pair&lt;const Key, buf_index_t&gt;</a>&gt;;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">   96</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend</a> =</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        stdgpu::unordered_map&lt;Key,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                              <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                              Hash,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                              Eq,</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                              <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">InternalStdGPUHashBackendAllocator&lt;Key&gt;</a>&gt;;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">  104</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">StdGPUHashBackend</a> : <span class="keyword">public</span> <a class="code" href="classopen3d_1_1core_1_1_device_hash_backend">DeviceHashBackend</a> {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a17c650480d725eeb5bd48dea35a6456c">StdGPUHashBackend</a>(int64_t init_capacity,</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                      int64_t key_dsize,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                      <span class="keyword">const</span> std::vector&lt;int64_t&gt;&amp; value_dsizes,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                      <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_device.html">Device</a>&amp; device);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a2fdc95eded218cfdffb3cf442c2d0567">~StdGPUHashBackend</a>();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ac3d7d31adc70dd721cea1c446e08a885">Reserve</a>(int64_t capacity) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">Insert</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* input_keys,</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keyword">const</span> std::vector&lt;const void*&gt;&amp; input_values_soa,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">Find</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* input_keys,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;              <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;              <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;              int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">Erase</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* input_keys,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;               <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;               int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    int64_t <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">GetActiveIndices</a>(<a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_indices) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">Clear</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    int64_t <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">Size</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    int64_t <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">GetBucketCount</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::vector&lt;int64_t&gt; <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">BucketSizes</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">LoadFactor</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4e6e6579a9a27b979d9d6cc1d63ae8fc">  139</a></span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;</a> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4e6e6579a9a27b979d9d6cc1d63ae8fc">GetImpl</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ab60e83ab6224c8158392d7affd6aa369">impl_</a>; }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">Allocate</a>(int64_t capacity);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a7f1890bf25420708d1f671049bf97279">Free</a>();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Use reference, since the structure itself is implicitly handled as a</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// pointer directly by stdgpu.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ab60e83ab6224c8158392d7affd6aa369">  147</a></span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;</a> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ab60e83ab6224c8158392d7affd6aa369">impl_</a>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#af30766e498fe3e8203e9902a6a4cbef8">  149</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">CUDAHashBackendBufferAccessor</a> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#af30766e498fe3e8203e9902a6a4cbef8">buffer_accessor_</a>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;};</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a17c650480d725eeb5bd48dea35a6456c">  153</a></span>&#160;<a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a17c650480d725eeb5bd48dea35a6456c">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::StdGPUHashBackend</a>(</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        int64_t init_capacity,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        int64_t key_dsize,</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">const</span> std::vector&lt;int64_t&gt;&amp; value_dsizes,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_device.html">Device</a>&amp; device)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    : <a class="code" href="classopen3d_1_1core_1_1_device_hash_backend">DeviceHashBackend</a>(init_capacity, key_dsize, value_dsizes, device) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;<a class="code" href="classopen3d_1_1core_1_1_device_hash_backend#a58c8985584dd94b36f9ebc65db78b8f2">device_</a>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">Allocate</a>(init_capacity);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a2fdc95eded218cfdffb3cf442c2d0567">  164</a></span>&#160;<a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a2fdc95eded218cfdffb3cf442c2d0567">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::~StdGPUHashBackend</a>() {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    Free();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">  170</a></span>&#160;int64_t <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Size</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> impl_.size();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">// Need an explicit kernel for non-const access to map</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core.html#a182277be4f719bff46f128fbf075dc2c">  177</a></span>&#160;__global__ <span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1core.html#a182277be4f719bff46f128fbf075dc2c">STDGPUFindKernel</a>(<a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;</a> map,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                 <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">CUDAHashBackendBufferAccessor</a> buffer_accessor,</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                 <span class="keyword">const</span> Key* input_keys,</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                 <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                 <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                 int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> tid = threadIdx.x + blockIdx.x * blockDim.x;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">if</span> (tid &gt;= <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    Key key = input_keys[tid];</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">auto</span> iter = map.find(key);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">bool</span> flag = (iter != map.end());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    output_masks[tid] = flag;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    output_buf_indices[tid] = flag ? iter-&gt;second : 0;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">  194</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Find</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* input_keys,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                            <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                            <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                            int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> threads = 128;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> blocks = (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a> + threads - 1) / threads;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#a182277be4f719bff46f128fbf075dc2c">STDGPUFindKernel</a>&lt;&lt;&lt;blocks, threads, 0, core::cuda::GetStream()&gt;&gt;&gt;(</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            impl_, buffer_accessor_, <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Key*<span class="keyword">&gt;</span>(input_keys),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            output_buf_indices, output_masks, <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="namespaceopen3d_1_1core_1_1cuda.html#ab9c482d5e2b659cea9d7c54eb24cfc5c">cuda::Synchronize</a>(this-&gt;device_);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">// Need an explicit kernel for non-const access to map</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core.html#a4b2cc154cfd20bb339302cb45c0cf91d">  210</a></span>&#160;__global__ <span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1core.html#a4b2cc154cfd20bb339302cb45c0cf91d">STDGPUEraseKernel</a>(<a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;</a> map,</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                  <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">CUDAHashBackendBufferAccessor</a> buffer_accessor,</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                  <span class="keyword">const</span> Key* input_keys,</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                  <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                  <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                  int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> tid = threadIdx.x + blockIdx.x * blockDim.x;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">if</span> (tid &gt;= <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    Key key = input_keys[tid];</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">auto</span> iter = map.find(key);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">bool</span> flag = (iter != map.end());</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    output_masks[tid] = flag;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    output_buf_indices[tid] = flag ? iter-&gt;second : 0;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">if</span> (output_masks[tid]) {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        output_masks[tid] = map.erase(key);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">if</span> (output_masks[tid]) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            buffer_accessor.<a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#a92255272f37c7ed05099a07d11ebd460">DeviceFree</a>(output_buf_indices[tid]);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">  234</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Erase</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* input_keys,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                             <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                             int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> threads = 128;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> blocks = (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a> + threads - 1) / threads;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> toutput_buf_indices =</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>({<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>}, <a class="code" href="namespaceopen3d_1_1core.html#a6f72622cf5885134fe1e6916db6797d9">core::Int32</a>, this-&gt;device_);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices =</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keyword">static_cast&lt;</span><a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>*<span class="keyword">&gt;</span>(toutput_buf_indices.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#a02fcf79268d821e0b1081207ea02f11c">GetDataPtr</a>());</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#a4b2cc154cfd20bb339302cb45c0cf91d">STDGPUEraseKernel</a>&lt;&lt;&lt;blocks, threads, 0, core::cuda::GetStream()&gt;&gt;&gt;(</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            impl_, buffer_accessor_, <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Key*<span class="keyword">&gt;</span>(input_keys),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            output_buf_indices, output_masks, <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="namespaceopen3d_1_1core_1_1cuda.html#ab9c482d5e2b659cea9d7c54eb24cfc5c">cuda::Synchronize</a>(this-&gt;device_);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key&gt;</div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="structopen3d_1_1core_1_1_value_extractor.39d">  253</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopen3d_1_1core_1_1_value_extractor.39d">ValueExtractor</a> {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a></div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="structopen3d_1_1core_1_1_value_extractor.39d#a873ebb452e225a867ea0fd10fe7e2019">  255</a></span>&#160;    <a class="code" href="structopen3d_1_1core_1_1_value_extractor.39d#a873ebb452e225a867ea0fd10fe7e2019">operator()</a>(<span class="keyword">const</span> thrust::pair&lt;Key, buf_index_t&gt;&amp; x)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> x.second;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;};</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">  261</a></span>&#160;int64_t <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::GetActiveIndices</a>(</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_indices) {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">auto</span> range = impl_.device_range();</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    thrust::transform(range.begin(), range.end(), output_indices,</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                      <a class="code" href="structopen3d_1_1core_1_1_value_extractor.39d">ValueExtractor&lt;Key&gt;</a>());</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">return</span> impl_.size();</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">  273</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Clear</a>() {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    impl_.clear();</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    this-&gt;buffer_-&gt;ResetHeap();</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ac3d7d31adc70dd721cea1c446e08a885">  280</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ac3d7d31adc70dd721cea1c446e08a885">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Reserve</a>(int64_t capacity) {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">  285</a></span>&#160;int64_t <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::GetBucketCount</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">return</span> impl_.bucket_count();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">  291</a></span>&#160;std::vector&lt;int64_t&gt; <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::BucketSizes</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="_logging_8h.html#a611dbbfa5c2f148b7190b97a12835b5e">utility::LogError</a>(<span class="stringliteral">&quot;Unimplemented&quot;</span>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">  297</a></span>&#160;<span class="keywordtype">float</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::LoadFactor</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> impl_.load_factor();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;}</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">// Need an explicit kernel for non-const access to map</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq, <span class="keyword">typename</span> block_t&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core.html#ad0bebab7b26009e5823400513a4c170b">  304</a></span>&#160;__global__ <span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1core.html#ad0bebab7b26009e5823400513a4c170b">STDGPUInsertKernel</a>(</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;</a> map,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">CUDAHashBackendBufferAccessor</a> buffer_accessor,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keyword">const</span> Key* input_keys,</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">void</span>* <span class="keyword">const</span>* input_values_soa,</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>,</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        int64_t n_values) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> tid = threadIdx.x + blockIdx.x * blockDim.x;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">if</span> (tid &gt;= <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    Key key = input_keys[tid];</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    output_buf_indices[tid] = 0;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    output_masks[tid] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// First apply &#39;try insert&#39; with a dummy index</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">auto</span> res = map.emplace(key, 0);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// If success, change the iterator and provide the actual index</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">if</span> (res.second) {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> buf_index = buffer_accessor.<a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#a786baf49266b03227b7432e020680b42">DeviceAllocate</a>();</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">auto</span> key_ptr = buffer_accessor.<a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#ad55682bc28dc4be647b3d9d1bc8b064e">GetKeyPtr</a>(buf_index);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="comment">// Copy templated key to buffer (duplicate)</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">// TODO: hack stdgpu inside and take out the buffer directly</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        *<span class="keyword">static_cast&lt;</span>Key*<span class="keyword">&gt;</span>(key_ptr) = key;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="comment">// Copy/reset non-templated value in buffer</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; n_values; ++j) {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keyword">const</span> int64_t blocks_per_element =</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                    buffer_accessor.<a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#a12986bb83db42301428512a26ffccab9">value_blocks_per_element_</a>[j];</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            block_t* dst_value = <span class="keyword">static_cast&lt;</span>block_t*<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    buffer_accessor.<a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#ae5976790b498688edd4ce38544bc8c47">GetValuePtr</a>(buf_index, j));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keyword">const</span> block_t* src_value =</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>block_t*<span class="keyword">&gt;</span>(input_values_soa[j]) +</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    blocks_per_element * tid;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> b = 0; b &lt; blocks_per_element; ++b) {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                dst_value[b] = src_value[b];</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="comment">// Update from the dummy index</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        res.first-&gt;second = buf_index;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="comment">// Write to return variables</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        output_buf_indices[tid] = buf_index;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        output_masks[tid] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">  357</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Insert</a>(</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">void</span>* input_keys,</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">const</span> std::vector&lt;const void*&gt;&amp; input_values_soa,</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a>* output_buf_indices,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordtype">bool</span>* output_masks,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        int64_t <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> threads = 128;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> blocks = (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a> + threads - 1) / threads;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    thrust::device_vector&lt;const void*&gt; input_values_soa_device(</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            input_values_soa.begin(), input_values_soa.end());</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    int64_t n_values = input_values_soa.size();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* <span class="keyword">const</span>* ptr_input_values_soa =</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            thrust::raw_pointer_cast(input_values_soa_device.data());</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    DISPATCH_DIVISOR_SIZE_TO_BLOCK_T(</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            buffer_accessor_.common_block_size_, [&amp;]() {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                STDGPUInsertKernel&lt;Key, Hash, Eq, block_t&gt;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                        &lt;&lt;&lt;blocks, threads, 0, core::cuda::GetStream()&gt;&gt;&gt;(</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                impl_, buffer_accessor_,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                static_cast&lt;const Key*&gt;(input_keys),</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                ptr_input_values_soa, output_buf_indices,</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                output_masks, count, n_values);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            });</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="namespaceopen3d_1_1core_1_1cuda.html#ab9c482d5e2b659cea9d7c54eb24cfc5c">cuda::Synchronize</a>(this-&gt;device_);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">  387</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Allocate</a>(int64_t capacity) {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    this-&gt;capacity_ = capacity;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Allocate buffer for key values.</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    this-&gt;buffer_ = std::make_shared&lt;HashBackendBuffer&gt;(</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            this-&gt;capacity_, this-&gt;key_dsize_, this-&gt;value_dsizes_,</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            this-&gt;device_);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    buffer_accessor_.Setup(*this-&gt;buffer_);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="comment">// stdgpu initializes on the default stream. Set the current stream to</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// ensure correct behavior.</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        CUDAScopedStream scoped_stream(cuda::GetDefaultStream());</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        impl_ = <a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;::createDeviceObject</a>(</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                this-&gt;capacity_,</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">InternalStdGPUHashBackendAllocator&lt;Key&gt;</a>(this-&gt;device_.GetID()));</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <a class="code" href="namespaceopen3d_1_1core_1_1cuda.html#ab9c482d5e2b659cea9d7c54eb24cfc5c">cuda::Synchronize</a>(this-&gt;device_);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Hash, <span class="keyword">typename</span> Eq&gt;</div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a7f1890bf25420708d1f671049bf97279">  410</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a7f1890bf25420708d1f671049bf97279">StdGPUHashBackend&lt;Key, Hash, Eq&gt;::Free</a>() {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">CUDAScopedDevice</a> scoped_device(this-&gt;device_);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="comment">// Buffer is automatically handled by the smart pointer.</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    buffer_accessor_.Shutdown(this-&gt;device_);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// stdgpu initializes on the default stream. Set the current stream to</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="comment">// ensure correct behavior.</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        CUDAScopedStream scoped_stream(cuda::GetDefaultStream());</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <a class="code" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend&lt;Key, Hash, Eq&gt;::destroyDeviceObject</a>(impl_);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    }</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}  <span class="comment">// namespace core</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_c_u_d_a_hash_backend_buffer_accessor_8h_html"><div class="ttname"><a href="_c_u_d_a_hash_backend_buffer_accessor_8h.9d9">CUDAHashBackendBufferAccessor.h</a></div></div>
<div class="ttc" id="a_c_u_d_a_utils_8h_html"><div class="ttname"><a href="_c_u_d_a_utils_8h.html">CUDAUtils.h</a></div><div class="ttdoc">Common CUDA utilities.</div></div>
<div class="ttc" id="a_c_u_d_a_utils_8h_html_a134fcda29ee61227f5883af2d33c00a1"><div class="ttname"><a href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a></div><div class="ttdeci">#define OPEN3D_HOST_DEVICE</div><div class="ttdef"><b>Definition:</b> CUDAUtils.h:44</div></div>
<div class="ttc" id="a_device_hash_backend_8h_html"><div class="ttname"><a href="_device_hash_backend_8h.html">DeviceHashBackend.h</a></div></div>
<div class="ttc" id="a_logging_8h_html_a611dbbfa5c2f148b7190b97a12835b5e"><div class="ttname"><a href="_logging_8h.html#a611dbbfa5c2f148b7190b97a12835b5e">LogError</a></div><div class="ttdeci">#define LogError(...)</div><div class="ttdef"><b>Definition:</b> Logging.h:48</div></div>
<div class="ttc" id="a_std_allocator_8h_html"><div class="ttname"><a href="_std_allocator_8h.html">StdAllocator.h</a></div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_hash_backend_buffer_accessor_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">open3d::core::CUDAHashBackendBufferAccessor</a></div><div class="ttdef"><b>Definition:</b> CUDAHashBackendBufferAccessor.h:24</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_hash_backend_buffer_accessor_html_a12986bb83db42301428512a26ffccab9"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#a12986bb83db42301428512a26ffccab9">open3d::core::CUDAHashBackendBufferAccessor::value_blocks_per_element_</a></div><div class="ttdeci">int64_t * value_blocks_per_element_</div><div class="ttdef"><b>Definition:</b> CUDAHashBackendBufferAccessor.h:108</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_hash_backend_buffer_accessor_html_a786baf49266b03227b7432e020680b42"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#a786baf49266b03227b7432e020680b42">open3d::core::CUDAHashBackendBufferAccessor::DeviceAllocate</a></div><div class="ttdeci">__device__ buf_index_t DeviceAllocate()</div><div class="ttdef"><b>Definition:</b> CUDAHashBackendBufferAccessor.h:79</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_hash_backend_buffer_accessor_html_a92255272f37c7ed05099a07d11ebd460"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#a92255272f37c7ed05099a07d11ebd460">open3d::core::CUDAHashBackendBufferAccessor::DeviceFree</a></div><div class="ttdeci">__device__ void DeviceFree(buf_index_t ptr)</div><div class="ttdef"><b>Definition:</b> CUDAHashBackendBufferAccessor.h:83</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_hash_backend_buffer_accessor_html_ad55682bc28dc4be647b3d9d1bc8b064e"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#ad55682bc28dc4be647b3d9d1bc8b064e">open3d::core::CUDAHashBackendBufferAccessor::GetKeyPtr</a></div><div class="ttdeci">__device__ void * GetKeyPtr(buf_index_t ptr)</div><div class="ttdef"><b>Definition:</b> CUDAHashBackendBufferAccessor.h:88</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_hash_backend_buffer_accessor_html_ae5976790b498688edd4ce38544bc8c47"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend#ae5976790b498688edd4ce38544bc8c47">open3d::core::CUDAHashBackendBufferAccessor::GetValuePtr</a></div><div class="ttdeci">__device__ void * GetValuePtr(buf_index_t ptr, int value_idx=0)</div><div class="ttdef"><b>Definition:</b> CUDAHashBackendBufferAccessor.h:91</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_c_u_d_a_scoped_device_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_c_u_d_a_scoped_devic">open3d::core::CUDAScopedDevice</a></div><div class="ttdoc">When CUDA is not enabled, this is a dummy class.</div><div class="ttdef"><b>Definition:</b> CUDAUtils.h:214</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_device_hash_backend_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_device_hash_backend">open3d::core::DeviceHashBackend</a></div><div class="ttdef"><b>Definition:</b> DeviceHashBackend.h:20</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_device_hash_backend_html_a58c8985584dd94b36f9ebc65db78b8f2"><div class="ttname"><a href="classopen3d_1_1core_1_1_device_hash_backend#a58c8985584dd94b36f9ebc65db78b8f2">open3d::core::DeviceHashBackend::device_</a></div><div class="ttdeci">Device device_</div><div class="ttdef"><b>Definition:</b> DeviceHashBackend.h:100</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_device_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_device.html">open3d::core::Device</a></div><div class="ttdef"><b>Definition:</b> Device.h:18</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_allocator_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_allocator.3bf.de">open3d::core::StdAllocator</a></div><div class="ttdef"><b>Definition:</b> StdAllocator.h:23</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a></div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:32</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_a0df4be9afce871bc087dc571445cd8e7"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a0df4be9afce871bc087dc571445cd8e7">open3d::core::StdGPUAllocator::allocate</a></div><div class="ttdeci">T * allocate(std::size_t n)</div><div class="ttdoc">Allocates memory of size n.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:61</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_a3569fde5a091935de0ddd934564a1aa3"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a3569fde5a091935de0ddd934564a1aa3">open3d::core::StdGPUAllocator::StdGPUAllocator</a></div><div class="ttdeci">StdGPUAllocator()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_a59c42ff6f73c100a49d11dbd51efd27f"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59c42ff6f73c100a49d11dbd51efd27f">open3d::core::StdGPUAllocator::StdGPUAllocator</a></div><div class="ttdeci">StdGPUAllocator(int device_id)</div><div class="ttdoc">Constructor from device.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:41</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_a59f61dba084aa411dfd7513cd5f37bf0"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59f61dba084aa411dfd7513cd5f37bf0">open3d::core::StdGPUAllocator::StdGPUAllocator</a></div><div class="ttdeci">StdGPUAllocator(const StdGPUAllocator &amp;)=default</div><div class="ttdoc">Default copy constructor.</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_a66736f553393e6a50946ce92261143c8"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a66736f553393e6a50946ce92261143c8">open3d::core::StdGPUAllocator::deallocate</a></div><div class="ttdeci">void deallocate(T *p, std::size_t n)</div><div class="ttdoc">Deallocates memory from pointer p of size n .</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:68</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_a7a80f51411debcd3c66f4b73480e0efe"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a7a80f51411debcd3c66f4b73480e0efe">open3d::core::StdGPUAllocator::operator==</a></div><div class="ttdeci">bool operator==(const StdGPUAllocator &amp;other)</div><div class="ttdoc">Returns true if the instances are equal, false otherwise.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:74</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_abecaeb2743648dc95d0eaa250d6f6566"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#abecaeb2743648dc95d0eaa250d6f6566">open3d::core::StdGPUAllocator::StdGPUAllocator</a></div><div class="ttdeci">StdGPUAllocator(StdGPUAllocator &amp;&amp;)=default</div><div class="ttdoc">Default move constructor.</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_ac0cc68e4a486f4a4561999e02236aa31"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac0cc68e4a486f4a4561999e02236aa31">open3d::core::StdGPUAllocator::value_type</a></div><div class="ttdeci">T value_type</div><div class="ttdoc">T.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:35</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_ac8dc63698b8ee7229aae3169eca640b7"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac8dc63698b8ee7229aae3169eca640b7">open3d::core::StdGPUAllocator::operator=</a></div><div class="ttdeci">StdGPUAllocator &amp; operator=(StdGPUAllocator &amp;&amp;)=default</div><div class="ttdoc">Default move assignment operator.</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_ad426fba0f26b655ebcf80a3295fae65b"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ad426fba0f26b655ebcf80a3295fae65b">open3d::core::StdGPUAllocator::operator=</a></div><div class="ttdeci">StdGPUAllocator &amp; operator=(const StdGPUAllocator &amp;)=default</div><div class="ttdoc">Default copy assignment operator.</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_adbb4660d529be9fc142edb023f0ec45e"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#adbb4660d529be9fc142edb023f0ec45e">open3d::core::StdGPUAllocator::operator!=</a></div><div class="ttdeci">bool operator!=(const StdGPUAllocator &amp;other)</div><div class="ttdoc">Returns true if the instances are not equal, false otherwise.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:79</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_allocator_html_ae5307b960412f4c21cb7593d993522a0"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ae5307b960412f4c21cb7593d993522a0">open3d::core::StdGPUAllocator::StdGPUAllocator</a></div><div class="ttdeci">StdGPUAllocator(const StdGPUAllocator&lt; U &gt; &amp;other)</div><div class="ttdoc">Rebind copy constructor.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:57</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a></div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:104</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a17c650480d725eeb5bd48dea35a6456c"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a17c650480d725eeb5bd48dea35a6456c">open3d::core::StdGPUHashBackend::StdGPUHashBackend</a></div><div class="ttdeci">StdGPUHashBackend(int64_t init_capacity, int64_t key_dsize, const std::vector&lt; int64_t &gt; &amp;value_dsizes, const Device &amp;device)</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:153</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a21cf0cf7b7bca01597e36a305ff45ff1"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">open3d::core::StdGPUHashBackend::Erase</a></div><div class="ttdeci">void Erase(const void *input_keys, bool *output_masks, int64_t count) override</div><div class="ttdoc">Parallel erase a contiguous array of keys.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:234</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a2fdc95eded218cfdffb3cf442c2d0567"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a2fdc95eded218cfdffb3cf442c2d0567">open3d::core::StdGPUHashBackend::~StdGPUHashBackend</a></div><div class="ttdeci">~StdGPUHashBackend()</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:164</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a4ce4f7f4b18564deb22155d093dd1755"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">open3d::core::StdGPUHashBackend::LoadFactor</a></div><div class="ttdeci">float LoadFactor() const override</div><div class="ttdoc">Get the current load factor, defined as size / bucket count.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:297</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a4e6e6579a9a27b979d9d6cc1d63ae8fc"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4e6e6579a9a27b979d9d6cc1d63ae8fc">open3d::core::StdGPUHashBackend::GetImpl</a></div><div class="ttdeci">InternalStdGPUHashBackend&lt; Key, Hash, Eq &gt; GetImpl() const</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:139</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a65ff2c0a33392b9adca7e333a3ada4b9"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">open3d::core::StdGPUHashBackend::Find</a></div><div class="ttdeci">void Find(const void *input_keys, buf_index_t *output_buf_indices, bool *output_masks, int64_t count) override</div><div class="ttdoc">Parallel find a contiguous array of keys.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:194</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a7f1890bf25420708d1f671049bf97279"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a7f1890bf25420708d1f671049bf97279">open3d::core::StdGPUHashBackend::Free</a></div><div class="ttdeci">void Free()</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:410</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a8b0a5181e3eaec2eef076b4dc87576cc"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">open3d::core::StdGPUHashBackend::Insert</a></div><div class="ttdeci">void Insert(const void *input_keys, const std::vector&lt; const void * &gt; &amp;input_values_soa, buf_index_t *output_buf_indices, bool *output_masks, int64_t count) override</div><div class="ttdoc">Parallel insert contiguous arrays of keys and values.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:357</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_a9af392cccce29a05de47fa46c76d85bd"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">open3d::core::StdGPUHashBackend::BucketSizes</a></div><div class="ttdeci">std::vector&lt; int64_t &gt; BucketSizes() const override</div><div class="ttdoc">Get the number of entries per bucket.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:291</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_ab60e83ab6224c8158392d7affd6aa369"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ab60e83ab6224c8158392d7affd6aa369">open3d::core::StdGPUHashBackend::impl_</a></div><div class="ttdeci">InternalStdGPUHashBackend&lt; Key, Hash, Eq &gt; impl_</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:147</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_ac3d7d31adc70dd721cea1c446e08a885"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ac3d7d31adc70dd721cea1c446e08a885">open3d::core::StdGPUHashBackend::Reserve</a></div><div class="ttdeci">void Reserve(int64_t capacity) override</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:280</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_ad0ba90625b85e8a5879ef2a3d4e8e922"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">open3d::core::StdGPUHashBackend::GetBucketCount</a></div><div class="ttdeci">int64_t GetBucketCount() const override</div><div class="ttdoc">Get the number of buckets of the hash map.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:285</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_addc6e53ae7e40136dbbfab53d55a5d83"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">open3d::core::StdGPUHashBackend::GetActiveIndices</a></div><div class="ttdeci">int64_t GetActiveIndices(buf_index_t *output_indices) override</div><div class="ttdoc">Parallel collect all iterators in the hash table.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:261</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_ae6fb50a1498cce8b6c5627da2f715624"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">open3d::core::StdGPUHashBackend::Size</a></div><div class="ttdeci">int64_t Size() const override</div><div class="ttdoc">Get the size (number of valid entries) of the hash map.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:170</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_aee3ac8166b1c8e4a0f429f4fbf181a47"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">open3d::core::StdGPUHashBackend::Allocate</a></div><div class="ttdeci">void Allocate(int64_t capacity)</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:387</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_af30766e498fe3e8203e9902a6a4cbef8"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#af30766e498fe3e8203e9902a6a4cbef8">open3d::core::StdGPUHashBackend::buffer_accessor_</a></div><div class="ttdeci">CUDAHashBackendBufferAccessor buffer_accessor_</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:149</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_std_g_p_u_hash_backend_html_afef393899e8cf3599100dd2b37992614"><div class="ttname"><a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">open3d::core::StdGPUHashBackend::Clear</a></div><div class="ttdeci">void Clear() override</div><div class="ttdoc">Clear stored map without reallocating memory.</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:273</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html">open3d::core::Tensor</a></div><div class="ttdef"><b>Definition:</b> Tensor.h:32</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html_a02fcf79268d821e0b1081207ea02f11c"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html#a02fcf79268d821e0b1081207ea02f11c">open3d::core::Tensor::GetDataPtr</a></div><div class="ttdeci">T * GetDataPtr()</div><div class="ttdef"><b>Definition:</b> Tensor.h:1133</div></div>
<div class="ttc" id="ahashmap_2_dispatch_8h_html"><div class="ttname"><a href="hashmap_2_dispatch_8h.html">Dispatch.h</a></div></div>
<div class="ttc" id="aio_2file__format_2_file_p_c_d_8cpp_html_ad43c3812e6d13e0518d9f8b8f463ffcf"><div class="ttname"><a href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a></div><div class="ttdeci">int count</div><div class="ttdef"><b>Definition:</b> FilePCD.cpp:42</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1cuda_html_ab9c482d5e2b659cea9d7c54eb24cfc5c"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1cuda.html#ab9c482d5e2b659cea9d7c54eb24cfc5c">open3d::core::cuda::Synchronize</a></div><div class="ttdeci">void Synchronize()</div><div class="ttdef"><b>Definition:</b> CUDAUtils.cpp:58</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_a182277be4f719bff46f128fbf075dc2c"><div class="ttname"><a href="namespaceopen3d_1_1core.html#a182277be4f719bff46f128fbf075dc2c">open3d::core::STDGPUFindKernel</a></div><div class="ttdeci">__global__ void STDGPUFindKernel(InternalStdGPUHashBackend&lt; Key, Hash, Eq &gt; map, CUDAHashBackendBufferAccessor buffer_accessor, const Key *input_keys, buf_index_t *output_buf_indices, bool *output_masks, int64_t count)</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:177</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_a2e24567ecd0819b60fcd901703289eec"><div class="ttname"><a href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">open3d::core::buf_index_t</a></div><div class="ttdeci">uint32_t buf_index_t</div><div class="ttdef"><b>Definition:</b> HashBackendBuffer.h:44</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_a4b2cc154cfd20bb339302cb45c0cf91d"><div class="ttname"><a href="namespaceopen3d_1_1core.html#a4b2cc154cfd20bb339302cb45c0cf91d">open3d::core::STDGPUEraseKernel</a></div><div class="ttdeci">__global__ void STDGPUEraseKernel(InternalStdGPUHashBackend&lt; Key, Hash, Eq &gt; map, CUDAHashBackendBufferAccessor buffer_accessor, const Key *input_keys, buf_index_t *output_buf_indices, bool *output_masks, int64_t count)</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:210</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_a6f72622cf5885134fe1e6916db6797d9"><div class="ttname"><a href="namespaceopen3d_1_1core.html#a6f72622cf5885134fe1e6916db6797d9">open3d::core::Int32</a></div><div class="ttdeci">const Dtype Int32</div><div class="ttdef"><b>Definition:</b> Dtype.cpp:46</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_ac2ec1da558b1923feeab7a53b9c1b233"><div class="ttname"><a href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">open3d::core::InternalStdGPUHashBackend</a></div><div class="ttdeci">stdgpu::unordered_map&lt; Key, buf_index_t, Hash, Eq, InternalStdGPUHashBackendAllocator&lt; Key &gt; &gt; InternalStdGPUHashBackend</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:101</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_ad0bebab7b26009e5823400513a4c170b"><div class="ttname"><a href="namespaceopen3d_1_1core.html#ad0bebab7b26009e5823400513a4c170b">open3d::core::STDGPUInsertKernel</a></div><div class="ttdeci">__global__ void STDGPUInsertKernel(InternalStdGPUHashBackend&lt; Key, Hash, Eq &gt; map, CUDAHashBackendBufferAccessor buffer_accessor, const Key *input_keys, const void *const *input_values_soa, buf_index_t *output_buf_indices, bool *output_masks, int64_t count, int64_t n_values)</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:304</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_a3d7a59e11e49eda2f5232a012a4a6963"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">open3d::io::k4a_plugin::uint32_t</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample playback_handle k4a_logging_message_cb_t void min_level device_handle k4a_imu_sample_t timeout_in_ms capture_handle capture_handle capture_handle image_handle temperature_c k4a_image_t image_handle uint8_t image_handle image_handle image_handle image_handle uint32_t</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:548</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_a550ae900deb35c2c638a899170251ee9"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a550ae900deb35c2c638a899170251ee9">open3d::io::k4a_plugin::size_t</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample playback_handle k4a_logging_message_cb_t void min_level device_handle k4a_imu_sample_t timeout_in_ms capture_handle capture_handle capture_handle image_handle temperature_c k4a_image_t image_handle uint8_t image_handle image_handle image_handle image_handle image_handle timestamp_usec white_balance image_handle k4a_device_configuration_t config device_handle char size_t serial_number_size bool int32_t int32_t int32_t int32_t k4a_color_control_mode_t default_mode value const const k4a_calibration_t calibration char size_t</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:719</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
<div class="ttc" id="astructopen3d_1_1core_1_1_value_extractor_html"><div class="ttname"><a href="structopen3d_1_1core_1_1_value_extractor.39d">open3d::core::ValueExtractor</a></div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:253</div></div>
<div class="ttc" id="astructopen3d_1_1core_1_1_value_extractor_html_a873ebb452e225a867ea0fd10fe7e2019"><div class="ttname"><a href="structopen3d_1_1core_1_1_value_extractor.39d#a873ebb452e225a867ea0fd10fe7e2019">open3d::core::ValueExtractor::operator()</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE buf_index_t operator()(const thrust::pair&lt; Key, buf_index_t &gt; &amp;x) const</div><div class="ttdef"><b>Definition:</b> StdGPUHashBackend.h:255</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_std_g_p_u_hash_backend_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:00:01 GMT -->
</html>
