<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1ml_1_1op__util.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:26 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::ml::op_util Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1ml.html">ml</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye">op_util</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::ml::op_util Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for representing a possibly unknown dimension value.  <a href="classopen3d_1_1ml_1_1op__util_1_1_dim_value#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for dimensions for which the value should be inferred.  <a href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1ml_1_1op__util_1_1_dim_x_plu">DimXPlus</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1ml_1_1op__util_1_1_dim_x_min">DimXMinus</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1ml_1_1op__util_1_1_dim_x_mul">DimXMultiply</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1ml_1_1op__util_1_1_dim_x_div">DimXDivide</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1ml_1_1op__util_1_1_dim_x_or">DimXOr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> expression class.  <a href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1ml_1_1op__util_1_1_count_arg">CountArgs</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a78ed01f47d5154d4f8a89413e16a26b1"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1">CSOpt</a> { <br />
&#160;&#160;<a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1ab50339a10e1de285ac99d4c3990b8693">NONE</a> = 0
, <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1a95a386b4988de3fb97d02c660b8e990d">COMBINE_FIRST_DIMS</a>
, <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1a02e022cf65feea5d4310b9d8074b11aa">IGNORE_FIRST_DIMS</a>
, <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1aaa9907020e6cba56d5857784d2ea6dbe">COMBINE_LAST_DIMS</a>
, <br />
&#160;&#160;<a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1ade74f11f3264d425eaa48a45fb4525b4">IGNORE_LAST_DIMS</a>
<br />
 }</td></tr>
<tr class="memdesc:a78ed01f47d5154d4f8a89413e16a26b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check shape options.  <a href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1">More...</a><br /></td></tr>
<tr class="separator:a78ed01f47d5154d4f8a89413e16a26b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a63c2dd1782c3e07414d7a7a72e417354"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a63c2dd1782c3e07414d7a7a72e417354">UnknownValue</a> ()</td></tr>
<tr class="separator:a63c2dd1782c3e07414d7a7a72e417354"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c321a31abbc41e7232b88bf1c095fe1"><td class="memTemplParams" colspan="2">template&lt;class TLeft , class TRight , class TOp &gt; </td></tr>
<tr class="memitem:a2c321a31abbc41e7232b88bf1c095fe1"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a2c321a31abbc41e7232b88bf1c095fe1">operator==</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> a, <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; &amp;&amp;b)</td></tr>
<tr class="separator:a2c321a31abbc41e7232b88bf1c095fe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa74c04706eccceeb834b06546efcd81a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#aa74c04706eccceeb834b06546efcd81a">operator==</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> a, <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a> b)</td></tr>
<tr class="separator:aa74c04706eccceeb834b06546efcd81a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a2e2227cdfbf8a9c225e3691eba91b3"><td class="memTemplParams" colspan="2">template&lt;class TLeft , class TRight , class TOp &gt; </td></tr>
<tr class="memitem:a4a2e2227cdfbf8a9c225e3691eba91b3"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a4a2e2227cdfbf8a9c225e3691eba91b3">GetString</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; a, bool show_value=true)</td></tr>
<tr class="separator:a4a2e2227cdfbf8a9c225e3691eba91b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac53e23588d9644edf5a028388002f5ab"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#ac53e23588d9644edf5a028388002f5ab">GetString</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a> a, bool show_value=true)</td></tr>
<tr class="separator:ac53e23588d9644edf5a028388002f5ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef271ae6137b90a5d74f5842d5dd73ad"><td class="memTemplParams" colspan="2">template&lt;class TLeft , class TRight , class TOp &gt; </td></tr>
<tr class="memitem:aef271ae6137b90a5d74f5842d5dd73ad"><td class="memTemplItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#aef271ae6137b90a5d74f5842d5dd73ad">GetValue</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; a)</td></tr>
<tr class="separator:aef271ae6137b90a5d74f5842d5dd73ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cf7302583e92128f4b43c963f8266d1"><td class="memTemplParams" colspan="2">template&lt;class TLeft , class TRight , class TOp &gt; </td></tr>
<tr class="memitem:a8cf7302583e92128f4b43c963f8266d1"><td class="memTemplItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a8cf7302583e92128f4b43c963f8266d1">GetValue</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; a, int64_t unknown_dim_value)</td></tr>
<tr class="separator:a8cf7302583e92128f4b43c963f8266d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1ff311e39cfeebb2192ffc5522e503a"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#ad1ff311e39cfeebb2192ffc5522e503a">GetValue</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a> a)</td></tr>
<tr class="separator:ad1ff311e39cfeebb2192ffc5522e503a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac207507bb69c5f5851e0ad4276f355c4"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#ac207507bb69c5f5851e0ad4276f355c4">GetValue</a> (<a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a> a, int64_t unknown_dim_value)</td></tr>
<tr class="separator:ac207507bb69c5f5851e0ad4276f355c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f0b1e105688c306e0ecabcec940f73"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#af6f0b1e105688c306e0ecabcec940f73">CreateDimXString</a> ()</td></tr>
<tr class="separator:af6f0b1e105688c306e0ecabcec940f73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a498effb58c046d5e856f07221cbfb5cb"><td class="memTemplParams" colspan="2">template&lt;class TDimX &gt; </td></tr>
<tr class="memitem:a498effb58c046d5e856f07221cbfb5cb"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a498effb58c046d5e856f07221cbfb5cb">CreateDimXString</a> (TDimX dimex)</td></tr>
<tr class="separator:a498effb58c046d5e856f07221cbfb5cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0350cd1ea0eed3409619173f55c1fbc7"><td class="memTemplParams" colspan="2">template&lt;class TDimX , class... TArgs&gt; </td></tr>
<tr class="memitem:a0350cd1ea0eed3409619173f55c1fbc7"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a0350cd1ea0eed3409619173f55c1fbc7">CreateDimXString</a> (TDimX dimex, TArgs... args)</td></tr>
<tr class="separator:a0350cd1ea0eed3409619173f55c1fbc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab6da8aa2abfb4ee53c274fa452d40b4"><td class="memTemplParams" colspan="2">template&lt;class TDimX &gt; </td></tr>
<tr class="memitem:aab6da8aa2abfb4ee53c274fa452d40b4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#aab6da8aa2abfb4ee53c274fa452d40b4">CreateDimVector</a> (std::vector&lt; int64_t &gt; &amp;out, int64_t unknown_dim_value, TDimX dimex)</td></tr>
<tr class="separator:aab6da8aa2abfb4ee53c274fa452d40b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeefea57dd1d4e1dee7bb293cc5fe8d81"><td class="memTemplParams" colspan="2">template&lt;class TDimX , class... TArgs&gt; </td></tr>
<tr class="memitem:aeefea57dd1d4e1dee7bb293cc5fe8d81"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#aeefea57dd1d4e1dee7bb293cc5fe8d81">CreateDimVector</a> (std::vector&lt; int64_t &gt; &amp;out, int64_t unknown_dim_value, TDimX dimex, TArgs... args)</td></tr>
<tr class="separator:aeefea57dd1d4e1dee7bb293cc5fe8d81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56fc65c708240a111b1baa321b527290"><td class="memTemplParams" colspan="2">template&lt;class TDimX &gt; </td></tr>
<tr class="memitem:a56fc65c708240a111b1baa321b527290"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; int64_t &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a56fc65c708240a111b1baa321b527290">CreateDimVector</a> (int64_t unknown_dim_value, TDimX dimex)</td></tr>
<tr class="separator:a56fc65c708240a111b1baa321b527290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a059906c9f02f49d9b505bd1e1903e6db"><td class="memTemplParams" colspan="2">template&lt;class TDimX , class... TArgs&gt; </td></tr>
<tr class="memitem:a059906c9f02f49d9b505bd1e1903e6db"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; int64_t &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a059906c9f02f49d9b505bd1e1903e6db">CreateDimVector</a> (int64_t unknown_dim_value, TDimX dimex, TArgs... args)</td></tr>
<tr class="separator:a059906c9f02f49d9b505bd1e1903e6db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7447628f7e5184f4d078e864854c179"><td class="memTemplParams" colspan="2">template&lt;class TLeft , class TRight , class TOp &gt; </td></tr>
<tr class="memitem:ad7447628f7e5184f4d078e864854c179"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#ad7447628f7e5184f4d078e864854c179">CheckDim</a> (const <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &amp;lhs, <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; &amp;&amp;rhs)</td></tr>
<tr class="separator:ad7447628f7e5184f4d078e864854c179"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab218f49af7766882f7f8b0988aad067"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#aab218f49af7766882f7f8b0988aad067">CheckDim</a> (const <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &amp;lhs, <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a> d)</td></tr>
<tr class="separator:aab218f49af7766882f7f8b0988aad067"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c8f63c1d14595a0a4d6c04849be88f"><td class="memTemplParams" colspan="2">template&lt;CSOpt Opt = CSOpt::NONE, class TDimX &gt; </td></tr>
<tr class="memitem:ad7c8f63c1d14595a0a4d6c04849be88f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#ad7c8f63c1d14595a0a4d6c04849be88f">_CheckShape</a> (const std::vector&lt; <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &gt; &amp;shape, TDimX &amp;&amp;dimex)</td></tr>
<tr class="separator:ad7c8f63c1d14595a0a4d6c04849be88f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1f824c531045bf419a5bdc2f23ba976"><td class="memTemplParams" colspan="2">template&lt;CSOpt Opt = CSOpt::NONE, class TDimX , class... TArgs&gt; </td></tr>
<tr class="memitem:af1f824c531045bf419a5bdc2f23ba976"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#af1f824c531045bf419a5bdc2f23ba976">_CheckShape</a> (const std::vector&lt; <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &gt; &amp;shape, TDimX &amp;&amp;dimex, TArgs &amp;&amp;... args)</td></tr>
<tr class="separator:af1f824c531045bf419a5bdc2f23ba976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23a7da1a506858238f507961cebbe0b9"><td class="memTemplParams" colspan="2">template&lt;CSOpt Opt = CSOpt::NONE, class TDimX , class... TArgs&gt; </td></tr>
<tr class="memitem:a23a7da1a506858238f507961cebbe0b9"><td class="memTemplItemLeft" align="right" valign="top">std::tuple&lt; bool, std::string &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a23a7da1a506858238f507961cebbe0b9">CheckShape</a> (const std::vector&lt; <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &gt; &amp;shape, TDimX &amp;&amp;dimex, TArgs &amp;&amp;... args)</td></tr>
<tr class="separator:a23a7da1a506858238f507961cebbe0b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a78ed01f47d5154d4f8a89413e16a26b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78ed01f47d5154d4f8a89413e16a26b1">&#9670;&nbsp;</a></span>CSOpt</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1">open3d::ml::op_util::CSOpt</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check shape options. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a78ed01f47d5154d4f8a89413e16a26b1ab50339a10e1de285ac99d4c3990b8693"></a>NONE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a78ed01f47d5154d4f8a89413e16a26b1a95a386b4988de3fb97d02c660b8e990d"></a>COMBINE_FIRST_DIMS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a78ed01f47d5154d4f8a89413e16a26b1a02e022cf65feea5d4310b9d8074b11aa"></a>IGNORE_FIRST_DIMS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a78ed01f47d5154d4f8a89413e16a26b1aaa9907020e6cba56d5857784d2ea6dbe"></a>COMBINE_LAST_DIMS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a78ed01f47d5154d4f8a89413e16a26b1ade74f11f3264d425eaa48a45fb4525b4"></a>IGNORE_LAST_DIMS&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ad7c8f63c1d14595a0a4d6c04849be88f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7c8f63c1d14595a0a4d6c04849be88f">&#9670;&nbsp;</a></span>_CheckShape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;CSOpt Opt = CSOpt::NONE, class TDimX &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::ml::op_util::_CheckShape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX &amp;&amp;&#160;</td>
          <td class="paramname"><em>dimex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1f824c531045bf419a5bdc2f23ba976"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1f824c531045bf419a5bdc2f23ba976">&#9670;&nbsp;</a></span>_CheckShape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;CSOpt Opt = CSOpt::NONE, class TDimX , class... TArgs&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::ml::op_util::_CheckShape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX &amp;&amp;&#160;</td>
          <td class="paramname"><em>dimex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TArgs &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aab218f49af7766882f7f8b0988aad067"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab218f49af7766882f7f8b0988aad067">&#9670;&nbsp;</a></span>CheckDim() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::ml::op_util::CheckDim </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a>&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad7447628f7e5184f4d078e864854c179"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7447628f7e5184f4d078e864854c179">&#9670;&nbsp;</a></span>CheckDim() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TLeft , class TRight , class TOp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::ml::op_util::CheckDim </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a23a7da1a506858238f507961cebbe0b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23a7da1a506858238f507961cebbe0b9">&#9670;&nbsp;</a></span>CheckShape()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;CSOpt Opt = CSOpt::NONE, class TDimX , class... TArgs&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt;bool, std::string&gt; open3d::ml::op_util::CheckShape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX &amp;&amp;&#160;</td>
          <td class="paramname"><em>dimex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TArgs &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function for checking a shape with dim expressions. Usage example:</p>
<p><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> depth("depth"); <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> height("height"); <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> width("width"); status = CheckShape({30,40}, height, width); // VALID, will assign values // to height and width</p>
<p>status = CheckShape({50,41}, height+20, width+1); // VALID, values match status = CheckShape({20,30,40}, depth+10, height, width); // VALID, will // assign 10 to depth</p>
<p>status = CheckShape({0},depth||0); // VALID, shape must match depth or 0 status = CheckShape({10}, depth||0); // VALID, shape must match depth or 0 status = CheckShape({123,10}, Dim(), depth); // VALID, first dim may be // anything</p>
<p>status = <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a23a7da1a506858238f507961cebbe0b9">CheckShape&lt;CSOpt::COMBINE_LAST_DIMS&gt;</a>({123,10,4}, Dim(), width); // VALID, width==40==10*4</p>
<p>status = <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a23a7da1a506858238f507961cebbe0b9">CheckShape&lt;CSOpt::COMBINE_FIRST_DIMS&gt;</a>( {10,2,2,123,456}, width, Dim(), Dim()); // VALID, width==40==10*2*2</p>
<p>status = CheckShape({70}, height+width); // VALID, works because height // and width have been initialized since the first call to CheckShape</p>
<p>status = CheckShape({1,2,3}, Dim(), Dim()); // INVALID, rank mismatch 3vs2 status = CheckShape({1,2,3}, depth, width, height); // INVALID, at least // one dim does not match</p>
<p>The options <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1a95a386b4988de3fb97d02c660b8e990d">CSOpt::COMBINE_FIRST_DIMS</a> and <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1aaa9907020e6cba56d5857784d2ea6dbe">CSOpt::COMBINE_LAST_DIMS</a> allow to match the rank of the dim expressions by combining the shape dimensions at the beginning or end. The options <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1a02e022cf65feea5d4310b9d8074b11aa">CSOpt::IGNORE_FIRST_DIMS</a> and <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a78ed01f47d5154d4f8a89413e16a26b1ade74f11f3264d425eaa48a45fb4525b4">CSOpt::IGNORE_LAST_DIMS</a> allow to ignore additional dimensions in the shape.</p>
<p>The shape to be checked may contain unknowns <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> A("A"); <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> B("B"); status = CheckShape({30, <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a63c2dd1782c3e07414d7a7a72e417354">UnknownValue()</a>}, A, B); // VALID, A is 30 and B // is still unknown</p>
<p>status = <a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a23a7da1a506858238f507961cebbe0b9">CheckShape&lt;CSOpt::COMBINE_LAST_DIMS&gt;</a>({30,1,2,<a class="el" href="namespaceopen3d_1_1ml_1_1op__util.43e.delaye#a63c2dd1782c3e07414d7a7a72e417354">UnknownValue()</a>},A,B); // VALID, A is 30 and B is still unknown</p>
<p>The following shows some limitations of the dim expressions <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> A("A"); <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> B("B"); status = CheckShape({30}, A+B); // THROWS EXCEPTION, illegal expression // because neither A or B is a constant</p>
<p>However, the following will work <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> A(20,"A"); <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> B("B"); status = CheckShape({30}, A+B); // VALID, B is now 10</p>
<p>This will work, too <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> A("A"); // uninitialized <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> B("B"); status = CheckShape({20}, A); // VALID, A is now 20 status = CheckShape({30}, A+B); // VALID, B is now 10</p>
<p>Multiplication and division are not allowed for unknown dims <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a> A("A"); status = CheckShape({30}, 3*A); // THROWS EXCEPTION, although expression // seems reasonable status = CheckShape({20}, 3*A); // THROWS EXCEPTION, this // is the reason why mul/div is only allowed for known dims</p>
<p>Important, do not create objects of dim expressions, i.e., auto dimx = <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a>("tmp") + 3; status = CheckShape({20}, dimx); // intended to not compile Assigning a value to dimx will assign a value to <a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de" title="Class for dimensions for which the value should be inferred.">Dim</a>("tmp") which has a shorter lifetime.</p>
<p>The return value is a tuple &lt;bool,std::string&gt;. If the bool is false then the shape is INVALID and the string contains an error message of the form "got [shape], expected [dim expressions]". If true then the shape is VALID and the error string is empty.</p>
<p>Note the goal of this function is to simplify checking tensor shapes. There may be cases where shapes cannot be checked with the provided functionality and you have to write custom shape checking code.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shape</td><td>This is the actual shape of an object. </td></tr>
    <tr><td class="paramname">args</td><td>This is a list of dim expression </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a56fc65c708240a111b1baa321b527290"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56fc65c708240a111b1baa321b527290">&#9670;&nbsp;</a></span>CreateDimVector() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TDimX &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int64_t&gt; open3d::ml::op_util::CreateDimVector </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>unknown_dim_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX&#160;</td>
          <td class="paramname"><em>dimex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a059906c9f02f49d9b505bd1e1903e6db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a059906c9f02f49d9b505bd1e1903e6db">&#9670;&nbsp;</a></span>CreateDimVector() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TDimX , class... TArgs&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int64_t&gt; open3d::ml::op_util::CreateDimVector </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>unknown_dim_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX&#160;</td>
          <td class="paramname"><em>dimex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TArgs...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aab6da8aa2abfb4ee53c274fa452d40b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab6da8aa2abfb4ee53c274fa452d40b4">&#9670;&nbsp;</a></span>CreateDimVector() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TDimX &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void open3d::ml::op_util::CreateDimVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>unknown_dim_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX&#160;</td>
          <td class="paramname"><em>dimex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeefea57dd1d4e1dee7bb293cc5fe8d81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeefea57dd1d4e1dee7bb293cc5fe8d81">&#9670;&nbsp;</a></span>CreateDimVector() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TDimX , class... TArgs&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void open3d::ml::op_util::CreateDimVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>unknown_dim_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TDimX&#160;</td>
          <td class="paramname"><em>dimex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TArgs...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af6f0b1e105688c306e0ecabcec940f73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6f0b1e105688c306e0ecabcec940f73">&#9670;&nbsp;</a></span>CreateDimXString() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::ml::op_util::CreateDimXString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a498effb58c046d5e856f07221cbfb5cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a498effb58c046d5e856f07221cbfb5cb">&#9670;&nbsp;</a></span>CreateDimXString() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TDimX &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::ml::op_util::CreateDimXString </td>
          <td>(</td>
          <td class="paramtype">TDimX&#160;</td>
          <td class="paramname"><em>dimex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0350cd1ea0eed3409619173f55c1fbc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0350cd1ea0eed3409619173f55c1fbc7">&#9670;&nbsp;</a></span>CreateDimXString() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TDimX , class... TArgs&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::ml::op_util::CreateDimXString </td>
          <td>(</td>
          <td class="paramtype">TDimX&#160;</td>
          <td class="paramname"><em>dimex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TArgs...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac53e23588d9644edf5a028388002f5ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac53e23588d9644edf5a028388002f5ab">&#9670;&nbsp;</a></span>GetString() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::ml::op_util::GetString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>show_value</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4a2e2227cdfbf8a9c225e3691eba91b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a2e2227cdfbf8a9c225e3691eba91b3">&#9670;&nbsp;</a></span>GetString() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TLeft , class TRight , class TOp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::ml::op_util::GetString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>show_value</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad1ff311e39cfeebb2192ffc5522e503a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1ff311e39cfeebb2192ffc5522e503a">&#9670;&nbsp;</a></span>GetValue() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::ml::op_util::GetValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a>&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac207507bb69c5f5851e0ad4276f355c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac207507bb69c5f5851e0ad4276f355c4">&#9670;&nbsp;</a></span>GetValue() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::ml::op_util::GetValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>unknown_dim_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aef271ae6137b90a5d74f5842d5dd73ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef271ae6137b90a5d74f5842d5dd73ad">&#9670;&nbsp;</a></span>GetValue() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TLeft , class TRight , class TOp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::ml::op_util::GetValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8cf7302583e92128f4b43c963f8266d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cf7302583e92128f4b43c963f8266d1">&#9670;&nbsp;</a></span>GetValue() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TLeft , class TRight , class TOp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::ml::op_util::GetValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>unknown_dim_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa74c04706eccceeb834b06546efcd81a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa74c04706eccceeb834b06546efcd81a">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::ml::op_util::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim.689.de">Dim</a>&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2c321a31abbc41e7232b88bf1c095fe1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c321a31abbc41e7232b88bf1c095fe1">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class TLeft , class TRight , class TOp &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::ml::op_util::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_x.68f">DimX</a>&lt; TLeft, TRight, TOp &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a63c2dd1782c3e07414d7a7a72e417354"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63c2dd1782c3e07414d7a7a72e417354">&#9670;&nbsp;</a></span>UnknownValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1ml_1_1op__util_1_1_dim_value">DimValue</a> open3d::ml::op_util::UnknownValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1ml_1_1op__util.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:26 GMT -->
</html>
