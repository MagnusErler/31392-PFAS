<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/core_2nns_2_memory_allocation_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:32 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/core/nns/MemoryAllocation.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_559a533dc613f808f5747b65451c8a78.48c.del">core</a></li><li class="navelem"><a class="el" href="dir_537ba5981d577830b3c67832c5ce0533.7db.del">nns</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">MemoryAllocation.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="core_2nns_2_memory_allocation_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>core {</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span>nns {</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca">   21</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca">MemoryAllocation</a> {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a255eede7efa48b6379c4764851de2752">   30</a></span>&#160;    <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a255eede7efa48b6379c4764851de2752">MemoryAllocation</a>(<span class="keywordtype">void</span>* ptr, <span class="keywordtype">size_t</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, <span class="keywordtype">size_t</span> alignment = 1)</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        : _ptr(ptr),</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;          _size(<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>),</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;          _alignment(alignment),</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;          _max_size_ptr((char*)ptr) {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="comment">// align start and end of memory segment</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordtype">void</span>* aligned_ptr = std::align(_alignment, 1, ptr, <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordtype">size_t</span> size_after_align =</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                (((<span class="keywordtype">char</span>*)ptr + <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>) - (<span class="keywordtype">char</span>*)aligned_ptr) / _alignment;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        size_after_align *= _alignment;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        _free_segments.push_back(</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                std::pair&lt;void*, size_t&gt;(aligned_ptr, size_after_align));</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#aaa32ba29ac78d8a001421ab12ccc2938">   48</a></span>&#160;    std::pair&lt;T*, size_t&gt; <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#aaa32ba29ac78d8a001421ab12ccc2938">Alloc</a>(<span class="keywordtype">size_t</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>) {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        std::pair&lt;void*, size_t&gt; tmp = <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#aaa32ba29ac78d8a001421ab12ccc2938">Alloc</a>(<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">return</span> std::pair&lt;T*, size_t&gt;((T*)tmp.first, tmp.first ? <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> : 0);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a94dc9ba89550fa3aac7c2a3b089694cf">   55</a></span>&#160;    std::pair&lt;void*, size_t&gt; <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a94dc9ba89550fa3aac7c2a3b089694cf">Alloc</a>(<span class="keywordtype">size_t</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>) {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="comment">// round up to alignment</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> % _alignment) <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> += _alignment - <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> % _alignment;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; _free_segments.size(); ++i) {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordtype">void</span>* ptr = std::align(_alignment, <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, _free_segments[i].first,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                   _free_segments[i].second);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">if</span> (ptr) {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordtype">char</span>* end_ptr = (<span class="keywordtype">char</span>*)ptr + <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">if</span> (end_ptr &gt; _max_size_ptr) _max_size_ptr = end_ptr;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                _free_segments[i].first = end_ptr;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                _free_segments[i].second -= <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keywordflow">return</span> std::pair&lt;void*, size_t&gt;(ptr, <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> std::pair&lt;void*, size_t&gt;(<span class="keyword">nullptr</span>, 0);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#af57de9ed6875176cfb9aa4aeff311f33">   75</a></span>&#160;    std::pair&lt;void*, size_t&gt; <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#af57de9ed6875176cfb9aa4aeff311f33">AllocLargestSegment</a>() {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> = 0;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; s : _free_segments)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">if</span> (s.second &gt; <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>) <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> = s.second;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#aaa32ba29ac78d8a001421ab12ccc2938">Alloc</a>(<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a130ea2f6e2d5d330ce3c2c15b724c9f1">   85</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a130ea2f6e2d5d330ce3c2c15b724c9f1">Free</a>(<span class="keyword">const</span> std::pair&lt;T*, size_t&gt;&amp; segment) {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> = <span class="keyword">sizeof</span>(T) * segment.second;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        if (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> % _alignment) <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> += _alignment - <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a> % _alignment;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a130ea2f6e2d5d330ce3c2c15b724c9f1">Free</a>(std::pair&lt;void*, size_t&gt;(segment.first, <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a326b7a7825e80b6cfd80fe3112ca90c6">   93</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a326b7a7825e80b6cfd80fe3112ca90c6">Free</a>(<span class="keyword">const</span> std::pair&lt;void*, size_t&gt;&amp; segment) {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (DEBUG) {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">if</span> ((<span class="keywordtype">char</span>*)segment.first &lt; (<span class="keywordtype">char</span>*)_ptr ||</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                (<span class="keywordtype">char</span>*)segment.first + segment.second &gt; (<span class="keywordtype">char</span>*)_ptr + _size)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;free(): segment is out of bounds&quot;</span>);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordtype">size_t</span> i;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">for</span> (i = 0; i &lt; _free_segments.size(); ++i) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">if</span> ((<span class="keywordtype">char</span>*)segment.first &lt; (<span class="keywordtype">char</span>*)_free_segments[i].first)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            _free_segments.insert(_free_segments.begin() + i, segment);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// merge adjacent segments</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">auto</span> seg = _free_segments[0];</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordtype">char</span>* end_ptr = (<span class="keywordtype">char</span>*)seg.first + seg.second;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a> = 0;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        for (<span class="keywordtype">size_t</span> i = 1; i &lt; _free_segments.size(); ++i) {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; seg_i = _free_segments[i];</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">if</span> (end_ptr == (<span class="keywordtype">char</span>*)seg_i.first) {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="comment">// merge with adjacent following segment</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                seg.second += seg_i.second;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                end_ptr = (<span class="keywordtype">char</span>*)seg.first + seg.second;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                _free_segments[<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>] = seg;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                seg = _free_segments[i];</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                end_ptr = (<span class="keywordtype">char</span>*)seg.first + seg.second;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                ++<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        _free_segments[<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>] = seg;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        ++<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        _free_segments.resize(<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> (DEBUG) {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="comment">// check if there are overlapping segments</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; _free_segments.size(); ++i) {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordtype">char</span>* prev_end_ptr = (<span class="keywordtype">char</span>*)_free_segments[i - 1].first +</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                     _free_segments[i - 1].second;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">if</span> (prev_end_ptr &gt; (<span class="keywordtype">char</span>*)_free_segments[i].first) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keywordflow">throw</span> std::runtime_error(</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                            <span class="stringliteral">&quot;free(): Overlapping free segments found after &quot;</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                            <span class="stringliteral">&quot;call to free&quot;</span>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a1a06aba26fd202e55cc2ac4e06582841">  145</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a1a06aba26fd202e55cc2ac4e06582841">MaxUsed</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _max_size_ptr - (<span class="keywordtype">char</span>*)_ptr; }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#acca9069f511f95697f3a1fc3fdf3b2ed">  148</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#acca9069f511f95697f3a1fc3fdf3b2ed">Alignment</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _alignment; }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#ac598e87237ad6d104f5af5a7f5381cee">  151</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;std::pair&lt;void*, size_t&gt;&gt;&amp; <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#ac598e87237ad6d104f5af5a7f5381cee">FreeSegments</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> _free_segments;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a131741c6a9769a9a3ef848f7cf7a5053">  157</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a131741c6a9769a9a3ef848f7cf7a5053">PrintSegment</a>(<span class="keyword">const</span> std::pair&lt;T*, size_t&gt;&amp; s) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;ptr &quot;</span> &lt;&lt; (<span class="keywordtype">void</span>*)s.first &lt;&lt; <span class="stringliteral">&quot;\t size &quot;</span> &lt;&lt; s.second</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                  &lt;&lt; <span class="stringliteral">&quot;\t end &quot;</span> &lt;&lt; (<span class="keywordtype">void</span>*)((<span class="keywordtype">char</span>*)s.first + s.second) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a8bf041d8adcbd2df298f0e6d9b39d568">  163</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a8bf041d8adcbd2df298f0e6d9b39d568">PrintFreeSegments</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; s : _free_segments) <a class="code" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a131741c6a9769a9a3ef848f7cf7a5053">PrintSegment</a>(s);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">enum</span> internal_config { DEBUG = 0 };  </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* _ptr;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> _size;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> _alignment;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordtype">char</span>* _max_size_ptr;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    std::vector&lt;std::pair&lt;void*, size_t&gt;&gt; _free_segments;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;};</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}  <span class="comment">// namespace nns</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}  <span class="comment">// namespace core</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca">open3d::core::nns::MemoryAllocation</a></div><div class="ttdoc">A class for managing memory segments within a memory allocation.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:21</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a130ea2f6e2d5d330ce3c2c15b724c9f1"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a130ea2f6e2d5d330ce3c2c15b724c9f1">open3d::core::nns::MemoryAllocation::Free</a></div><div class="ttdeci">void Free(const std::pair&lt; T *, size_t &gt; &amp;segment)</div><div class="ttdoc">Frees a previously returned segment.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:85</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a131741c6a9769a9a3ef848f7cf7a5053"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a131741c6a9769a9a3ef848f7cf7a5053">open3d::core::nns::MemoryAllocation::PrintSegment</a></div><div class="ttdeci">static void PrintSegment(const std::pair&lt; T *, size_t &gt; &amp;s)</div><div class="ttdoc">Prints the segment. Meant for debugging.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:157</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a1a06aba26fd202e55cc2ac4e06582841"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a1a06aba26fd202e55cc2ac4e06582841">open3d::core::nns::MemoryAllocation::MaxUsed</a></div><div class="ttdeci">size_t MaxUsed() const</div><div class="ttdoc">Returns the peak memory usage in bytes.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:145</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a255eede7efa48b6379c4764851de2752"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a255eede7efa48b6379c4764851de2752">open3d::core::nns::MemoryAllocation::MemoryAllocation</a></div><div class="ttdeci">MemoryAllocation(void *ptr, size_t size, size_t alignment=1)</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:30</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a326b7a7825e80b6cfd80fe3112ca90c6"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a326b7a7825e80b6cfd80fe3112ca90c6">open3d::core::nns::MemoryAllocation::Free</a></div><div class="ttdeci">void Free(const std::pair&lt; void *, size_t &gt; &amp;segment)</div><div class="ttdoc">Frees a previously returned segment.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:93</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a8bf041d8adcbd2df298f0e6d9b39d568"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a8bf041d8adcbd2df298f0e6d9b39d568">open3d::core::nns::MemoryAllocation::PrintFreeSegments</a></div><div class="ttdeci">void PrintFreeSegments() const</div><div class="ttdoc">Prints all free segments. Meant for debugging.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:163</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_a94dc9ba89550fa3aac7c2a3b089694cf"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a94dc9ba89550fa3aac7c2a3b089694cf">open3d::core::nns::MemoryAllocation::Alloc</a></div><div class="ttdeci">std::pair&lt; void *, size_t &gt; Alloc(size_t size)</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:55</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_aaa32ba29ac78d8a001421ab12ccc2938"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#aaa32ba29ac78d8a001421ab12ccc2938">open3d::core::nns::MemoryAllocation::Alloc</a></div><div class="ttdeci">std::pair&lt; T *, size_t &gt; Alloc(size_t size)</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:48</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_ac598e87237ad6d104f5af5a7f5381cee"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#ac598e87237ad6d104f5af5a7f5381cee">open3d::core::nns::MemoryAllocation::FreeSegments</a></div><div class="ttdeci">const std::vector&lt; std::pair&lt; void *, size_t &gt; &gt; &amp; FreeSegments() const</div><div class="ttdoc">Returns the list of free segments.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:151</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_acca9069f511f95697f3a1fc3fdf3b2ed"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#acca9069f511f95697f3a1fc3fdf3b2ed">open3d::core::nns::MemoryAllocation::Alignment</a></div><div class="ttdeci">size_t Alignment() const</div><div class="ttdoc">Returns the alignment in bytes.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:148</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1nns_1_1_memory_allocation_html_af57de9ed6875176cfb9aa4aeff311f33"><div class="ttname"><a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#af57de9ed6875176cfb9aa4aeff311f33">open3d::core::nns::MemoryAllocation::AllocLargestSegment</a></div><div class="ttdeci">std::pair&lt; void *, size_t &gt; AllocLargestSegment()</div><div class="ttdoc">Returns the largest free segment.</div><div class="ttdef"><b>Definition:</b> MemoryAllocation.h:75</div></div>
<div class="ttc" id="aio_2file__format_2_file_p_c_d_8cpp_html_a439227feff9d7f55384e8780cfc2eb82"><div class="ttname"><a href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a></div><div class="ttdeci">int size</div><div class="ttdef"><b>Definition:</b> FilePCD.cpp:40</div></div>
<div class="ttc" id="aio_2file__format_2_file_p_c_d_8cpp_html_ad43c3812e6d13e0518d9f8b8f463ffcf"><div class="ttname"><a href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a></div><div class="ttdeci">int count</div><div class="ttdef"><b>Definition:</b> FilePCD.cpp:42</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/core_2nns_2_memory_allocation_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:32 GMT -->
</html>
