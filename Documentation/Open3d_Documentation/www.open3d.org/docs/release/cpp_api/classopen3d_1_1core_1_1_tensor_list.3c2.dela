<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_tensor_list.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:25 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::TensorList Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::TensorList Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tensor_list_8h_source.html">TensorList.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a22d4b5d64417a313335db590a4748f84"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a22d4b5d64417a313335db590a4748f84">TensorList</a> ()</td></tr>
<tr class="memdesc:a22d4b5d64417a313335db590a4748f84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Useful to support operator[] in a map.  <a href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a22d4b5d64417a313335db590a4748f84">More...</a><br /></td></tr>
<tr class="separator:a22d4b5d64417a313335db590a4748f84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe98571345163f63da952ac297269812"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#afe98571345163f63da952ac297269812">TensorList</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;element_shape, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a> dtype, const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:afe98571345163f63da952ac297269812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a366554c31fc99d4739e63e780d625ee2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a366554c31fc99d4739e63e780d625ee2">TensorList</a> (const std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; &amp;tensors)</td></tr>
<tr class="separator:a366554c31fc99d4739e63e780d625ee2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b285d7a9808d1e969b2866a6bea8ca3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a2b285d7a9808d1e969b2866a6bea8ca3">TensorList</a> (int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;element_shape, <a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a> dtype, const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>(&quot;CPU:0&quot;))</td></tr>
<tr class="separator:a2b285d7a9808d1e969b2866a6bea8ca3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a697a66b0487bbfd9662b7569daf4d2d5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a697a66b0487bbfd9662b7569daf4d2d5">TensorList</a> (const std::initializer_list&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; &amp;tensors)</td></tr>
<tr class="separator:a697a66b0487bbfd9662b7569daf4d2d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eca639ff4e7c04cf1c1987dbf046d48"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a5eca639ff4e7c04cf1c1987dbf046d48"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a5eca639ff4e7c04cf1c1987dbf046d48">TensorList</a> (InputIterator begin, InputIterator end)</td></tr>
<tr class="separator:a5eca639ff4e7c04cf1c1987dbf046d48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b30727eafe39bc905fe1e359184fdfa"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a0b30727eafe39bc905fe1e359184fdfa">TensorList</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;other)=default</td></tr>
<tr class="separator:a0b30727eafe39bc905fe1e359184fdfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a733f2cb30cb4e488a1b512e07f9696be"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a733f2cb30cb4e488a1b512e07f9696be">TensorList</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a733f2cb30cb4e488a1b512e07f9696be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab110c62608da80494490cf5526a6b23b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#ab110c62608da80494490cf5526a6b23b">operator=</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;other) &amp;=default</td></tr>
<tr class="separator:ab110c62608da80494490cf5526a6b23b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1359af09112adc83b1bf0e5c86b123"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a9a1359af09112adc83b1bf0e5c86b123">operator=</a> (<a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&amp;other) &amp;=default</td></tr>
<tr class="separator:a9a1359af09112adc83b1bf0e5c86b123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a478c469d2688190a1a18e4d28a73041c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a478c469d2688190a1a18e4d28a73041c">CopyFrom</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;other)</td></tr>
<tr class="separator:a478c469d2688190a1a18e4d28a73041c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50f7e3f418c1eee23dd221d764687888"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a50f7e3f418c1eee23dd221d764687888">Clone</a> () const</td></tr>
<tr class="separator:a50f7e3f418c1eee23dd221d764687888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab640d599cc951e4a4bbeffa7ecf15ba8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#ab640d599cc951e4a4bbeffa7ecf15ba8">AsTensor</a> () const</td></tr>
<tr class="memdesc:ab640d599cc951e4a4bbeffa7ecf15ba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the reference of the contained valid tensors with shared memory.  <a href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#ab640d599cc951e4a4bbeffa7ecf15ba8">More...</a><br /></td></tr>
<tr class="separator:ab640d599cc951e4a4bbeffa7ecf15ba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a0868690ed97759ed17dc60264a7675"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a5a0868690ed97759ed17dc60264a7675">Resize</a> (int64_t new_size)</td></tr>
<tr class="separator:a5a0868690ed97759ed17dc60264a7675"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91423cecce580da76ebaa4fbcbd13739"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a91423cecce580da76ebaa4fbcbd13739">PushBack</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;tensor)</td></tr>
<tr class="separator:a91423cecce580da76ebaa4fbcbd13739"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36f9652e8cadc5458040e4027181d130"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a36f9652e8cadc5458040e4027181d130">Extend</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;other)</td></tr>
<tr class="separator:a36f9652e8cadc5458040e4027181d130"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14cf7af500527636ae961d26eef88c67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a14cf7af500527636ae961d26eef88c67">operator+</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;other) const</td></tr>
<tr class="memdesc:a14cf7af500527636ae961d26eef88c67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Concatenate two tensorlists.  <a href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a14cf7af500527636ae961d26eef88c67">More...</a><br /></td></tr>
<tr class="separator:a14cf7af500527636ae961d26eef88c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813b2dae12d047139936c3cb65967404"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a813b2dae12d047139936c3cb65967404">operator+=</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;other)</td></tr>
<tr class="separator:a813b2dae12d047139936c3cb65967404"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff4e7655252f0c8382e848f5e71cc7b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#aff4e7655252f0c8382e848f5e71cc7b1">operator[]</a> (int64_t index) const</td></tr>
<tr class="separator:aff4e7655252f0c8382e848f5e71cc7b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae53fd2f25f973ecea351c8527db8129d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#ae53fd2f25f973ecea351c8527db8129d">Clear</a> ()</td></tr>
<tr class="separator:ae53fd2f25f973ecea351c8527db8129d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12acbd584592457bdd6e989aa1248aae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a12acbd584592457bdd6e989aa1248aae">ToString</a> () const</td></tr>
<tr class="separator:a12acbd584592457bdd6e989aa1248aae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8b13020f4d44cfb6f19da8395f970c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#af8b13020f4d44cfb6f19da8395f970c3">GetElementShape</a> () const</td></tr>
<tr class="separator:af8b13020f4d44cfb6f19da8395f970c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad76603257a721a9379094f8273b1e389"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#ad76603257a721a9379094f8273b1e389">AssertElementShape</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;expected_element_shape) const</td></tr>
<tr class="separator:ad76603257a721a9379094f8273b1e389"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9d08eae059625e79dbdae0b23acd768"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#aa9d08eae059625e79dbdae0b23acd768">AssertDevice</a> (const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;expected_device) const</td></tr>
<tr class="separator:aa9d08eae059625e79dbdae0b23acd768"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6615cd625d5aba46473baa7a1b97199"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#aa6615cd625d5aba46473baa7a1b97199">GetDevice</a> () const</td></tr>
<tr class="separator:aa6615cd625d5aba46473baa7a1b97199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28a7501c932e5c85da02d29ec93f2e8c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a28a7501c932e5c85da02d29ec93f2e8c">GetDtype</a> () const</td></tr>
<tr class="separator:a28a7501c932e5c85da02d29ec93f2e8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1eb3871538202dac15e61b29a0d5f40"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#ac1eb3871538202dac15e61b29a0d5f40">GetSize</a> () const</td></tr>
<tr class="separator:ac1eb3871538202dac15e61b29a0d5f40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43267574d8a3a57abdfd2cb729d5d260"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a43267574d8a3a57abdfd2cb729d5d260">GetReservedSize</a> () const</td></tr>
<tr class="separator:a43267574d8a3a57abdfd2cb729d5d260"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af444bee811275ac16df338818eef5709"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#af444bee811275ac16df338818eef5709">GetInternalTensor</a> () const</td></tr>
<tr class="separator:af444bee811275ac16df338818eef5709"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f3e73cd41055e0b8e3a2f825d76a48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#aa9f3e73cd41055e0b8e3a2f825d76a48">IsResizable</a> () const</td></tr>
<tr class="separator:aa9f3e73cd41055e0b8e3a2f825d76a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a7eae145d65649b295f89c2bf5e0d7416"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a7eae145d65649b295f89c2bf5e0d7416">FromTensor</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;tensor, bool inplace=false)</td></tr>
<tr class="separator:a7eae145d65649b295f89c2bf5e0d7416"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13aa4e71f8ffdd3c45ca376d8c2036bd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a13aa4e71f8ffdd3c45ca376d8c2036bd">Concatenate</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;a, const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;b)</td></tr>
<tr class="separator:a13aa4e71f8ffdd3c45ca376d8c2036bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a3379302361f277b268f87d9575996151"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a3379302361f277b268f87d9575996151">TensorList</a> (const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> element_shape, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, int64_t reserved_size, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;internal_tensor, bool is_resizable)</td></tr>
<tr class="memdesc:a3379302361f277b268f87d9575996151"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fully specified constructor.  <a href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a3379302361f277b268f87d9575996151">More...</a><br /></td></tr>
<tr class="separator:a3379302361f277b268f87d9575996151"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a682cccc3a7f62aab8a4785467fcba1b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a682cccc3a7f62aab8a4785467fcba1b9">ResizeWithExpand</a> (int64_t new_size)</td></tr>
<tr class="separator:a682cccc3a7f62aab8a4785467fcba1b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:a235f6e23b32f060eaa522405127d97aa"><td class="memItemLeft" align="right" valign="top">static int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a235f6e23b32f060eaa522405127d97aa">ComputeReserveSize</a> (int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)</td></tr>
<tr class="separator:a235f6e23b32f060eaa522405127d97aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a39a0b36f12d796c99291e1d7e97767eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a39a0b36f12d796c99291e1d7e97767eb">element_shape_</a></td></tr>
<tr class="memdesc:a39a0b36f12d796c99291e1d7e97767eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The shape for each element tensor in the tensorlist.  <a href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a39a0b36f12d796c99291e1d7e97767eb">More...</a><br /></td></tr>
<tr class="separator:a39a0b36f12d796c99291e1d7e97767eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbf2c85a0a229d6b382491cb8c7e5776"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#abbf2c85a0a229d6b382491cb8c7e5776">size_</a> = 0</td></tr>
<tr class="separator:abbf2c85a0a229d6b382491cb8c7e5776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fab6177e7e85f2f795dee4c59b94b88"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a0fab6177e7e85f2f795dee4c59b94b88">reserved_size_</a> = 0</td></tr>
<tr class="separator:a0fab6177e7e85f2f795dee4c59b94b88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c5c0e5dcaffbb9849cbb645c2c3cd16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a9c5c0e5dcaffbb9849cbb645c2c3cd16">internal_tensor_</a></td></tr>
<tr class="memdesc:a9c5c0e5dcaffbb9849cbb645c2c3cd16"><td class="mdescLeft">&#160;</td><td class="mdescRight">The internal tensor for data storage.  <a href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a9c5c0e5dcaffbb9849cbb645c2c3cd16">More...</a><br /></td></tr>
<tr class="separator:a9c5c0e5dcaffbb9849cbb645c2c3cd16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86e13a8f6d8ef5d971fada61e09cf954"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela#a86e13a8f6d8ef5d971fada61e09cf954">is_resizable_</a> = true</td></tr>
<tr class="separator:a86e13a8f6d8ef5d971fada61e09cf954"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A tensorlist is a list of Tensors of the same shape, similar to std::vector&lt;Tensor&gt;. Internally, a tensorlist stores the Tensors in one bigger internal tensor, where the begin dimension of the internal tensor is extendable.</p>
<p>Examples:</p><ul>
<li>A 3D point cloud with N points:<ul>
<li>element_shape : (3,)</li>
<li>reserved_size : M, where M &gt;= N</li>
<li>internal_tensor.shape: (M, 3)</li>
</ul>
</li>
<li>Sparse voxel grid of N voxels:<ul>
<li>element_shape : (8, 8, 8)</li>
<li>reserved_size : M, where M &gt;= N</li>
<li>internal_tensor.shape: (M, 8, 8, 8) </li>
</ul>
</li>
</ul>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a22d4b5d64417a313335db590a4748f84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22d4b5d64417a313335db590a4748f84">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Useful to support operator[] in a map. </p>

</div>
</div>
<a id="afe98571345163f63da952ac297269812"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe98571345163f63da952ac297269812">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>element_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a>&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructs an empty tensorlist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">element_shape</td><td>Shape of the contained tensors, e.g. {3,}. 0-sized and scalar element_shape are allowed. </td></tr>
    <tr><td class="paramname">dtype</td><td>Data type of the contained tensors. e.g. <a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>. </td></tr>
    <tr><td class="paramname">device</td><td><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> of the contained tensors. e.g. <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>("CPU:0"). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a366554c31fc99d4739e63e780d625ee2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a366554c31fc99d4739e63e780d625ee2">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructs a tensorlist from a vector of Tensors. The tensors must have the same shape, dtype and device. Values will be copied.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensors</td><td>A vector of tensors. The tensors must have common shape, dtype and device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2b285d7a9808d1e969b2866a6bea8ca3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b285d7a9808d1e969b2866a6bea8ca3">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>element_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a>&#160;</td>
          <td class="paramname"><em>dtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>(&quot;CPU:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructs a tensorlist with specified size.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Size of the tensorlist. </td></tr>
    <tr><td class="paramname">element_shape</td><td>Shape of the contained tensors, e.g. {3,}. 0-sized and scalar element_shape are allowed. </td></tr>
    <tr><td class="paramname">dtype</td><td>Data type of the contained tensors. e.g. <a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>. </td></tr>
    <tr><td class="paramname">device</td><td><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> of the contained tensors. e.g. <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>("CPU:0"). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a697a66b0487bbfd9662b7569daf4d2d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a697a66b0487bbfd9662b7569daf4d2d5">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">const std::initializer_list&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructs a tensorlist from a list of Tensors. The tensors must have the same shape, dtype and device. Values will be copied.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensors</td><td>A list of tensors. The tensors must have common shape, dtype and device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5eca639ff4e7c04cf1c1987dbf046d48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5eca639ff4e7c04cf1c1987dbf046d48">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructs a tensorlist from <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> iterator. The tensors must have the same shape, dtype and device. Values will be copied.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Begin iterator. </td></tr>
    <tr><td class="paramname">end</td><td>End iterator. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0b30727eafe39bc905fe1e359184fdfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b30727eafe39bc905fe1e359184fdfa">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy constructor for tensorlist. The internal tensor will share the same memory as the input. Also see: the copy constructor for <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>. </p>

</div>
</div>
<a id="a733f2cb30cb4e488a1b512e07f9696be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a733f2cb30cb4e488a1b512e07f9696be">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move constructor for tensorlist. The internal tensor will share the same memory as the input. Also see: the move constructor for <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>. </p>

</div>
</div>
<a id="a3379302361f277b268f87d9575996151"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3379302361f277b268f87d9575996151">&#9670;&nbsp;</a></span>TensorList() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::TensorList::TensorList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a>&#160;</td>
          <td class="paramname"><em>element_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>reserved_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>internal_tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fully specified constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa9d08eae059625e79dbdae0b23acd768"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9d08eae059625e79dbdae0b23acd768">&#9670;&nbsp;</a></span>AssertDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::AssertDevice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;&#160;</td>
          <td class="paramname"><em>expected_device</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad76603257a721a9379094f8273b1e389"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad76603257a721a9379094f8273b1e389">&#9670;&nbsp;</a></span>AssertElementShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::AssertElementShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> &amp;&#160;</td>
          <td class="paramname"><em>expected_element_shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab640d599cc951e4a4bbeffa7ecf15ba8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab640d599cc951e4a4bbeffa7ecf15ba8">&#9670;&nbsp;</a></span>AsTensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> open3d::core::TensorList::AsTensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the reference of the contained valid tensors with shared memory. </p>

</div>
</div>
<a id="ae53fd2f25f973ecea351c8527db8129d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae53fd2f25f973ecea351c8527db8129d">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear the tensorlist by disgarding the internal tensor and resetting the size to 0. This operation is only valid for resizable tensorlist. </p>

</div>
</div>
<a id="a50f7e3f418c1eee23dd221d764687888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50f7e3f418c1eee23dd221d764687888">&#9670;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> open3d::core::TensorList::Clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Duplicate the current tensorlist. Values will be copied. The returned tensor will always be resizable. </p>

</div>
</div>
<a id="a235f6e23b32f060eaa522405127d97aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a235f6e23b32f060eaa522405127d97aa">&#9670;&nbsp;</a></span>ComputeReserveSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::TensorList::ComputeReserveSize </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the reserved size for the desired number of tensors with reserved_size_ = (1 &lt;&lt; (ceil(log2(size_)) + 1)). </p>

</div>
</div>
<a id="a13aa4e71f8ffdd3c45ca376d8c2036bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13aa4e71f8ffdd3c45ca376d8c2036bd">&#9670;&nbsp;</a></span>Concatenate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> open3d::core::TensorList::Concatenate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Concatenate two tensorlists. Return a new tensorlists with data copied. Two tensorlists must have the same element_shape, type, and device. </p>

</div>
</div>
<a id="a478c469d2688190a1a18e4d28a73041c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a478c469d2688190a1a18e4d28a73041c">&#9670;&nbsp;</a></span>CopyFrom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::CopyFrom </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Performs actual copy from another tensorlist. The internal tensor will be explicitly copied. All attributes will be copied and replaced. The returned tensor will always be resizable. </p>

</div>
</div>
<a id="a36f9652e8cadc5458040e4027181d130"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36f9652e8cadc5458040e4027181d130">&#9670;&nbsp;</a></span>Extend()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::Extend </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extend the current tensorlist with another tensorlist appended to the end. The data is copied. The two tensorlists must have the same element_shape, dtype, and device. This operation is only valid for resizable tensorlist. </p>

</div>
</div>
<a id="a7eae145d65649b295f89c2bf5e0d7416"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7eae145d65649b295f89c2bf5e0d7416">&#9670;&nbsp;</a></span>FromTensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> open3d::core::TensorList::FromTensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>inplace</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Factory function to create tensorlist from a <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensor</td><td>The input tensor. The tensor must have at least one dimension (tensor.NumDims() &gt;= 1). The first dimension of the tensor will be used as the "size" dimension of the tensorlist, while the remaining dimensions will be used as the element shape of the tensor list. For example, if the input tensor has shape (2, 3, 4), the resulting tensorlist will have size 2 and element shape (3, 4).</td></tr>
    <tr><td class="paramname">inplace</td><td>If <code>inplace == true</code>, the tensorlist shares the same memory with the input tensor. The input tensor must be contiguous. The resulting tensorlist cannot be extended. If <code>inplace == false</code>, the tensor values will be copied when creating the tensorlist. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa6615cd625d5aba46473baa7a1b97199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6615cd625d5aba46473baa7a1b97199">&#9670;&nbsp;</a></span>GetDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> open3d::core::TensorList::GetDevice </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a28a7501c932e5c85da02d29ec93f2e8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28a7501c932e5c85da02d29ec93f2e8c">&#9670;&nbsp;</a></span>GetDtype()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a> open3d::core::TensorList::GetDtype </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af8b13020f4d44cfb6f19da8395f970c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8b13020f4d44cfb6f19da8395f970c3">&#9670;&nbsp;</a></span>GetElementShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::TensorList::GetElementShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af444bee811275ac16df338818eef5709"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af444bee811275ac16df338818eef5709">&#9670;&nbsp;</a></span>GetInternalTensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&amp; open3d::core::TensorList::GetInternalTensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a43267574d8a3a57abdfd2cb729d5d260"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43267574d8a3a57abdfd2cb729d5d260">&#9670;&nbsp;</a></span>GetReservedSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::TensorList::GetReservedSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1eb3871538202dac15e61b29a0d5f40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1eb3871538202dac15e61b29a0d5f40">&#9670;&nbsp;</a></span>GetSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::TensorList::GetSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa9f3e73cd41055e0b8e3a2f825d76a48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9f3e73cd41055e0b8e3a2f825d76a48">&#9670;&nbsp;</a></span>IsResizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::TensorList::IsResizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a14cf7af500527636ae961d26eef88c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14cf7af500527636ae961d26eef88c67">&#9670;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> open3d::core::TensorList::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Concatenate two tensorlists. </p>

</div>
</div>
<a id="a813b2dae12d047139936c3cb65967404"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a813b2dae12d047139936c3cb65967404">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&amp; open3d::core::TensorList::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Inplace concatenate with another tensorlist. This operation is only valid for resizable tensorlist. </p>

</div>
</div>
<a id="ab110c62608da80494490cf5526a6b23b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab110c62608da80494490cf5526a6b23b">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&amp; open3d::core::TensorList::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy assignment operator. The internal tensor will share the same memory as the input. </p>

</div>
</div>
<a id="a9a1359af09112adc83b1bf0e5c86b123"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a1359af09112adc83b1bf0e5c86b123">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a>&amp; open3d::core::TensorList::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor_list.3c2.dela">TensorList</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move assignment operator. The internal tensor will share the same memory as the input. </p>

</div>
</div>
<a id="aff4e7655252f0c8382e848f5e71cc7b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff4e7655252f0c8382e848f5e71cc7b1">&#9670;&nbsp;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> open3d::core::TensorList::operator[] </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extract the i-th <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> along the begin axis, returning a new view. For advanced indexing like Slice, use tensorlist.AsTensor().Slice(). </p>

</div>
</div>
<a id="a91423cecce580da76ebaa4fbcbd13739"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91423cecce580da76ebaa4fbcbd13739">&#9670;&nbsp;</a></span>PushBack()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::PushBack </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Push back a tensor to the tensorlist. The values will be copied. This operation is only valid for resizable tensorlist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensor</td><td>The tensor to to be copied to the end of the tensorlist. The tensor must be of the same shape, dtype and device as the tensot list. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5a0868690ed97759ed17dc60264a7675"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a0868690ed97759ed17dc60264a7675">&#9670;&nbsp;</a></span>Resize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::Resize </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>new_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize tensorlist. If the size increases, the increased part will be initialized with 0. If the size decreases, the reserved_size_ remain unchanged. This operation is only valid for resizable tensorlist. </p>

</div>
</div>
<a id="a682cccc3a7f62aab8a4785467fcba1b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a682cccc3a7f62aab8a4785467fcba1b9">&#9670;&nbsp;</a></span>ResizeWithExpand()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::TensorList::ResizeWithExpand </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>new_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Expand internal tensor to be larger or equal to the requested size. If the current reserved size is smaller than the requested size, the reserved size will be increased, a new internal tensor will be allocated and the original data will be copied. If the current reserved size is larger than or equal to the requested size, no operation will be performed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">new_size</td><td>The requested size. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a12acbd584592457bdd6e989aa1248aae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12acbd584592457bdd6e989aa1248aae">&#9670;&nbsp;</a></span>ToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::core::TensorList::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a39a0b36f12d796c99291e1d7e97767eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39a0b36f12d796c99291e1d7e97767eb">&#9670;&nbsp;</a></span>element_shape_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">SizeVector</a> open3d::core::TensorList::element_shape_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The shape for each element tensor in the tensorlist. </p>

</div>
</div>
<a id="a9c5c0e5dcaffbb9849cbb645c2c3cd16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c5c0e5dcaffbb9849cbb645c2c3cd16">&#9670;&nbsp;</a></span>internal_tensor_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> open3d::core::TensorList::internal_tensor_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The internal tensor for data storage. </p>

</div>
</div>
<a id="a86e13a8f6d8ef5d971fada61e09cf954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86e13a8f6d8ef5d971fada61e09cf954">&#9670;&nbsp;</a></span>is_resizable_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::TensorList::is_resizable_ = true</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Whether the tensorlist is resizable. Typically, if the tensorlist is created with pre-allocated shared buffer, the tensorlist is not resizable. </p>

</div>
</div>
<a id="a0fab6177e7e85f2f795dee4c59b94b88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fab6177e7e85f2f795dee4c59b94b88">&#9670;&nbsp;</a></span>reserved_size_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::TensorList::reserved_size_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Maximum number of elements in tensorlist.</p>
<p>The internal_tensor_'s shape is (reserved_size_, *element_shape_). In general, reserved_size_ &gt;= (1 &lt;&lt; (ceil(log2(size_)) + 1)) as conventionally done in std::vector.</p>
<p>Examples: size_ = 3, reserved_size_ = 8 size_ = 4, reserved_size_ = 8 size_ = 5, reserved_size_ = 16 </p>

</div>
</div>
<a id="abbf2c85a0a229d6b382491cb8c7e5776"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbf2c85a0a229d6b382491cb8c7e5776">&#9670;&nbsp;</a></span>size_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::core::TensorList::size_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Number of active (valid) elements in tensorlist. The internal_tensor_ has shape (reserved_size_, *shape_), but only the front (size_, *shape_) is active. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/<a class="el" href="_tensor_list_8h_source.html">TensorList.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/<a class="el" href="_tensor_list_8cpp.html">TensorList.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_tensor_list.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:26 GMT -->
</html>
