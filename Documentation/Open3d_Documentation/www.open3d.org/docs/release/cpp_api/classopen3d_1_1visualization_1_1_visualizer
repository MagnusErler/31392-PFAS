<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1_visualizer.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:14 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::visualization::Visualizer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization.html">visualization</a></li><li class="navelem"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::visualization::Visualizer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The main <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> class.  
 <a href="classopen3d_1_1visualization_1_1_visualizer#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_visualizer_8h_source.html">Visualizer.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::visualization::Visualizer:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1visualization_1_1_visualizer-2" usemap="#open3d::visualization::Visualizer_map" alt=""/>
  <map id="open3d::visualization::Visualizer_map" name="open3d::visualization::Visualizer_map">
<area href="classopen3d_1_1visualization_1_1_visualizer_" alt="open3d::visualization::VisualizerWithCustomAnimation" shape="rect" coords="0,56,311,80"/>
<area href="classopen3d_1_1visualization_1_1_visualizer_-2" title="Visualizer with editing capabilities." alt="open3d::visualization::VisualizerWithEditing" shape="rect" coords="321,56,632,80"/>
<area href="classopen3d_1_1visualization_1_1_visualizer_-3" title="Visualizer with custom key callback capabilities." alt="open3d::visualization::VisualizerWithKeyCallback" shape="rect" coords="642,56,953,80"/>
<area href="classopen3d_1_1visualization_1_1_visualizer_-4" alt="open3d::visualization::VisualizerWithVertexSelection" shape="rect" coords="963,56,1274,80"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1visualization_1_1_visualizer">MouseControl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aec583df646cf10d3869208f3c896327d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#aec583df646cf10d3869208f3c896327d">Visualizer</a> ()</td></tr>
<tr class="separator:aec583df646cf10d3869208f3c896327d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02fac8fbfb1a5be28ef205a14d3c539"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#aa02fac8fbfb1a5be28ef205a14d3c539">~Visualizer</a> ()</td></tr>
<tr class="separator:aa02fac8fbfb1a5be28ef205a14d3c539"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a676bbc84979c1bdc15611c54b2a86529"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a676bbc84979c1bdc15611c54b2a86529">Visualizer</a> (<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;&amp;)=delete</td></tr>
<tr class="separator:a676bbc84979c1bdc15611c54b2a86529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c072f8e610e6f2157bf2a1e8eb38406"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a4c072f8e610e6f2157bf2a1e8eb38406">Visualizer</a> (const <a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;)=delete</td></tr>
<tr class="separator:a4c072f8e610e6f2157bf2a1e8eb38406"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af93497ebfef602ae96503f0429669a85"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#af93497ebfef602ae96503f0429669a85">operator=</a> (const <a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;)=delete</td></tr>
<tr class="separator:af93497ebfef602ae96503f0429669a85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07d20e24af90610618151111ffff0961"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a07d20e24af90610618151111ffff0961">CreateVisualizerWindow</a> (const std::string &amp;window_name=&quot;Open3D&quot;, const int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>=640, const int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>=480, const int left=50, const int top=50, const bool visible=true)</td></tr>
<tr class="memdesc:a07d20e24af90610618151111ffff0961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to create a window and initialize GLFW.  <a href="classopen3d_1_1visualization_1_1_visualizer#a07d20e24af90610618151111ffff0961">More...</a><br /></td></tr>
<tr class="separator:a07d20e24af90610618151111ffff0961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0bf54b03eb94fb8336dcac5c1d8044c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#aa0bf54b03eb94fb8336dcac5c1d8044c">DestroyVisualizerWindow</a> ()</td></tr>
<tr class="memdesc:aa0bf54b03eb94fb8336dcac5c1d8044c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to destroy a window.  <a href="classopen3d_1_1visualization_1_1_visualizer#aa0bf54b03eb94fb8336dcac5c1d8044c">More...</a><br /></td></tr>
<tr class="separator:aa0bf54b03eb94fb8336dcac5c1d8044c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab74c869e2bc18c97f44161d3c4931f81"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ab74c869e2bc18c97f44161d3c4931f81">RegisterAnimationCallback</a> (std::function&lt; bool(<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> *)&gt; callback_func)</td></tr>
<tr class="memdesc:ab74c869e2bc18c97f44161d3c4931f81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to register a callback function for animation.  <a href="classopen3d_1_1visualization_1_1_visualizer#ab74c869e2bc18c97f44161d3c4931f81">More...</a><br /></td></tr>
<tr class="separator:ab74c869e2bc18c97f44161d3c4931f81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595b469f3b9857942101b575a598b5f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a595b469f3b9857942101b575a598b5f6">Run</a> ()</td></tr>
<tr class="memdesc:a595b469f3b9857942101b575a598b5f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to activate the window.  <a href="classopen3d_1_1visualization_1_1_visualizer#a595b469f3b9857942101b575a598b5f6">More...</a><br /></td></tr>
<tr class="separator:a595b469f3b9857942101b575a598b5f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae212a6e466975ad04c3875d3804d5875"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ae212a6e466975ad04c3875d3804d5875">Close</a> ()</td></tr>
<tr class="memdesc:ae212a6e466975ad04c3875d3804d5875"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to to notify the window to be closed.  <a href="classopen3d_1_1visualization_1_1_visualizer#ae212a6e466975ad04c3875d3804d5875">More...</a><br /></td></tr>
<tr class="separator:ae212a6e466975ad04c3875d3804d5875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e9be382fc756f8a0523c94ab9e3684b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a7e9be382fc756f8a0523c94ab9e3684b">WaitEvents</a> ()</td></tr>
<tr class="memdesc:a7e9be382fc756f8a0523c94ab9e3684b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to process the event queue and return if the window is closed.  <a href="classopen3d_1_1visualization_1_1_visualizer#a7e9be382fc756f8a0523c94ab9e3684b">More...</a><br /></td></tr>
<tr class="separator:a7e9be382fc756f8a0523c94ab9e3684b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a193b935e6e0da5a5740b794b147ca7f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a193b935e6e0da5a5740b794b147ca7f0">PollEvents</a> ()</td></tr>
<tr class="separator:a193b935e6e0da5a5740b794b147ca7f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a625d702db5f4f747ccdf546d603c89b4"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a625d702db5f4f747ccdf546d603c89b4">AddGeometry</a> (std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt; geometry_ptr, bool reset_bounding_box=true)</td></tr>
<tr class="memdesc:a625d702db5f4f747ccdf546d603c89b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to add geometry to the scene and create corresponding shaders.  <a href="classopen3d_1_1visualization_1_1_visualizer#a625d702db5f4f747ccdf546d603c89b4">More...</a><br /></td></tr>
<tr class="separator:a625d702db5f4f747ccdf546d603c89b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa76112ff46caa1f12800455288258d1c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#aa76112ff46caa1f12800455288258d1c">RemoveGeometry</a> (std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt; geometry_ptr, bool reset_bounding_box=true)</td></tr>
<tr class="memdesc:aa76112ff46caa1f12800455288258d1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to remove geometry from the scene.  <a href="classopen3d_1_1visualization_1_1_visualizer#aa76112ff46caa1f12800455288258d1c">More...</a><br /></td></tr>
<tr class="separator:aa76112ff46caa1f12800455288258d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a099024549554076dbc3d112acf61c7f4"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a099024549554076dbc3d112acf61c7f4">ClearGeometries</a> ()</td></tr>
<tr class="separator:a099024549554076dbc3d112acf61c7f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b112bdf1cf4f1c95af424f9940537dd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a5b112bdf1cf4f1c95af424f9940537dd">UpdateGeometry</a> (std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt; geometry_ptr=nullptr)</td></tr>
<tr class="memdesc:a5b112bdf1cf4f1c95af424f9940537dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to update geometry.  <a href="classopen3d_1_1visualization_1_1_visualizer#a5b112bdf1cf4f1c95af424f9940537dd">More...</a><br /></td></tr>
<tr class="separator:a5b112bdf1cf4f1c95af424f9940537dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7dfd6044fcaff4d84e20a5a52be844b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ae7dfd6044fcaff4d84e20a5a52be844b">HasGeometry</a> () const</td></tr>
<tr class="separator:ae7dfd6044fcaff4d84e20a5a52be844b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28d870e521d0faa775fd93cb40d2b999"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a28d870e521d0faa775fd93cb40d2b999">UpdateRender</a> ()</td></tr>
<tr class="memdesc:a28d870e521d0faa775fd93cb40d2b999"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to inform render needed to be updated.  <a href="classopen3d_1_1visualization_1_1_visualizer#a28d870e521d0faa775fd93cb40d2b999">More...</a><br /></td></tr>
<tr class="separator:a28d870e521d0faa775fd93cb40d2b999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a095ae99ea49bbe65d6b500a7a6761885"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a095ae99ea49bbe65d6b500a7a6761885">SetFullScreen</a> (bool fullscreen)</td></tr>
<tr class="memdesc:a095ae99ea49bbe65d6b500a7a6761885"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions to change between fullscreen and windowed modes.  <a href="classopen3d_1_1visualization_1_1_visualizer#a095ae99ea49bbe65d6b500a7a6761885">More...</a><br /></td></tr>
<tr class="separator:a095ae99ea49bbe65d6b500a7a6761885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e561df6cc1e249bb439853177dbe99"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ad5e561df6cc1e249bb439853177dbe99">ToggleFullScreen</a> ()</td></tr>
<tr class="separator:ad5e561df6cc1e249bb439853177dbe99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41cb28383410cd55e8e7037849e533cc"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a41cb28383410cd55e8e7037849e533cc">IsFullScreen</a> ()</td></tr>
<tr class="separator:a41cb28383410cd55e8e7037849e533cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adff58d36d16c0f5b28f0d232d93090d7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#adff58d36d16c0f5b28f0d232d93090d7">PrintVisualizerHelp</a> ()</td></tr>
<tr class="separator:adff58d36d16c0f5b28f0d232d93090d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1a324bde040be6f9b94dfb3990827da"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ab1a324bde040be6f9b94dfb3990827da">UpdateWindowTitle</a> ()</td></tr>
<tr class="separator:ab1a324bde040be6f9b94dfb3990827da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07f07858a00033c52bb6abfae8167940"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a07f07858a00033c52bb6abfae8167940">BuildUtilities</a> ()</td></tr>
<tr class="separator:a07f07858a00033c52bb6abfae8167940"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72287ed3a5f1004a96c7d0884cccfd9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1_view_contro">ViewControl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a72287ed3a5f1004a96c7d0884cccfd9e">GetViewControl</a> ()</td></tr>
<tr class="memdesc:a72287ed3a5f1004a96c7d0884cccfd9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to retrieve the associated <a class="el" href="classopen3d_1_1visualization_1_1_view_contro" title="View controller for visualizer.">ViewControl</a>.  <a href="classopen3d_1_1visualization_1_1_visualizer#a72287ed3a5f1004a96c7d0884cccfd9e">More...</a><br /></td></tr>
<tr class="separator:a72287ed3a5f1004a96c7d0884cccfd9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae16438ae5899daca352327d8a5ee6ab2"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1visualization_1_1_view_contro">ViewControl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ae16438ae5899daca352327d8a5ee6ab2">GetViewControl</a> () const</td></tr>
<tr class="separator:ae16438ae5899daca352327d8a5ee6ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04157b4967e1521693b1d6ac6c9945c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1_render_opti">RenderOption</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a04157b4967e1521693b1d6ac6c9945c2">GetRenderOption</a> ()</td></tr>
<tr class="memdesc:a04157b4967e1521693b1d6ac6c9945c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to retrieve the associated <a class="el" href="classopen3d_1_1visualization_1_1_render_opti" title="Defines rendering options for visualizer.">RenderOption</a>.  <a href="classopen3d_1_1visualization_1_1_visualizer#a04157b4967e1521693b1d6ac6c9945c2">More...</a><br /></td></tr>
<tr class="separator:a04157b4967e1521693b1d6ac6c9945c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4c9166a9cad1de0114d7039125f6d71"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ae4c9166a9cad1de0114d7039125f6d71">CaptureScreenFloatBuffer</a> (bool do_render=true)</td></tr>
<tr class="memdesc:ae4c9166a9cad1de0114d7039125f6d71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to capture screen and store RGB in a float buffer.  <a href="classopen3d_1_1visualization_1_1_visualizer#ae4c9166a9cad1de0114d7039125f6d71">More...</a><br /></td></tr>
<tr class="separator:ae4c9166a9cad1de0114d7039125f6d71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f44eac125c4426c018785d83242c80d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a4f44eac125c4426c018785d83242c80d">CaptureScreenImage</a> (const std::string &amp;filename=&quot;&quot;, bool do_render=true)</td></tr>
<tr class="memdesc:a4f44eac125c4426c018785d83242c80d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to capture and save a screen image.  <a href="classopen3d_1_1visualization_1_1_visualizer#a4f44eac125c4426c018785d83242c80d">More...</a><br /></td></tr>
<tr class="separator:a4f44eac125c4426c018785d83242c80d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7db191033c2dca4cafbcfb215fb6fce6"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a7db191033c2dca4cafbcfb215fb6fce6">CaptureDepthFloatBuffer</a> (bool do_render=true)</td></tr>
<tr class="separator:a7db191033c2dca4cafbcfb215fb6fce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c972b706dfcafe73aec62339e4512c3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a1c972b706dfcafe73aec62339e4512c3">CaptureDepthImage</a> (const std::string &amp;filename=&quot;&quot;, bool do_render=true, double depth_scale=1000.0)</td></tr>
<tr class="separator:a1c972b706dfcafe73aec62339e4512c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f4808ca04f062f1d874b15a9b50416a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a3f4808ca04f062f1d874b15a9b50416a">CaptureDepthPointCloud</a> (const std::string &amp;filename=&quot;&quot;, bool do_render=true, bool convert_to_world_coordinate=false)</td></tr>
<tr class="memdesc:a3f4808ca04f062f1d874b15a9b50416a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to capture and save local point cloud.  <a href="classopen3d_1_1visualization_1_1_visualizer#a3f4808ca04f062f1d874b15a9b50416a">More...</a><br /></td></tr>
<tr class="separator:a3f4808ca04f062f1d874b15a9b50416a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a011fa8851c2a0598c644f4d883eae80e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a011fa8851c2a0598c644f4d883eae80e">CaptureRenderOption</a> (const std::string &amp;filename=&quot;&quot;)</td></tr>
<tr class="separator:a011fa8851c2a0598c644f4d883eae80e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5dbe527fb1ab7c9be364b318c4391c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#afd5dbe527fb1ab7c9be364b318c4391c">ResetViewPoint</a> (bool reset_bounding_box=false)</td></tr>
<tr class="memdesc:afd5dbe527fb1ab7c9be364b318c4391c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to reset view point.  <a href="classopen3d_1_1visualization_1_1_visualizer#afd5dbe527fb1ab7c9be364b318c4391c">More...</a><br /></td></tr>
<tr class="separator:afd5dbe527fb1ab7c9be364b318c4391c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96d700320a533b0b678895c5c4fbbe29"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a96d700320a533b0b678895c5c4fbbe29">GetWindowName</a> () const</td></tr>
<tr class="separator:a96d700320a533b0b678895c5c4fbbe29"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a400043c8d622f07985e0815e6776c2c8"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a400043c8d622f07985e0815e6776c2c8">InitOpenGL</a> ()</td></tr>
<tr class="memdesc:a400043c8d622f07985e0815e6776c2c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to initialize OpenGL.  <a href="classopen3d_1_1visualization_1_1_visualizer#a400043c8d622f07985e0815e6776c2c8">More...</a><br /></td></tr>
<tr class="separator:a400043c8d622f07985e0815e6776c2c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd718657a835274aa66124398068fee"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a7dd718657a835274aa66124398068fee">InitViewControl</a> ()</td></tr>
<tr class="memdesc:a7dd718657a835274aa66124398068fee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to initialize <a class="el" href="classopen3d_1_1visualization_1_1_view_contro" title="View controller for visualizer.">ViewControl</a>.  <a href="classopen3d_1_1visualization_1_1_visualizer#a7dd718657a835274aa66124398068fee">More...</a><br /></td></tr>
<tr class="separator:a7dd718657a835274aa66124398068fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f53227bf48f8d307cc87550883395be"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a7f53227bf48f8d307cc87550883395be">InitRenderOption</a> ()</td></tr>
<tr class="memdesc:a7f53227bf48f8d307cc87550883395be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to initialize <a class="el" href="classopen3d_1_1visualization_1_1_render_opti" title="Defines rendering options for visualizer.">RenderOption</a>.  <a href="classopen3d_1_1visualization_1_1_visualizer#a7f53227bf48f8d307cc87550883395be">More...</a><br /></td></tr>
<tr class="separator:a7f53227bf48f8d307cc87550883395be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa516b240f96e3812c78153810d6790"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a6fa516b240f96e3812c78153810d6790">Render</a> (bool render_screen=false)</td></tr>
<tr class="separator:a6fa516b240f96e3812c78153810d6790"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5a2f7fd54997fa4e2618ea12878bb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#afd5a2f7fd54997fa4e2618ea12878bb9">CopyViewStatusToClipboard</a> ()</td></tr>
<tr class="separator:afd5a2f7fd54997fa4e2618ea12878bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9738c6de00d86eff17dc4196efe892aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a9738c6de00d86eff17dc4196efe892aa">CopyViewStatusFromClipboard</a> ()</td></tr>
<tr class="separator:a9738c6de00d86eff17dc4196efe892aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf5774830b1fe804fd77818a8c4c53a7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#acf5774830b1fe804fd77818a8c4c53a7">WindowRefreshCallback</a> (GLFWwindow *window)</td></tr>
<tr class="separator:acf5774830b1fe804fd77818a8c4c53a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7063afa1dcc4568dc26c0727bb83ac59"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a7063afa1dcc4568dc26c0727bb83ac59">WindowResizeCallback</a> (GLFWwindow *window, int w, int h)</td></tr>
<tr class="separator:a7063afa1dcc4568dc26c0727bb83ac59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68cdbdc00303f15da32129bf712cacdd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a68cdbdc00303f15da32129bf712cacdd">MouseMoveCallback</a> (GLFWwindow *window, double x, double y)</td></tr>
<tr class="separator:a68cdbdc00303f15da32129bf712cacdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa79d4c9649f918cdb5ae8781aaa2dcea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#aa79d4c9649f918cdb5ae8781aaa2dcea">MouseScrollCallback</a> (GLFWwindow *window, double x, double y)</td></tr>
<tr class="separator:aa79d4c9649f918cdb5ae8781aaa2dcea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f0cf1581f202983a9165d35bb6307a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a82f0cf1581f202983a9165d35bb6307a">MouseButtonCallback</a> (GLFWwindow *window, int button, int action, int mods)</td></tr>
<tr class="separator:a82f0cf1581f202983a9165d35bb6307a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af11465d05f79c7ef33439488626c6826"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#af11465d05f79c7ef33439488626c6826">KeyPressCallback</a> (GLFWwindow *window, int key, int scancode, int action, int mods)</td></tr>
<tr class="separator:af11465d05f79c7ef33439488626c6826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a773987c072695fc7e823873b9173250e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a773987c072695fc7e823873b9173250e">WindowCloseCallback</a> (GLFWwindow *window)</td></tr>
<tr class="memdesc:a773987c072695fc7e823873b9173250e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to notify the window to be closed.  <a href="classopen3d_1_1visualization_1_1_visualizer#a773987c072695fc7e823873b9173250e">More...</a><br /></td></tr>
<tr class="separator:a773987c072695fc7e823873b9173250e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ad85780d57e82dd182b609e166db7c7c0"><td class="memItemLeft" align="right" valign="top">GLFWwindow *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ad85780d57e82dd182b609e166db7c7c0">window_</a> = NULL</td></tr>
<tr class="separator:ad85780d57e82dd182b609e166db7c7c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82cfc6c07fa79da7aee3aeb1cd5f3eba"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a82cfc6c07fa79da7aee3aeb1cd5f3eba">window_name_</a> = &quot;Open3D&quot;</td></tr>
<tr class="separator:a82cfc6c07fa79da7aee3aeb1cd5f3eba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad40d44437feb2e98ddfb86ad5fbd1e30"><td class="memItemLeft" align="right" valign="top">Eigen::Vector2i&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ad40d44437feb2e98ddfb86ad5fbd1e30">saved_window_size_</a> = Eigen::Vector2i::Zero()</td></tr>
<tr class="separator:ad40d44437feb2e98ddfb86ad5fbd1e30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cc82e75f5a7a56f9dc930a4856204a3"><td class="memItemLeft" align="right" valign="top">Eigen::Vector2i&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a2cc82e75f5a7a56f9dc930a4856204a3">saved_window_pos_</a> = Eigen::Vector2i::Zero()</td></tr>
<tr class="separator:a2cc82e75f5a7a56f9dc930a4856204a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac20427006fcee2b4722b1cbde365527c"><td class="memItemLeft" align="right" valign="top">std::function&lt; bool(<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> *)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ac20427006fcee2b4722b1cbde365527c">animation_callback_func_</a> = nullptr</td></tr>
<tr class="separator:ac20427006fcee2b4722b1cbde365527c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a9c9b12baac9a1cc5f3e61042296956"><td class="memItemLeft" align="right" valign="top">std::function&lt; bool(<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> *)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a2a9c9b12baac9a1cc5f3e61042296956">animation_callback_func_in_loop_</a></td></tr>
<tr class="separator:a2a9c9b12baac9a1cc5f3e61042296956"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad79e18c26333afa7286b546d4ce8e04b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structopen3d_1_1visualization_1_1_visualizer">MouseControl</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ad79e18c26333afa7286b546d4ce8e04b">mouse_control_</a></td></tr>
<tr class="separator:ad79e18c26333afa7286b546d4ce8e04b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae834065d6fce27bae08581956bbc3a6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ae834065d6fce27bae08581956bbc3a6a">is_redraw_required_</a> = true</td></tr>
<tr class="separator:ae834065d6fce27bae08581956bbc3a6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c77053e7318994d032d39c7ae2480b0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a0c77053e7318994d032d39c7ae2480b0">is_initialized_</a> = false</td></tr>
<tr class="separator:a0c77053e7318994d032d39c7ae2480b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a160948b961a98adb32a8e5e74fbc5cf0"><td class="memItemLeft" align="right" valign="top">GLuint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a160948b961a98adb32a8e5e74fbc5cf0">vao_id_</a> = 0</td></tr>
<tr class="separator:a160948b961a98adb32a8e5e74fbc5cf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18d3fdee434e6bd2d3d38b7975382bd3"><td class="memItemLeft" align="right" valign="top">GLuint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a18d3fdee434e6bd2d3d38b7975382bd3">render_fbo_</a> = 0</td></tr>
<tr class="separator:a18d3fdee434e6bd2d3d38b7975382bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c39a3c13d4c67de74f19be422deaf1"><td class="memItemLeft" align="right" valign="top">GLuint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ab0c39a3c13d4c67de74f19be422deaf1">render_rgb_tex_</a> = 0</td></tr>
<tr class="separator:ab0c39a3c13d4c67de74f19be422deaf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e96e839868d4a0dff40c0415beee131"><td class="memItemLeft" align="right" valign="top">GLuint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a1e96e839868d4a0dff40c0415beee131">render_depth_stencil_rbo_</a> = 0</td></tr>
<tr class="separator:a1e96e839868d4a0dff40c0415beee131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd8038c9c2b7143161cf2fffe8b01c1"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1_view_contro">ViewControl</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a0cd8038c9c2b7143161cf2fffe8b01c1">view_control_ptr_</a></td></tr>
<tr class="separator:a0cd8038c9c2b7143161cf2fffe8b01c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f37cb7ca4735d693191cbcab73ef34"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1_render_opti">RenderOption</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a08f37cb7ca4735d693191cbcab73ef34">render_option_ptr_</a></td></tr>
<tr class="separator:a08f37cb7ca4735d693191cbcab73ef34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a826c7fe4e3465ecf234288a97956ad37"><td class="memItemLeft" align="right" valign="top">std::unordered_set&lt; std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a826c7fe4e3465ecf234288a97956ad37">geometry_ptrs_</a></td></tr>
<tr class="separator:a826c7fe4e3465ecf234288a97956ad37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8df0323357cfe0fe69b5a232905a484"><td class="memItemLeft" align="right" valign="top">std::unordered_set&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">glsl::GeometryRenderer</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#af8df0323357cfe0fe69b5a232905a484">geometry_renderer_ptrs_</a></td></tr>
<tr class="separator:af8df0323357cfe0fe69b5a232905a484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2633024495864786ba3c01c933b3b920"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a2633024495864786ba3c01c933b3b920">utility_ptrs_</a></td></tr>
<tr class="separator:a2633024495864786ba3c01c933b3b920"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1e74366b5c50f49d87c5a4594f95cba"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">glsl::GeometryRenderer</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#aa1e74366b5c50f49d87c5a4594f95cba">utility_renderer_ptrs_</a></td></tr>
<tr class="separator:aa1e74366b5c50f49d87c5a4594f95cba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a744ed5220de50ff08fb4079dcab124e0"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">glsl::GeometryRenderer</a> &gt;, <a class="el" href="classopen3d_1_1visualization_1_1_render_opti">RenderOption</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a744ed5220de50ff08fb4079dcab124e0">utility_renderer_opts_</a></td></tr>
<tr class="separator:a744ed5220de50ff08fb4079dcab124e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3f22819d06468dac182a109a556746e"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">geometry::TriangleMesh</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#ae3f22819d06468dac182a109a556746e">coordinate_frame_mesh_ptr_</a></td></tr>
<tr class="separator:ae3f22819d06468dac182a109a556746e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5de911011443cd8cc066105ac55b3d6c"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_coo">glsl::CoordinateFrameRenderer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a5de911011443cd8cc066105ac55b3d6c">coordinate_frame_mesh_renderer_ptr_</a></td></tr>
<tr class="separator:a5de911011443cd8cc066105ac55b3d6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The main <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> class. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aec583df646cf10d3869208f3c896327d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec583df646cf10d3869208f3c896327d">&#9670;&nbsp;</a></span>Visualizer() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::Visualizer::Visualizer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa02fac8fbfb1a5be28ef205a14d3c539"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa02fac8fbfb1a5be28ef205a14d3c539">&#9670;&nbsp;</a></span>~Visualizer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::Visualizer::~Visualizer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a676bbc84979c1bdc15611c54b2a86529"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a676bbc84979c1bdc15611c54b2a86529">&#9670;&nbsp;</a></span>Visualizer() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::Visualizer::Visualizer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4c072f8e610e6f2157bf2a1e8eb38406"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c072f8e610e6f2157bf2a1e8eb38406">&#9670;&nbsp;</a></span>Visualizer() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::Visualizer::Visualizer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a625d702db5f4f747ccdf546d603c89b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a625d702db5f4f747ccdf546d603c89b4">&#9670;&nbsp;</a></span>AddGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::AddGeometry </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt;&#160;</td>
          <td class="paramname"><em>geometry_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reset_bounding_box</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to add geometry to the scene and create corresponding shaders. </p>
<ol type="1">
<li>After calling this function, the <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> owns the geometry object.</li>
<li>This function MUST be called after <a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a07d20e24af90610618151111ffff0961" title="Function to create a window and initialize GLFW.">CreateVisualizerWindow()</a>.</li>
<li>This function returns FALSE when the geometry is of an unsupported type.</li>
<li>If an added geometry is changed, the behavior of <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> is undefined. Programmers are responsible for calling Geometry() to notify the <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> that the geometry has been changed and the <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> should be updated accordingly.</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">geometry_ptr</td><td>The Geometry object. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a65931b3b875526b77665e4697f496692">open3d::visualization::VisualizerWithVertexSelection</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#aa5be9da5f9e6b0921aa7313e61056c88">open3d::visualization::VisualizerWithEditing</a>.</p>

</div>
</div>
<a id="a07f07858a00033c52bb6abfae8167940"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07f07858a00033c52bb6abfae8167940">&#9670;&nbsp;</a></span>BuildUtilities()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::BuildUtilities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a135346dcf88285d77b333342ca85a67a">open3d::visualization::VisualizerWithVertexSelection</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#af252f56e305f3d3ab06bbc1a074267b4">open3d::visualization::VisualizerWithEditing</a>.</p>

</div>
</div>
<a id="a7db191033c2dca4cafbcfb215fb6fce6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7db191033c2dca4cafbcfb215fb6fce6">&#9670;&nbsp;</a></span>CaptureDepthFloatBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt; open3d::visualization::Visualizer::CaptureDepthFloatBuffer </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_render</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to capture depth in a float buffer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">do_render</td><td>Set to <code>true</code> to do render. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1c972b706dfcafe73aec62339e4512c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c972b706dfcafe73aec62339e4512c3">&#9670;&nbsp;</a></span>CaptureDepthImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::CaptureDepthImage </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_render</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to capture and save a depth image.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path to file. </td></tr>
    <tr><td class="paramname">do_render</td><td>Set to <code>true</code> to do render. </td></tr>
    <tr><td class="paramname">depth_scale</td><td>Scale depth value when capturing the depth image. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3f4808ca04f062f1d874b15a9b50416a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f4808ca04f062f1d874b15a9b50416a">&#9670;&nbsp;</a></span>CaptureDepthPointCloud()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::CaptureDepthPointCloud </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_render</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>convert_to_world_coordinate</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to capture and save local point cloud. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path to file. </td></tr>
    <tr><td class="paramname">do_render</td><td>Set to <code>true</code> to do render. </td></tr>
    <tr><td class="paramname">convert_to_world_coordinate</td><td>Set to <code>true</code> to convert to world coordinates. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a011fa8851c2a0598c644f4d883eae80e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a011fa8851c2a0598c644f4d883eae80e">&#9670;&nbsp;</a></span>CaptureRenderOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::CaptureRenderOption </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae4c9166a9cad1de0114d7039125f6d71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4c9166a9cad1de0114d7039125f6d71">&#9670;&nbsp;</a></span>CaptureScreenFloatBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt; open3d::visualization::Visualizer::CaptureScreenFloatBuffer </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_render</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to capture screen and store RGB in a float buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">do_render</td><td>Set to <code>true</code> to do render. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4f44eac125c4426c018785d83242c80d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f44eac125c4426c018785d83242c80d">&#9670;&nbsp;</a></span>CaptureScreenImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::CaptureScreenImage </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_render</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to capture and save a screen image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path to file. </td></tr>
    <tr><td class="paramname">do_render</td><td>Set to <code>true</code> to do render. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a099024549554076dbc3d112acf61c7f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a099024549554076dbc3d112acf61c7f4">&#9670;&nbsp;</a></span>ClearGeometries()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::ClearGeometries </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Function to remove all geometries from the scene. After calling this function, the <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> releases the pointer of all geometry objects. </p>

</div>
</div>
<a id="ae212a6e466975ad04c3875d3804d5875"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae212a6e466975ad04c3875d3804d5875">&#9670;&nbsp;</a></span>Close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to to notify the window to be closed. </p>

</div>
</div>
<a id="a9738c6de00d86eff17dc4196efe892aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9738c6de00d86eff17dc4196efe892aa">&#9670;&nbsp;</a></span>CopyViewStatusFromClipboard()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::CopyViewStatusFromClipboard </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afd5a2f7fd54997fa4e2618ea12878bb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5a2f7fd54997fa4e2618ea12878bb9">&#9670;&nbsp;</a></span>CopyViewStatusToClipboard()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::CopyViewStatusToClipboard </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a07d20e24af90610618151111ffff0961"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07d20e24af90610618151111ffff0961">&#9670;&nbsp;</a></span>CreateVisualizerWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::CreateVisualizerWindow </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>window_name</em> = <code>&quot;Open3D&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>width</em> = <code>640</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>height</em> = <code>480</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>left</em> = <code>50</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>top</em> = <code>50</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>visible</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to create a window and initialize GLFW. </p>
<p>This function MUST be called from the main thread.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">window_name</td><td>Window title name. </td></tr>
    <tr><td class="paramname">width</td><td>Width of the window. </td></tr>
    <tr><td class="paramname">height</td><td>Height of window. </td></tr>
    <tr><td class="paramname">left</td><td>Left margin of the window to the screen. </td></tr>
    <tr><td class="paramname">top</td><td>Top margin of the window to the screen. </td></tr>
    <tr><td class="paramname">visible</td><td>Whether the window is visible. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa0bf54b03eb94fb8336dcac5c1d8044c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0bf54b03eb94fb8336dcac5c1d8044c">&#9670;&nbsp;</a></span>DestroyVisualizerWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::DestroyVisualizerWindow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to destroy a window. </p>
<p>This function MUST be called from the main thread. </p>

</div>
</div>
<a id="a04157b4967e1521693b1d6ac6c9945c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04157b4967e1521693b1d6ac6c9945c2">&#9670;&nbsp;</a></span>GetRenderOption()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1_render_opti">RenderOption</a>&amp; open3d::visualization::Visualizer::GetRenderOption </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to retrieve the associated <a class="el" href="classopen3d_1_1visualization_1_1_render_opti" title="Defines rendering options for visualizer.">RenderOption</a>. </p>

</div>
</div>
<a id="a72287ed3a5f1004a96c7d0884cccfd9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72287ed3a5f1004a96c7d0884cccfd9e">&#9670;&nbsp;</a></span>GetViewControl() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1_view_contro">ViewControl</a>&amp; open3d::visualization::Visualizer::GetViewControl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to retrieve the associated <a class="el" href="classopen3d_1_1visualization_1_1_view_contro" title="View controller for visualizer.">ViewControl</a>. </p>

</div>
</div>
<a id="ae16438ae5899daca352327d8a5ee6ab2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae16438ae5899daca352327d8a5ee6ab2">&#9670;&nbsp;</a></span>GetViewControl() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1visualization_1_1_view_contro">ViewControl</a>&amp; open3d::visualization::Visualizer::GetViewControl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a96d700320a533b0b678895c5c4fbbe29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96d700320a533b0b678895c5c4fbbe29">&#9670;&nbsp;</a></span>GetWindowName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; open3d::visualization::Visualizer::GetWindowName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae7dfd6044fcaff4d84e20a5a52be844b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7dfd6044fcaff4d84e20a5a52be844b">&#9670;&nbsp;</a></span>HasGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::HasGeometry </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a400043c8d622f07985e0815e6776c2c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a400043c8d622f07985e0815e6776c2c8">&#9670;&nbsp;</a></span>InitOpenGL()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::InitOpenGL </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to initialize OpenGL. </p>

</div>
</div>
<a id="a7f53227bf48f8d307cc87550883395be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f53227bf48f8d307cc87550883395be">&#9670;&nbsp;</a></span>InitRenderOption()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::InitRenderOption </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to initialize <a class="el" href="classopen3d_1_1visualization_1_1_render_opti" title="Defines rendering options for visualizer.">RenderOption</a>. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a089b262a9a8886c2c58e5afe2f640231">open3d::visualization::VisualizerWithVertexSelection</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#a3ce4ea78ec1dcf35c9ad08f02dd1c214">open3d::visualization::VisualizerWithEditing</a>.</p>

</div>
</div>
<a id="a7dd718657a835274aa66124398068fee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dd718657a835274aa66124398068fee">&#9670;&nbsp;</a></span>InitViewControl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::InitViewControl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to initialize <a class="el" href="classopen3d_1_1visualization_1_1_view_contro" title="View controller for visualizer.">ViewControl</a>. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a604880a8a8339090e45d258de205b059">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#a29ec3e7d71911449f7e088f09259ed6f">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#a3f9938b4ef4a101c7616208a9b9b747d">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="a41cb28383410cd55e8e7037849e533cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41cb28383410cd55e8e7037849e533cc">&#9670;&nbsp;</a></span>IsFullScreen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::IsFullScreen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af11465d05f79c7ef33439488626c6826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af11465d05f79c7ef33439488626c6826">&#9670;&nbsp;</a></span>KeyPressCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::KeyPressCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>scancode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>action</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mods</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#af6b81603dc9a0daed3f2c7f3527a8a28">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-3#a63d30d3a29add0e21684a109fffd88c8">open3d::visualization::VisualizerWithKeyCallback</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#a139b198966f80f7b0ff52c04e9df1fcf">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#a710103c9b655ad03e4d2236f18b77a9c">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="a82f0cf1581f202983a9165d35bb6307a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82f0cf1581f202983a9165d35bb6307a">&#9670;&nbsp;</a></span>MouseButtonCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::MouseButtonCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>button</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>action</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mods</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#aa2fba9e2ceff98b26e7090ddf83a6ce4">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#a714bddb784b83d6089d02cacb3b990c3">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#a45a3f10ddaea94f691fb83e88e9531f3">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="a68cdbdc00303f15da32129bf712cacdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68cdbdc00303f15da32129bf712cacdd">&#9670;&nbsp;</a></span>MouseMoveCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::MouseMoveCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#ab00b4f7d3f33e4ec48d008b1da496b07">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#aa1a8c4f865bbe99596d535295b220fc1">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#afd7ebc6f835e6f9b9eaa037ccc52f113">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="aa79d4c9649f918cdb5ae8781aaa2dcea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa79d4c9649f918cdb5ae8781aaa2dcea">&#9670;&nbsp;</a></span>MouseScrollCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::MouseScrollCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a8c2f3f5c4102a7b646b5310d28a128ff">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#abdea02936c2e5aee1967b249e17d20ac">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#a7e6fa2b6844a66b710164a2f24310f11">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="af93497ebfef602ae96503f0429669a85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af93497ebfef602ae96503f0429669a85">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a>&amp; open3d::visualization::Visualizer::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a193b935e6e0da5a5740b794b147ca7f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a193b935e6e0da5a5740b794b147ca7f0">&#9670;&nbsp;</a></span>PollEvents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::PollEvents </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to process the event queue and return if the window is closed.</p>
<p>Use this function if you want to manage the while loop yourself. This function will NOT block the thread. Thus it is suitable for computation heavy task behind the scene. </p>

</div>
</div>
<a id="adff58d36d16c0f5b28f0d232d93090d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adff58d36d16c0f5b28f0d232d93090d7">&#9670;&nbsp;</a></span>PrintVisualizerHelp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::PrintVisualizerHelp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a847e0960766e08f8545f0199b5242dea">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-3#ad7672b29aa5468c2fb60c1a18f755abd">open3d::visualization::VisualizerWithKeyCallback</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#aa4ef06da870a82cc8466ea9059936cd1">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#ad48eb1afbbf6f49e4a325b0dd4b4cd2f">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="ab74c869e2bc18c97f44161d3c4931f81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab74c869e2bc18c97f44161d3c4931f81">&#9670;&nbsp;</a></span>RegisterAnimationCallback()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::RegisterAnimationCallback </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; bool(<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> *)&gt;&#160;</td>
          <td class="paramname"><em>callback_func</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to register a callback function for animation. </p>
<p>The callback function returns if <a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a5b112bdf1cf4f1c95af424f9940537dd" title="Function to update geometry.">UpdateGeometry()</a> needs to be run.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callback_func</td><td>The call back function. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa76112ff46caa1f12800455288258d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa76112ff46caa1f12800455288258d1c">&#9670;&nbsp;</a></span>RemoveGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::RemoveGeometry </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt;&#160;</td>
          <td class="paramname"><em>geometry_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reset_bounding_box</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to remove geometry from the scene. </p>
<ol type="1">
<li>After calling this function, the <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> releases the pointer of the geometry object.</li>
<li>This function MUST be called after <a class="el" href="classopen3d_1_1visualization_1_1_visualizer#a07d20e24af90610618151111ffff0961" title="Function to create a window and initialize GLFW.">CreateVisualizerWindow()</a>.</li>
<li>This function returns FALSE if the geometry to be removed is not added by AddGeometry</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">geometry_ptr</td><td>The Geometry object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6fa516b240f96e3812c78153810d6790"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fa516b240f96e3812c78153810d6790">&#9670;&nbsp;</a></span>Render()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::Render </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>render_screen</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Function to do the main rendering The function first sets view point, then draw geometry (pointclouds and meshes individually). </p>

</div>
</div>
<a id="afd5dbe527fb1ab7c9be364b318c4391c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5dbe527fb1ab7c9be364b318c4391c">&#9670;&nbsp;</a></span>ResetViewPoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::ResetViewPoint </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reset_bounding_box</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to reset view point. </p>

</div>
</div>
<a id="a595b469f3b9857942101b575a598b5f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a595b469f3b9857942101b575a598b5f6">&#9670;&nbsp;</a></span>Run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::Run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to activate the window. </p>
<p>This function will block the current thread until the window is closed. </p>

</div>
</div>
<a id="a095ae99ea49bbe65d6b500a7a6761885"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a095ae99ea49bbe65d6b500a7a6761885">&#9670;&nbsp;</a></span>SetFullScreen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::SetFullScreen </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>fullscreen</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Functions to change between fullscreen and windowed modes. </p>

</div>
</div>
<a id="ad5e561df6cc1e249bb439853177dbe99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5e561df6cc1e249bb439853177dbe99">&#9670;&nbsp;</a></span>ToggleFullScreen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::ToggleFullScreen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5b112bdf1cf4f1c95af424f9940537dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b112bdf1cf4f1c95af424f9940537dd">&#9670;&nbsp;</a></span>UpdateGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::UpdateGeometry </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a> &gt;&#160;</td>
          <td class="paramname"><em>geometry_ptr</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to update geometry. </p>
<p>This function must be called when geometry has been changed. Otherwise the behavior of <a class="el" href="classopen3d_1_1visualization_1_1_visualizer" title="The main Visualizer class.">Visualizer</a> is undefined. If called without an argument, updates all geometries, otherwise only updates the geometry specified. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a773c7b9aff67d82ef1cc6d0f9e8a79ce">open3d::visualization::VisualizerWithVertexSelection</a>.</p>

</div>
</div>
<a id="a28d870e521d0faa775fd93cb40d2b999"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28d870e521d0faa775fd93cb40d2b999">&#9670;&nbsp;</a></span>UpdateRender()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::UpdateRender </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to inform render needed to be updated. </p>

</div>
</div>
<a id="ab1a324bde040be6f9b94dfb3990827da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1a324bde040be6f9b94dfb3990827da">&#9670;&nbsp;</a></span>UpdateWindowTitle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::UpdateWindowTitle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#ab7f97fcca990d7938c50b2eedbfc8cf0">open3d::visualization::VisualizerWithVertexSelection</a>, <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#a14c03fd4eefc990a9ec02891353acf17">open3d::visualization::VisualizerWithEditing</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_#a4abfc413e5e4cfff74042038c5c37873">open3d::visualization::VisualizerWithCustomAnimation</a>.</p>

</div>
</div>
<a id="a7e9be382fc756f8a0523c94ab9e3684b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e9be382fc756f8a0523c94ab9e3684b">&#9670;&nbsp;</a></span>WaitEvents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::WaitEvents </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to process the event queue and return if the window is closed. </p>
<p>Use this function if you want to manage the while loop yourself. This function will block the thread. </p>

</div>
</div>
<a id="a773987c072695fc7e823873b9173250e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a773987c072695fc7e823873b9173250e">&#9670;&nbsp;</a></span>WindowCloseCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::WindowCloseCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to notify the window to be closed. </p>

</div>
</div>
<a id="acf5774830b1fe804fd77818a8c4c53a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf5774830b1fe804fd77818a8c4c53a7">&#9670;&nbsp;</a></span>WindowRefreshCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::WindowRefreshCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7063afa1dcc4568dc26c0727bb83ac59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7063afa1dcc4568dc26c0727bb83ac59">&#9670;&nbsp;</a></span>WindowResizeCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::Visualizer::WindowResizeCallback </td>
          <td>(</td>
          <td class="paramtype">GLFWwindow *&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-4#a5b3570d47a0ce9b89cb25578f68022c7">open3d::visualization::VisualizerWithVertexSelection</a>, and <a class="el" href="classopen3d_1_1visualization_1_1_visualizer_-2#a50b0fc438342303d9994303fe0353ecb">open3d::visualization::VisualizerWithEditing</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="ac20427006fcee2b4722b1cbde365527c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac20427006fcee2b4722b1cbde365527c">&#9670;&nbsp;</a></span>animation_callback_func_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;bool(<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> *)&gt; open3d::visualization::Visualizer::animation_callback_func_ = nullptr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2a9c9b12baac9a1cc5f3e61042296956"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a9c9b12baac9a1cc5f3e61042296956">&#9670;&nbsp;</a></span>animation_callback_func_in_loop_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;bool(<a class="el" href="classopen3d_1_1visualization_1_1_visualizer">Visualizer</a> *)&gt; open3d::visualization::Visualizer::animation_callback_func_in_loop_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div>
<div class="line">            <span class="keyword">nullptr</span></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae3f22819d06468dac182a109a556746e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3f22819d06468dac182a109a556746e">&#9670;&nbsp;</a></span>coordinate_frame_mesh_ptr_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">geometry::TriangleMesh</a>&gt; open3d::visualization::Visualizer::coordinate_frame_mesh_ptr_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5de911011443cd8cc066105ac55b3d6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5de911011443cd8cc066105ac55b3d6c">&#9670;&nbsp;</a></span>coordinate_frame_mesh_renderer_ptr_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_coo">glsl::CoordinateFrameRenderer</a>&gt; open3d::visualization::Visualizer::coordinate_frame_mesh_renderer_ptr_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a826c7fe4e3465ecf234288a97956ad37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a826c7fe4e3465ecf234288a97956ad37">&#9670;&nbsp;</a></span>geometry_ptrs_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_set&lt;std::shared_ptr&lt;const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a>&gt; &gt; open3d::visualization::Visualizer::geometry_ptrs_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af8df0323357cfe0fe69b5a232905a484"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8df0323357cfe0fe69b5a232905a484">&#9670;&nbsp;</a></span>geometry_renderer_ptrs_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_set&lt;std::shared_ptr&lt;<a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">glsl::GeometryRenderer</a>&gt; &gt; open3d::visualization::Visualizer::geometry_renderer_ptrs_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0c77053e7318994d032d39c7ae2480b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c77053e7318994d032d39c7ae2480b0">&#9670;&nbsp;</a></span>is_initialized_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::is_initialized_ = false</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae834065d6fce27bae08581956bbc3a6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae834065d6fce27bae08581956bbc3a6a">&#9670;&nbsp;</a></span>is_redraw_required_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::Visualizer::is_redraw_required_ = true</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad79e18c26333afa7286b546d4ce8e04b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad79e18c26333afa7286b546d4ce8e04b">&#9670;&nbsp;</a></span>mouse_control_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1_visualizer">MouseControl</a> open3d::visualization::Visualizer::mouse_control_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e96e839868d4a0dff40c0415beee131"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e96e839868d4a0dff40c0415beee131">&#9670;&nbsp;</a></span>render_depth_stencil_rbo_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GLuint open3d::visualization::Visualizer::render_depth_stencil_rbo_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a18d3fdee434e6bd2d3d38b7975382bd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18d3fdee434e6bd2d3d38b7975382bd3">&#9670;&nbsp;</a></span>render_fbo_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GLuint open3d::visualization::Visualizer::render_fbo_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a08f37cb7ca4735d693191cbcab73ef34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08f37cb7ca4735d693191cbcab73ef34">&#9670;&nbsp;</a></span>render_option_ptr_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classopen3d_1_1visualization_1_1_render_opti">RenderOption</a>&gt; open3d::visualization::Visualizer::render_option_ptr_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab0c39a3c13d4c67de74f19be422deaf1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0c39a3c13d4c67de74f19be422deaf1">&#9670;&nbsp;</a></span>render_rgb_tex_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GLuint open3d::visualization::Visualizer::render_rgb_tex_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2cc82e75f5a7a56f9dc930a4856204a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cc82e75f5a7a56f9dc930a4856204a3">&#9670;&nbsp;</a></span>saved_window_pos_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector2i open3d::visualization::Visualizer::saved_window_pos_ = Eigen::Vector2i::Zero()</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad40d44437feb2e98ddfb86ad5fbd1e30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad40d44437feb2e98ddfb86ad5fbd1e30">&#9670;&nbsp;</a></span>saved_window_size_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector2i open3d::visualization::Visualizer::saved_window_size_ = Eigen::Vector2i::Zero()</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2633024495864786ba3c01c933b3b920"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2633024495864786ba3c01c933b3b920">&#9670;&nbsp;</a></span>utility_ptrs_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;const <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">geometry::Geometry</a>&gt; &gt; open3d::visualization::Visualizer::utility_ptrs_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a744ed5220de50ff08fb4079dcab124e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a744ed5220de50ff08fb4079dcab124e0">&#9670;&nbsp;</a></span>utility_renderer_opts_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt;std::shared_ptr&lt;<a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">glsl::GeometryRenderer</a>&gt;, <a class="el" href="classopen3d_1_1visualization_1_1_render_opti">RenderOption</a>&gt; open3d::visualization::Visualizer::utility_renderer_opts_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa1e74366b5c50f49d87c5a4594f95cba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1e74366b5c50f49d87c5a4594f95cba">&#9670;&nbsp;</a></span>utility_renderer_ptrs_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::shared_ptr&lt;<a class="el" href="classopen3d_1_1visualization_1_1glsl_1_1_geo">glsl::GeometryRenderer</a>&gt; &gt; open3d::visualization::Visualizer::utility_renderer_ptrs_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a160948b961a98adb32a8e5e74fbc5cf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a160948b961a98adb32a8e5e74fbc5cf0">&#9670;&nbsp;</a></span>vao_id_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GLuint open3d::visualization::Visualizer::vao_id_ = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0cd8038c9c2b7143161cf2fffe8b01c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cd8038c9c2b7143161cf2fffe8b01c1">&#9670;&nbsp;</a></span>view_control_ptr_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classopen3d_1_1visualization_1_1_view_contro">ViewControl</a>&gt; open3d::visualization::Visualizer::view_control_ptr_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad85780d57e82dd182b609e166db7c7c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad85780d57e82dd182b609e166db7c7c0">&#9670;&nbsp;</a></span>window_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GLFWwindow* open3d::visualization::Visualizer::window_ = NULL</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a82cfc6c07fa79da7aee3aeb1cd5f3eba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82cfc6c07fa79da7aee3aeb1cd5f3eba">&#9670;&nbsp;</a></span>window_name_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::visualization::Visualizer::window_name_ = &quot;Open3D&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/visualizer/<a class="el" href="_visualizer_8h_source.html">Visualizer.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/visualizer/<a class="el" href="_visualizer_8cpp.html">Visualizer.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/visualizer/<a class="el" href="_visualizer_callback_8cpp.html">VisualizerCallback.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/visualizer/<a class="el" href="_visualizer_render_8cpp.html">VisualizerRender.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1_visualizer.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:17 GMT -->
</html>
