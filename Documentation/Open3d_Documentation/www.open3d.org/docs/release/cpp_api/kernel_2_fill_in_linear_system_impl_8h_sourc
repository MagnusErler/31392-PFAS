<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/kernel_2_fill_in_linear_system_impl_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:04:47 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/t/pipelines/kernel/FillInLinearSystemImpl.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_98b8f8b2b857e52342ae5921735ee8da.359.del">t</a></li><li class="navelem"><a class="el" href="dir_a16cee171089e186ac2053c305b5f552.4e3.del">pipelines</a></li><li class="navelem"><a class="el" href="dir_cf5c51bfbf2a69ac5df5dc9085c00788.973.del">kernel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">FillInLinearSystemImpl.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="kernel_2_fill_in_linear_system_impl_8h.c5e.d">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_s_v_d3x3_8h.html">open3d/core/linalg/kernel/SVD3x3.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_geometry_indexer_8h.html">open3d/t/geometry/kernel/GeometryIndexer.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_fill_in_linear_system_8h.html">open3d/t/pipelines/kernel/FillInLinearSystem.h</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span>t {</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span>pipelines {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span>kernel {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#if defined(__CUDACC__)</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keywordtype">void</span> FillInRigidAlignmentTermCUDA</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a706728cc875042e1e929f669adb8c817">   19</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a706728cc875042e1e929f669adb8c817">FillInRigidAlignmentTermCPU</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        (<a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA,</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;         <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb,</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;         <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual,</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ti_ps,</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Tj_qs,</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ri_normal_ps,</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;         <span class="keywordtype">int</span> i,</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;         <span class="keywordtype">int</span> j,</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;         <span class="keywordtype">float</span> threshold) {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_device.html">core::Device</a> device = AtA.GetDevice();</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    int64_t n = Ti_ps.GetLength();</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (Tj_qs.GetLength() != n || Ri_normal_ps.GetLength() != n) {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="_logging_8h.html#a611dbbfa5c2f148b7190b97a12835b5e">utility::LogError</a>(</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                <span class="stringliteral">&quot;Unable to setup linear system: input length mismatch.&quot;</span>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// First fill in a small 12 x 12 linear system</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> AtA_local =</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="classopen3d_1_1core_1_1_tensor.html#a9a878b99906d1bc0d06a6e5bbf9c892d">core::Tensor::Zeros</a>({12, 12}, <a class="code" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, device);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> Atb_local = <a class="code" href="classopen3d_1_1core_1_1_tensor.html#a9a878b99906d1bc0d06a6e5bbf9c892d">core::Tensor::Zeros</a>({12}, <a class="code" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, device);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">float</span> *AtA_local_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(AtA_local.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#a02fcf79268d821e0b1081207ea02f11c">GetDataPtr</a>());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">float</span> *Atb_local_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Atb_local.GetDataPtr());</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">float</span> *residual_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(residual.GetDataPtr());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Ti_ps_ptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Ti_ps.GetDataPtr());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Tj_qs_ptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Tj_qs.GetDataPtr());</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Ri_normal_ps_ptr =</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Ri_normal_ps.GetDataPtr());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#aa079a56b7eff603b1315cbb233c45370">core::ParallelFor</a>(</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            AtA.GetDevice(), n, [=] <a class="code" href="_c_u_d_a_utils_8h.html#a36245af68b6d012935c0de2cec6abd2d">OPEN3D_DEVICE</a>(int64_t workload_idx) {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *p_prime = Ti_ps_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *q_prime = Tj_qs_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *normal_p_prime =</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        Ri_normal_ps_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordtype">float</span> r = (p_prime[0] - q_prime[0]) * normal_p_prime[0] +</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                          (p_prime[1] - q_prime[1]) * normal_p_prime[1] +</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                          (p_prime[2] - q_prime[2]) * normal_p_prime[2];</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="keywordflow">if</span> (abs(r) &gt; threshold) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordtype">float</span> J_ij[12];</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                J_ij[0] = -q_prime[2] * normal_p_prime[1] +</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                          q_prime[1] * normal_p_prime[2];</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                J_ij[1] = q_prime[2] * normal_p_prime[0] -</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                          q_prime[0] * normal_p_prime[2];</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                J_ij[2] = -q_prime[1] * normal_p_prime[0] +</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                          q_prime[0] * normal_p_prime[1];</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                J_ij[3] = normal_p_prime[0];</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                J_ij[4] = normal_p_prime[1];</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                J_ij[5] = normal_p_prime[2];</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 6; ++k) {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    J_ij[k + 6] = -J_ij[k];</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">// Not optimized; Switch to reduction if necessary.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#if defined(BUILD_CUDA_MODULE) &amp;&amp; defined(__CUDACC__)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i_local = 0; i_local &lt; 12; ++i_local) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j_local = 0; j_local &lt; 12; ++j_local) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        atomicAdd(&amp;AtA_local_ptr[i_local * 12 + j_local],</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                  J_ij[i_local] * J_ij[j_local]);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    atomicAdd(&amp;Atb_local_ptr[i_local], J_ij[i_local] * r);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                atomicAdd(residual_ptr, r * r);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#pragma omp critical(FillInRigidAlignmentTermCPU)</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i_local = 0; i_local &lt; 12; ++i_local) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j_local = 0; j_local &lt; 12; ++j_local) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    AtA_local_ptr[i_local * 12 + j_local]</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                      += J_ij[i_local] * J_ij[j_local];</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                 }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                 Atb_local_ptr[i_local] += J_ij[i_local] * r;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            *residual_ptr += r * r;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            });</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Then fill-in the large linear system</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    std::vector&lt;int64_t&gt; indices_vec(12);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 6; ++k) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        indices_vec[k] = i * 6 + k;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        indices_vec[k + 6] = j * 6 + k;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    std::vector&lt;int64_t&gt; indices_i_vec;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::vector&lt;int64_t&gt; indices_j_vec;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> local_i = 0; local_i &lt; 12; ++local_i) {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> local_j = 0; local_j &lt; 12; ++local_j) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            indices_i_vec.push_back(indices_vec[local_i]);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            indices_j_vec.push_back(indices_vec[local_j]);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> indices(indices_vec, {12}, <a class="code" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, device);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> indices_i(indices_i_vec, {12 * 12}, <a class="code" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, device);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> indices_j(indices_j_vec, {12 * 12}, <a class="code" href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">core::Int64</a>, device);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> AtA_sub = AtA.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#afcb4e53db0afca6cd942fbf632aef8cd">IndexGet</a>({indices_i, indices_j});</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    AtA.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#ae5080876be31d842d7d180a59c295639">IndexSet</a>({indices_i, indices_j}, AtA_sub + AtA_local.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#a8f5d7f0b41cc88d8c6f55e12c77b1e91">View</a>({12 * 12}));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> Atb_sub = Atb.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#afcb4e53db0afca6cd942fbf632aef8cd">IndexGet</a>({indices});</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    Atb.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#ae5080876be31d842d7d180a59c295639">IndexSet</a>({indices}, Atb_sub + Atb_local.<a class="code" href="classopen3d_1_1core_1_1_tensor.html#a8f5d7f0b41cc88d8c6f55e12c77b1e91">View</a>({12, 1}));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">#if defined(__CUDACC__)</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keywordtype">void</span> FillInSLACAlignmentTermCUDA</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a22495f16b69ff188a9915b2d075cb17a">  133</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a22495f16b69ff188a9915b2d075cb17a">FillInSLACAlignmentTermCPU</a></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        (<a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;         <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;         <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ti_Cps,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Tj_Cqs,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Cnormal_ps,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Ri_Cnormal_ps,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;RjT_Ri_Cnormal_ps,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_idx_ps,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_idx_qs,</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_ratio_qs,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;cgrid_ratio_ps,</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;         <span class="keywordtype">int</span> i,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;         <span class="keywordtype">int</span> j,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;         <span class="keywordtype">int</span> n_frags,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;         <span class="keywordtype">float</span> threshold) {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    int64_t n = Ti_Cps.GetLength();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">if</span> (Tj_Cqs.GetLength() != n || Cnormal_ps.GetLength() != n ||</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        Ri_Cnormal_ps.GetLength() != n || RjT_Ri_Cnormal_ps.GetLength() != n ||</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        cgrid_idx_ps.GetLength() != n || cgrid_ratio_ps.GetLength() != n ||</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        cgrid_idx_qs.GetLength() != n || cgrid_ratio_qs.GetLength() != n) {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="_logging_8h.html#a611dbbfa5c2f148b7190b97a12835b5e">utility::LogError</a>(</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="stringliteral">&quot;Unable to setup linear system: input length mismatch.&quot;</span>);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">int</span> n_vars = Atb.GetLength();</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">float</span> *AtA_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(AtA.GetDataPtr());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">float</span> *Atb_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Atb.GetDataPtr());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">float</span> *residual_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(residual.GetDataPtr());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Geometric properties</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Ti_Cps_ptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Ti_Cps.GetDataPtr());</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Tj_Cqs_ptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Tj_Cqs.GetDataPtr());</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Cnormal_ps_ptr =</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Cnormal_ps.GetDataPtr());</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *Ri_Cnormal_ps_ptr =</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Ri_Cnormal_ps.GetDataPtr());</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *RjT_Ri_Cnormal_ps_ptr =</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(RjT_Ri_Cnormal_ps.GetDataPtr());</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Association properties</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> *cgrid_idx_ps_ptr =</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(cgrid_idx_ps.GetDataPtr());</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> *cgrid_idx_qs_ptr =</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(cgrid_idx_qs.GetDataPtr());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *cgrid_ratio_ps_ptr =</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(cgrid_ratio_ps.GetDataPtr());</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *cgrid_ratio_qs_ptr =</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(cgrid_ratio_qs.GetDataPtr());</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#aa079a56b7eff603b1315cbb233c45370">core::ParallelFor</a>(</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            AtA.GetDevice(), n, [=] <a class="code" href="_c_u_d_a_utils_8h.html#a36245af68b6d012935c0de2cec6abd2d">OPEN3D_DEVICE</a>(int64_t workload_idx) {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *Ti_Cp = Ti_Cps_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *Tj_Cq = Tj_Cqs_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *Cnormal_p = Cnormal_ps_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *Ri_Cnormal_p =</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        Ri_Cnormal_ps_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *RjTRi_Cnormal_p =</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        RjT_Ri_Cnormal_ps_ptr + 3 * workload_idx;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> *cgrid_idx_p = cgrid_idx_ps_ptr + 8 * workload_idx;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> *cgrid_idx_q = cgrid_idx_qs_ptr + 8 * workload_idx;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *cgrid_ratio_p =</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        cgrid_ratio_ps_ptr + 8 * workload_idx;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> *cgrid_ratio_q =</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        cgrid_ratio_qs_ptr + 8 * workload_idx;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordtype">float</span> r = (Ti_Cp[0] - Tj_Cq[0]) * Ri_Cnormal_p[0] +</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                          (Ti_Cp[1] - Tj_Cq[1]) * Ri_Cnormal_p[1] +</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                          (Ti_Cp[2] - Tj_Cq[2]) * Ri_Cnormal_p[2];</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">if</span> (abs(r) &gt; threshold) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="comment">// Now we fill in a 60 x 60 sub-matrix: 2 x (6 + 8 x 3)</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordtype">float</span> J[60];</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordtype">int</span> idx[60];</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="comment">// Jacobian w.r.t. Ti: 0-6</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                J[0] = -Tj_Cq[2] * Ri_Cnormal_p[1] + Tj_Cq[1] * Ri_Cnormal_p[2];</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                J[1] = Tj_Cq[2] * Ri_Cnormal_p[0] - Tj_Cq[0] * Ri_Cnormal_p[2];</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                J[2] = -Tj_Cq[1] * Ri_Cnormal_p[0] + Tj_Cq[0] * Ri_Cnormal_p[1];</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                J[3] = Ri_Cnormal_p[0];</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                J[4] = Ri_Cnormal_p[1];</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                J[5] = Ri_Cnormal_p[2];</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="comment">// Jacobian w.r.t. Tj: 6-12</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 6; ++k) {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    J[k + 6] = -J[k];</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    idx[k + 0] = 6 * i + k;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    idx[k + 6] = 6 * j + k;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                <span class="comment">// Jacobian w.r.t. C over p: 12-36</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 8; ++k) {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    J[12 + k * 3 + 0] = cgrid_ratio_p[k] * Cnormal_p[0];</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    J[12 + k * 3 + 1] = cgrid_ratio_p[k] * Cnormal_p[1];</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    J[12 + k * 3 + 2] = cgrid_ratio_p[k] * Cnormal_p[2];</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    idx[12 + k * 3 + 0] = 6 * n_frags + cgrid_idx_p[k] * 3 + 0;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    idx[12 + k * 3 + 1] = 6 * n_frags + cgrid_idx_p[k] * 3 + 1;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    idx[12 + k * 3 + 2] = 6 * n_frags + cgrid_idx_p[k] * 3 + 2;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="comment">// Jacobian w.r.t. C over q: 36-60</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 8; ++k) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    J[36 + k * 3 + 0] = -cgrid_ratio_q[k] * RjTRi_Cnormal_p[0];</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    J[36 + k * 3 + 1] = -cgrid_ratio_q[k] * RjTRi_Cnormal_p[1];</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    J[36 + k * 3 + 2] = -cgrid_ratio_q[k] * RjTRi_Cnormal_p[2];</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    idx[36 + k * 3 + 0] = 6 * n_frags + cgrid_idx_q[k] * 3 + 0;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    idx[36 + k * 3 + 1] = 6 * n_frags + cgrid_idx_q[k] * 3 + 1;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    idx[36 + k * 3 + 2] = 6 * n_frags + cgrid_idx_q[k] * 3 + 2;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment">// Not optimized; Switch to reduction if necessary.</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#if defined(__CUDACC__)</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ki = 0; ki &lt; 60; ++ki) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> kj = 0; kj &lt; 60; ++kj) {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        <span class="keywordtype">float</span> AtA_ij = J[ki] * J[kj];</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        <span class="keywordtype">int</span> ij = idx[ki] * n_vars + idx[kj];</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        atomicAdd(AtA_ptr + ij, AtA_ij);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    <span class="keywordtype">float</span> Atb_i = J[ki] * r;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    atomicAdd(Atb_ptr + idx[ki], Atb_i);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                atomicAdd(residual_ptr, r * r);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#pragma omp critical(FillInSLACAlignmentTermCPU)</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ki = 0; ki &lt; 60; ++ki) {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> kj = 0; kj &lt; 60; ++kj) {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    AtA_ptr[idx[ki] * n_vars + idx[kj]]</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                      += J[ki] * J[kj];</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                 }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                 Atb_ptr[idx[ki]] += J[ki] * r;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            *residual_ptr += r * r;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            });</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">#if defined(__CUDACC__)</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keywordtype">void</span> FillInSLACRegularizerTermCUDA</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#af1587b9e8be2fa06a101269797ca13d1">  280</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#af1587b9e8be2fa06a101269797ca13d1">FillInSLACRegularizerTermCPU</a></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        (<a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;AtA,</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;         <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;Atb,</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;         <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;residual,</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_idx,</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_nbs_idx,</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;grid_nbs_mask,</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;positions_init,</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;         <span class="keyword">const</span> <a class="code" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;positions_curr,</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;         <span class="keywordtype">float</span> weight,</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;         <span class="keywordtype">int</span> n_frags,</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;         <span class="keywordtype">int</span> anchor_idx) {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    int64_t n = grid_idx.GetLength();</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    int64_t n_vars = Atb.GetLength();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordtype">float</span> *AtA_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(AtA.GetDataPtr());</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordtype">float</span> *Atb_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(Atb.GetDataPtr());</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordtype">float</span> *residual_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(residual.GetDataPtr());</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> *grid_idx_ptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(grid_idx.GetDataPtr());</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> *grid_nbs_idx_ptr =</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(grid_nbs_idx.GetDataPtr());</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> *grid_nbs_mask_ptr =</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">bool</span> *<span class="keyword">&gt;</span>(grid_nbs_mask.GetDataPtr());</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *positions_init_ptr =</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(positions_init.GetDataPtr());</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> *positions_curr_ptr =</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(positions_curr.GetDataPtr());</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="namespaceopen3d_1_1core.html#aa079a56b7eff603b1315cbb233c45370">core::ParallelFor</a>(</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            AtA.GetDevice(), n, [=] <a class="code" href="_c_u_d_a_utils_8h.html#a36245af68b6d012935c0de2cec6abd2d">OPEN3D_DEVICE</a>(int64_t workload_idx) {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="comment">// Enumerate 6 neighbors</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                <span class="keywordtype">int</span> idx_i = grid_idx_ptr[workload_idx];</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> *idx_nbs = grid_nbs_idx_ptr + 6 * workload_idx;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> *mask_nbs = grid_nbs_mask_ptr + 6 * workload_idx;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <span class="comment">// Build a 3x3 linear system to compute the local R</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="keywordtype">float</span> cov[3][3] = {{0}};</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <span class="keywordtype">float</span> U[3][3], V[3][3], S[3];</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                <span class="keywordtype">int</span> cnt = 0;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 6; ++k) {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    <span class="keywordtype">bool</span> mask_k = mask_nbs[k];</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    <span class="keywordflow">if</span> (!mask_k) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="keywordtype">int</span> idx_k = idx_nbs[k];</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    <span class="comment">// Now build linear systems</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    <span class="keywordtype">float</span> diff_ik_init[3] = {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                            positions_init_ptr[idx_i * 3 + 0] -</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                    positions_init_ptr[idx_k * 3 + 0],</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                            positions_init_ptr[idx_i * 3 + 1] -</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                    positions_init_ptr[idx_k * 3 + 1],</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                            positions_init_ptr[idx_i * 3 + 2] -</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                    positions_init_ptr[idx_k * 3 + 2]};</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    <span class="keywordtype">float</span> diff_ik_curr[3] = {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                            positions_curr_ptr[idx_i * 3 + 0] -</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                    positions_curr_ptr[idx_k * 3 + 0],</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                            positions_curr_ptr[idx_i * 3 + 1] -</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                    positions_curr_ptr[idx_k * 3 + 1],</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                            positions_curr_ptr[idx_i * 3 + 2] -</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                    positions_curr_ptr[idx_k * 3 + 2]};</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    <span class="comment">// Build linear system by computing XY^T when formulating Y</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="comment">// = RX Y: curr X: init</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 3; ++i) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 3; ++j) {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                            cov[i][j] += diff_ik_init[i] * diff_ik_curr[j];</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                    ++cnt;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keywordflow">if</span> (cnt &lt; 3) {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <a class="code" href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a674f3255ef4cea092ea5776a6071f001">core::linalg::kernel::svd3x3</a>(*cov, *U, S, *V);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="keywordtype">float</span> R[3][3];</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <a class="code" href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a23a34b421e7f46e537af6b8d91e0b1ec">core::linalg::kernel::transpose3x3_</a>(*U);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <a class="code" href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a5e717fb82bfbead8d7975544bed8b25a">core::linalg::kernel::matmul3x3_3x3</a>(*V, *U, *R);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <span class="keywordtype">float</span> d = <a class="code" href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a68e716c3939965f0fd688e73497f0d76">core::linalg::kernel::det3x3</a>(*R);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keywordflow">if</span> (d &lt; 0) {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    U[2][0] = -U[2][0];</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    U[2][1] = -U[2][1];</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    U[2][2] = -U[2][2];</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    <a class="code" href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a5e717fb82bfbead8d7975544bed8b25a">core::linalg::kernel::matmul3x3_3x3</a>(*V, *U, *R);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                <span class="comment">// Now we have R, we build Hessian and residuals</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                <span class="comment">// But first, we need to anchor a point</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                <span class="keywordflow">if</span> (idx_i == anchor_idx) {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    R[0][0] = R[1][1] = R[2][2] = 1;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    R[0][1] = R[0][2] = R[1][0] = R[1][2] = R[2][0] = R[2][1] =</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                            0;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 6; ++k) {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    <span class="keywordtype">bool</span> mask_k = mask_nbs[k];</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    <span class="keywordflow">if</span> (mask_k) {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                        <span class="keywordtype">int</span> idx_k = idx_nbs[k];</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                        <span class="keywordtype">float</span> diff_ik_init[3] = {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                positions_init_ptr[idx_i * 3 + 0] -</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                        positions_init_ptr[idx_k * 3 + 0],</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                positions_init_ptr[idx_i * 3 + 1] -</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                        positions_init_ptr[idx_k * 3 + 1],</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                positions_init_ptr[idx_i * 3 + 2] -</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                        positions_init_ptr[idx_k * 3 + 2]};</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="keywordtype">float</span> diff_ik_curr[3] = {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                positions_curr_ptr[idx_i * 3 + 0] -</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                        positions_curr_ptr[idx_k * 3 + 0],</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                positions_curr_ptr[idx_i * 3 + 1] -</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                        positions_curr_ptr[idx_k * 3 + 1],</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                positions_curr_ptr[idx_i * 3 + 2] -</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                        positions_curr_ptr[idx_k * 3 + 2]};</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                        <span class="keywordtype">float</span> R_diff_ik_curr[3];</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                        core::linalg::kernel::matmul3x3_3x1(*R, diff_ik_init,</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                                            R_diff_ik_curr);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        <span class="keywordtype">float</span> local_r[3];</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        local_r[0] = diff_ik_curr[0] - R_diff_ik_curr[0];</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                        local_r[1] = diff_ik_curr[1] - R_diff_ik_curr[1];</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        local_r[2] = diff_ik_curr[2] - R_diff_ik_curr[2];</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                        <span class="keywordtype">int</span> offset_idx_i = 3 * idx_i + 6 * n_frags;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                        <span class="keywordtype">int</span> offset_idx_k = 3 * idx_k + 6 * n_frags;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor">#if defined(__CUDACC__)</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                        <span class="comment">// Update residual</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                        atomicAdd(residual_ptr,</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                  weight * (local_r[0] * local_r[0] +</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                            local_r[1] * local_r[1] +</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                            local_r[2] * local_r[2]));</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> axis = 0; axis &lt; 3; ++axis) {</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                            <span class="comment">// Update AtA: 2x2</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            atomicAdd(&amp;AtA_ptr[(offset_idx_i + axis) * n_vars +</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                               offset_idx_i + axis],</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                      weight);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                            atomicAdd(&amp;AtA_ptr[(offset_idx_k + axis) * n_vars +</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                               offset_idx_k + axis],</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                      weight);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                            atomicAdd(&amp;AtA_ptr[(offset_idx_i + axis) * n_vars +</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                               offset_idx_k + axis],</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                      -weight);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                            atomicAdd(&amp;AtA_ptr[(offset_idx_k + axis) * n_vars +</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                               offset_idx_i + axis],</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                      -weight);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                            <span class="comment">// Update Atb: 2x1</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                            atomicAdd(&amp;Atb_ptr[offset_idx_i + axis],</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                      +weight * local_r[axis]);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                            atomicAdd(&amp;Atb_ptr[offset_idx_k + axis],</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                      -weight * local_r[axis]);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="preprocessor">#pragma omp critical(FillInSLACRegularizerTermCPU)</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="comment">// Update residual</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    *residual_ptr += weight * (local_r[0] * local_r[0] +</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                               local_r[1] * local_r[1] +</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                               local_r[2] * local_r[2]);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> axis = 0; axis &lt; 3; ++axis) {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        <span class="comment">// Update AtA: 2x2</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        AtA_ptr[(offset_idx_i + axis) * n_vars +</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                 offset_idx_i + axis] += weight;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        AtA_ptr[(offset_idx_k + axis) * n_vars +</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                 offset_idx_k + axis] += weight;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                        AtA_ptr[(offset_idx_i + axis) * n_vars +</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                 offset_idx_k + axis] -= weight;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        AtA_ptr[(offset_idx_k + axis) * n_vars +</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                 offset_idx_i + axis] -= weight;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        <span class="comment">// Update Atb: 2x1</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                        Atb_ptr[offset_idx_i + axis] += weight * local_r[axis];</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                        Atb_ptr[offset_idx_k + axis] -= weight * local_r[axis];</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    }</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            });</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;}</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}  <span class="comment">// namespace kernel</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}  <span class="comment">// namespace pipelines</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}  <span class="comment">// namespace t</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_c_u_d_a_utils_8h_html_a36245af68b6d012935c0de2cec6abd2d"><div class="ttname"><a href="_c_u_d_a_utils_8h.html#a36245af68b6d012935c0de2cec6abd2d">OPEN3D_DEVICE</a></div><div class="ttdeci">#define OPEN3D_DEVICE</div><div class="ttdef"><b>Definition:</b> CUDAUtils.h:45</div></div>
<div class="ttc" id="a_fill_in_linear_system_8h_html"><div class="ttname"><a href="_fill_in_linear_system_8h.html">FillInLinearSystem.h</a></div></div>
<div class="ttc" id="a_geometry_indexer_8h_html"><div class="ttname"><a href="_geometry_indexer_8h.html">GeometryIndexer.h</a></div></div>
<div class="ttc" id="a_logging_8h_html_a611dbbfa5c2f148b7190b97a12835b5e"><div class="ttname"><a href="_logging_8h.html#a611dbbfa5c2f148b7190b97a12835b5e">LogError</a></div><div class="ttdeci">#define LogError(...)</div><div class="ttdef"><b>Definition:</b> Logging.h:48</div></div>
<div class="ttc" id="a_s_v_d3x3_8h_html"><div class="ttname"><a href="_s_v_d3x3_8h.html">SVD3x3.h</a></div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_device_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_device.html">open3d::core::Device</a></div><div class="ttdef"><b>Definition:</b> Device.h:18</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html">open3d::core::Tensor</a></div><div class="ttdef"><b>Definition:</b> Tensor.h:32</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html_a02fcf79268d821e0b1081207ea02f11c"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html#a02fcf79268d821e0b1081207ea02f11c">open3d::core::Tensor::GetDataPtr</a></div><div class="ttdeci">T * GetDataPtr()</div><div class="ttdef"><b>Definition:</b> Tensor.h:1133</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html_a8f5d7f0b41cc88d8c6f55e12c77b1e91"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html#a8f5d7f0b41cc88d8c6f55e12c77b1e91">open3d::core::Tensor::View</a></div><div class="ttdeci">Tensor View(const SizeVector &amp;dst_shape) const</div><div class="ttdef"><b>Definition:</b> Tensor.cpp:688</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html_a9a878b99906d1bc0d06a6e5bbf9c892d"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html#a9a878b99906d1bc0d06a6e5bbf9c892d">open3d::core::Tensor::Zeros</a></div><div class="ttdeci">static Tensor Zeros(const SizeVector &amp;shape, Dtype dtype, const Device &amp;device=Device(&quot;CPU:0&quot;))</div><div class="ttdoc">Create a tensor fill with zeros.</div><div class="ttdef"><b>Definition:</b> Tensor.cpp:373</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html_ae5080876be31d842d7d180a59c295639"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html#ae5080876be31d842d7d180a59c295639">open3d::core::Tensor::IndexSet</a></div><div class="ttdeci">void IndexSet(const std::vector&lt; Tensor &gt; &amp;index_tensors, const Tensor &amp;src_tensor)</div><div class="ttdoc">Advanced indexing getter.</div><div class="ttdef"><b>Definition:</b> Tensor.cpp:903</div></div>
<div class="ttc" id="aclassopen3d_1_1core_1_1_tensor_html_afcb4e53db0afca6cd942fbf632aef8cd"><div class="ttname"><a href="classopen3d_1_1core_1_1_tensor.html#afcb4e53db0afca6cd942fbf632aef8cd">open3d::core::Tensor::IndexGet</a></div><div class="ttdeci">Tensor IndexGet(const std::vector&lt; Tensor &gt; &amp;index_tensors) const</div><div class="ttdoc">Advanced indexing getter. This will always allocate a new Tensor.</div><div class="ttdef"><b>Definition:</b> Tensor.cpp:872</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1linalg_1_1kernel_html_a23a34b421e7f46e537af6b8d91e0b1ec"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a23a34b421e7f46e537af6b8d91e0b1ec">open3d::core::linalg::kernel::transpose3x3_</a></div><div class="ttdeci">OPEN3D_DEVICE OPEN3D_FORCE_INLINE void transpose3x3_(scalar_t *A_3x3)</div><div class="ttdef"><b>Definition:</b> Matrix.h:151</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1linalg_1_1kernel_html_a5e717fb82bfbead8d7975544bed8b25a"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a5e717fb82bfbead8d7975544bed8b25a">open3d::core::linalg::kernel::matmul3x3_3x3</a></div><div class="ttdeci">OPEN3D_DEVICE OPEN3D_FORCE_INLINE void matmul3x3_3x3(const scalar_t *A_3x3, const scalar_t *B_3x3, scalar_t *C_3x3)</div><div class="ttdef"><b>Definition:</b> Matrix.h:48</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1linalg_1_1kernel_html_a674f3255ef4cea092ea5776a6071f001"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a674f3255ef4cea092ea5776a6071f001">open3d::core::linalg::kernel::svd3x3</a></div><div class="ttdeci">OPEN3D_DEVICE OPEN3D_FORCE_INLINE void svd3x3(const scalar_t *A_3x3, scalar_t *U_3x3, scalar_t *S_3x1, scalar_t *V_3x3)</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1linalg_1_1kernel_html_a68e716c3939965f0fd688e73497f0d76"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1linalg_1_1kernel#a68e716c3939965f0fd688e73497f0d76">open3d::core::linalg::kernel::det3x3</a></div><div class="ttdeci">OPEN3D_DEVICE OPEN3D_FORCE_INLINE scalar_t det3x3(const scalar_t *A_3x3)</div><div class="ttdef"><b>Definition:</b> Matrix.h:89</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_a4433666ee214f5f3d9d688bb519fb852"><div class="ttname"><a href="namespaceopen3d_1_1core.html#a4433666ee214f5f3d9d688bb519fb852">open3d::core::Int64</a></div><div class="ttdeci">const Dtype Int64</div><div class="ttdef"><b>Definition:</b> Dtype.cpp:47</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_aa079a56b7eff603b1315cbb233c45370"><div class="ttname"><a href="namespaceopen3d_1_1core.html#aa079a56b7eff603b1315cbb233c45370">open3d::core::ParallelFor</a></div><div class="ttdeci">void ParallelFor(const Device &amp;device, int64_t n, const func_t &amp;func)</div><div class="ttdef"><b>Definition:</b> ParallelFor.h:103</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_af1357e9a6250eaf326a9dc7069c02789"><div class="ttname"><a href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">open3d::core::Float32</a></div><div class="ttdeci">const Dtype Float32</div><div class="ttdef"><b>Definition:</b> Dtype.cpp:42</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_html_a22495f16b69ff188a9915b2d075cb17a"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a22495f16b69ff188a9915b2d075cb17a">open3d::t::pipelines::kernel::FillInSLACAlignmentTermCPU</a></div><div class="ttdeci">void FillInSLACAlignmentTermCPU(core::Tensor &amp;AtA, core::Tensor &amp;Atb, core::Tensor &amp;residual, const core::Tensor &amp;Ti_qs, const core::Tensor &amp;Tj_qs, const core::Tensor &amp;normal_ps, const core::Tensor &amp;Ri_normal_ps, const core::Tensor &amp;RjT_Ri_normal_ps, const core::Tensor &amp;cgrid_idx_ps, const core::Tensor &amp;cgrid_idx_qs, const core::Tensor &amp;cgrid_ratio_qs, const core::Tensor &amp;cgrid_ratio_ps, int i, int j, int n, float threshold)</div><div class="ttdef"><b>Definition:</b> FillInLinearSystemImpl.h:135</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_html_a706728cc875042e1e929f669adb8c817"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#a706728cc875042e1e929f669adb8c817">open3d::t::pipelines::kernel::FillInRigidAlignmentTermCPU</a></div><div class="ttdeci">void FillInRigidAlignmentTermCPU(core::Tensor &amp;AtA, core::Tensor &amp;Atb, core::Tensor &amp;residual, const core::Tensor &amp;Ti_qs, const core::Tensor &amp;Tj_qs, const core::Tensor &amp;Ri_normal_ps, int i, int j, float threshold)</div><div class="ttdef"><b>Definition:</b> FillInLinearSystemImpl.h:21</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_html_af1587b9e8be2fa06a101269797ca13d1"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel#af1587b9e8be2fa06a101269797ca13d1">open3d::t::pipelines::kernel::FillInSLACRegularizerTermCPU</a></div><div class="ttdeci">void FillInSLACRegularizerTermCPU(core::Tensor &amp;AtA, core::Tensor &amp;Atb, core::Tensor &amp;residual, const core::Tensor &amp;grid_idx, const core::Tensor &amp;grid_nbs_idx, const core::Tensor &amp;grid_nbs_mask, const core::Tensor &amp;positions_init, const core::Tensor &amp;positions_curr, float weight, int n, int anchor_idx)</div><div class="ttdef"><b>Definition:</b> FillInLinearSystemImpl.h:282</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/kernel_2_fill_in_linear_system_impl_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:04:48 GMT -->
</html>
