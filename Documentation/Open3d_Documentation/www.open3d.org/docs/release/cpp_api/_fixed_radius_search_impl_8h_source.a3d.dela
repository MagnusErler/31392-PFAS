<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_fixed_radius_search_impl_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:42 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/core/nns/FixedRadiusSearchImpl.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_559a533dc613f808f5747b65451c8a78.48c.del">core</a></li><li class="navelem"><a class="el" href="dir_537ba5981d577830b3c67832c5ce0533.7db.del">nns</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">FixedRadiusSearchImpl.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_fixed_radius_search_impl_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;tbb/parallel_for.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_atomic_8h.html">open3d/core/Atomic.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2nns_2_neighbor_search_common_8h.b9b.de">open3d/core/nns/NeighborSearchCommon.h</a>&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_eigen_8h.html">open3d/utility/Eigen.h</a>&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utility_2_helper_8h.html">open3d/utility/Helper.h</a>&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_parallel_scan_8h.html">open3d/utility/ParallelScan.h</a>&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span>core {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">namespace </span>nns {</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core_1_1nns_1_1impl.546.d">   23</a></span>&#160;<span class="keyword">namespace </span>impl {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span>{</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1core_1_1nns.html#a7c4a3d5c94bd37f0247f8a1987b41f71">BuildSpatialHashTableCPU</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> num_points,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                              <span class="keyword">const</span> T* <span class="keyword">const</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                              <span class="keyword">const</span> T radius,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                              <span class="keyword">const</span> <span class="keywordtype">size_t</span> points_row_splits_size,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                              <span class="keyword">const</span> int64_t* points_row_splits,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                              <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* hash_table_splits,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                              <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_cell_splits_size,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                              <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* hash_table_cell_splits,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                              <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* hash_table_index) {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespaceopen3d_1_1utility.html">open3d::utility</a>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="structopen3d_1_1utility_1_1_mini_vec.451.del">MiniVec&lt;T, 3&gt;</a> Vec3_t;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size = points_row_splits_size - 1;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> T voxel_size = 2 * radius;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> T inv_voxel_size = 1 / voxel_size;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    memset(&amp;hash_table_cell_splits[0], 0,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;           <span class="keyword">sizeof</span>(<a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>) * hash_table_cell_splits_size);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// compute number of points that map to each hash</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; batch_size; ++i) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_size =</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                hash_table_splits[i + 1] - hash_table_splits[i];</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> first_cell_idx = hash_table_splits[i];</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        tbb::parallel_for(</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                tbb::blocked_range&lt;int64_t&gt;(points_row_splits[i],</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                            points_row_splits[i + 1]),</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                [&amp;](<span class="keyword">const</span> tbb::blocked_range&lt;int64_t&gt;&amp; r) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    <span class="keywordflow">for</span> (int64_t i = r.begin(); i != r.end(); ++i) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        Vec3_t pos(points + 3 * i);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        auto voxel_index =</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                ComputeVoxelIndex(pos, inv_voxel_size);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        size_t hash =</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                SpatialHash(voxel_index) % hash_table_size;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        <span class="comment">// note the +1 because we want the first</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        <span class="comment">// element to be 0</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        core::AtomicFetchAddRelaxed(</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                &amp;hash_table_cell_splits[first_cell_idx + hash +</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                        1],</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                1);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                });</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespaceopen3d_1_1utility.html#a750176d8d5b725ef055359ab5272b867">InclusivePrefixSum</a>(&amp;hash_table_cell_splits[0],</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                       &amp;hash_table_cell_splits[hash_table_cell_splits_size],</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                       &amp;hash_table_cell_splits[0]);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;uint32_t&gt; count_tmp(hash_table_cell_splits_size - 1, 0);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// now compute the indices for hash_table_index</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; batch_size; ++i) {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_size =</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                hash_table_splits[i + 1] - hash_table_splits[i];</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> first_cell_idx = hash_table_splits[i];</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        tbb::parallel_for(</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                tbb::blocked_range&lt;size_t&gt;(points_row_splits[i],</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                           points_row_splits[i + 1]),</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                [&amp;](<span class="keyword">const</span> tbb::blocked_range&lt;size_t&gt;&amp; r) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = r.begin(); i != r.end(); ++i) {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        Vec3_t pos(points + 3 * i);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        auto voxel_index =</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                ComputeVoxelIndex(pos, inv_voxel_size);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        size_t hash =</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                SpatialHash(voxel_index) % hash_table_size;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        hash_table_index</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                [hash_table_cell_splits[hash + first_cell_idx] +</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                 core::AtomicFetchAddRelaxed(</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                         &amp;count_tmp[hash + first_cell_idx],</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                         1)] = i;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                });</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">int</span> METRIC, <span class="keyword">class</span> TDerived, <span class="keywordtype">int</span> VECSIZE&gt;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;Eigen::Array&lt;typename TDerived::Scalar, VECSIZE, 1&gt; NeighborsDist(</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">const</span> Eigen::ArrayBase&lt;TDerived&gt;&amp; p,</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keyword">const</span> Eigen::Array&lt;typename TDerived::Scalar, VECSIZE, 3&gt;&amp; <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;typename TDerived::Scalar, VECSIZE, 1&gt; VecN_t;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    VecN_t dist;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    dist.setZero();</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span> (METRIC == <a class="code" href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074a1d4a8da3abdf942e9ae6ad37deb5493c">Linf</a>) {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        dist = (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>.rowwise() - p.transpose()).abs().rowwise().maxCoeff();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (METRIC == <a class="code" href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074ac47d80fd9e42d63aa6172795dab5d82b">L1</a>) {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        dist = (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>.rowwise() - p.transpose()).abs().rowwise().sum();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        dist = (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>.rowwise() - p.transpose()).square().rowwise().sum();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> dist;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>T,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;          <span class="keyword">class </span>TIndex,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;          <span class="keyword">class </span>OUTPUT_ALLOCATOR,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;          <span class="keywordtype">int</span> METRIC,</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;          <span class="keywordtype">bool</span> IGNORE_QUERY_POINT,</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;          <span class="keywordtype">bool</span> RETURN_DISTANCES&gt;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keywordtype">void</span> _FixedRadiusSearchCPU(int64_t* query_neighbors_row_splits,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                           <span class="keywordtype">size_t</span> num_points,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                           <span class="keyword">const</span> T* <span class="keyword">const</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                           <span class="keywordtype">size_t</span> num_queries,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                           <span class="keyword">const</span> T* <span class="keyword">const</span> queries,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                           <span class="keyword">const</span> T radius,</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">size_t</span> points_row_splits_size,</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                           <span class="keyword">const</span> int64_t* <span class="keyword">const</span> points_row_splits,</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">size_t</span> queries_row_splits_size,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                           <span class="keyword">const</span> int64_t* <span class="keyword">const</span> queries_row_splits,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                           <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* <span class="keyword">const</span> hash_table_splits,</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_cell_splits_size,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                           <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* <span class="keyword">const</span> hash_table_cell_splits,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                           <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* <span class="keyword">const</span> hash_table_index,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                           OUTPUT_ALLOCATOR&amp; output_allocator) {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespaceopen3d_1_1utility.html">open3d::utility</a>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">// number of elements for vectorization</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor">#define VECSIZE 8</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="structopen3d_1_1utility_1_1_mini_vec.451.del">MiniVec&lt;T, 3&gt;</a> Vec3_t;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;T, VECSIZE, 1&gt; Vec_t;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;TIndex, VECSIZE, 1&gt; Veci_t;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;T, 3, 1&gt; Pos_t;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;T, VECSIZE, 3&gt; Poslist_t;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;bool, VECSIZE, 1&gt; Result_t;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size = points_row_splits_size - 1;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// return empty output arrays if there are no points</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">if</span> (num_points == 0 || num_queries == 0) {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        std::fill(query_neighbors_row_splits,</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                  query_neighbors_row_splits + num_queries + 1, 0);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        TIndex* indices_ptr;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        output_allocator.AllocIndices(&amp;indices_ptr, 0);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        T* distances_ptr;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        output_allocator.AllocDistances(&amp;distances_ptr, 0);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// use squared radius for L2 to avoid sqrt</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> T threshold = (METRIC == <a class="code" href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074af7368ab818cbd217d118514e15f74be2">L2</a> ? radius * radius : radius);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">const</span> T voxel_size = 2 * radius;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> T inv_voxel_size = 1 / voxel_size;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// counts the number of indices we have to return. This is the number of all</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// neighbors we find.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">size_t</span> num_indices = 0;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">// count the number of neighbors for all query points and update num_indices</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// and populate query_neighbors_row_splits with the number of neighbors</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// for each query point</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; batch_size; ++i) {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_size =</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                hash_table_splits[i + 1] - hash_table_splits[i];</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> first_cell_idx = hash_table_splits[i];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        tbb::parallel_for(</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                tbb::blocked_range&lt;size_t&gt;(queries_row_splits[i],</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                           queries_row_splits[i + 1]),</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                [&amp;](<span class="keyword">const</span> tbb::blocked_range&lt;size_t&gt;&amp; r) {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    <span class="keywordtype">size_t</span> num_indices_local = 0;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = r.begin(); i != r.end(); ++i) {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        size_t neighbors_count = 0;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        Vec3_t pos(queries + i * 3);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                        std::set&lt;size_t&gt; bins_to_visit;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        auto voxel_index =</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                ComputeVoxelIndex(pos, inv_voxel_size);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        size_t hash =</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                SpatialHash(voxel_index) % hash_table_size;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        bins_to_visit.insert(first_cell_idx + hash);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                        for (int dz = -1; dz &lt;= 1; dz += 2)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                            for (int dy = -1; dy &lt;= 1; dy += 2)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                for (int dx = -1; dx &lt;= 1; dx += 2) {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                    Vec3_t p =</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                            pos + radius * Vec3_t(T(dx), T(dy),</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                                  T(dz));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                    voxel_index = ComputeVoxelIndex(</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                            p, inv_voxel_size);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                    hash = SpatialHash(voxel_index) %</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                           hash_table_size;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                    bins_to_visit.insert(first_cell_idx + hash);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                        Poslist_t xyz;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <span class="keywordtype">int</span> vec_i = 0;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        for (<span class="keywordtype">size_t</span> bin : bins_to_visit) {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            <span class="keywordtype">size_t</span> begin_idx = hash_table_cell_splits[bin];</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                            <span class="keywordtype">size_t</span> end_idx = hash_table_cell_splits[bin + 1];</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = begin_idx; j &lt; end_idx; ++j) {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a> idx = hash_table_index[j];</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                <span class="keywordflow">if</span> (IGNORE_QUERY_POINT) {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                    <span class="keywordflow">if</span> (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 0] == pos[0] &amp;&amp;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                        <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 1] == pos[1] &amp;&amp;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                        <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 2] == pos[2])</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                xyz(vec_i, 0) = <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 0];</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                xyz(vec_i, 1) = <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 1];</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                xyz(vec_i, 2) = <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 2];</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                ++vec_i;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                <span class="keywordflow">if</span> (<a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a> == vec_i) {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                    Pos_t pos_arr(pos[0], pos[1], pos[2]);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                    Vec_t dist = NeighborsDist&lt;METRIC, Pos_t,</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                               <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>&gt;(pos_arr,</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                                        xyz);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                    Result_t test_result = dist &lt;= threshold;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                    neighbors_count += test_result.count();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                    vec_i = 0;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                            }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                        }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        <span class="comment">// process the tail</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        <span class="keywordflow">if</span> (vec_i) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                            Pos_t pos_arr(pos[0], pos[1], pos[2]);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                            Vec_t dist = NeighborsDist&lt;METRIC, Pos_t, VECSIZE&gt;(</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                    pos_arr, xyz);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                            Result_t test_result = dist &lt;= threshold;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; vec_i; ++k) {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                neighbors_count += <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(test_result(k));</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                            }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                            vec_i = 0;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        num_indices_local += neighbors_count;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        <span class="comment">// note the +1</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        query_neighbors_row_splits[i + 1] = neighbors_count;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    <a class="code" href="namespaceopen3d_1_1core.html#a106856839f787e9e92e45882bf3738ef">core::AtomicFetchAddRelaxed</a>((<a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#ac9cb11a7decdc0b85cb15858048af1fb">uint64_t</a>*)&amp;num_indices,</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                num_indices_local);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                });</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// Allocate output arrays</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// output for the indices to the neighbors</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    TIndex* indices_ptr;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    output_allocator.AllocIndices(&amp;indices_ptr, num_indices);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// output for the distances</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    T* distances_ptr;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordflow">if</span> (RETURN_DISTANCES)</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        output_allocator.AllocDistances(&amp;distances_ptr, num_indices);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        output_allocator.AllocDistances(&amp;distances_ptr, 0);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    query_neighbors_row_splits[0] = 0;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="namespaceopen3d_1_1utility.html#a750176d8d5b725ef055359ab5272b867">InclusivePrefixSum</a>(query_neighbors_row_splits + 1,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                       query_neighbors_row_splits + num_queries + 1,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                       query_neighbors_row_splits + 1);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="comment">// now populate the indices_ptr and distances_ptr array</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; batch_size; ++i) {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_size =</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                hash_table_splits[i + 1] - hash_table_splits[i];</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> first_cell_idx = hash_table_splits[i];</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        tbb::parallel_for(</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                tbb::blocked_range&lt;size_t&gt;(queries_row_splits[i],</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                           queries_row_splits[i + 1]),</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                [&amp;](<span class="keyword">const</span> tbb::blocked_range&lt;size_t&gt;&amp; r) {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = r.begin(); i != r.end(); ++i) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        size_t neighbors_count = 0;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        size_t indices_offset = query_neighbors_row_splits[i];</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                        Vec3_t pos(queries[i * 3 + 0], queries[i * 3 + 1],</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                   queries[i * 3 + 2]);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                        std::set&lt;size_t&gt; bins_to_visit;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                        auto voxel_index =</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                ComputeVoxelIndex(pos, inv_voxel_size);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        size_t hash =</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                SpatialHash(voxel_index) % hash_table_size;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                        bins_to_visit.insert(first_cell_idx + hash);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        for (int dz = -1; dz &lt;= 1; dz += 2)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            for (int dy = -1; dy &lt;= 1; dy += 2)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                for (int dx = -1; dx &lt;= 1; dx += 2) {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                    Vec3_t p =</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                            pos + radius * Vec3_t(T(dx), T(dy),</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                                  T(dz));</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                    voxel_index = ComputeVoxelIndex(</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                            p, inv_voxel_size);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                    hash = SpatialHash(voxel_index) %</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                           hash_table_size;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                    bins_to_visit.insert(first_cell_idx + hash);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        Poslist_t xyz;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        Veci_t idx_vec;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        <span class="keywordtype">int</span> vec_i = 0;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                        for (<span class="keywordtype">size_t</span> bin : bins_to_visit) {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                            <span class="keywordtype">size_t</span> begin_idx = hash_table_cell_splits[bin];</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                            <span class="keywordtype">size_t</span> end_idx = hash_table_cell_splits[bin + 1];</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = begin_idx; j &lt; end_idx; ++j) {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                int64_t idx = hash_table_index[j];</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                <span class="keywordflow">if</span> (IGNORE_QUERY_POINT) {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                    <span class="keywordflow">if</span> (<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 0] == pos[0] &amp;&amp;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                        <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 1] == pos[1] &amp;&amp;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                        <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 2] == pos[2])</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                xyz(vec_i, 0) = <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 0];</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                xyz(vec_i, 1) = <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 1];</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                xyz(vec_i, 2) = <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>[idx * 3 + 2];</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                idx_vec(vec_i) = idx;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                ++vec_i;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                <span class="keywordflow">if</span> (<a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a> == vec_i) {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                    Pos_t pos_arr(pos[0], pos[1], pos[2]);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                    Vec_t dist = NeighborsDist&lt;METRIC, Pos_t,</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                                               <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>&gt;(pos_arr,</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                                                        xyz);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                    Result_t test_result = dist &lt;= threshold;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; vec_i; ++k) {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                        <span class="keywordflow">if</span> (test_result(k)) {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                            indices_ptr[indices_offset +</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                                        neighbors_count] =</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                                    idx_vec[k];</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                            <span class="keywordflow">if</span> (RETURN_DISTANCES) {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                                distances_ptr[indices_offset +</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                                              neighbors_count] =</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                        dist[k];</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                            }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                        }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                        neighbors_count += <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(test_result(k));</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                    }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                    vec_i = 0;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            }</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                        }</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                        <span class="comment">// process the tail</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                        <span class="keywordflow">if</span> (vec_i) {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            Pos_t pos_arr(pos[0], pos[1], pos[2]);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            Vec_t dist = NeighborsDist&lt;METRIC, Pos_t, VECSIZE&gt;(</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                    pos_arr, xyz);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                            Result_t test_result = dist &lt;= threshold;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; vec_i; ++k) {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                <span class="keywordflow">if</span> (test_result(k)) {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                    indices_ptr[indices_offset +</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                                neighbors_count] = idx_vec[k];</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                    <span class="keywordflow">if</span> (RETURN_DISTANCES) {</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                        distances_ptr[indices_offset +</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                                      neighbors_count] =</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                                dist[k];</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                    }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                neighbors_count += <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(test_result(k));</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                            }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                            vec_i = 0;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                    }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                });</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor">#undef VECSIZE</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;}  <span class="comment">// namespace</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> TIndex, <span class="keyword">class</span> OUTPUT_ALLOCATOR&gt;</div>
<div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1core_1_1nns_1_1impl.546.d#a96f4b6d423c4bbf46d59c408fbaedbca">  530</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1core_1_1nns_1_1impl.546.d#a96f4b6d423c4bbf46d59c408fbaedbca">FixedRadiusSearchCPU</a>(int64_t* query_neighbors_row_splits,</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_points,</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                          <span class="keyword">const</span> T* <span class="keyword">const</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>,</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_queries,</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                          <span class="keyword">const</span> T* <span class="keyword">const</span> queries,</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                          <span class="keyword">const</span> T radius,</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">size_t</span> points_row_splits_size,</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                          <span class="keyword">const</span> int64_t* <span class="keyword">const</span> points_row_splits,</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">size_t</span> queries_row_splits_size,</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                          <span class="keyword">const</span> int64_t* <span class="keyword">const</span> queries_row_splits,</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* <span class="keyword">const</span> hash_table_splits,</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">size_t</span> hash_table_cell_splits_size,</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* <span class="keyword">const</span> hash_table_cell_splits,</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">uint32_t</a>* <span class="keyword">const</span> hash_table_index,</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074">Metric</a> metric,</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">bool</span> ignore_query_point,</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                          <span class="keyword">const</span> <span class="keywordtype">bool</span> return_distances,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                          OUTPUT_ALLOCATOR&amp; output_allocator) {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="comment">// Dispatch all template parameter combinations</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160; </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor">#define FN_PARAMETERS                                                       \</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="preprocessor">    query_neighbors_row_splits, num_points, points, num_queries, queries,   \</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor">            radius, points_row_splits_size, points_row_splits,              \</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="preprocessor">            queries_row_splits_size, queries_row_splits, hash_table_splits, \</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="preprocessor">            hash_table_cell_splits_size, hash_table_cell_splits,            \</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor">            hash_table_index, output_allocator</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE(METRIC, IGNORE_QUERY_POINT, RETURN_DISTANCES)     \</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="preprocessor">    if (METRIC == metric &amp;&amp; IGNORE_QUERY_POINT == ignore_query_point &amp;&amp; \</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor">        RETURN_DISTANCES == return_distances)                           \</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="preprocessor">        _FixedRadiusSearchCPU&lt;T, TIndex, OUTPUT_ALLOCATOR, METRIC,      \</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">                              IGNORE_QUERY_POINT, RETURN_DISTANCES&gt;(    \</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="preprocessor">                FN_PARAMETERS);</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE2(METRIC)         \</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(METRIC, true, true)  \</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(METRIC, true, false) \</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(METRIC, false, true) \</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(METRIC, false, false)</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE3 \</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="preprocessor">    CALL_TEMPLATE2(L1) \</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="preprocessor">    CALL_TEMPLATE2(L2) \</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="preprocessor">    CALL_TEMPLATE2(Linf)</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="_fixed_radius_search_impl_8h.html#ad2368f08671729746637ba8aca4ae8f3">CALL_TEMPLATE3</a></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE2</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE3</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#undef FN_PARAMETERS</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;}</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160; </div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;}  <span class="comment">// namespace impl</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}  <span class="comment">// namespace nns</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}  <span class="comment">// namespace core</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_atomic_8h_html"><div class="ttname"><a href="_atomic_8h.html">Atomic.h</a></div></div>
<div class="ttc" id="a_eigen_8h_html"><div class="ttname"><a href="_eigen_8h.html">Eigen.h</a></div></div>
<div class="ttc" id="a_fixed_radius_search_impl_8h_html_a36a1e768e2eb11edcae1d9081eb07394"><div class="ttname"><a href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a></div><div class="ttdeci">#define VECSIZE</div></div>
<div class="ttc" id="a_fixed_radius_search_impl_8h_html_ad2368f08671729746637ba8aca4ae8f3"><div class="ttname"><a href="_fixed_radius_search_impl_8h.html#ad2368f08671729746637ba8aca4ae8f3">CALL_TEMPLATE3</a></div><div class="ttdeci">#define CALL_TEMPLATE3</div></div>
<div class="ttc" id="a_parallel_scan_8h_html"><div class="ttname"><a href="_parallel_scan_8h.html">ParallelScan.h</a></div></div>
<div class="ttc" id="acore_2nns_2_neighbor_search_common_8h_html"><div class="ttname"><a href="core_2nns_2_neighbor_search_common_8h.b9b.de">NeighborSearchCommon.h</a></div></div>
<div class="ttc" id="aio_2file__format_2_file_p_c_d_8cpp_html_af7f8f4a4e39e09fdb5e9f02330ecabef"><div class="ttname"><a href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a></div><div class="ttdeci">int points</div><div class="ttdef"><b>Definition:</b> FilePCD.cpp:54</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1nns_1_1impl_html_a96f4b6d423c4bbf46d59c408fbaedbca"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1nns_1_1impl.546.d#a96f4b6d423c4bbf46d59c408fbaedbca">open3d::core::nns::impl::FixedRadiusSearchCPU</a></div><div class="ttdeci">void FixedRadiusSearchCPU(int64_t *query_neighbors_row_splits, const size_t num_points, const T *const points, const size_t num_queries, const T *const queries, const T radius, const size_t points_row_splits_size, const int64_t *const points_row_splits, const size_t queries_row_splits_size, const int64_t *const queries_row_splits, const uint32_t *const hash_table_splits, const size_t hash_table_cell_splits_size, const uint32_t *const hash_table_cell_splits, const uint32_t *const hash_table_index, const Metric metric, const bool ignore_query_point, const bool return_distances, OUTPUT_ALLOCATOR &amp;output_allocator)</div><div class="ttdef"><b>Definition:</b> FixedRadiusSearchImpl.h:530</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1nns_html_a1ee06f6e576842e4122fded5bab8b074"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074">open3d::core::nns::Metric</a></div><div class="ttdeci">Metric</div><div class="ttdoc">Supported metrics.</div><div class="ttdef"><b>Definition:</b> NeighborSearchCommon.h:19</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1nns_html_a1ee06f6e576842e4122fded5bab8b074a1d4a8da3abdf942e9ae6ad37deb5493c"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074a1d4a8da3abdf942e9ae6ad37deb5493c">open3d::core::nns::Linf</a></div><div class="ttdeci">@ Linf</div><div class="ttdef"><b>Definition:</b> NeighborSearchCommon.h:19</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1nns_html_a1ee06f6e576842e4122fded5bab8b074ac47d80fd9e42d63aa6172795dab5d82b"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074ac47d80fd9e42d63aa6172795dab5d82b">open3d::core::nns::L1</a></div><div class="ttdeci">@ L1</div><div class="ttdef"><b>Definition:</b> NeighborSearchCommon.h:19</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1nns_html_a1ee06f6e576842e4122fded5bab8b074af7368ab818cbd217d118514e15f74be2"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1nns.html#a1ee06f6e576842e4122fded5bab8b074af7368ab818cbd217d118514e15f74be2">open3d::core::nns::L2</a></div><div class="ttdeci">@ L2</div><div class="ttdef"><b>Definition:</b> NeighborSearchCommon.h:19</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_1_1nns_html_a7c4a3d5c94bd37f0247f8a1987b41f71"><div class="ttname"><a href="namespaceopen3d_1_1core_1_1nns.html#a7c4a3d5c94bd37f0247f8a1987b41f71">open3d::core::nns::BuildSpatialHashTableCPU</a></div><div class="ttdeci">void BuildSpatialHashTableCPU(const Tensor &amp;points, double radius, const Tensor &amp;points_row_splits, const Tensor &amp;hash_table_splits, Tensor &amp;hash_table_index, Tensor &amp;hash_table_cell_splits)</div><div class="ttdef"><b>Definition:</b> FixedRadiusSearchOps.cpp:21</div></div>
<div class="ttc" id="anamespaceopen3d_1_1core_html_a106856839f787e9e92e45882bf3738ef"><div class="ttname"><a href="namespaceopen3d_1_1core.html#a106856839f787e9e92e45882bf3738ef">open3d::core::AtomicFetchAddRelaxed</a></div><div class="ttdeci">uint32_t AtomicFetchAddRelaxed(uint32_t *address, uint32_t val)</div><div class="ttdef"><b>Definition:</b> Atomic.h:25</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_a3d7a59e11e49eda2f5232a012a4a6963"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a3d7a59e11e49eda2f5232a012a4a6963">open3d::io::k4a_plugin::uint32_t</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample playback_handle k4a_logging_message_cb_t void min_level device_handle k4a_imu_sample_t timeout_in_ms capture_handle capture_handle capture_handle image_handle temperature_c k4a_image_t image_handle uint8_t image_handle image_handle image_handle image_handle uint32_t</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:548</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_a56444bbf00a8b57cbf3aaef24f882123"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">open3d::io::k4a_plugin::int</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample playback_handle k4a_logging_message_cb_t void min_level device_handle k4a_imu_sample_t timeout_in_ms capture_handle capture_handle capture_handle image_handle temperature_c int</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:474</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_ac9cb11a7decdc0b85cb15858048af1fb"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#ac9cb11a7decdc0b85cb15858048af1fb">open3d::io::k4a_plugin::uint64_t</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample uint64_t</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:343</div></div>
<div class="ttc" id="anamespaceopen3d_1_1utility_html"><div class="ttname"><a href="namespaceopen3d_1_1utility.html">open3d::utility</a></div><div class="ttdef"><b>Definition:</b> Dispatch.h:91</div></div>
<div class="ttc" id="anamespaceopen3d_1_1utility_html_a750176d8d5b725ef055359ab5272b867"><div class="ttname"><a href="namespaceopen3d_1_1utility.html#a750176d8d5b725ef055359ab5272b867">open3d::utility::InclusivePrefixSum</a></div><div class="ttdeci">void InclusivePrefixSum(const Tin *first, const Tin *last, Tout *out)</div><div class="ttdef"><b>Definition:</b> ParallelScan.h:71</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
<div class="ttc" id="astructopen3d_1_1utility_1_1_mini_vec_html"><div class="ttname"><a href="structopen3d_1_1utility_1_1_mini_vec.451.del">open3d::utility::MiniVec</a></div><div class="ttdef"><b>Definition:</b> MiniVec.h:24</div></div>
<div class="ttc" id="autility_2_helper_8h_html"><div class="ttname"><a href="utility_2_helper_8h.html">Helper.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_fixed_radius_search_impl_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:42 GMT -->
</html>
