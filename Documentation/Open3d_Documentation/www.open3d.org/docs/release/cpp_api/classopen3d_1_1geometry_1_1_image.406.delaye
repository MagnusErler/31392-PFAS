<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_image.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:59 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::Image Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::Image Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> class stores image with customizable width, height, num of channels and bytes per channel.  
 <a href="classopen3d_1_1geometry_1_1_image.406.delaye#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="geometry_2_image_8h_source.html">Image.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::Image:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_image.61d.delaye" usemap="#open3d::geometry::Image_map" alt=""/>
  <map id="open3d::geometry::Image_map" name="open3d::geometry::Image_map">
<area href="classopen3d_1_1geometry_1_1_geometry2_d.401" title="The base geometry class for 2D geometries." alt="open3d::geometry::Geometry2D" shape="rect" coords="0,56,188,80"/>
<area href="classopen3d_1_1geometry_1_1_geometry.400.del" title="The base geometry class." alt="open3d::geometry::Geometry" shape="rect" coords="0,0,188,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a9764309364312fc2e282f9c8ef1cd4a9"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9">ColorToIntensityConversionType</a> { <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9af5f286e73bda105e538310b3190f75c5">Equal</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9a582368ac8232617ead14ac74ccc40ea9">Weighted</a>
 }</td></tr>
<tr class="memdesc:a9764309364312fc2e282f9c8ef1cd4a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies whether R, G, B channels have the same weight when converting to intensity. Only used for <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> with 3 channels.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9">More...</a><br /></td></tr>
<tr class="separator:a9764309364312fc2e282f9c8ef1cd4a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c299b0c65a8d059b5047c417b9a5275"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">FilterType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275a300afed56bc38348d5e806ecf930a9cb">Gaussian3</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275a30a53e4fb7f656f7793d5ae170790207">Gaussian5</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275abe1b7c8ce24192b14f4e44d2f2f2abee">Gaussian7</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275a6aa0fdf8d4c47b32d05edeac15cc89a7">Sobel3Dx</a>
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275a87eaa9187879c9e668bf249d5b7bf8b8">Sobel3Dy</a>
<br />
 }</td></tr>
<tr class="memdesc:a4c299b0c65a8d059b5047c417b9a5275"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies the <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> filter type.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">More...</a><br /></td></tr>
<tr class="separator:a4c299b0c65a8d059b5047c417b9a5275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a69975c2b054d4fd12cf36866a030ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">More...</a><br /></td></tr>
<tr class="separator:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad9f7e41e3a3289897f0630d9895adda3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ad9f7e41e3a3289897f0630d9895adda3">Image</a> ()</td></tr>
<tr class="memdesc:ad9f7e41e3a3289897f0630d9895adda3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#ad9f7e41e3a3289897f0630d9895adda3">More...</a><br /></td></tr>
<tr class="separator:ad9f7e41e3a3289897f0630d9895adda3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf4e2d606d49c4b007a48674b384ac8a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#aaf4e2d606d49c4b007a48674b384ac8a">~Image</a> () override</td></tr>
<tr class="separator:aaf4e2d606d49c4b007a48674b384ac8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0677aa8a81a28f05fe5946df7d4a2fde"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a0677aa8a81a28f05fe5946df7d4a2fde">Clear</a> () override</td></tr>
<tr class="memdesc:a0677aa8a81a28f05fe5946df7d4a2fde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear all elements in the geometry.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a0677aa8a81a28f05fe5946df7d4a2fde">More...</a><br /></td></tr>
<tr class="separator:a0677aa8a81a28f05fe5946df7d4a2fde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264fa5fb54db14140b33123b5b746996"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a264fa5fb54db14140b33123b5b746996">IsEmpty</a> () const override</td></tr>
<tr class="memdesc:a264fa5fb54db14140b33123b5b746996"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> iff the geometry is empty.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a264fa5fb54db14140b33123b5b746996">More...</a><br /></td></tr>
<tr class="separator:a264fa5fb54db14140b33123b5b746996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af735ad4ba0df2e05a96df5515d031afa"><td class="memItemLeft" align="right" valign="top">Eigen::Vector2d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#af735ad4ba0df2e05a96df5515d031afa">GetMinBound</a> () const override</td></tr>
<tr class="memdesc:af735ad4ba0df2e05a96df5515d031afa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns min bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#af735ad4ba0df2e05a96df5515d031afa">More...</a><br /></td></tr>
<tr class="separator:af735ad4ba0df2e05a96df5515d031afa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4185b3c32a9f661a692a8455083723e2"><td class="memItemLeft" align="right" valign="top">Eigen::Vector2d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4185b3c32a9f661a692a8455083723e2">GetMaxBound</a> () const override</td></tr>
<tr class="memdesc:a4185b3c32a9f661a692a8455083723e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns max bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a4185b3c32a9f661a692a8455083723e2">More...</a><br /></td></tr>
<tr class="separator:a4185b3c32a9f661a692a8455083723e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03aea474a9c50292b15aba3b01386d5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a03aea474a9c50292b15aba3b01386d5c">TestImageBoundary</a> (double u, double v, double inner_margin=0.0) const</td></tr>
<tr class="memdesc:a03aea474a9c50292b15aba3b01386d5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test if coordinate <code>(u, v)</code> is located in the inner_marge of the image.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a03aea474a9c50292b15aba3b01386d5c">More...</a><br /></td></tr>
<tr class="separator:a03aea474a9c50292b15aba3b01386d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24271d0801e245d032d0e37d78f3bdc7"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a24271d0801e245d032d0e37d78f3bdc7">HasData</a> () const</td></tr>
<tr class="memdesc:a24271d0801e245d032d0e37d78f3bdc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> if the <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> has valid data.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a24271d0801e245d032d0e37d78f3bdc7">More...</a><br /></td></tr>
<tr class="separator:a24271d0801e245d032d0e37d78f3bdc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a682431d2232ded7ba6e7a8a84ba2c4d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a682431d2232ded7ba6e7a8a84ba2c4d7">Prepare</a> (int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>, int num_of_channels, int bytes_per_channel)</td></tr>
<tr class="memdesc:a682431d2232ded7ba6e7a8a84ba2c4d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> properties and allocate <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> buffer.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a682431d2232ded7ba6e7a8a84ba2c4d7">More...</a><br /></td></tr>
<tr class="separator:a682431d2232ded7ba6e7a8a84ba2c4d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add413045d4ab3ea7db7070ec248b4ef7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#add413045d4ab3ea7db7070ec248b4ef7">BytesPerLine</a> () const</td></tr>
<tr class="memdesc:add413045d4ab3ea7db7070ec248b4ef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns data size per line (row, or the width) in bytes.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#add413045d4ab3ea7db7070ec248b4ef7">More...</a><br /></td></tr>
<tr class="separator:add413045d4ab3ea7db7070ec248b4ef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acffec1d489c947bded15e1692e7c9d32"><td class="memItemLeft" align="right" valign="top">std::pair&lt; bool, double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#acffec1d489c947bded15e1692e7c9d32">FloatValueAt</a> (double u, double v) const</td></tr>
<tr class="separator:acffec1d489c947bded15e1692e7c9d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3b4e3b634a9f42b48a00e94b42743a0"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#aa3b4e3b634a9f42b48a00e94b42743a0">CreateFloatImage</a> (<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9">Image::ColorToIntensityConversionType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>=<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9a582368ac8232617ead14ac74ccc40ea9">Image::ColorToIntensityConversionType::Weighted</a>) const</td></tr>
<tr class="memdesc:aa3b4e3b634a9f42b48a00e94b42743a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a gray scaled float type image.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#aa3b4e3b634a9f42b48a00e94b42743a0">More...</a><br /></td></tr>
<tr class="separator:aa3b4e3b634a9f42b48a00e94b42743a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d1d68e89d6f115895ac58b8c5bcc438"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1d1d68e89d6f115895ac58b8c5bcc438"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a1d1d68e89d6f115895ac58b8c5bcc438">PointerAt</a> (int u, int v) const</td></tr>
<tr class="memdesc:a1d1d68e89d6f115895ac58b8c5bcc438"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to access the raw data of a single-channel <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a>.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a1d1d68e89d6f115895ac58b8c5bcc438">More...</a><br /></td></tr>
<tr class="separator:a1d1d68e89d6f115895ac58b8c5bcc438"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b83ea99ffefccde52f1de1312d1089d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9b83ea99ffefccde52f1de1312d1089d"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9b83ea99ffefccde52f1de1312d1089d">PointerAt</a> (int u, int v, int ch) const</td></tr>
<tr class="memdesc:a9b83ea99ffefccde52f1de1312d1089d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to access the raw data of a multi-channel <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a>.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a9b83ea99ffefccde52f1de1312d1089d">More...</a><br /></td></tr>
<tr class="separator:a9b83ea99ffefccde52f1de1312d1089d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bc307ec5729fa11396d82bcd86775a7"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a2bc307ec5729fa11396d82bcd86775a7"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a2bc307ec5729fa11396d82bcd86775a7">PointerAs</a> () const</td></tr>
<tr class="separator:a2bc307ec5729fa11396d82bcd86775a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1582fb0b3548de21205c5ce51fe5f9d"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#aa1582fb0b3548de21205c5ce51fe5f9d">ConvertDepthToFloatImage</a> (double depth_scale=1000.0, double depth_trunc=3.0) const</td></tr>
<tr class="separator:aa1582fb0b3548de21205c5ce51fe5f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a441bb9ec27ef3ecb5ebee7e42fe3d463"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a441bb9ec27ef3ecb5ebee7e42fe3d463">Transpose</a> () const</td></tr>
<tr class="separator:a441bb9ec27ef3ecb5ebee7e42fe3d463"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2593395386c81692bb283197afa5612e"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a2593395386c81692bb283197afa5612e">FlipHorizontal</a> () const</td></tr>
<tr class="memdesc:a2593395386c81692bb283197afa5612e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to flip image horizontally (from left to right).  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a2593395386c81692bb283197afa5612e">More...</a><br /></td></tr>
<tr class="separator:a2593395386c81692bb283197afa5612e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2af19dbfde3f560c4c6a768766f7573d"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a2af19dbfde3f560c4c6a768766f7573d">FlipVertical</a> () const</td></tr>
<tr class="memdesc:a2af19dbfde3f560c4c6a768766f7573d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to flip image vertically (upside down).  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a2af19dbfde3f560c4c6a768766f7573d">More...</a><br /></td></tr>
<tr class="separator:a2af19dbfde3f560c4c6a768766f7573d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8daca2020bbaa5ea41287b591ca2b2a9"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a8daca2020bbaa5ea41287b591ca2b2a9">Filter</a> (<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">Image::FilterType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>) const</td></tr>
<tr class="memdesc:a8daca2020bbaa5ea41287b591ca2b2a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to filter image with pre-defined filtering type.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a8daca2020bbaa5ea41287b591ca2b2a9">More...</a><br /></td></tr>
<tr class="separator:a8daca2020bbaa5ea41287b591ca2b2a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab216a9f2c939e05852bcd60e05540821"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ab216a9f2c939e05852bcd60e05540821">Filter</a> (const std::vector&lt; double &gt; &amp;dx, const std::vector&lt; double &gt; &amp;dy) const</td></tr>
<tr class="memdesc:ab216a9f2c939e05852bcd60e05540821"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to filter image with arbitrary dx, dy separable filters.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#ab216a9f2c939e05852bcd60e05540821">More...</a><br /></td></tr>
<tr class="separator:ab216a9f2c939e05852bcd60e05540821"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1311ff00ed236867dc6a49bafe57c01f"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a1311ff00ed236867dc6a49bafe57c01f">FilterHorizontal</a> (const std::vector&lt; double &gt; &amp;kernel) const</td></tr>
<tr class="separator:a1311ff00ed236867dc6a49bafe57c01f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aa5c1d2cefbea568166b8c09832e50f"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a0aa5c1d2cefbea568166b8c09832e50f">Downsample</a> () const</td></tr>
<tr class="memdesc:a0aa5c1d2cefbea568166b8c09832e50f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to 2x image downsample using simple 2x2 averaging.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a0aa5c1d2cefbea568166b8c09832e50f">More...</a><br /></td></tr>
<tr class="separator:a0aa5c1d2cefbea568166b8c09832e50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad12eb1b5b3fd155847738323e3c68bd6"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ad12eb1b5b3fd155847738323e3c68bd6">Dilate</a> (int half_kernel_size=1) const</td></tr>
<tr class="memdesc:ad12eb1b5b3fd155847738323e3c68bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to dilate 8bit mask map.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#ad12eb1b5b3fd155847738323e3c68bd6">More...</a><br /></td></tr>
<tr class="separator:ad12eb1b5b3fd155847738323e3c68bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab661a8762ada2ae97535969d384a0a48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ab661a8762ada2ae97535969d384a0a48">LinearTransform</a> (double scale=1.0, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aed7ea92f45bd273dde380a45ddced592">offset</a>=0.0)</td></tr>
<tr class="separator:ab661a8762ada2ae97535969d384a0a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac78fce5ffbad1d7c623c399363b776ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ac78fce5ffbad1d7c623c399363b776ea">ClipIntensity</a> (double min=0.0, double max=1.0)</td></tr>
<tr class="separator:ac78fce5ffbad1d7c623c399363b776ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ce42ca8080dcd785060eaf1f44ed555"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7ce42ca8080dcd785060eaf1f44ed555"><td class="memTemplItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a7ce42ca8080dcd785060eaf1f44ed555">CreateImageFromFloatImage</a> () const</td></tr>
<tr class="separator:a7ce42ca8080dcd785060eaf1f44ed555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f546090de204c491920edcfbfc019cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1geometry.html#abab0fe6232a85ff14236207b2fc120d2">ImagePyramid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a2f546090de204c491920edcfbfc019cd">CreatePyramid</a> (size_t num_of_levels, bool with_gaussian_filter=true) const</td></tr>
<tr class="memdesc:a2f546090de204c491920edcfbfc019cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to create image pyramid.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a2f546090de204c491920edcfbfc019cd">More...</a><br /></td></tr>
<tr class="separator:a2f546090de204c491920edcfbfc019cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf7d27bf738e62c254233a4453e86910"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#abf7d27bf738e62c254233a4453e86910">CreateDepthBoundaryMask</a> (double depth_threshold_for_discontinuity_check=0.1, int half_dilation_kernel_size_for_discontinuity_map=3) const</td></tr>
<tr class="memdesc:abf7d27bf738e62c254233a4453e86910"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to create a depthmap boundary mask from depth image.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#abf7d27bf738e62c254233a4453e86910">More...</a><br /></td></tr>
<tr class="separator:abf7d27bf738e62c254233a4453e86910"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry2_d')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401">open3d::geometry::Geometry2D</a></td></tr>
<tr class="memitem:a897667e9e534dc4bfd23885bc5b5200a inherit pub_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401#a897667e9e534dc4bfd23885bc5b5200a">~Geometry2D</a> () override</td></tr>
<tr class="separator:a897667e9e534dc4bfd23885bc5b5200a inherit pub_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a1c2eb5a3e6c0a47cc31e38d086d07c54">~Geometry</a> ()</td></tr>
<tr class="separator:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">More...</a><br /></td></tr>
<tr class="separator:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">Dimension</a> () const</td></tr>
<tr class="memdesc:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">More...</a><br /></td></tr>
<tr class="separator:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a7cba98e39c57eb2544eedfb525807a06">GetName</a> () const</td></tr>
<tr class="separator:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a4229d9bdaded622121f443cbb81626b8">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac741b23b66918c816ccbff7bd97646fe"><td class="memItemLeft" align="right" valign="top">static std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ac741b23b66918c816ccbff7bd97646fe">CreateDepthToCameraDistanceMultiplierFloatImage</a> (const <a class="el" href="classopen3d_1_1camera_1_1_pinhole_camera_int">camera::PinholeCameraIntrinsic</a> &amp;intrinsic)</td></tr>
<tr class="separator:ac741b23b66918c816ccbff7bd97646fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6c1364cb129ef27737468fe1665bc88"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceopen3d_1_1geometry.html#abab0fe6232a85ff14236207b2fc120d2">ImagePyramid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ae6c1364cb129ef27737468fe1665bc88">FilterPyramid</a> (const <a class="el" href="namespaceopen3d_1_1geometry.html#abab0fe6232a85ff14236207b2fc120d2">ImagePyramid</a> &amp;input, <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">Image::FilterType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ae6c1364cb129ef27737468fe1665bc88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to filter image pyramid.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#ae6c1364cb129ef27737468fe1665bc88">More...</a><br /></td></tr>
<tr class="separator:ae6c1364cb129ef27737468fe1665bc88"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:aa56eec5ba58608cccbbc0e9fb545155b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#aa56eec5ba58608cccbbc0e9fb545155b">width_</a> = 0</td></tr>
<tr class="memdesc:aa56eec5ba58608cccbbc0e9fb545155b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Width of the image.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#aa56eec5ba58608cccbbc0e9fb545155b">More...</a><br /></td></tr>
<tr class="separator:aa56eec5ba58608cccbbc0e9fb545155b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1be1ca13fae91ada745b94ccff474ea"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ad1be1ca13fae91ada745b94ccff474ea">height_</a> = 0</td></tr>
<tr class="memdesc:ad1be1ca13fae91ada745b94ccff474ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Height of the image.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#ad1be1ca13fae91ada745b94ccff474ea">More...</a><br /></td></tr>
<tr class="separator:ad1be1ca13fae91ada745b94ccff474ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac871173ec875f625d7c62ce084153e82"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#ac871173ec875f625d7c62ce084153e82">num_of_channels_</a> = 0</td></tr>
<tr class="memdesc:ac871173ec875f625d7c62ce084153e82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of channels in the image.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#ac871173ec875f625d7c62ce084153e82">More...</a><br /></td></tr>
<tr class="separator:ac871173ec875f625d7c62ce084153e82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279383ee150146a3924873043b6baf30"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a279383ee150146a3924873043b6baf30">bytes_per_channel_</a> = 0</td></tr>
<tr class="memdesc:a279383ee150146a3924873043b6baf30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of bytes per channel.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a279383ee150146a3924873043b6baf30">More...</a><br /></td></tr>
<tr class="separator:a279383ee150146a3924873043b6baf30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f9fa72c60e7f356e8a948aee654d8c3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a6f9fa72c60e7f356e8a948aee654d8c3">data_</a></td></tr>
<tr class="memdesc:a6f9fa72c60e7f356e8a948aee654d8c3"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> storage buffer.  <a href="classopen3d_1_1geometry_1_1_image.406.delaye#a6f9fa72c60e7f356e8a948aee654d8c3">More...</a><br /></td></tr>
<tr class="separator:a6f9fa72c60e7f356e8a948aee654d8c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a85896b82bf71662fd571b3859d09289b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a85896b82bf71662fd571b3859d09289b">AllocateDataBuffer</a> ()</td></tr>
<tr class="separator:a85896b82bf71662fd571b3859d09289b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry2_d')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401">open3d::geometry::Geometry2D</a></td></tr>
<tr class="memitem:a360785ac7677d066097b1ca3ca4bcd1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401#a360785ac7677d066097b1ca3ca4bcd1b">Geometry2D</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:a360785ac7677d066097b1ca3ca4bcd1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry2_d.401#a360785ac7677d066097b1ca3ca4bcd1b">More...</a><br /></td></tr>
<tr class="separator:a360785ac7677d066097b1ca3ca4bcd1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry2_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">Geometry</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">More...</a><br /></td></tr>
<tr class="separator:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> class stores image with customizable width, height, num of channels and bytes per channel. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a9764309364312fc2e282f9c8ef1cd4a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9764309364312fc2e282f9c8ef1cd4a9">&#9670;&nbsp;</a></span>ColorToIntensityConversionType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9">open3d::geometry::Image::ColorToIntensityConversionType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Specifies whether R, G, B channels have the same weight when converting to intensity. Only used for <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> with 3 channels. </p>
<p>When <code>Weighted</code> is used R, G, B channels are weighted according to the Digital ITU BT.601 standard: I = 0.299 * R + 0.587 * G + 0.114 * B. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a9764309364312fc2e282f9c8ef1cd4a9af5f286e73bda105e538310b3190f75c5"></a>Equal&#160;</td><td class="fielddoc"><p>R, G, B channels have equal weights. </p>
</td></tr>
<tr><td class="fieldname"><a id="a9764309364312fc2e282f9c8ef1cd4a9a582368ac8232617ead14ac74ccc40ea9"></a>Weighted&#160;</td><td class="fielddoc"><p>Weighted R, G, B channels: I = 0.299 * R + 0.587 * G + 0.114 * B. </p>
</td></tr>
</table>

</div>
</div>
<a id="a4c299b0c65a8d059b5047c417b9a5275"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c299b0c65a8d059b5047c417b9a5275">&#9670;&nbsp;</a></span>FilterType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">open3d::geometry::Image::FilterType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Specifies the <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> filter type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a4c299b0c65a8d059b5047c417b9a5275a300afed56bc38348d5e806ecf930a9cb"></a>Gaussian3&#160;</td><td class="fielddoc"><p>Gaussian filter of size 3 x 3. </p>
</td></tr>
<tr><td class="fieldname"><a id="a4c299b0c65a8d059b5047c417b9a5275a30a53e4fb7f656f7793d5ae170790207"></a>Gaussian5&#160;</td><td class="fielddoc"><p>Gaussian filter of size 5 x 5. </p>
</td></tr>
<tr><td class="fieldname"><a id="a4c299b0c65a8d059b5047c417b9a5275abe1b7c8ce24192b14f4e44d2f2f2abee"></a>Gaussian7&#160;</td><td class="fielddoc"><p>Gaussian filter of size 7 x 7. </p>
</td></tr>
<tr><td class="fieldname"><a id="a4c299b0c65a8d059b5047c417b9a5275a6aa0fdf8d4c47b32d05edeac15cc89a7"></a>Sobel3Dx&#160;</td><td class="fielddoc"><p>Sobel filter along X-axis. </p>
</td></tr>
<tr><td class="fieldname"><a id="a4c299b0c65a8d059b5047c417b9a5275a87eaa9187879c9e668bf249d5b7bf8b8"></a>Sobel3Dy&#160;</td><td class="fielddoc"><p>Sobel filter along Y-axis. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad9f7e41e3a3289897f0630d9895adda3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9f7e41e3a3289897f0630d9895adda3">&#9670;&nbsp;</a></span>Image()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Image::Image </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Constructor. </p>

</div>
</div>
<a id="aaf4e2d606d49c4b007a48674b384ac8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf4e2d606d49c4b007a48674b384ac8a">&#9670;&nbsp;</a></span>~Image()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Image::~Image </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a85896b82bf71662fd571b3859d09289b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85896b82bf71662fd571b3859d09289b">&#9670;&nbsp;</a></span>AllocateDataBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::Image::AllocateDataBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="add413045d4ab3ea7db7070ec248b4ef7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add413045d4ab3ea7db7070ec248b4ef7">&#9670;&nbsp;</a></span>BytesPerLine()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::geometry::Image::BytesPerLine </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns data size per line (row, or the width) in bytes. </p>

</div>
</div>
<a id="a0677aa8a81a28f05fe5946df7d4a2fde"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0677aa8a81a28f05fe5946df7d4a2fde">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp; open3d::geometry::Image::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all elements in the geometry. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401#a33a12ab14100a59412020290096d647b">open3d::geometry::Geometry2D</a>.</p>

</div>
</div>
<a id="ac78fce5ffbad1d7c623c399363b776ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac78fce5ffbad1d7c623c399363b776ea">&#9670;&nbsp;</a></span>ClipIntensity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp; open3d::geometry::Image::ClipIntensity </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>min</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max</em> = <code>1.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to clipping pixel intensities.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">min</td><td>is lower bound. </td></tr>
    <tr><td class="paramname">max</td><td>is upper bound. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa1582fb0b3548de21205c5ce51fe5f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1582fb0b3548de21205c5ce51fe5f9d">&#9670;&nbsp;</a></span>ConvertDepthToFloatImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::ConvertDepthToFloatImage </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth_trunc</em> = <code>3.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abf7d27bf738e62c254233a4453e86910"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf7d27bf738e62c254233a4453e86910">&#9670;&nbsp;</a></span>CreateDepthBoundaryMask()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::CreateDepthBoundaryMask </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth_threshold_for_discontinuity_check</em> = <code>0.1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>half_dilation_kernel_size_for_discontinuity_map</em> = <code>3</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to create a depthmap boundary mask from depth image. </p>

</div>
</div>
<a id="ac741b23b66918c816ccbff7bd97646fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac741b23b66918c816ccbff7bd97646fe">&#9670;&nbsp;</a></span>CreateDepthToCameraDistanceMultiplierFloatImage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::CreateDepthToCameraDistanceMultiplierFloatImage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1camera_1_1_pinhole_camera_int">camera::PinholeCameraIntrinsic</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Factory function to create a float image composed of multipliers that convert depth values into camera distances (<a class="el" href="_image_factory_8cpp.html">ImageFactory.cpp</a>) The multiplier function M(u,v) is defined as: M(u, v) = sqrt(1 + ((u - cx) / fx) ^ 2 + ((v - cy) / fy) ^ 2) This function is used as a convenient function for performance optimization in volumetric integration (see Core/Integration/TSDFVolume.h). </p>

</div>
</div>
<a id="aa3b4e3b634a9f42b48a00e94b42743a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3b4e3b634a9f42b48a00e94b42743a0">&#9670;&nbsp;</a></span>CreateFloatImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::CreateFloatImage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9">Image::ColorToIntensityConversionType</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a9764309364312fc2e282f9c8ef1cd4a9a582368ac8232617ead14ac74ccc40ea9">Image::ColorToIntensityConversionType::Weighted</a></code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a gray scaled float type image. </p>

</div>
</div>
<a id="a7ce42ca8080dcd785060eaf1f44ed555"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ce42ca8080dcd785060eaf1f44ed555">&#9670;&nbsp;</a></span>CreateImageFromFloatImage()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">template std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::CreateImageFromFloatImage&lt; uint16_t &gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to change data types of image crafted for specific usage such as single channel float image -&gt; 8-bit RGB or 16-bit depth image. </p>

</div>
</div>
<a id="a2f546090de204c491920edcfbfc019cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f546090de204c491920edcfbfc019cd">&#9670;&nbsp;</a></span>CreatePyramid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopen3d_1_1geometry.html#abab0fe6232a85ff14236207b2fc120d2">ImagePyramid</a> open3d::geometry::Image::CreatePyramid </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_of_levels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>with_gaussian_filter</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to create image pyramid. </p>

</div>
</div>
<a id="ad12eb1b5b3fd155847738323e3c68bd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad12eb1b5b3fd155847738323e3c68bd6">&#9670;&nbsp;</a></span>Dilate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::Dilate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>half_kernel_size</em> = <code>1</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to dilate 8bit mask map. </p>

</div>
</div>
<a id="a0aa5c1d2cefbea568166b8c09832e50f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aa5c1d2cefbea568166b8c09832e50f">&#9670;&nbsp;</a></span>Downsample()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::Downsample </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to 2x image downsample using simple 2x2 averaging. </p>

</div>
</div>
<a id="ab216a9f2c939e05852bcd60e05540821"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab216a9f2c939e05852bcd60e05540821">&#9670;&nbsp;</a></span>Filter() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::Filter </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>dy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to filter image with arbitrary dx, dy separable filters. </p>

</div>
</div>
<a id="a8daca2020bbaa5ea41287b591ca2b2a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8daca2020bbaa5ea41287b591ca2b2a9">&#9670;&nbsp;</a></span>Filter() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::Filter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">Image::FilterType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to filter image with pre-defined filtering type. </p>

</div>
</div>
<a id="a1311ff00ed236867dc6a49bafe57c01f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1311ff00ed236867dc6a49bafe57c01f">&#9670;&nbsp;</a></span>FilterHorizontal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::FilterHorizontal </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae6c1364cb129ef27737468fe1665bc88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6c1364cb129ef27737468fe1665bc88">&#9670;&nbsp;</a></span>FilterPyramid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopen3d_1_1geometry.html#abab0fe6232a85ff14236207b2fc120d2">ImagePyramid</a> open3d::geometry::Image::FilterPyramid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1geometry.html#abab0fe6232a85ff14236207b2fc120d2">ImagePyramid</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye#a4c299b0c65a8d059b5047c417b9a5275">Image::FilterType</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to filter image pyramid. </p>

</div>
</div>
<a id="a2593395386c81692bb283197afa5612e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2593395386c81692bb283197afa5612e">&#9670;&nbsp;</a></span>FlipHorizontal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::FlipHorizontal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to flip image horizontally (from left to right). </p>

</div>
</div>
<a id="a2af19dbfde3f560c4c6a768766f7573d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2af19dbfde3f560c4c6a768766f7573d">&#9670;&nbsp;</a></span>FlipVertical()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::FlipVertical </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to flip image vertically (upside down). </p>

</div>
</div>
<a id="acffec1d489c947bded15e1692e7c9d32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acffec1d489c947bded15e1692e7c9d32">&#9670;&nbsp;</a></span>FloatValueAt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; bool, double &gt; open3d::geometry::Image::FloatValueAt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to access the bilinear interpolated float value of a (single-channel) float image. Returns a tuple, where the first bool indicates if the u,v coordinates are within the image dimensions, and the second double value is the interpolated pixel value. </p>

</div>
</div>
<a id="a4185b3c32a9f661a692a8455083723e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4185b3c32a9f661a692a8455083723e2">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector2d open3d::geometry::Image::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns max bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401#a66a2b6b6960764484eca6c771678aa7c">open3d::geometry::Geometry2D</a>.</p>

</div>
</div>
<a id="af735ad4ba0df2e05a96df5515d031afa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af735ad4ba0df2e05a96df5515d031afa">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector2d open3d::geometry::Image::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns min bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401#afc92aa67b49aceb16b4abdd5c04f8660">open3d::geometry::Geometry2D</a>.</p>

</div>
</div>
<a id="a24271d0801e245d032d0e37d78f3bdc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24271d0801e245d032d0e37d78f3bdc7">&#9670;&nbsp;</a></span>HasData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::geometry::Image::HasData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> if the <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> has valid data. </p>

</div>
</div>
<a id="a264fa5fb54db14140b33123b5b746996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a264fa5fb54db14140b33123b5b746996">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Image::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> iff the geometry is empty. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry2_d.401#afb9b5c620c913283c06b6b0468da593b">open3d::geometry::Geometry2D</a>.</p>

</div>
</div>
<a id="ab661a8762ada2ae97535969d384a0a48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab661a8762ada2ae97535969d384a0a48">&#9670;&nbsp;</a></span>LinearTransform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp; open3d::geometry::Image::LinearTransform </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to linearly transform pixel intensities image_new = scale * image + offset. </p>

</div>
</div>
<a id="a2bc307ec5729fa11396d82bcd86775a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bc307ec5729fa11396d82bcd86775a7">&#9670;&nbsp;</a></span>PointerAs()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* open3d::geometry::Image::PointerAs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reinterpret the internal data buffer. The resulting type's size must be the same as bytes_per_channel_. This is similar to PointerAt&lt;T&gt;(0, 0). </p>

</div>
</div>
<a id="a1d1d68e89d6f115895ac58b8c5bcc438"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d1d68e89d6f115895ac58b8c5bcc438">&#9670;&nbsp;</a></span>PointerAt() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">template uint16_t * open3d::geometry::Image::PointerAt&lt; uint16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to access the raw data of a single-channel <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a>. </p>

</div>
</div>
<a id="a9b83ea99ffefccde52f1de1312d1089d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b83ea99ffefccde52f1de1312d1089d">&#9670;&nbsp;</a></span>PointerAt() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">template uint16_t * open3d::geometry::Image::PointerAt&lt; uint16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ch</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to access the raw data of a multi-channel <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a>. </p>

</div>
</div>
<a id="a682431d2232ded7ba6e7a8a84ba2c4d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a682431d2232ded7ba6e7a8a84ba2c4d7">&#9670;&nbsp;</a></span>Prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a>&amp; open3d::geometry::Image::Prepare </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_of_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bytes_per_channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> properties and allocate <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> buffer. </p>

</div>
</div>
<a id="a03aea474a9c50292b15aba3b01386d5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03aea474a9c50292b15aba3b01386d5c">&#9670;&nbsp;</a></span>TestImageBoundary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Image::TestImageBoundary </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>inner_margin</em> = <code>0.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Test if coordinate <code>(u, v)</code> is located in the inner_marge of the image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>Coordinate along the width dimension. </td></tr>
    <tr><td class="paramname">v</td><td>Coordinate along the height dimension. </td></tr>
    <tr><td class="paramname">inner_margin</td><td>The inner margin from the image boundary. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns <code>true</code> if coordinate <code>(u, v)</code> is located in the inner_marge of the image. </dd></dl>

</div>
</div>
<a id="a441bb9ec27ef3ecb5ebee7e42fe3d463"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a441bb9ec27ef3ecb5ebee7e42fe3d463">&#9670;&nbsp;</a></span>Transpose()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &gt; open3d::geometry::Image::Transpose </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a279383ee150146a3924873043b6baf30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a279383ee150146a3924873043b6baf30">&#9670;&nbsp;</a></span>bytes_per_channel_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::geometry::Image::bytes_per_channel_ = 0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of bytes per channel. </p>

</div>
</div>
<a id="a6f9fa72c60e7f356e8a948aee654d8c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f9fa72c60e7f356e8a948aee654d8c3">&#9670;&nbsp;</a></span>data_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint8_t&gt; open3d::geometry::Image::data_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a> storage buffer. </p>

</div>
</div>
<a id="ad1be1ca13fae91ada745b94ccff474ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1be1ca13fae91ada745b94ccff474ea">&#9670;&nbsp;</a></span>height_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::geometry::Image::height_ = 0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Height of the image. </p>

</div>
</div>
<a id="ac871173ec875f625d7c62ce084153e82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac871173ec875f625d7c62ce084153e82">&#9670;&nbsp;</a></span>num_of_channels_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::geometry::Image::num_of_channels_ = 0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of channels in the image. </p>

</div>
</div>
<a id="aa56eec5ba58608cccbbc0e9fb545155b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa56eec5ba58608cccbbc0e9fb545155b">&#9670;&nbsp;</a></span>width_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::geometry::Image::width_ = 0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Width of the image. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="geometry_2_image_8h_source.html">Image.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="geometry_2_image_8cpp.html">Image.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_image_factory_8cpp.html">ImageFactory.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_image.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:00 GMT -->
</html>
