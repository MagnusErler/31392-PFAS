<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_i_json_convertible_i_o_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:59:34 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/io/IJsonConvertibleIO.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_aab7f12f6b536cab6e24756a7e6b0701.4d8.del">io</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">IJsonConvertibleIO.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_json_convertible_i_o_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_json_convertible_8h.html">open3d/utility/IJsonConvertible.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>io {</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1io.html#a35592a29388aa1b7eaeed689b354c7ba">ReadIJsonConvertible</a>(<span class="keyword">const</span> std::string &amp;filename,</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                          utility::IJsonConvertible &amp;<span class="keywordtype">object</span>);</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1io.html#aa0fe0c63d5f633e56b3e46e4a6e84502">WriteIJsonConvertible</a>(<span class="keyword">const</span> std::string &amp;filename,</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                           <span class="keyword">const</span> utility::IJsonConvertible &amp;<span class="keywordtype">object</span>);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1io.html#a1331f69cf471261284b212516ab83076">ReadIJsonConvertibleFromJSON</a>(<span class="keyword">const</span> std::string &amp;filename,</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                  utility::IJsonConvertible &amp;<span class="keywordtype">object</span>);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1io.html#aeef5f90aff54fc222f83eb4b409288b0">WriteIJsonConvertibleToJSON</a>(<span class="keyword">const</span> std::string &amp;filename,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                 <span class="keyword">const</span> utility::IJsonConvertible &amp;<span class="keywordtype">object</span>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1io.html#a269cd273459868cb13b75e1842ed0154">ReadIJsonConvertibleFromJSONString</a>(<span class="keyword">const</span> std::string &amp;json_string,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                        utility::IJsonConvertible &amp;<span class="keywordtype">object</span>);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1io.html#a2516ce35c7dc67bf02b8e7932a3cb728">WriteIJsonConvertibleToJSONString</a>(std::string &amp;json_string,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                       <span class="keyword">const</span> utility::IJsonConvertible &amp;<span class="keywordtype">object</span>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="_i_json_convertible_i_o_8h.html#a4b9ceb64587e1f950fae4cb24432d684">   60</a></span>&#160;<span class="preprocessor">#define DECLARE_STRINGIFY_ENUM(ENUM_TYPE)                        \</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">    std::string enum_to_string(ENUM_TYPE e);                     \</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">    void enum_from_string(const std::string &amp;str, ENUM_TYPE &amp;e); \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">    inline auto format_as(ENUM_TYPE e) { return enum_to_string(e); }</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="_i_json_convertible_i_o_8h.html#aff5f613dbcec551c924ea0845208f653">   65</a></span>&#160;<span class="preprocessor">#define STRINGIFY_ENUM(ENUM_TYPE, ...)                                    \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    std::string enum_to_string(ENUM_TYPE e) {                             \</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">        static_assert(std::is_enum&lt;ENUM_TYPE&gt;::value,                     \</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">                      #ENUM_TYPE &quot; must be an enum!&quot;</span>);                    \</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        static const std::pair&lt;ENUM_TYPE, std::string&gt; m[] = __VA_ARGS__; \</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        auto it = std::find_if(                                           \</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                std::begin(m), std::end(m),                               \</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                [e](const std::pair&lt;ENUM_TYPE, std::string&gt; &amp;es_pair)     \</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                        -&gt; bool { return es_pair.first == e; });          \</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        return ((it != std::end(m)) ? it : std::begin(m))-&gt;second;        \</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }                                                                     \</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    void enum_from_string(const std::string &amp;str, ENUM_TYPE &amp;e) {         \</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        static_assert(std::is_enum&lt;ENUM_TYPE&gt;::value,                     \</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                      #ENUM_TYPE &quot; must be an enum!&quot;);                    \</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        static const std::pair&lt;ENUM_TYPE, std::string&gt; m[] = __VA_ARGS__; \</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        auto it = std::find_if(                                           \</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                std::begin(m), std::end(m),                               \</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                [&amp;str](const std::pair&lt;ENUM_TYPE, std::string&gt; &amp;es_pair)  \</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        -&gt; bool { return es_pair.second == str; });       \</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        e = ((it != std::end(m)) ? it : std::begin(m))-&gt;first;            \</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        utility::LogDebug(&quot;{} -&gt; {}&quot;, str, e);                            \</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}  <span class="comment">// namespace io</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_i_json_convertible_8h_html"><div class="ttname"><a href="_i_json_convertible_8h.html">IJsonConvertible.h</a></div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_html_a1331f69cf471261284b212516ab83076"><div class="ttname"><a href="namespaceopen3d_1_1io.html#a1331f69cf471261284b212516ab83076">open3d::io::ReadIJsonConvertibleFromJSON</a></div><div class="ttdeci">bool ReadIJsonConvertibleFromJSON(const std::string &amp;filename, utility::IJsonConvertible &amp;object)</div><div class="ttdef"><b>Definition:</b> FileJSON.cpp:54</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_html_a2516ce35c7dc67bf02b8e7932a3cb728"><div class="ttname"><a href="namespaceopen3d_1_1io.html#a2516ce35c7dc67bf02b8e7932a3cb728">open3d::io::WriteIJsonConvertibleToJSONString</a></div><div class="ttdeci">bool WriteIJsonConvertibleToJSONString(std::string &amp;json_string, const utility::IJsonConvertible &amp;object)</div><div class="ttdef"><b>Definition:</b> FileJSON.cpp:86</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_html_a269cd273459868cb13b75e1842ed0154"><div class="ttname"><a href="namespaceopen3d_1_1io.html#a269cd273459868cb13b75e1842ed0154">open3d::io::ReadIJsonConvertibleFromJSONString</a></div><div class="ttdeci">bool ReadIJsonConvertibleFromJSONString(const std::string &amp;json_string, utility::IJsonConvertible &amp;object)</div><div class="ttdef"><b>Definition:</b> FileJSON.cpp:80</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_html_a35592a29388aa1b7eaeed689b354c7ba"><div class="ttname"><a href="namespaceopen3d_1_1io.html#a35592a29388aa1b7eaeed689b354c7ba">open3d::io::ReadIJsonConvertible</a></div><div class="ttdeci">bool ReadIJsonConvertible(const std::string &amp;filename, utility::IJsonConvertible &amp;object)</div><div class="ttdef"><b>Definition:</b> IJsonConvertibleIO.cpp:39</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_html_aa0fe0c63d5f633e56b3e46e4a6e84502"><div class="ttname"><a href="namespaceopen3d_1_1io.html#aa0fe0c63d5f633e56b3e46e4a6e84502">open3d::io::WriteIJsonConvertible</a></div><div class="ttdeci">bool WriteIJsonConvertible(const std::string &amp;filename, const utility::IJsonConvertible &amp;object)</div><div class="ttdef"><b>Definition:</b> IJsonConvertibleIO.cpp:60</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_html_aeef5f90aff54fc222f83eb4b409288b0"><div class="ttname"><a href="namespaceopen3d_1_1io.html#aeef5f90aff54fc222f83eb4b409288b0">open3d::io::WriteIJsonConvertibleToJSON</a></div><div class="ttdeci">bool WriteIJsonConvertibleToJSON(const std::string &amp;filename, const utility::IJsonConvertible &amp;object)</div><div class="ttdef"><b>Definition:</b> FileJSON.cpp:67</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_i_json_convertible_i_o_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:59:34 GMT -->
</html>
