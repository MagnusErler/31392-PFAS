<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_ray3_d.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:04 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::Ray3D Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay">Ray3D</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::Ray3D Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and extends infinitely only in that specific direction.  
 <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_line3_d_8h_source.html">Line3D.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::Ray3D:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_ray3_d.629.delay" usemap="#open3d::geometry::Ray3D_map" alt=""/>
  <map id="open3d::geometry::Ray3D_map" name="open3d::geometry::Ray3D_map">
<area href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman..." alt="open3d::geometry::Line3D" shape="rect" coords="0,56,226,80"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a83949b5be3e6af7e7161f5736627346c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a83949b5be3e6af7e7161f5736627346c">Ray3D</a> (const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;direction)</td></tr>
<tr class="memdesc:a83949b5be3e6af7e7161f5736627346c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, requires point and direction.  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a83949b5be3e6af7e7161f5736627346c">More...</a><br /></td></tr>
<tr class="separator:a83949b5be3e6af7e7161f5736627346c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0719cac53eed92cbee40f1f20cb134f1"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1">Length</a> () const override</td></tr>
<tr class="memdesc:a0719cac53eed92cbee40f1f20cb134f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the length of the line, which for lines and rays will return positive infinity, but for segments will return a finite positive value.  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1">More...</a><br /></td></tr>
<tr class="separator:a0719cac53eed92cbee40f1f20cb134f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a338aa135fb8cd5fe92bda6d40826ae36"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a338aa135fb8cd5fe92bda6d40826ae36">IntersectionParameter</a> (const Eigen::Hyperplane&lt; double, 3 &gt; &amp;plane) const override</td></tr>
<tr class="memdesc:a338aa135fb8cd5fe92bda6d40826ae36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the intersection parameter between the line and a plane taking into account ray semantics. Returns an empty result if there is no intersection. On a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> this means that intersections behind the origin are invalid, so the return value will always be positive.  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a338aa135fb8cd5fe92bda6d40826ae36">More...</a><br /></td></tr>
<tr class="separator:a338aa135fb8cd5fe92bda6d40826ae36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cfeb81330ebb2ad4410ce59f5d9e68f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a1cfeb81330ebb2ad4410ce59f5d9e68f">SlabAABB</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box) const override</td></tr>
<tr class="memdesc:a1cfeb81330ebb2ad4410ce59f5d9e68f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the lower intersection parameter for a ray with an axis aligned bounding box or empty if no intersection. Uses the slab method, see warning below.  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a1cfeb81330ebb2ad4410ce59f5d9e68f">More...</a><br /></td></tr>
<tr class="separator:a1cfeb81330ebb2ad4410ce59f5d9e68f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f44e1edb055f735f7a03982b34ed481"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0f44e1edb055f735f7a03982b34ed481">ClampParameter</a> (double parameter) const override</td></tr>
<tr class="memdesc:a0f44e1edb055f735f7a03982b34ed481"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps/bounds a parameter value to the closest valid place where the entity exists. On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, the value will be unchanged, on a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> a negative value will be made 0, and on a <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> a negative value will be made 0 and a positive value greater than <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a> will take the value of <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a>  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0f44e1edb055f735f7a03982b34ed481">More...</a><br /></td></tr>
<tr class="separator:a0f44e1edb055f735f7a03982b34ed481"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a234920d1ae68d6e19605877bf1aecd48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a234920d1ae68d6e19605877bf1aecd48">IsParameterValid</a> (double parameter) const override</td></tr>
<tr class="memdesc:a234920d1ae68d6e19605877bf1aecd48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verifies that a given parameter value is valid for the semantics of the line object. For lines, any parameter is valid, for rays any positive parameter is valid, and for segments any parameter between 0 and the segment length is valid.  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a234920d1ae68d6e19605877bf1aecd48">More...</a><br /></td></tr>
<tr class="separator:a234920d1ae68d6e19605877bf1aecd48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_line3_d')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">open3d::geometry::Line3D</a></td></tr>
<tr class="memitem:a3ba3531efce5360bed2601598d13d945 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ba3531efce5360bed2601598d13d945">Line3D</a> (const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;direction)</td></tr>
<tr class="memdesc:a3ba3531efce5360bed2601598d13d945 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default user constructor.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ba3531efce5360bed2601598d13d945">More...</a><br /></td></tr>
<tr class="separator:a3ba3531efce5360bed2601598d13d945 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1028aaaedbd13abb177ae53b92cb2eb8 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a1028aaaedbd13abb177ae53b92cb2eb8">~Line3D</a> ()=default</td></tr>
<tr class="separator:a1028aaaedbd13abb177ae53b92cb2eb8 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9db1261d9357a920f405f8bda0bd1a82 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9db1261d9357a920f405f8bda0bd1a82">GetLineType</a> () const</td></tr>
<tr class="memdesc:a9db1261d9357a920f405f8bda0bd1a82 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the semantic type of the line.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9db1261d9357a920f405f8bda0bd1a82">More...</a><br /></td></tr>
<tr class="separator:a9db1261d9357a920f405f8bda0bd1a82 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff9e3a4249802ba9a32ae3225787300 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">const Eigen::Vector3d &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ff9e3a4249802ba9a32ae3225787300">Origin</a> () const</td></tr>
<tr class="memdesc:a3ff9e3a4249802ba9a32ae3225787300 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the line's origin point.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a3ff9e3a4249802ba9a32ae3225787300">More...</a><br /></td></tr>
<tr class="separator:a3ff9e3a4249802ba9a32ae3225787300 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a230580a93b1c6ea10d9657bfb07e0ce6 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">const Eigen::Vector3d &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a230580a93b1c6ea10d9657bfb07e0ce6">Direction</a> () const</td></tr>
<tr class="memdesc:a230580a93b1c6ea10d9657bfb07e0ce6 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the line's direction vector.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a230580a93b1c6ea10d9657bfb07e0ce6">More...</a><br /></td></tr>
<tr class="separator:a230580a93b1c6ea10d9657bfb07e0ce6 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11174cdfb050d9a56cf854c35220959d inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a11174cdfb050d9a56cf854c35220959d">Transform</a> (const Eigen::Transform&lt; double, 3, Eigen::Affine &gt; &amp;t)</td></tr>
<tr class="memdesc:a11174cdfb050d9a56cf854c35220959d inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> by the given matrix.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a11174cdfb050d9a56cf854c35220959d">More...</a><br /></td></tr>
<tr class="separator:a11174cdfb050d9a56cf854c35220959d inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e4734c3deb1095180ec6d7ef9e096d8 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">const Eigen::ParametrizedLine&lt; double, 3 &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8">Line</a> () const</td></tr>
<tr class="memdesc:a0e4734c3deb1095180ec6d7ef9e096d8 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a const reference to the underlying Eigen::ParametrizedLine object.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8">More...</a><br /></td></tr>
<tr class="separator:a0e4734c3deb1095180ec6d7ef9e096d8 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a777dc6a050bfdbecf4e0c5cf405eef75 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a777dc6a050bfdbecf4e0c5cf405eef75">ProjectionParameter</a> (const Eigen::Vector3d &amp;point) const</td></tr>
<tr class="memdesc:a777dc6a050bfdbecf4e0c5cf405eef75 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the parameter of a point projected onto the line taking into account special semantics.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a777dc6a050bfdbecf4e0c5cf405eef75">More...</a><br /></td></tr>
<tr class="separator:a777dc6a050bfdbecf4e0c5cf405eef75 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e5e71e98aa3763703018a858573eab5 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9e5e71e98aa3763703018a858573eab5">Projection</a> (const Eigen::Vector3d &amp;point) const</td></tr>
<tr class="memdesc:a9e5e71e98aa3763703018a858573eab5 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a point projected onto the line, taking into account special semantics.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9e5e71e98aa3763703018a858573eab5">More...</a><br /></td></tr>
<tr class="separator:a9e5e71e98aa3763703018a858573eab5 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ce628018b440c61c548b0671d61056 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#aa2ce628018b440c61c548b0671d61056">ExactAABB</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box) const</td></tr>
<tr class="memdesc:aa2ce628018b440c61c548b0671d61056 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. This method is about 20x slower than the slab method, see details to know when to use.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#aa2ce628018b440c61c548b0671d61056">More...</a><br /></td></tr>
<tr class="separator:aa2ce628018b440c61c548b0671d61056 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fbe3e1b0f3bda51262582deef4a284c inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">std::pair&lt; double, double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a8fbe3e1b0f3bda51262582deef4a284c">ClosestParameters</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;other) const</td></tr>
<tr class="memdesc:a8fbe3e1b0f3bda51262582deef4a284c inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the two corresponding parameters of the closest distance between two <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> objects, including derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line type.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a8fbe3e1b0f3bda51262582deef4a284c">More...</a><br /></td></tr>
<tr class="separator:a8fbe3e1b0f3bda51262582deef4a284c inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46befa2087e6f7051ce4ccb9c215f252 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46befa2087e6f7051ce4ccb9c215f252">ClosestPoints</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;other) const</td></tr>
<tr class="memdesc:a46befa2087e6f7051ce4ccb9c215f252 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the two closest points between this <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> object and the other, including of derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line types.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46befa2087e6f7051ce4ccb9c215f252">More...</a><br /></td></tr>
<tr class="separator:a46befa2087e6f7051ce4ccb9c215f252 inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7a9472d3afe404db5dea4c9380b037b inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac7a9472d3afe404db5dea4c9380b037b">DistanceTo</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;other) const</td></tr>
<tr class="memdesc:ac7a9472d3afe404db5dea4c9380b037b inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the closest distance between two <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> objects, including derived types <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> and <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a>, respecting the semantics of the line type.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac7a9472d3afe404db5dea4c9380b037b">More...</a><br /></td></tr>
<tr class="separator:ac7a9472d3afe404db5dea4c9380b037b inherit pub_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a21376150f0de95aafc57098196964e6a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay">Ray3D</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a21376150f0de95aafc57098196964e6a">Through</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1)</td></tr>
<tr class="memdesc:a21376150f0de95aafc57098196964e6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> through two points. The ray origin will take the value of p0, and the direction will be a normalized vector from p0 to p1.  <a href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a21376150f0de95aafc57098196964e6a">More...</a><br /></td></tr>
<tr class="separator:a21376150f0de95aafc57098196964e6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classopen3d_1_1geometry_1_1_line3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classopen3d_1_1geometry_1_1_line3_d')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">open3d::geometry::Line3D</a></td></tr>
<tr class="memitem:ae7995760b5dba52b7c04a05b495bbebb inherit pub_static_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae7995760b5dba52b7c04a05b495bbebb">Through</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1)</td></tr>
<tr class="memdesc:ae7995760b5dba52b7c04a05b495bbebb inherit pub_static_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a line through two points. The line origin will take the value of p0, and the line direction will be a normalized vector from p0 to p1.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae7995760b5dba52b7c04a05b495bbebb">More...</a><br /></td></tr>
<tr class="separator:ae7995760b5dba52b7c04a05b495bbebb inherit pub_static_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1geometry_1_1_line3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1geometry_1_1_line3_d')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">open3d::geometry::Line3D</a></td></tr>
<tr class="memitem:a2840227cde5c4791cc42220eee3d0f68 inherit pub_types_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a> { <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68a4803e6b9e63dabf04de980788d6a13c4">Line</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68a9406e3c325bfc9873426e5eda4ba6e18">Ray</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68a4b77e2a9d8e9cfc299f504b32d6e3d2b">Segment</a> = 2
 }</td></tr>
<tr class="memdesc:a2840227cde5c4791cc42220eee3d0f68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies different semantic interpretations of 3d lines.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">More...</a><br /></td></tr>
<tr class="separator:a2840227cde5c4791cc42220eee3d0f68 inherit pub_types_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_line3_d')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">open3d::geometry::Line3D</a></td></tr>
<tr class="memitem:ae518ad901da97abfd11ee8316125158d inherit pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae518ad901da97abfd11ee8316125158d">Line3D</a> (const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;direction, <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a2840227cde5c4791cc42220eee3d0f68">LineType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ae518ad901da97abfd11ee8316125158d inherit pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal constructor for inherited classes that allows the setting of the LineType.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae518ad901da97abfd11ee8316125158d">More...</a><br /></td></tr>
<tr class="separator:ae518ad901da97abfd11ee8316125158d inherit pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f906f25af799f31e954bfd0c078bc4 inherit pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memItemLeft" align="right" valign="top">std::pair&lt; double, double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a34f906f25af799f31e954bfd0c078bc4">SlabAABBBase</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box) const</td></tr>
<tr class="memdesc:a34f906f25af799f31e954bfd0c078bc4 inherit pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the common t_min and t_max values of the slab AABB intersection method. These values are computed identically for any semantic interpretation of the line, it's up to the derived classes to use them in conjunction with other information to determine what the intersection parameter is.  <a href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a34f906f25af799f31e954bfd0c078bc4">More...</a><br /></td></tr>
<tr class="separator:a34f906f25af799f31e954bfd0c078bc4 inherit pro_methods_classopen3d_1_1geometry_1_1_line3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and extends infinitely only in that specific direction. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a83949b5be3e6af7e7161f5736627346c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83949b5be3e6af7e7161f5736627346c">&#9670;&nbsp;</a></span>Ray3D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::Ray3D::Ray3D </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor, requires point and direction. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0f44e1edb055f735f7a03982b34ed481"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f44e1edb055f735f7a03982b34ed481">&#9670;&nbsp;</a></span>ClampParameter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::Ray3D::ClampParameter </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>parameter</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clamps/bounds a parameter value to the closest valid place where the entity exists. On a <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, the value will be unchanged, on a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> a negative value will be made 0, and on a <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> a negative value will be made 0 and a positive value greater than <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a> will take the value of <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay#a0719cac53eed92cbee40f1f20cb134f1" title="Gets the length of the line, which for lines and rays will return positive infinity,...">Length()</a> </p>

<p>Reimplemented from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a22599e4c534dfeade640b6b1dfb0f6ad">open3d::geometry::Line3D</a>.</p>

</div>
</div>
<a id="a338aa135fb8cd5fe92bda6d40826ae36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a338aa135fb8cd5fe92bda6d40826ae36">&#9670;&nbsp;</a></span>IntersectionParameter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; open3d::geometry::Ray3D::IntersectionParameter </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Hyperplane&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>plane</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the intersection parameter between the line and a plane taking into account ray semantics. Returns an empty result if there is no intersection. On a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> this means that intersections behind the origin are invalid, so the return value will always be positive. </p>

<p>Reimplemented from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ae45775d65b458e92ffedcd4ae8361e83">open3d::geometry::Line3D</a>.</p>

</div>
</div>
<a id="a234920d1ae68d6e19605877bf1aecd48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a234920d1ae68d6e19605877bf1aecd48">&#9670;&nbsp;</a></span>IsParameterValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::Ray3D::IsParameterValid </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>parameter</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Verifies that a given parameter value is valid for the semantics of the line object. For lines, any parameter is valid, for rays any positive parameter is valid, and for segments any parameter between 0 and the segment length is valid. </p>

<p>Reimplemented from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#ac5fe4da46d1ee7687aa65b7b377d8037">open3d::geometry::Line3D</a>.</p>

</div>
</div>
<a id="a0719cac53eed92cbee40f1f20cb134f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0719cac53eed92cbee40f1f20cb134f1">&#9670;&nbsp;</a></span>Length()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::Ray3D::Length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the length of the line, which for lines and rays will return positive infinity, but for segments will return a finite positive value. </p>

<p>Reimplemented from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a9def68edf2d7e0dcbd65cb7fbb8a48d9">open3d::geometry::Line3D</a>.</p>

</div>
</div>
<a id="a1cfeb81330ebb2ad4410ce59f5d9e68f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cfeb81330ebb2ad4410ce59f5d9e68f">&#9670;&nbsp;</a></span>SlabAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; open3d::geometry::Ray3D::SlabAABB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>box</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the lower intersection parameter for a ray with an axis aligned bounding box or empty if no intersection. Uses the slab method, see warning below. </p>
<p>Calculates the lower intersection parameter of a parameterized ray with an axis aligned bounding box. The intersection point can be recovered with .<a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a0e4734c3deb1095180ec6d7ef9e096d8" title="Returns a const reference to the underlying Eigen::ParametrizedLine object.">Line()</a>.pointAt(...). If the ray does not intersect the box the optional return value will be empty. No intersection behind the ray origin will be counted, and if the ray originates from within the bounding box the parameter value will be 0.</p>
<p>This implementation is based off of Tavian Barnes' optimized branchless slab method. <a href="https://tavianator.com/2011/ray_box.html">https://tavianator.com/2011/ray_box.html</a>. It runs in roughly 5% of the time as the the naive exact method, but can degenerate in specific conditions where a ray lies exactly in one of the AABB's planes.</p>
<dl class="section warning"><dt>Warning</dt><dd>A ray that lies exactly in one of the AABB's planes within the double floating point precision will not intersect correctly by this method </dd></dl>

<p>Reimplemented from <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela#a46481106aae372d1f2c84c3a18283e91">open3d::geometry::Line3D</a>.</p>

</div>
</div>
<a id="a21376150f0de95aafc57098196964e6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21376150f0de95aafc57098196964e6a">&#9670;&nbsp;</a></span>Through()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay">Ray3D</a> open3d::geometry::Ray3D::Through </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a> through two points. The ray origin will take the value of p0, and the direction will be a normalized vector from p0 to p1. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_line3_d_8h_source.html">Line3D.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_line3_d_8cpp.html">Line3D.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_ray3_d.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:04 GMT -->
</html>
