<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1nns_1_1_nearest_neighbor_search.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:59:55 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::nns::NearestNeighborSearch Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core_1_1nns.html">nns</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::nns::NearestNeighborSearch Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A Class for nearest neighbor search.  
 <a href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_nearest_neighbor_search_8h_source.89e.delay">NearestNeighborSearch.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aebf6cf68a9bd3fdb0bb8e8a318de4ac5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#aebf6cf68a9bd3fdb0bb8e8a318de4ac5">NearestNeighborSearch</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;dataset_points, const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a> &amp;index_dtype=<a class="el" href="namespaceopen3d_1_1core.html#a6f72622cf5885134fe1e6916db6797d9">core::Int32</a>)</td></tr>
<tr class="separator:aebf6cf68a9bd3fdb0bb8e8a318de4ac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6bfe9d51eceda786174559df98987db"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#aa6bfe9d51eceda786174559df98987db">~NearestNeighborSearch</a> ()</td></tr>
<tr class="separator:aa6bfe9d51eceda786174559df98987db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ef78ba639be60f5a65613610662dcdc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a4ef78ba639be60f5a65613610662dcdc">NearestNeighborSearch</a> (const <a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a> &amp;)=delete</td></tr>
<tr class="separator:a4ef78ba639be60f5a65613610662dcdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8b669f8deaf5992efaa9aa542017db4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#ad8b669f8deaf5992efaa9aa542017db4">operator=</a> (const <a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a> &amp;)=delete</td></tr>
<tr class="separator:ad8b669f8deaf5992efaa9aa542017db4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a864f2b5c91db7569e8146187f2683ae7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a864f2b5c91db7569e8146187f2683ae7">KnnIndex</a> ()</td></tr>
<tr class="separator:a864f2b5c91db7569e8146187f2683ae7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4689cabe5396216539aa692421b2a762"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a4689cabe5396216539aa692421b2a762">MultiRadiusIndex</a> ()</td></tr>
<tr class="separator:a4689cabe5396216539aa692421b2a762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a610e41be498baaf9758562f4908899b5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a610e41be498baaf9758562f4908899b5">FixedRadiusIndex</a> (<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; radius={})</td></tr>
<tr class="separator:a610e41be498baaf9758562f4908899b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abce2b990c21d99b02259dbf7a0d7092b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#abce2b990c21d99b02259dbf7a0d7092b">HybridIndex</a> (<a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; radius={})</td></tr>
<tr class="separator:abce2b990c21d99b02259dbf7a0d7092b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc63b829bd17db7fc1cf0dd64264b36a"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#acc63b829bd17db7fc1cf0dd64264b36a">KnnSearch</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;query_points, int knn)</td></tr>
<tr class="separator:acc63b829bd17db7fc1cf0dd64264b36a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6648f174ea63a52571a57325596a2cfa"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a6648f174ea63a52571a57325596a2cfa">FixedRadiusSearch</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;query_points, double radius, bool sort=true)</td></tr>
<tr class="separator:a6648f174ea63a52571a57325596a2cfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a902dc28083fabd672b0c2f40e31fcb22"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a902dc28083fabd672b0c2f40e31fcb22">MultiRadiusSearch</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;query_points, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;radii)</td></tr>
<tr class="separator:a902dc28083fabd672b0c2f40e31fcb22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a9b8bac5b6d3129365ca3bb6d1e6af4"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a5a9b8bac5b6d3129365ca3bb6d1e6af4">HybridSearch</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;query_points, const double radius, const int max_knn) const</td></tr>
<tr class="separator:a5a9b8bac5b6d3129365ca3bb6d1e6af4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ad60b675bb291b1ac9e652ec7ae3c608c"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classopen3d_1_1core_1_1nns_1_1_nano_flann_in">NanoFlannIndex</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#ad60b675bb291b1ac9e652ec7ae3c608c">nanoflann_index_</a></td></tr>
<tr class="separator:ad60b675bb291b1ac9e652ec7ae3c608c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc4ff0dd616ab004d967121cabde0264"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classopen3d_1_1core_1_1nns_1_1_fixed_radius_">nns::FixedRadiusIndex</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#abc4ff0dd616ab004d967121cabde0264">fixed_radius_index_</a></td></tr>
<tr class="separator:abc4ff0dd616ab004d967121cabde0264"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1505cb7c6e66a373ea84118fa7aaf4"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classopen3d_1_1core_1_1nns_1_1_knn_index.548">nns::KnnIndex</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#a4f1505cb7c6e66a373ea84118fa7aaf4">knn_index_</a></td></tr>
<tr class="separator:a4f1505cb7c6e66a373ea84118fa7aaf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab47a8a038017befe81ca5f96a6aa17a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#aab47a8a038017befe81ca5f96a6aa17a">dataset_points_</a></td></tr>
<tr class="separator:aab47a8a038017befe81ca5f96a6aa17a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9ef86ceb6d3d650c561c5c253d2394c"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh#ae9ef86ceb6d3d650c561c5c253d2394c">index_dtype_</a></td></tr>
<tr class="separator:ae9ef86ceb6d3d650c561c5c253d2394c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A Class for nearest neighbor search. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aebf6cf68a9bd3fdb0bb8e8a318de4ac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebf6cf68a9bd3fdb0bb8e8a318de4ac5">&#9670;&nbsp;</a></span>NearestNeighborSearch() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::nns::NearestNeighborSearch::NearestNeighborSearch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dataset_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a> &amp;&#160;</td>
          <td class="paramname"><em>index_dtype</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#a6f72622cf5885134fe1e6916db6797d9">core::Int32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructor.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dataset_points</td><td>Dataset points for constructing search index. Must be 2D, with shape {n, d}. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa6bfe9d51eceda786174559df98987db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6bfe9d51eceda786174559df98987db">&#9670;&nbsp;</a></span>~NearestNeighborSearch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::nns::NearestNeighborSearch::~NearestNeighborSearch </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4ef78ba639be60f5a65613610662dcdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ef78ba639be60f5a65613610662dcdc">&#9670;&nbsp;</a></span>NearestNeighborSearch() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::nns::NearestNeighborSearch::NearestNeighborSearch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a610e41be498baaf9758562f4908899b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a610e41be498baaf9758562f4908899b5">&#9670;&nbsp;</a></span>FixedRadiusIndex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::nns::NearestNeighborSearch::FixedRadiusIndex </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>radius</em> = <code>{}</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set index for fixed-radius search.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radius</td><td>optional radius parameter. required for gpu fixed radius index. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if building index success, otherwise false. </dd></dl>

</div>
</div>
<a id="a6648f174ea63a52571a57325596a2cfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6648f174ea63a52571a57325596a2cfa">&#9670;&nbsp;</a></span>FixedRadiusSearch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; open3d::core::nns::NearestNeighborSearch::FixedRadiusSearch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>radius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>sort</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Perform fixed radius search. All query points share the same radius.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>Data points for querying. Must be 2D, with shape {n, d}. </td></tr>
    <tr><td class="paramname">radius</td><td>Radius. </td></tr>
    <tr><td class="paramname">sort</td><td>Sort the results by distance. Default is True. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tuple of Tensors, (indices, distances, num_neighbors):<ul>
<li>indicecs: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {total_number_of_neighbors,}, with dtype same as index_dtype_.</li>
<li>distances: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {total_number_of_neighbors,}, same dtype with query_points. The distances are squared L2 distances.</li>
<li>num_neighbors: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n+1,}, with dtype Int64. The <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> is a prefix sum of the number of neighbors for each query point. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="abce2b990c21d99b02259dbf7a0d7092b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abce2b990c21d99b02259dbf7a0d7092b">&#9670;&nbsp;</a></span>HybridIndex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::nns::NearestNeighborSearch::HybridIndex </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>radius</em> = <code>{}</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set index for hybrid search.</p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if building index success, otherwise false. </dd></dl>

</div>
</div>
<a id="a5a9b8bac5b6d3129365ca3bb6d1e6af4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a9b8bac5b6d3129365ca3bb6d1e6af4">&#9670;&nbsp;</a></span>HybridSearch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; open3d::core::nns::NearestNeighborSearch::HybridSearch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>radius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>max_knn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Perform hybrid search.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>Data points for querying. Must be 2D, with shape {n, d}. </td></tr>
    <tr><td class="paramname">radius</td><td>Radius. </td></tr>
    <tr><td class="paramname">max_knn</td><td>Maximum number of neighbor to search per query. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tuple of Tensors, (indices, distances, counts):<ul>
<li>indices: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n, knn}, with dtype same as index_dtype_.</li>
<li>distainces: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n, knn}, with same dtype with query_points. The distances are squared L2 distances.</li>
<li>counts: Counts of neighbour for each query points. [<a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n}, with dtype same as index_dtype_]. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="a864f2b5c91db7569e8146187f2683ae7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a864f2b5c91db7569e8146187f2683ae7">&#9670;&nbsp;</a></span>KnnIndex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::nns::NearestNeighborSearch::KnnIndex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set index for knn search.</p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if building index success, otherwise false. </dd></dl>

</div>
</div>
<a id="acc63b829bd17db7fc1cf0dd64264b36a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc63b829bd17db7fc1cf0dd64264b36a">&#9670;&nbsp;</a></span>KnnSearch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; open3d::core::nns::NearestNeighborSearch::KnnSearch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>knn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Perform knn search.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>Query points. Must be 2D, with shape {n, d}. </td></tr>
    <tr><td class="paramname">knn</td><td>Number of neighbors to search per query point. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="structopen3d_1_1core_1_1_pair.html">Pair</a> of Tensors, (indices, distances):<ul>
<li>indices: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n, knn}, with dtype same as index_dtype_.</li>
<li>distances: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n, knn}, same dtype with query_points. The distances are squared L2 distances. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="a4689cabe5396216539aa692421b2a762"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4689cabe5396216539aa692421b2a762">&#9670;&nbsp;</a></span>MultiRadiusIndex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::core::nns::NearestNeighborSearch::MultiRadiusIndex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set index for multi-radius search.</p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if building index success, otherwise false. </dd></dl>

</div>
</div>
<a id="a902dc28083fabd672b0c2f40e31fcb22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a902dc28083fabd672b0c2f40e31fcb22">&#9670;&nbsp;</a></span>MultiRadiusSearch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt; open3d::core::nns::NearestNeighborSearch::MultiRadiusSearch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>query_points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>radii</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Perform multi-radius search. Each query point has an independent radius.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query_points</td><td>Query points. Must be 2D, with shape {n, d}. </td></tr>
    <tr><td class="paramname">radii</td><td>Radii of query points. Each query point has one radius. Must be 1D, with shape {n,}. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Tuple of Tensors, (indices,distances, num_neighbors):<ul>
<li>indicecs: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {total_number_of_neighbors,}, with dtype same as index_dtype_.</li>
<li>distances: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {total_number_of_neighbors,}, same dtype with query_points. The distances are squared L2 distances.</li>
<li>num_neighbors: <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> of shape {n+1,}, with dtype Int64. The <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> is a prefix sum of the number of neighbors for each query point. </li>
</ul>
</dd></dl>

</div>
</div>
<a id="ad8b669f8deaf5992efaa9aa542017db4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8b669f8deaf5992efaa9aa542017db4">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a>&amp; open3d::core::nns::NearestNeighborSearch::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1nns_1_1_nearest_neigh">NearestNeighborSearch</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="aab47a8a038017befe81ca5f96a6aa17a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab47a8a038017befe81ca5f96a6aa17a">&#9670;&nbsp;</a></span>dataset_points_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> open3d::core::nns::NearestNeighborSearch::dataset_points_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abc4ff0dd616ab004d967121cabde0264"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc4ff0dd616ab004d967121cabde0264">&#9670;&nbsp;</a></span>fixed_radius_index_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classopen3d_1_1core_1_1nns_1_1_fixed_radius_">nns::FixedRadiusIndex</a>&gt; open3d::core::nns::NearestNeighborSearch::fixed_radius_index_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae9ef86ceb6d3d650c561c5c253d2394c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9ef86ceb6d3d650c561c5c253d2394c">&#9670;&nbsp;</a></span>index_dtype_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">Dtype</a> open3d::core::nns::NearestNeighborSearch::index_dtype_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4f1505cb7c6e66a373ea84118fa7aaf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f1505cb7c6e66a373ea84118fa7aaf4">&#9670;&nbsp;</a></span>knn_index_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classopen3d_1_1core_1_1nns_1_1_knn_index.548">nns::KnnIndex</a>&gt; open3d::core::nns::NearestNeighborSearch::knn_index_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad60b675bb291b1ac9e652ec7ae3c608c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad60b675bb291b1ac9e652ec7ae3c608c">&#9670;&nbsp;</a></span>nanoflann_index_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classopen3d_1_1core_1_1nns_1_1_nano_flann_in">NanoFlannIndex</a>&gt; open3d::core::nns::NearestNeighborSearch::nanoflann_index_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/nns/<a class="el" href="_nearest_neighbor_search_8h_source.89e.delay">NearestNeighborSearch.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/nns/<a class="el" href="_nearest_neighbor_search_8cpp.html">NearestNeighborSearch.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1nns_1_1_nearest_neighbor_search.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:59:56 GMT -->
</html>
