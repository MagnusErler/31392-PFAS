<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/structopen3d_1_1io_1_1rpc_1_1messages_1_1_array.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:40 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::io::rpc::messages::Array Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1io.html">io</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1io_1_1rpc.html">rpc</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1io_1_1rpc_1_1messages.64b">messages</a></li><li class="navelem"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">open3d::io::rpc::messages::Array Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_messages_8h_source.html">Messages.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1638b982ea89cf35dab996d69fa808b8"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a1638b982ea89cf35dab996d69fa808b8"><td class="memTemplItemLeft" align="right" valign="top">const T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a1638b982ea89cf35dab996d69fa808b8">Ptr</a> () const</td></tr>
<tr class="separator:a1638b982ea89cf35dab996d69fa808b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14df14423d7e26eb8b7366fae43e14b5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a14df14423d7e26eb8b7366fae43e14b5">CheckRank</a> (const std::vector&lt; int &gt; &amp;expected_ranks, std::string &amp;errstr) const</td></tr>
<tr class="separator:a14df14423d7e26eb8b7366fae43e14b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9570a4f11ebab19c1bf976a2004ec1b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#aa9570a4f11ebab19c1bf976a2004ec1b">CheckRank</a> (const std::vector&lt; int &gt; &amp;expected_ranks) const</td></tr>
<tr class="separator:aa9570a4f11ebab19c1bf976a2004ec1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f304972a362cbacb833b7424d4e6bb8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a8f304972a362cbacb833b7424d4e6bb8">CheckShape</a> (const std::vector&lt; int64_t &gt; &amp;expected_shape, std::string &amp;errstr) const</td></tr>
<tr class="separator:a8f304972a362cbacb833b7424d4e6bb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac71850318b128c2d095422147d9092d2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#ac71850318b128c2d095422147d9092d2">CheckShape</a> (const std::vector&lt; int64_t &gt; &amp;expected_shape) const</td></tr>
<tr class="separator:ac71850318b128c2d095422147d9092d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4011b9bf1c5c8205dd687df582e77d55"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a4011b9bf1c5c8205dd687df582e77d55">CheckNonEmpty</a> (std::string &amp;errstr) const</td></tr>
<tr class="separator:a4011b9bf1c5c8205dd687df582e77d55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048432f99c789539c7dd1a82f83cb59a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a048432f99c789539c7dd1a82f83cb59a">CheckNonEmpty</a> () const</td></tr>
<tr class="separator:a048432f99c789539c7dd1a82f83cb59a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3925db62c2f9b4d70e3822d9b7378a2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#ac3925db62c2f9b4d70e3822d9b7378a2">CheckType</a> (const std::vector&lt; std::string &gt; &amp;expected_types, std::string &amp;errstr) const</td></tr>
<tr class="separator:ac3925db62c2f9b4d70e3822d9b7378a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54ce7c01820b3ffba014138fbf76e418"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a54ce7c01820b3ffba014138fbf76e418">CheckType</a> (const std::vector&lt; std::string &gt; &amp;expected_types) const</td></tr>
<tr class="separator:a54ce7c01820b3ffba014138fbf76e418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25a4c0bae16aee4f6dc1e8c2b25890d2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a25a4c0bae16aee4f6dc1e8c2b25890d2">MSGPACK_DEFINE_MAP</a> (<a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a58880f10c8791bc62fbf1669df2064fc">type</a>, <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#afd3c00ae21097de2d998ecd323872d15">shape</a>, <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#ab3246d12a06f43c50f42a986518ba45d">data</a>)</td></tr>
<tr class="separator:a25a4c0bae16aee4f6dc1e8c2b25890d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a94243abe1d8d4b73aaab83ef450edfec"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a94243abe1d8d4b73aaab83ef450edfec">MsgId</a> ()</td></tr>
<tr class="separator:a94243abe1d8d4b73aaab83ef450edfec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59beb18edf576705e5e06b5fa240bdeb"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a59beb18edf576705e5e06b5fa240bdeb"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a59beb18edf576705e5e06b5fa240bdeb">FromPtr</a> (const T *const ptr, const std::vector&lt; int64_t &gt; &amp;<a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#afd3c00ae21097de2d998ecd323872d15">shape</a>)</td></tr>
<tr class="separator:a59beb18edf576705e5e06b5fa240bdeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32051c350393d4148b954e9abee1b040"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a32051c350393d4148b954e9abee1b040">FromTensor</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;tensor)</td></tr>
<tr class="separator:a32051c350393d4148b954e9abee1b040"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:adc3b7f4ef0140c5e00f01c84e0b5c543"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#adc3b7f4ef0140c5e00f01c84e0b5c543">tensor_</a></td></tr>
<tr class="separator:adc3b7f4ef0140c5e00f01c84e0b5c543"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58880f10c8791bc62fbf1669df2064fc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a58880f10c8791bc62fbf1669df2064fc">type</a></td></tr>
<tr class="separator:a58880f10c8791bc62fbf1669df2064fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd3c00ae21097de2d998ecd323872d15"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#afd3c00ae21097de2d998ecd323872d15">shape</a></td></tr>
<tr class="separator:afd3c00ae21097de2d998ecd323872d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3246d12a06f43c50f42a986518ba45d"><td class="memItemLeft" align="right" valign="top">msgpack::type::raw_ref&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#ab3246d12a06f43c50f42a986518ba45d">data</a></td></tr>
<tr class="separator:ab3246d12a06f43c50f42a986518ba45d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a> structure inspired by msgpack_numpy but not directly compatible because they use bin-type for the map keys and we must use string. This structure does not have ownership of the data.</p>
<p>The following code can be used in python to create a compatible dict</p>
<p>def numpy_to_Array(arr): if isinstance(arr, np.ndarray): return {'type': arr.dtype.str, 'shape': arr.shape, 'data': arr.tobytes()} raise Exception('object is not a numpy array')</p>
<p>This codes converts the dict back to numpy.ndarray</p>
<p>def Array_to_numpy(dic): return np.frombuffer(dic['data'], dtype=np.dtype(dic['type'])).reshape(dic['shape']) </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a048432f99c789539c7dd1a82f83cb59a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a048432f99c789539c7dd1a82f83cb59a">&#9670;&nbsp;</a></span>CheckNonEmpty() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckNonEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4011b9bf1c5c8205dd687df582e77d55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4011b9bf1c5c8205dd687df582e77d55">&#9670;&nbsp;</a></span>CheckNonEmpty() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckNonEmpty </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errstr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Checks for a non empty array. Returns false if the array is empty and appends an error description to errstr. </p>

</div>
</div>
<a id="aa9570a4f11ebab19c1bf976a2004ec1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9570a4f11ebab19c1bf976a2004ec1b">&#9670;&nbsp;</a></span>CheckRank() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckRank </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected_ranks</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a14df14423d7e26eb8b7366fae43e14b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14df14423d7e26eb8b7366fae43e14b5">&#9670;&nbsp;</a></span>CheckRank() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckRank </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected_ranks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Checks the rank of the shape. Returns false on mismatch and appends an error description to errstr. </p>

</div>
</div>
<a id="ac71850318b128c2d095422147d9092d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac71850318b128c2d095422147d9092d2">&#9670;&nbsp;</a></span>CheckShape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckShape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected_shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8f304972a362cbacb833b7424d4e6bb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f304972a362cbacb833b7424d4e6bb8">&#9670;&nbsp;</a></span>CheckShape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckShape </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Checks the shape against the expected shape. Use -1 in the expected shape to allow arbitrary values. Returns false on mismatch and appends an error description to errstr. </p>

</div>
</div>
<a id="a54ce7c01820b3ffba014138fbf76e418"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54ce7c01820b3ffba014138fbf76e418">&#9670;&nbsp;</a></span>CheckType() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckType </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected_types</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac3925db62c2f9b4d70e3822d9b7378a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3925db62c2f9b4d70e3822d9b7378a2">&#9670;&nbsp;</a></span>CheckType() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::io::rpc::messages::Array::CheckType </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected_types</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Checks the data type of the array. Returns false if the type is not in the list of expected types and appends an error description to errstr. </p>

</div>
</div>
<a id="a59beb18edf576705e5e06b5fa240bdeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59beb18edf576705e5e06b5fa240bdeb">&#9670;&nbsp;</a></span>FromPtr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a> open3d::io::rpc::messages::Array::FromPtr </td>
          <td>(</td>
          <td class="paramtype">const T *const&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a> from a pointer. The caller is responsible for keeping the pointer valid during the lifetime of the <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a> object. </p>

</div>
</div>
<a id="a32051c350393d4148b954e9abee1b040"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32051c350393d4148b954e9abee1b040">&#9670;&nbsp;</a></span>FromTensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a> open3d::io::rpc::messages::Array::FromTensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an <a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar">Array</a> from a Tensor. This will copy the tensor to contiguous CPU memory if necessary and the returned array will keep a reference. </p>

</div>
</div>
<a id="a94243abe1d8d4b73aaab83ef450edfec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94243abe1d8d4b73aaab83ef450edfec">&#9670;&nbsp;</a></span>MsgId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string open3d::io::rpc::messages::Array::MsgId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a25a4c0bae16aee4f6dc1e8c2b25890d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25a4c0bae16aee4f6dc1e8c2b25890d2">&#9670;&nbsp;</a></span>MSGPACK_DEFINE_MAP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::io::rpc::messages::Array::MSGPACK_DEFINE_MAP </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#a58880f10c8791bc62fbf1669df2064fc">type</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#afd3c00ae21097de2d998ecd323872d15">shape</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1io_1_1rpc_1_1messages_1_1_ar#ab3246d12a06f43c50f42a986518ba45d">data</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1638b982ea89cf35dab996d69fa808b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1638b982ea89cf35dab996d69fa808b8">&#9670;&nbsp;</a></span>Ptr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T* open3d::io::rpc::messages::Array::Ptr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="ab3246d12a06f43c50f42a986518ba45d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3246d12a06f43c50f42a986518ba45d">&#9670;&nbsp;</a></span>data</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">msgpack::type::raw_ref open3d::io::rpc::messages::Array::data</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afd3c00ae21097de2d998ecd323872d15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd3c00ae21097de2d998ecd323872d15">&#9670;&nbsp;</a></span>shape</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int64_t&gt; open3d::io::rpc::messages::Array::shape</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adc3b7f4ef0140c5e00f01c84e0b5c543"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc3b7f4ef0140c5e00f01c84e0b5c543">&#9670;&nbsp;</a></span>tensor_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::io::rpc::messages::Array::tensor_</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a58880f10c8791bc62fbf1669df2064fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58880f10c8791bc62fbf1669df2064fc">&#9670;&nbsp;</a></span>type</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::io::rpc::messages::Array::type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/io/rpc/<a class="el" href="_messages_8h_source.html">Messages.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/structopen3d_1_1io_1_1rpc_1_1messages_1_1_array.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:40 GMT -->
</html>
