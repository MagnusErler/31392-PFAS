<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_std_g_p_u_allocator.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:13 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::StdGPUAllocator&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::StdGPUAllocator&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_std_g_p_u_hash_backend_8h_source.56d.delaye">StdGPUHashBackend.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ac0cc68e4a486f4a4561999e02236aa31"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac0cc68e4a486f4a4561999e02236aa31">value_type</a> = T</td></tr>
<tr class="memdesc:ac0cc68e4a486f4a4561999e02236aa31"><td class="mdescLeft">&#160;</td><td class="mdescRight">T.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac0cc68e4a486f4a4561999e02236aa31">More...</a><br /></td></tr>
<tr class="separator:ac0cc68e4a486f4a4561999e02236aa31"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3569fde5a091935de0ddd934564a1aa3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a3569fde5a091935de0ddd934564a1aa3">StdGPUAllocator</a> ()=default</td></tr>
<tr class="memdesc:a3569fde5a091935de0ddd934564a1aa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a3569fde5a091935de0ddd934564a1aa3">More...</a><br /></td></tr>
<tr class="separator:a3569fde5a091935de0ddd934564a1aa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59c42ff6f73c100a49d11dbd51efd27f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59c42ff6f73c100a49d11dbd51efd27f">StdGPUAllocator</a> (int device_id)</td></tr>
<tr class="memdesc:a59c42ff6f73c100a49d11dbd51efd27f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor from device.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59c42ff6f73c100a49d11dbd51efd27f">More...</a><br /></td></tr>
<tr class="separator:a59c42ff6f73c100a49d11dbd51efd27f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f61dba084aa411dfd7513cd5f37bf0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59f61dba084aa411dfd7513cd5f37bf0">StdGPUAllocator</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;)=default</td></tr>
<tr class="memdesc:a59f61dba084aa411dfd7513cd5f37bf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default copy constructor.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a59f61dba084aa411dfd7513cd5f37bf0">More...</a><br /></td></tr>
<tr class="separator:a59f61dba084aa411dfd7513cd5f37bf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad426fba0f26b655ebcf80a3295fae65b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ad426fba0f26b655ebcf80a3295fae65b">operator=</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;)=default</td></tr>
<tr class="memdesc:ad426fba0f26b655ebcf80a3295fae65b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default copy assignment operator.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ad426fba0f26b655ebcf80a3295fae65b">More...</a><br /></td></tr>
<tr class="separator:ad426fba0f26b655ebcf80a3295fae65b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abecaeb2743648dc95d0eaa250d6f6566"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#abecaeb2743648dc95d0eaa250d6f6566">StdGPUAllocator</a> (<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:abecaeb2743648dc95d0eaa250d6f6566"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#abecaeb2743648dc95d0eaa250d6f6566">More...</a><br /></td></tr>
<tr class="separator:abecaeb2743648dc95d0eaa250d6f6566"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8dc63698b8ee7229aae3169eca640b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac8dc63698b8ee7229aae3169eca640b7">operator=</a> (<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ac8dc63698b8ee7229aae3169eca640b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac8dc63698b8ee7229aae3169eca640b7">More...</a><br /></td></tr>
<tr class="separator:ac8dc63698b8ee7229aae3169eca640b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5307b960412f4c21cb7593d993522a0"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:ae5307b960412f4c21cb7593d993522a0"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ae5307b960412f4c21cb7593d993522a0">StdGPUAllocator</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:ae5307b960412f4c21cb7593d993522a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rebind copy constructor.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ae5307b960412f4c21cb7593d993522a0">More...</a><br /></td></tr>
<tr class="separator:ae5307b960412f4c21cb7593d993522a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df4be9afce871bc087dc571445cd8e7"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a0df4be9afce871bc087dc571445cd8e7">allocate</a> (std::size_t n)</td></tr>
<tr class="memdesc:a0df4be9afce871bc087dc571445cd8e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates memory of size <code>n</code>.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a0df4be9afce871bc087dc571445cd8e7">More...</a><br /></td></tr>
<tr class="separator:a0df4be9afce871bc087dc571445cd8e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66736f553393e6a50946ce92261143c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a66736f553393e6a50946ce92261143c8">deallocate</a> (T *p, std::size_t n)</td></tr>
<tr class="memdesc:a66736f553393e6a50946ce92261143c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deallocates memory from pointer <code>p</code> of size <code>n</code> .  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a66736f553393e6a50946ce92261143c8">More...</a><br /></td></tr>
<tr class="separator:a66736f553393e6a50946ce92261143c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a80f51411debcd3c66f4b73480e0efe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a7a80f51411debcd3c66f4b73480e0efe">operator==</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;other)</td></tr>
<tr class="memdesc:a7a80f51411debcd3c66f4b73480e0efe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the instances are equal, false otherwise.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a7a80f51411debcd3c66f4b73480e0efe">More...</a><br /></td></tr>
<tr class="separator:a7a80f51411debcd3c66f4b73480e0efe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbb4660d529be9fc142edb023f0ec45e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#adbb4660d529be9fc142edb023f0ec45e">operator!=</a> (const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> &amp;other)</td></tr>
<tr class="memdesc:adbb4660d529be9fc142edb023f0ec45e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the instances are not equal, false otherwise.  <a href="classopen3d_1_1core_1_1_std_g_p_u_allocator#adbb4660d529be9fc142edb023f0ec45e">More...</a><br /></td></tr>
<tr class="separator:adbb4660d529be9fc142edb023f0ec45e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a571bce86c518f625a0c7ab180382d18f"><td class="memTemplParams" colspan="2">template&lt;typename T2 &gt; </td></tr>
<tr class="memitem:a571bce86c518f625a0c7ab180382d18f"><td class="memTemplItemLeft" align="right" valign="top">class&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#a571bce86c518f625a0c7ab180382d18f">StdGPUAllocator</a></td></tr>
<tr class="separator:a571bce86c518f625a0c7ab180382d18f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class open3d::core::StdGPUAllocator&lt; T &gt;</h3>

<p>Class satisfying the Allocator requirements defined by the C++ standard. This bridge makes the <a class="el" href="classopen3d_1_1core_1_1_memory_manager.3a6.d">MemoryManager</a> interface accessible to all classes and containers in stdgpu that use the standard Allocator interface.</p>
<p>This allows to allocate (potentially cached) GPU memory in stdgpu. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ac0cc68e4a486f4a4561999e02236aa31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0cc68e4a486f4a4561999e02236aa31">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator#ac0cc68e4a486f4a4561999e02236aa31">value_type</a> =  T</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>T. </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a3569fde5a091935de0ddd934564a1aa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3569fde5a091935de0ddd934564a1aa3">&#9670;&nbsp;</a></span>StdGPUAllocator() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a id="a59c42ff6f73c100a49d11dbd51efd27f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59c42ff6f73c100a49d11dbd51efd27f">&#9670;&nbsp;</a></span>StdGPUAllocator() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>device_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor from device. </p>

</div>
</div>
<a id="a59f61dba084aa411dfd7513cd5f37bf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59f61dba084aa411dfd7513cd5f37bf0">&#9670;&nbsp;</a></span>StdGPUAllocator() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default copy constructor. </p>

</div>
</div>
<a id="abecaeb2743648dc95d0eaa250d6f6566"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abecaeb2743648dc95d0eaa250d6f6566">&#9670;&nbsp;</a></span>StdGPUAllocator() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move constructor. </p>

</div>
</div>
<a id="ae5307b960412f4c21cb7593d993522a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5307b960412f4c21cb7593d993522a0">&#9670;&nbsp;</a></span>StdGPUAllocator() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rebind copy constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0df4be9afce871bc087dc571445cd8e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0df4be9afce871bc087dc571445cd8e7">&#9670;&nbsp;</a></span>allocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::allocate </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates memory of size <code>n</code>. </p>

</div>
</div>
<a id="a66736f553393e6a50946ce92261143c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66736f553393e6a50946ce92261143c8">&#9670;&nbsp;</a></span>deallocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::deallocate </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deallocates memory from pointer <code>p</code> of size <code>n</code> . </p>

</div>
</div>
<a id="adbb4660d529be9fc142edb023f0ec45e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbb4660d529be9fc142edb023f0ec45e">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the instances are not equal, false otherwise. </p>

</div>
</div>
<a id="ad426fba0f26b655ebcf80a3295fae65b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad426fba0f26b655ebcf80a3295fae65b">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp; <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default copy assignment operator. </p>

</div>
</div>
<a id="ac8dc63698b8ee7229aae3169eca640b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8dc63698b8ee7229aae3169eca640b7">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&amp; <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<a id="a7a80f51411debcd3c66f4b73480e0efe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a80f51411debcd3c66f4b73480e0efe">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">open3d::core::StdGPUAllocator</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns true if the instances are equal, false otherwise. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a571bce86c518f625a0c7ab180382d18f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a571bce86c518f625a0c7ab180382d18f">&#9670;&nbsp;</a></span>StdGPUAllocator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<div class="memtemplate">
template&lt;typename T2 &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_allocator">StdGPUAllocator</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/hashmap/CUDA/<a class="el" href="_std_g_p_u_hash_backend_8h_source.56d.delaye">StdGPUHashBackend.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_std_g_p_u_allocator.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:13 GMT -->
</html>
