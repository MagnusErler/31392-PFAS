<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_std_g_p_u_hash_backend.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:13 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">StdGPUHashBackend</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_std_g_p_u_hash_backend_8h_source.56d.delaye">StdGPUHashBackend.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::core::StdGPUHashBackend&lt; Key, Hash, Eq &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1core_1_1_std_g_p_u_hash_backe-2" usemap="#open3d::core::StdGPUHashBackend_3C_20Key_2C_20Hash_2C_20Eq_20_3E_map" alt=""/>
  <map id="open3d::core::StdGPUHashBackend_3C_20Key_2C_20Hash_2C_20Eq_20_3E_map" name="open3d::core::StdGPUHashBackend_3C_20Key_2C_20Hash_2C_20Eq_20_3E_map">
<area href="classopen3d_1_1core_1_1_device_hash_backend" alt="open3d::core::DeviceHashBackend" shape="rect" coords="0,0,320,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a17c650480d725eeb5bd48dea35a6456c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a17c650480d725eeb5bd48dea35a6456c">StdGPUHashBackend</a> (int64_t init_capacity, int64_t key_dsize, const std::vector&lt; int64_t &gt; &amp;value_dsizes, const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;device)</td></tr>
<tr class="separator:a17c650480d725eeb5bd48dea35a6456c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fdc95eded218cfdffb3cf442c2d0567"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a2fdc95eded218cfdffb3cf442c2d0567">~StdGPUHashBackend</a> ()</td></tr>
<tr class="separator:a2fdc95eded218cfdffb3cf442c2d0567"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3d7d31adc70dd721cea1c446e08a885"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ac3d7d31adc70dd721cea1c446e08a885">Reserve</a> (int64_t capacity) override</td></tr>
<tr class="separator:ac3d7d31adc70dd721cea1c446e08a885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b0a5181e3eaec2eef076b4dc87576cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">Insert</a> (const void *input_keys, const std::vector&lt; const void * &gt; &amp;input_values_soa, <a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *output_buf_indices, bool *output_masks, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) override</td></tr>
<tr class="memdesc:a8b0a5181e3eaec2eef076b4dc87576cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel insert contiguous arrays of keys and values.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a8b0a5181e3eaec2eef076b4dc87576cc">More...</a><br /></td></tr>
<tr class="separator:a8b0a5181e3eaec2eef076b4dc87576cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ff2c0a33392b9adca7e333a3ada4b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">Find</a> (const void *input_keys, <a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *output_buf_indices, bool *output_masks, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) override</td></tr>
<tr class="memdesc:a65ff2c0a33392b9adca7e333a3ada4b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel find a contiguous array of keys.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a65ff2c0a33392b9adca7e333a3ada4b9">More...</a><br /></td></tr>
<tr class="separator:a65ff2c0a33392b9adca7e333a3ada4b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21cf0cf7b7bca01597e36a305ff45ff1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">Erase</a> (const void *input_keys, bool *output_masks, int64_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a>) override</td></tr>
<tr class="memdesc:a21cf0cf7b7bca01597e36a305ff45ff1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel erase a contiguous array of keys.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a21cf0cf7b7bca01597e36a305ff45ff1">More...</a><br /></td></tr>
<tr class="separator:a21cf0cf7b7bca01597e36a305ff45ff1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addc6e53ae7e40136dbbfab53d55a5d83"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">GetActiveIndices</a> (<a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *output_indices) override</td></tr>
<tr class="memdesc:addc6e53ae7e40136dbbfab53d55a5d83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parallel collect all iterators in the hash table.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#addc6e53ae7e40136dbbfab53d55a5d83">More...</a><br /></td></tr>
<tr class="separator:addc6e53ae7e40136dbbfab53d55a5d83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef393899e8cf3599100dd2b37992614"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">Clear</a> () override</td></tr>
<tr class="memdesc:afef393899e8cf3599100dd2b37992614"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear stored map without reallocating memory.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#afef393899e8cf3599100dd2b37992614">More...</a><br /></td></tr>
<tr class="separator:afef393899e8cf3599100dd2b37992614"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6fb50a1498cce8b6c5627da2f715624"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">Size</a> () const override</td></tr>
<tr class="memdesc:ae6fb50a1498cce8b6c5627da2f715624"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size (number of valid entries) of the hash map.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ae6fb50a1498cce8b6c5627da2f715624">More...</a><br /></td></tr>
<tr class="separator:ae6fb50a1498cce8b6c5627da2f715624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0ba90625b85e8a5879ef2a3d4e8e922"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">GetBucketCount</a> () const override</td></tr>
<tr class="memdesc:ad0ba90625b85e8a5879ef2a3d4e8e922"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of buckets of the hash map.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ad0ba90625b85e8a5879ef2a3d4e8e922">More...</a><br /></td></tr>
<tr class="separator:ad0ba90625b85e8a5879ef2a3d4e8e922"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9af392cccce29a05de47fa46c76d85bd"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">BucketSizes</a> () const override</td></tr>
<tr class="memdesc:a9af392cccce29a05de47fa46c76d85bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of entries per bucket.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a9af392cccce29a05de47fa46c76d85bd">More...</a><br /></td></tr>
<tr class="separator:a9af392cccce29a05de47fa46c76d85bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ce4f7f4b18564deb22155d093dd1755"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">LoadFactor</a> () const override</td></tr>
<tr class="memdesc:a4ce4f7f4b18564deb22155d093dd1755"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current load factor, defined as size / bucket count.  <a href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4ce4f7f4b18564deb22155d093dd1755">More...</a><br /></td></tr>
<tr class="separator:a4ce4f7f4b18564deb22155d093dd1755"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e6e6579a9a27b979d9d6cc1d63ae8fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a4e6e6579a9a27b979d9d6cc1d63ae8fc">GetImpl</a> () const</td></tr>
<tr class="separator:a4e6e6579a9a27b979d9d6cc1d63ae8fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee3ac8166b1c8e4a0f429f4fbf181a47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#aee3ac8166b1c8e4a0f429f4fbf181a47">Allocate</a> (int64_t capacity)</td></tr>
<tr class="separator:aee3ac8166b1c8e4a0f429f4fbf181a47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f1890bf25420708d1f671049bf97279"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#a7f1890bf25420708d1f671049bf97279">Free</a> ()</td></tr>
<tr class="separator:a7f1890bf25420708d1f671049bf97279"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1core_1_1_device_hash_backend')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend">open3d::core::DeviceHashBackend</a></td></tr>
<tr class="memitem:af882033ff231e0a1a8b301e8e80dac78 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#af882033ff231e0a1a8b301e8e80dac78">DeviceHashBackend</a> (int64_t init_capacity, int64_t key_dsize, const std::vector&lt; int64_t &gt; &amp;value_dsizes, const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;device)</td></tr>
<tr class="separator:af882033ff231e0a1a8b301e8e80dac78 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e4af8fc8af05bd37fce0eeb8f2c19b1 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a9e4af8fc8af05bd37fce0eeb8f2c19b1">~DeviceHashBackend</a> ()</td></tr>
<tr class="separator:a9e4af8fc8af05bd37fce0eeb8f2c19b1 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a155c2aba1bdc2622c839af6f5c696d4f inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a155c2aba1bdc2622c839af6f5c696d4f">GetCapacity</a> () const</td></tr>
<tr class="memdesc:a155c2aba1bdc2622c839af6f5c696d4f inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the maximum capacity of the hash map.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a155c2aba1bdc2622c839af6f5c696d4f">More...</a><br /></td></tr>
<tr class="separator:a155c2aba1bdc2622c839af6f5c696d4f inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37592de66ebaf9a6fd0d1d8d314468e5 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a37592de66ebaf9a6fd0d1d8d314468e5">GetDevice</a> () const</td></tr>
<tr class="memdesc:a37592de66ebaf9a6fd0d1d8d314468e5 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current device.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a37592de66ebaf9a6fd0d1d8d314468e5">More...</a><br /></td></tr>
<tr class="separator:a37592de66ebaf9a6fd0d1d8d314468e5 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83abd46916b932938758be387f63492b inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a83abd46916b932938758be387f63492b">GetKeyBuffer</a> ()</td></tr>
<tr class="memdesc:a83abd46916b932938758be387f63492b inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the key buffer that stores actual keys.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a83abd46916b932938758be387f63492b">More...</a><br /></td></tr>
<tr class="separator:a83abd46916b932938758be387f63492b inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d5d053395bfa8e927313b1409b843f1 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a3d5d053395bfa8e927313b1409b843f1">GetValueBuffers</a> ()</td></tr>
<tr class="memdesc:a3d5d053395bfa8e927313b1409b843f1 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value buffers that store actual array of values.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a3d5d053395bfa8e927313b1409b843f1">More...</a><br /></td></tr>
<tr class="separator:a3d5d053395bfa8e927313b1409b843f1 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80145ae0d13444648c1503cf0c8aebf8 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a80145ae0d13444648c1503cf0c8aebf8">GetValueBuffer</a> (size_t i=0)</td></tr>
<tr class="memdesc:a80145ae0d13444648c1503cf0c8aebf8 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the i-th value buffer that store an actual value array.  <a href="classopen3d_1_1core_1_1_device_hash_backend#a80145ae0d13444648c1503cf0c8aebf8">More...</a><br /></td></tr>
<tr class="separator:a80145ae0d13444648c1503cf0c8aebf8 inherit pub_methods_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ab60e83ab6224c8158392d7affd6aa369"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#ab60e83ab6224c8158392d7affd6aa369">impl_</a></td></tr>
<tr class="separator:ab60e83ab6224c8158392d7affd6aa369"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af30766e498fe3e8203e9902a6a4cbef8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">CUDAHashBackendBufferAccessor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe#af30766e498fe3e8203e9902a6a4cbef8">buffer_accessor_</a></td></tr>
<tr class="separator:af30766e498fe3e8203e9902a6a4cbef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_classopen3d_1_1core_1_1_device_hash_backend')"><img src="closed.png" alt="-"/>&#160;Data Fields inherited from <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend">open3d::core::DeviceHashBackend</a></td></tr>
<tr class="memitem:a8a6f1b6445a9c2805c01d9940300e0b0 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a8a6f1b6445a9c2805c01d9940300e0b0">capacity_</a></td></tr>
<tr class="separator:a8a6f1b6445a9c2805c01d9940300e0b0 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c9c3ff3cc524042a18ed7f9d4e91703 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a5c9c3ff3cc524042a18ed7f9d4e91703">key_dsize_</a></td></tr>
<tr class="separator:a5c9c3ff3cc524042a18ed7f9d4e91703 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a453de3ac93dd0294aad25ab6936c6423 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a453de3ac93dd0294aad25ab6936c6423">value_dsizes_</a></td></tr>
<tr class="separator:a453de3ac93dd0294aad25ab6936c6423 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58c8985584dd94b36f9ebc65db78b8f2 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a58c8985584dd94b36f9ebc65db78b8f2">device_</a></td></tr>
<tr class="separator:a58c8985584dd94b36f9ebc65db78b8f2 inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50cb13b4eb8eeaa3e979aac3ac5cf7bf inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1core_1_1_hash_backend_buffer">HashBackendBuffer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a50cb13b4eb8eeaa3e979aac3ac5cf7bf">buffer_</a></td></tr>
<tr class="separator:a50cb13b4eb8eeaa3e979aac3ac5cf7bf inherit pub_attribs_classopen3d_1_1core_1_1_device_hash_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a17c650480d725eeb5bd48dea35a6456c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17c650480d725eeb5bd48dea35a6456c">&#9670;&nbsp;</a></span>StdGPUHashBackend()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">StdGPUHashBackend</a> </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>init_capacity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>key_dsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>value_dsizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2fdc95eded218cfdffb3cf442c2d0567"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fdc95eded218cfdffb3cf442c2d0567">&#9670;&nbsp;</a></span>~StdGPUHashBackend()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::~<a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">StdGPUHashBackend</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aee3ac8166b1c8e4a0f429f4fbf181a47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee3ac8166b1c8e4a0f429f4fbf181a47">&#9670;&nbsp;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Allocate </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>capacity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a246ba51b66d0753f71d8e1456fea97ad">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="a9af392cccce29a05de47fa46c76d85bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9af392cccce29a05de47fa46c76d85bd">&#9670;&nbsp;</a></span>BucketSizes()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int64_t &gt; <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::BucketSizes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of entries per bucket. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#aa5c56ac52a6032ab6265bec4b0a68842">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="afef393899e8cf3599100dd2b37992614"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afef393899e8cf3599100dd2b37992614">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear stored map without reallocating memory. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a3390cf8e17b4859fba04d66c44fd1840">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="a21cf0cf7b7bca01597e36a305ff45ff1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21cf0cf7b7bca01597e36a305ff45ff1">&#9670;&nbsp;</a></span>Erase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Erase </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>output_masks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel erase a contiguous array of keys. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a23b88c0a8fd28bdd091f1c821c8d2152">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="a65ff2c0a33392b9adca7e333a3ada4b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65ff2c0a33392b9adca7e333a3ada4b9">&#9670;&nbsp;</a></span>Find()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Find </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *&#160;</td>
          <td class="paramname"><em>output_buf_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>output_masks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel find a contiguous array of keys. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#aeba0dc0427070a21e551d0f701f2afdc">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="a7f1890bf25420708d1f671049bf97279"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f1890bf25420708d1f671049bf97279">&#9670;&nbsp;</a></span>Free()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Free</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a4169dbb3043ae3239cea3eddced73447">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="addc6e53ae7e40136dbbfab53d55a5d83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addc6e53ae7e40136dbbfab53d55a5d83">&#9670;&nbsp;</a></span>GetActiveIndices()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::GetActiveIndices </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *&#160;</td>
          <td class="paramname"><em>output_buf_indices</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel collect all iterators in the hash table. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#ad36c2bfcaef4e52e6e726faa1490faa0">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="ad0ba90625b85e8a5879ef2a3d4e8e922"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0ba90625b85e8a5879ef2a3d4e8e922">&#9670;&nbsp;</a></span>GetBucketCount()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::GetBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of buckets of the hash map. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#aca42a6b9ae0d42f4752f5e01b9ce14a2">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="a4e6e6579a9a27b979d9d6cc1d63ae8fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e6e6579a9a27b979d9d6cc1d63ae8fc">&#9670;&nbsp;</a></span>GetImpl()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend</a>&lt;Key, Hash, Eq&gt; <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::GetImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8b0a5181e3eaec2eef076b4dc87576cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b0a5181e3eaec2eef076b4dc87576cc">&#9670;&nbsp;</a></span>Insert()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>input_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; const void * &gt; &amp;&#160;</td>
          <td class="paramname"><em>input_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1core.html#a2e24567ecd0819b60fcd901703289eec">buf_index_t</a> *&#160;</td>
          <td class="paramname"><em>output_buf_indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>output_masks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parallel insert contiguous arrays of keys and values. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a0356b7abac97e6ae75597cef969686ac">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="a4ce4f7f4b18564deb22155d093dd1755"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ce4f7f4b18564deb22155d093dd1755">&#9670;&nbsp;</a></span>LoadFactor()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::LoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current load factor, defined as size / bucket count. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#ad5e1f89cbf8f2afd0a0966bec0768963">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="ac3d7d31adc70dd721cea1c446e08a885"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3d7d31adc70dd721cea1c446e08a885">&#9670;&nbsp;</a></span>Reserve()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Reserve </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>capacity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reserve expects a lot of extra memory space at runtime, since it consists of 1) dumping all key value pairs to a buffer 2) creating a new hash table 3) parallel inserting dumped key value pairs 4) deallocating old hash table </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#a845cfc534da177bae1fe9566d9c9c01f">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<a id="ae6fb50a1498cce8b6c5627da2f715624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6fb50a1498cce8b6c5627da2f715624">&#9670;&nbsp;</a></span>Size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int64_t <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::Size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size (number of valid entries) of the hash map. </p>

<p>Implements <a class="el" href="classopen3d_1_1core_1_1_device_hash_backend#af8cce0c33ef8dbde16d713aa9a515c9f">open3d::core::DeviceHashBackend</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="af30766e498fe3e8203e9902a6a4cbef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af30766e498fe3e8203e9902a6a4cbef8">&#9670;&nbsp;</a></span>buffer_accessor_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_c_u_d_a_hash_backend">CUDAHashBackendBufferAccessor</a> <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::buffer_accessor_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab60e83ab6224c8158392d7affd6aa369"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab60e83ab6224c8158392d7affd6aa369">&#9670;&nbsp;</a></span>impl_</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Hash , typename Eq &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopen3d_1_1core.html#ac2ec1da558b1923feeab7a53b9c1b233">InternalStdGPUHashBackend</a>&lt;Key, Hash, Eq&gt; <a class="el" href="classopen3d_1_1core_1_1_std_g_p_u_hash_backe">open3d::core::StdGPUHashBackend</a>&lt; Key, Hash, Eq &gt;::impl_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/hashmap/CUDA/<a class="el" href="_std_g_p_u_hash_backend_8h_source.56d.delaye">StdGPUHashBackend.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_std_g_p_u_hash_backend.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:13 GMT -->
</html>
