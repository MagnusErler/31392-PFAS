<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_intersection_test.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:00 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::IntersectionTest Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes">IntersectionTest</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::IntersectionTest Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_intersection_test_8h_source.html">IntersectionTest.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a0f0aa1b427e3c5a7ea223a311e5b2fa0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a0f0aa1b427e3c5a7ea223a311e5b2fa0">AABBAABB</a> (const Eigen::Vector3d &amp;min0, const Eigen::Vector3d &amp;max0, const Eigen::Vector3d &amp;min1, const Eigen::Vector3d &amp;max1)</td></tr>
<tr class="separator:a0f0aa1b427e3c5a7ea223a311e5b2fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b1f5c2e01b94dd332f605e406d73a8e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a2b1f5c2e01b94dd332f605e406d73a8e">TriangleTriangle3d</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1, const Eigen::Vector3d &amp;p2, const Eigen::Vector3d &amp;q0, const Eigen::Vector3d &amp;q1, const Eigen::Vector3d &amp;q2)</td></tr>
<tr class="separator:a2b1f5c2e01b94dd332f605e406d73a8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a259b7b605bd9fa961e61f8d17de824af"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a259b7b605bd9fa961e61f8d17de824af">TriangleAABB</a> (const Eigen::Vector3d &amp;box_center, const Eigen::Vector3d &amp;box_half_size, const Eigen::Vector3d &amp;vert0, const Eigen::Vector3d &amp;vert1, const Eigen::Vector3d &amp;vert2)</td></tr>
<tr class="separator:a259b7b605bd9fa961e61f8d17de824af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aee63947b5b3dfa55fc0d2f2e23be7f"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a0aee63947b5b3dfa55fc0d2f2e23be7f">PointsCoplanar</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1, const Eigen::Vector3d &amp;p2, const Eigen::Vector3d &amp;p3)</td></tr>
<tr class="memdesc:a0aee63947b5b3dfa55fc0d2f2e23be7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests if the given four points all lie on the same plane.  <a href="classopen3d_1_1geometry_1_1_intersection_tes#a0aee63947b5b3dfa55fc0d2f2e23be7f">More...</a><br /></td></tr>
<tr class="separator:a0aee63947b5b3dfa55fc0d2f2e23be7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a382a239f1bbc6d40953fe07ead27250b"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a382a239f1bbc6d40953fe07ead27250b">LinesMinimumDistance</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1, const Eigen::Vector3d &amp;q0, const Eigen::Vector3d &amp;q1)</td></tr>
<tr class="separator:a382a239f1bbc6d40953fe07ead27250b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a726e59ab4c65375029f561a6cdf391eb"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a726e59ab4c65375029f561a6cdf391eb">LineSegmentsMinimumDistance</a> (const Eigen::Vector3d &amp;p0, const Eigen::Vector3d &amp;p1, const Eigen::Vector3d &amp;q0, const Eigen::Vector3d &amp;q1)</td></tr>
<tr class="separator:a726e59ab4c65375029f561a6cdf391eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a484f6ce4f021bcecb25276874f45a691"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a484f6ce4f021bcecb25276874f45a691">LineExactAABB</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;line, const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box)</td></tr>
<tr class="memdesc:a484f6ce4f021bcecb25276874f45a691"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. This method is about 20x slower than the slab method, see details to know when to use. This function wraps the underlying implementation on the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> class and is included here for API coherence; if you are testing large numbers of lines, rays, or segments use the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a>, or <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> classes directly.  <a href="classopen3d_1_1geometry_1_1_intersection_tes#a484f6ce4f021bcecb25276874f45a691">More...</a><br /></td></tr>
<tr class="separator:a484f6ce4f021bcecb25276874f45a691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39033dc2f6a34103c1e92e8231aeba72"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">LineSlabAABB</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;line, const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;box)</td></tr>
<tr class="memdesc:a39033dc2f6a34103c1e92e8231aeba72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the lower intersection parameter for a line with an axis aligned bounding box or no value if there is no intersection. This function wraps the underlying implementation on the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> class and is included here for API coherence; if you are testing large numbers of lines, rays, or segments use the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a>, or <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> classes directly.  <a href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">More...</a><br /></td></tr>
<tr class="separator:a39033dc2f6a34103c1e92e8231aeba72"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0f0aa1b427e3c5a7ea223a311e5b2fa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f0aa1b427e3c5a7ea223a311e5b2fa0">&#9670;&nbsp;</a></span>AABBAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::IntersectionTest::AABBAABB </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>min0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>max0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>min1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>max1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a484f6ce4f021bcecb25276874f45a691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a484f6ce4f021bcecb25276874f45a691">&#9670;&nbsp;</a></span>LineExactAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt;double&gt; open3d::geometry::IntersectionTest::LineExactAABB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no intersection. This method is about 20x slower than the slab method, see details to know when to use. This function wraps the underlying implementation on the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> class and is included here for API coherence; if you are testing large numbers of lines, rays, or segments use the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a>, or <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> classes directly. </p>
<p>Calculates the lower intersection parameter of a parameterized line with an axis aligned bounding box. The intersection point can be recovered with .Line().pointAt(...). If the line does not intersect the box the return value will be empty. Also note that if the AABB is behind the line's origin point, the value returned will still be of the lower intersection, which is the first intersection in the direction of the line, not the intersection closer to the origin.</p>
<p>This implementation is a naive exact method that considers intersections with all six bounding box planes. It is not optimized for speed and should only be used when a problem is conditioned such that the slab method is unacceptable. Use this when a line is likely to lie exactly in one of the AABB planes and false negatives are unacceptable. Typically this will only happen when lines are axis-aligned and both lines and bounding volumes are regularly spaced, and every intersection is important. In such cases if performance is important, a simple custom implementation based on the problem directionality will likely outperform even the slab method. </p><div class="fragment"><div class="line"><span class="comment">// Intersection with a line</span></div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a484f6ce4f021bcecb25276874f45a691">IntersectionTest::LineExactAABB</a>(Line3D{p, n}, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    ...</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Intersection with a ray</span></div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a484f6ce4f021bcecb25276874f45a691">IntersectionTest::LineExactAABB</a>(Ray3D{p, n}, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    ...</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Intersection with a segment</span></div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a484f6ce4f021bcecb25276874f45a691">IntersectionTest::LineExactAABB</a>(Segment3D{p0, p1}, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    ...</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Getting the intersection point</span></div>
<div class="line">Ray3D ray{p, n};</div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">IntersectionTest::LineSlabAABB</a>(ray, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    <span class="comment">// the .Line() function retrieves the underlying Eigen object</span></div>
<div class="line">    ray.Line().pointAt(<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.value());</div>
<div class="line">}</div>
<div class="ttc" id="a_vtk_utils_8cpp_html_a870625677394f032dc07ac7762fc6255"><div class="ttname"><a href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a></div><div class="ttdeci">core::Tensor result</div><div class="ttdef"><b>Definition:</b> VtkUtils.cpp:75</div></div>
<div class="ttc" id="aclassopen3d_1_1geometry_1_1_intersection_test_html_a39033dc2f6a34103c1e92e8231aeba72"><div class="ttname"><a href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">open3d::geometry::IntersectionTest::LineSlabAABB</a></div><div class="ttdeci">static utility::optional&lt; double &gt; LineSlabAABB(const Line3D &amp;line, const AxisAlignedBoundingBox &amp;box)</div><div class="ttdoc">Returns the lower intersection parameter for a line with an axis aligned bounding box or no value if ...</div><div class="ttdef"><b>Definition:</b> IntersectionTest.h:174</div></div>
<div class="ttc" id="aclassopen3d_1_1geometry_1_1_intersection_test_html_a484f6ce4f021bcecb25276874f45a691"><div class="ttname"><a href="classopen3d_1_1geometry_1_1_intersection_tes#a484f6ce4f021bcecb25276874f45a691">open3d::geometry::IntersectionTest::LineExactAABB</a></div><div class="ttdeci">static utility::optional&lt; double &gt; LineExactAABB(const Line3D &amp;line, const AxisAlignedBoundingBox &amp;box)</div><div class="ttdoc">Returns the lower intersection parameter for a line with an axis aligned bounding box or empty if no ...</div><div class="ttdef"><b>Definition:</b> IntersectionTest.h:118</div></div>
</div><!-- fragment --> 
</div>
</div>
<a id="a726e59ab4c65375029f561a6cdf391eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a726e59ab4c65375029f561a6cdf391eb">&#9670;&nbsp;</a></span>LineSegmentsMinimumDistance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::IntersectionTest::LineSegmentsMinimumDistance </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Computes the minimum distance between two line segments. The first line segment is defined by 3D points <code>p0</code> and <code>p1</code>, the second line segment is defined by 3D points <code>q0</code> and <code>q1</code>. This implementation is based on the description of David Eberly (<a href="https://www.geometrictools.com/Documentation/DistanceLine3Line3.pdf">https://www.geometrictools.com/Documentation/DistanceLine3Line3.pdf</a>). </p>

</div>
</div>
<a id="a39033dc2f6a34103c1e92e8231aeba72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39033dc2f6a34103c1e92e8231aeba72">&#9670;&nbsp;</a></span>LineSlabAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt;double&gt; open3d::geometry::IntersectionTest::LineSlabAABB </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela">Line3D</a> &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the lower intersection parameter for a line with an axis aligned bounding box or no value if there is no intersection. This function wraps the underlying implementation on the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a> class and is included here for API coherence; if you are testing large numbers of lines, rays, or segments use the <a class="el" href="classopen3d_1_1geometry_1_1_line3_d.40d.dela" title="Line3D is a class which derives from Eigen::ParametrizedLine&lt;double, 3&gt; in order to capture the seman...">Line3D</a>, <a class="el" href="classopen3d_1_1geometry_1_1_ray3_d.40f.delay" title="A ray is a semantic interpretation of Eigen::ParametrizedLine which has an origin and a direction and...">Ray3D</a>, or <a class="el" href="classopen3d_1_1geometry_1_1_segment3_d.410.d" title="A segment is a semantic interpretation of Eigen::ParametrizedLine which has an origin and an endpoint...">Segment3D</a> classes directly. </p>
<p>Calculates the lower intersection parameter of a parameterized line with an axis aligned bounding box. The intersection point can be recovered with .Line().pointAt(...). If the line does not intersect the box the return value will be empty. Also note that if the AABB is behind the line's origin point, the value returned will still be of the lower intersection, which is the first intersection in the direction of the line, not the intersection closer to the origin.</p>
<p>This implementation is based off of Tavian Barnes' optimized branchless slab method. <a href="https://tavianator.com/2011/ray_box.html">https://tavianator.com/2011/ray_box.html</a>. It runs in roughly 5% of the time as the the naive exact method, but can degenerate in specific conditions where a line lies exactly in one of the AABB's planes. </p><div class="fragment"><div class="line"><span class="comment">// Intersection with a line</span></div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">IntersectionTest::LineSlabAABB</a>(Line3D{p, n}, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    ...</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Intersection with a ray</span></div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">IntersectionTest::LineSlabAABB</a>(Ray3D{p, n}, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    ...</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Intersection with a segment</span></div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">IntersectionTest::LineSlabAABB</a>(Segment3D{p0, p1}, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    ...</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Getting the intersection point</span></div>
<div class="line">Ray3D ray{p, n};</div>
<div class="line"><span class="keyword">auto</span> <a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a> = <a class="code" href="classopen3d_1_1geometry_1_1_intersection_tes#a39033dc2f6a34103c1e92e8231aeba72">IntersectionTest::LineSlabAABB</a>(ray, box);</div>
<div class="line"><span class="keywordflow">if</span> (<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.has_value()) {</div>
<div class="line">    <span class="comment">// the .Line() function retrieves the underlying Eigen object</span></div>
<div class="line">    ray.Line().pointAt(<a class="code" href="_vtk_utils_8cpp.html#a870625677394f032dc07ac7762fc6255">result</a>.value());</div>
<div class="line">}</div>
</div><!-- fragment --><dl class="section warning"><dt>Warning</dt><dd>A line that lies exactly in one of the AABB's planes within the double floating point precision will not intersect correctly by this method </dd></dl>

</div>
</div>
<a id="a382a239f1bbc6d40953fe07ead27250b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a382a239f1bbc6d40953fe07ead27250b">&#9670;&nbsp;</a></span>LinesMinimumDistance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::IntersectionTest::LinesMinimumDistance </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Computes the minimum distance between two lines. The first line is defined by 3D points <code>p0</code> and <code>p1</code>, the second line is defined by 3D points <code>q0</code> and <code>q1</code>. The returned distance is negative if no minimum distance can be computed. This implementation is based on the description of Paul Bourke (<a href="http://paulbourke.net/geometry/pointlineplane/">http://paulbourke.net/geometry/pointlineplane/</a>). </p>

</div>
</div>
<a id="a0aee63947b5b3dfa55fc0d2f2e23be7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aee63947b5b3dfa55fc0d2f2e23be7f">&#9670;&nbsp;</a></span>PointsCoplanar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::IntersectionTest::PointsCoplanar </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tests if the given four points all lie on the same plane. </p>

</div>
</div>
<a id="a259b7b605bd9fa961e61f8d17de824af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a259b7b605bd9fa961e61f8d17de824af">&#9670;&nbsp;</a></span>TriangleAABB()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::IntersectionTest::TriangleAABB </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>box_center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>box_half_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>vert0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>vert1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>vert2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2b1f5c2e01b94dd332f605e406d73a8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b1f5c2e01b94dd332f605e406d73a8e">&#9670;&nbsp;</a></span>TriangleTriangle3d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::IntersectionTest::TriangleTriangle3d </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>p2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>q2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_intersection_test_8h_source.html">IntersectionTest.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_intersection_test_8cpp.html">IntersectionTest.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_intersection_test.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:01 GMT -->
</html>
