<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_mesh_base.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:05 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::MeshBase Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::MeshBase Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>MeshBash Class.  
 <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_mesh_base_8h_source.html">MeshBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::MeshBase:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_mesh_base.62f.de" usemap="#open3d::geometry::MeshBase_map" alt=""/>
  <map id="open3d::geometry::MeshBase_map" name="open3d::geometry::MeshBase_map">
<area href="classopen3d_1_1geometry_1_1_geometry3_d.402" title="The base geometry class for 3D geometries." alt="open3d::geometry::Geometry3D" shape="rect" coords="257,56,504,80"/>
<area href="classopen3d_1_1geometry_1_1_geometry.400.del" title="The base geometry class." alt="open3d::geometry::Geometry" shape="rect" coords="257,0,504,24"/>
<area href="classopen3d_1_1geometry_1_1_half_edge_triang" title="HalfEdgeTriangleMesh inherits TriangleMesh class with the addition of HalfEdge data structure for eac..." alt="open3d::geometry::HalfEdgeTriangleMesh" shape="rect" coords="0,168,247,192"/>
<area href="classopen3d_1_1geometry_1_1_tetra_mesh.423.d" title="Tetra mesh contains vertices and tetrahedra represented by the indices to the vertices." alt="open3d::geometry::TetraMesh" shape="rect" coords="257,168,504,192"/>
<area href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices." alt="open3d::geometry::TriangleMesh" shape="rect" coords="514,168,761,192"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a84f9db88a4d0d23d755136ddfa7e6bd7"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a84f9db88a4d0d23d755136ddfa7e6bd7">SimplificationContraction</a> { <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a84f9db88a4d0d23d755136ddfa7e6bd7ab1897515d548a960afe49ecf66a29021">Average</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a84f9db88a4d0d23d755136ddfa7e6bd7add6dfa467092f93b67f60fb75476b794">Quadric</a>
 }</td></tr>
<tr class="memdesc:a84f9db88a4d0d23d755136ddfa7e6bd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates the method that is used for mesh simplification if multiple vertices are combined to a single one.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a84f9db88a4d0d23d755136ddfa7e6bd7">More...</a><br /></td></tr>
<tr class="separator:a84f9db88a4d0d23d755136ddfa7e6bd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63b2a09012544530c370e7a3828c89c"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89c">FilterScope</a> { <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89cab1c94ca2fbc3e78fc30069c8d0f01680">All</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89cacb5feb1b7314637725a2e73bdc9f7295">Color</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89ca960b44c579bc2f6818d2daaf9e4c16f0">Normal</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89cab22b929ba52471a02d18bb3a4e4472e6">Vertex</a>
 }</td></tr>
<tr class="memdesc:af63b2a09012544530c370e7a3828c89c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates the scope of filter operations.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89c">More...</a><br /></td></tr>
<tr class="separator:af63b2a09012544530c370e7a3828c89c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7e206d12e10f059ca530cd04c4d07a"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a6f7e206d12e10f059ca530cd04c4d07a">DeformAsRigidAsPossibleEnergy</a> { <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a6f7e206d12e10f059ca530cd04c4d07aa111552792d2df37209e4e9815a8524a8">Spokes</a>
, <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a6f7e206d12e10f059ca530cd04c4d07aac5d48c613aa395e2f92d06e97b85aa97">Smoothed</a>
 }</td></tr>
<tr class="separator:a6f7e206d12e10f059ca530cd04c4d07a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a69975c2b054d4fd12cf36866a030ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">More...</a><br /></td></tr>
<tr class="separator:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7f0a38e96630f55717dfd3392fe62aa4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a7f0a38e96630f55717dfd3392fe62aa4">MeshBase</a> ()</td></tr>
<tr class="memdesc:a7f0a38e96630f55717dfd3392fe62aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a7f0a38e96630f55717dfd3392fe62aa4">More...</a><br /></td></tr>
<tr class="separator:a7f0a38e96630f55717dfd3392fe62aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a719475a1bc584de3df7deeda89217eb5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a719475a1bc584de3df7deeda89217eb5">~MeshBase</a> () override</td></tr>
<tr class="separator:a719475a1bc584de3df7deeda89217eb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3f81cdfc14b1fe903f2d5c3bd3b9cd7"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ac3f81cdfc14b1fe903f2d5c3bd3b9cd7">Clear</a> () override</td></tr>
<tr class="memdesc:ac3f81cdfc14b1fe903f2d5c3bd3b9cd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear all elements in the geometry.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ac3f81cdfc14b1fe903f2d5c3bd3b9cd7">More...</a><br /></td></tr>
<tr class="separator:ac3f81cdfc14b1fe903f2d5c3bd3b9cd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0968a4f71bdbbc116850df571f80272c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a0968a4f71bdbbc116850df571f80272c">IsEmpty</a> () const override</td></tr>
<tr class="memdesc:a0968a4f71bdbbc116850df571f80272c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> iff the geometry is empty.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a0968a4f71bdbbc116850df571f80272c">More...</a><br /></td></tr>
<tr class="separator:a0968a4f71bdbbc116850df571f80272c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6c4c2ef12c0a5a4d50d7974cb779d06"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad6c4c2ef12c0a5a4d50d7974cb779d06">GetMinBound</a> () const override</td></tr>
<tr class="memdesc:ad6c4c2ef12c0a5a4d50d7974cb779d06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns min bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad6c4c2ef12c0a5a4d50d7974cb779d06">More...</a><br /></td></tr>
<tr class="separator:ad6c4c2ef12c0a5a4d50d7974cb779d06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36ceff192f28d34b1893bb592c535072"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a36ceff192f28d34b1893bb592c535072">GetMaxBound</a> () const override</td></tr>
<tr class="memdesc:a36ceff192f28d34b1893bb592c535072"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns max bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a36ceff192f28d34b1893bb592c535072">More...</a><br /></td></tr>
<tr class="separator:a36ceff192f28d34b1893bb592c535072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca7af34654077e96288094255aa10de5"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#aca7af34654077e96288094255aa10de5">GetCenter</a> () const override</td></tr>
<tr class="memdesc:aca7af34654077e96288094255aa10de5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the center of the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#aca7af34654077e96288094255aa10de5">More...</a><br /></td></tr>
<tr class="separator:aca7af34654077e96288094255aa10de5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81a7bcbb473ab0d382f8a604fe01da47"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a81a7bcbb473ab0d382f8a604fe01da47">GetAxisAlignedBoundingBox</a> () const override</td></tr>
<tr class="separator:a81a7bcbb473ab0d382f8a604fe01da47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf9583383d79c612d1396750f3ad190a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#adf9583383d79c612d1396750f3ad190a">GetOrientedBoundingBox</a> (bool robust=false) const override</td></tr>
<tr class="separator:adf9583383d79c612d1396750f3ad190a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b821b781c20c9d1e2d3fd586763626e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3b821b781c20c9d1e2d3fd586763626e">GetMinimalOrientedBoundingBox</a> (bool robust=false) const override</td></tr>
<tr class="separator:a3b821b781c20c9d1e2d3fd586763626e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a660867be2560d5690b6837dea7ccfac8"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a660867be2560d5690b6837dea7ccfac8">Transform</a> (const Eigen::Matrix4d &amp;transformation) override</td></tr>
<tr class="memdesc:a660867be2560d5690b6837dea7ccfac8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply transformation (4x4 matrix) to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a660867be2560d5690b6837dea7ccfac8">More...</a><br /></td></tr>
<tr class="separator:a660867be2560d5690b6837dea7ccfac8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa364e4164bb9dfd420732106a0046c3b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#aa364e4164bb9dfd420732106a0046c3b">Translate</a> (const Eigen::Vector3d &amp;translation, bool relative=true) override</td></tr>
<tr class="memdesc:aa364e4164bb9dfd420732106a0046c3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#aa364e4164bb9dfd420732106a0046c3b">More...</a><br /></td></tr>
<tr class="separator:aa364e4164bb9dfd420732106a0046c3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad300c61bbb35ea3b174b04f8eb5fa042"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad300c61bbb35ea3b174b04f8eb5fa042">Scale</a> (const double scale, const Eigen::Vector3d &amp;center) override</td></tr>
<tr class="memdesc:ad300c61bbb35ea3b174b04f8eb5fa042"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad300c61bbb35ea3b174b04f8eb5fa042">More...</a><br /></td></tr>
<tr class="separator:ad300c61bbb35ea3b174b04f8eb5fa042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa1a882c26e318cc9d03b688e91a4f0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3fa1a882c26e318cc9d03b688e91a4f0">Rotate</a> (const Eigen::Matrix3d &amp;R, const Eigen::Vector3d &amp;center) override</td></tr>
<tr class="memdesc:a3fa1a882c26e318cc9d03b688e91a4f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3fa1a882c26e318cc9d03b688e91a4f0">More...</a><br /></td></tr>
<tr class="separator:a3fa1a882c26e318cc9d03b688e91a4f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f2e94203dc3b39392b9266407e00aac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a5f2e94203dc3b39392b9266407e00aac">operator+=</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;mesh)</td></tr>
<tr class="separator:a5f2e94203dc3b39392b9266407e00aac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace2c246764d9cf09ccf582435570598a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ace2c246764d9cf09ccf582435570598a">operator+</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;mesh) const</td></tr>
<tr class="separator:ace2c246764d9cf09ccf582435570598a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7ee6962ded8a7de44d38f4e737fdad0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ab7ee6962ded8a7de44d38f4e737fdad0">HasVertices</a> () const</td></tr>
<tr class="memdesc:ab7ee6962ded8a7de44d38f4e737fdad0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>True</code> if the mesh contains vertices.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ab7ee6962ded8a7de44d38f4e737fdad0">More...</a><br /></td></tr>
<tr class="separator:ab7ee6962ded8a7de44d38f4e737fdad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e672e8e3eac58844656f81a1154b074"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3e672e8e3eac58844656f81a1154b074">HasVertexNormals</a> () const</td></tr>
<tr class="memdesc:a3e672e8e3eac58844656f81a1154b074"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>True</code> if the mesh contains vertex normals.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a3e672e8e3eac58844656f81a1154b074">More...</a><br /></td></tr>
<tr class="separator:a3e672e8e3eac58844656f81a1154b074"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77341c2d09a3a5bbab23e92b3df88400"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a77341c2d09a3a5bbab23e92b3df88400">HasVertexColors</a> () const</td></tr>
<tr class="memdesc:a77341c2d09a3a5bbab23e92b3df88400"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>True</code> if the mesh contains vertex colors.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a77341c2d09a3a5bbab23e92b3df88400">More...</a><br /></td></tr>
<tr class="separator:a77341c2d09a3a5bbab23e92b3df88400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0f5f6dc5af988b69c7d9f7ac4294bea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ab0f5f6dc5af988b69c7d9f7ac4294bea">NormalizeNormals</a> ()</td></tr>
<tr class="memdesc:ab0f5f6dc5af988b69c7d9f7ac4294bea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalize vertex normals to length 1.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ab0f5f6dc5af988b69c7d9f7ac4294bea">More...</a><br /></td></tr>
<tr class="separator:ab0f5f6dc5af988b69c7d9f7ac4294bea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a760c1f0ddd8fb5121309fbf5f439a881"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a760c1f0ddd8fb5121309fbf5f439a881">PaintUniformColor</a> (const Eigen::Vector3d &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>)</td></tr>
<tr class="memdesc:a760c1f0ddd8fb5121309fbf5f439a881"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns each vertex in the <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a> the same color.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a760c1f0ddd8fb5121309fbf5f439a881">More...</a><br /></td></tr>
<tr class="separator:a760c1f0ddd8fb5121309fbf5f439a881"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a818a84de36ef3b34f46ee1d5204684"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">TriangleMesh</a> &gt;, std::vector&lt; size_t &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a8a818a84de36ef3b34f46ee1d5204684">ComputeConvexHull</a> () const</td></tr>
<tr class="memdesc:a8a818a84de36ef3b34f46ee1d5204684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that computes the convex hull of the triangle mesh using qhull.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a8a818a84de36ef3b34f46ee1d5204684">More...</a><br /></td></tr>
<tr class="separator:a8a818a84de36ef3b34f46ee1d5204684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:a3bee61a0da428535d0eb9f62786fcab1 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a3bee61a0da428535d0eb9f62786fcab1">~Geometry3D</a> () override</td></tr>
<tr class="separator:a3bee61a0da428535d0eb9f62786fcab1 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2ab7fb19c0fc8f4ccbc9a776be2e23 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5c2ab7fb19c0fc8f4ccbc9a776be2e23">Rotate</a> (const Eigen::Matrix3d &amp;R)</td></tr>
<tr class="separator:a5c2ab7fb19c0fc8f4ccbc9a776be2e23 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a1c2eb5a3e6c0a47cc31e38d086d07c54">~Geometry</a> ()</td></tr>
<tr class="separator:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">More...</a><br /></td></tr>
<tr class="separator:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">Dimension</a> () const</td></tr>
<tr class="memdesc:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">More...</a><br /></td></tr>
<tr class="separator:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a7cba98e39c57eb2544eedfb525807a06">GetName</a> () const</td></tr>
<tr class="separator:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a4229d9bdaded622121f443cbb81626b8">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a004aeef2268433b07feb4ee32e560292"><td class="memItemLeft" align="right" valign="top">std::vector&lt; Eigen::Vector3d &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a004aeef2268433b07feb4ee32e560292">vertices_</a></td></tr>
<tr class="memdesc:a004aeef2268433b07feb4ee32e560292"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vertex coordinates.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a004aeef2268433b07feb4ee32e560292">More...</a><br /></td></tr>
<tr class="separator:a004aeef2268433b07feb4ee32e560292"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3d33d6cd75814858c797096c605fc55"><td class="memItemLeft" align="right" valign="top">std::vector&lt; Eigen::Vector3d &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad3d33d6cd75814858c797096c605fc55">vertex_normals_</a></td></tr>
<tr class="memdesc:ad3d33d6cd75814858c797096c605fc55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vertex normals.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#ad3d33d6cd75814858c797096c605fc55">More...</a><br /></td></tr>
<tr class="separator:ad3d33d6cd75814858c797096c605fc55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41ab85a9c0d063d22ddbe058daa86751"><td class="memItemLeft" align="right" valign="top">std::vector&lt; Eigen::Vector3d &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a41ab85a9c0d063d22ddbe058daa86751">vertex_colors_</a></td></tr>
<tr class="memdesc:a41ab85a9c0d063d22ddbe058daa86751"><td class="mdescLeft">&#160;</td><td class="mdescRight">RGB colors of vertices.  <a href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a41ab85a9c0d063d22ddbe058daa86751">More...</a><br /></td></tr>
<tr class="separator:a41ab85a9c0d063d22ddbe058daa86751"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a07940523af0c82dff28ca957845b1088"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a07940523af0c82dff28ca957845b1088">MeshBase</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">Geometry::GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="separator:a07940523af0c82dff28ca957845b1088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5267f51298df2bf8a85eba695396c7ad"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a5267f51298df2bf8a85eba695396c7ad">MeshBase</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">Geometry::GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, const std::vector&lt; Eigen::Vector3d &gt; &amp;vertices)</td></tr>
<tr class="separator:a5267f51298df2bf8a85eba695396c7ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">Geometry3D</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">More...</a><br /></td></tr>
<tr class="separator:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">ComputeMinBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute min bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">More...</a><br /></td></tr>
<tr class="separator:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">ComputeMaxBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute max bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">More...</a><br /></td></tr>
<tr class="separator:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">ComputeCenter</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computer center of a list of points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">More...</a><br /></td></tr>
<tr class="separator:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">ResizeAndPaintUniformColor</a> (std::vector&lt; Eigen::Vector3d &gt; &amp;colors, const size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const Eigen::Vector3d &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>) const</td></tr>
<tr class="memdesc:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resizes the colors vector and paints a uniform color.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">More...</a><br /></td></tr>
<tr class="separator:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">TransformPoints</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all points with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">More...</a><br /></td></tr>
<tr class="separator:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">TransformNormals</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the normals with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">More...</a><br /></td></tr>
<tr class="separator:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">TransformCovariances</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all covariance matrices with the transformation.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">More...</a><br /></td></tr>
<tr class="separator:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">TranslatePoints</a> (const Eigen::Vector3d &amp;translation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, bool relative) const</td></tr>
<tr class="memdesc:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">More...</a><br /></td></tr>
<tr class="separator:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">ScalePoints</a> (const double scale, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the coordinates of all points by the scaling factor <code>scale</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">More...</a><br /></td></tr>
<tr class="separator:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">RotatePoints</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all points with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">More...</a><br /></td></tr>
<tr class="separator:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">RotateNormals</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all normals with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">More...</a><br /></td></tr>
<tr class="separator:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">RotateCovariances</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all covariance matrices with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">More...</a><br /></td></tr>
<tr class="separator:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">Geometry</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">More...</a><br /></td></tr>
<tr class="separator:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">GetRotationMatrixFromXYZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XYZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">More...</a><br /></td></tr>
<tr class="separator:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">GetRotationMatrixFromYZX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YZX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">More...</a><br /></td></tr>
<tr class="separator:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">GetRotationMatrixFromZXY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZXY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">More...</a><br /></td></tr>
<tr class="separator:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">GetRotationMatrixFromXZY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XZY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">More...</a><br /></td></tr>
<tr class="separator:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">GetRotationMatrixFromZYX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZYX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">More...</a><br /></td></tr>
<tr class="separator:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">GetRotationMatrixFromYXZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YXZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">More...</a><br /></td></tr>
<tr class="separator:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">GetRotationMatrixFromAxisAngle</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from AxisAngle RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">More...</a><br /></td></tr>
<tr class="separator:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">GetRotationMatrixFromQuaternion</a> (const Eigen::Vector4d &amp;rotation)</td></tr>
<tr class="memdesc:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from Quaternion.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">More...</a><br /></td></tr>
<tr class="separator:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>MeshBash Class. </p>
<p>Triangle mesh contains vertices. Optionally, the mesh may also contain vertex normals and vertex colors. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a6f7e206d12e10f059ca530cd04c4d07a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f7e206d12e10f059ca530cd04c4d07a">&#9670;&nbsp;</a></span>DeformAsRigidAsPossibleEnergy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a6f7e206d12e10f059ca530cd04c4d07a">open3d::geometry::MeshBase::DeformAsRigidAsPossibleEnergy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Energy model that is minimized in the DeformAsRigidAsPossible method. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Spokes</td><td>is the original energy as formulated in Sorkine and Alexa, "As-Rigid-As-Possible Surface Modeling", 2007. </td></tr>
    <tr><td class="paramname">Smoothed</td><td>adds a rotation smoothing term to the rotations. </td></tr>
  </table>
  </dd>
</dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a6f7e206d12e10f059ca530cd04c4d07aa111552792d2df37209e4e9815a8524a8"></a>Spokes&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6f7e206d12e10f059ca530cd04c4d07aac5d48c613aa395e2f92d06e97b85aa97"></a>Smoothed&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="af63b2a09012544530c370e7a3828c89c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af63b2a09012544530c370e7a3828c89c">&#9670;&nbsp;</a></span>FilterScope</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#af63b2a09012544530c370e7a3828c89c">open3d::geometry::MeshBase::FilterScope</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Indicates the scope of filter operations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">All</td><td>indicates that all properties (color, normal, vertex position) are filtered. </td></tr>
    <tr><td class="paramname">Color</td><td>indicates that only the colors are filtered. </td></tr>
    <tr><td class="paramname">Normal</td><td>indicates that only the normals are filtered. </td></tr>
    <tr><td class="paramname">Vertex</td><td>indicates that only the vertex positions are filtered. </td></tr>
  </table>
  </dd>
</dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="af63b2a09012544530c370e7a3828c89cab1c94ca2fbc3e78fc30069c8d0f01680"></a>All&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="af63b2a09012544530c370e7a3828c89cacb5feb1b7314637725a2e73bdc9f7295"></a>Color&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="af63b2a09012544530c370e7a3828c89ca960b44c579bc2f6818d2daaf9e4c16f0"></a>Normal&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="af63b2a09012544530c370e7a3828c89cab22b929ba52471a02d18bb3a4e4472e6"></a>Vertex&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a84f9db88a4d0d23d755136ddfa7e6bd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84f9db88a4d0d23d755136ddfa7e6bd7">&#9670;&nbsp;</a></span>SimplificationContraction</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de#a84f9db88a4d0d23d755136ddfa7e6bd7">open3d::geometry::MeshBase::SimplificationContraction</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Indicates the method that is used for mesh simplification if multiple vertices are combined to a single one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Average</td><td>indicates that the average position is computed as output. </td></tr>
    <tr><td class="paramname"><a class="el" href="classopen3d_1_1geometry_1_1_quadric.424.dela">Quadric</a></td><td>indicates that the distance to the adjacent triangle planes is minimized. Cf. "Simplifying Surfaces with Color and Texture
using Quadric Error Metrics" by Garland and Heckbert. </td></tr>
  </table>
  </dd>
</dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a84f9db88a4d0d23d755136ddfa7e6bd7ab1897515d548a960afe49ecf66a29021"></a>Average&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a84f9db88a4d0d23d755136ddfa7e6bd7add6dfa467092f93b67f60fb75476b794"></a>Quadric&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a7f0a38e96630f55717dfd3392fe62aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f0a38e96630f55717dfd3392fe62aa4">&#9670;&nbsp;</a></span>MeshBase() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::MeshBase::MeshBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Constructor. </p>

</div>
</div>
<a id="a719475a1bc584de3df7deeda89217eb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a719475a1bc584de3df7deeda89217eb5">&#9670;&nbsp;</a></span>~MeshBase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::MeshBase::~MeshBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a07940523af0c82dff28ca957845b1088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07940523af0c82dff28ca957845b1088">&#9670;&nbsp;</a></span>MeshBase() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::MeshBase::MeshBase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">Geometry::GeometryType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5267f51298df2bf8a85eba695396c7ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5267f51298df2bf8a85eba695396c7ad">&#9670;&nbsp;</a></span>MeshBase() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::MeshBase::MeshBase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">Geometry::GeometryType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>vertices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac3f81cdfc14b1fe903f2d5c3bd3b9cd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3f81cdfc14b1fe903f2d5c3bd3b9cd7">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp; open3d::geometry::MeshBase::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all elements in the geometry. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5d18d746cde60c2e79cd6109c505ea22">open3d::geometry::Geometry3D</a>.</p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40#a4ea92820de31c1fcbf62e5c6d9516540">open3d::geometry::TriangleMesh</a>, <a class="el" href="classopen3d_1_1geometry_1_1_tetra_mesh.423.d#afe4d02411d4ea06cc631232d502042b0">open3d::geometry::TetraMesh</a>, and <a class="el" href="classopen3d_1_1geometry_1_1_half_edge_triang#a963af08512c743cc9deb660280e9322e">open3d::geometry::HalfEdgeTriangleMesh</a>.</p>

</div>
</div>
<a id="a8a818a84de36ef3b34f46ee1d5204684"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a818a84de36ef3b34f46ee1d5204684">&#9670;&nbsp;</a></span>ComputeConvexHull()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">TriangleMesh</a> &gt;, std::vector&lt; size_t &gt; &gt; open3d::geometry::MeshBase::ComputeConvexHull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function that computes the convex hull of the triangle mesh using qhull. </p>

</div>
</div>
<a id="a81a7bcbb473ab0d382f8a604fe01da47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81a7bcbb473ab0d382f8a604fe01da47">&#9670;&nbsp;</a></span>GetAxisAlignedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> open3d::geometry::MeshBase::GetAxisAlignedBoundingBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates the axis-aligned bounding box around the vertices of the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#aa697d6ef976789d57c6d8f57711919dc">AxisAlignedBoundingBox::CreateFromPoints()</a> </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a6adfe40c8c59be751e3079a2a5cba874">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="aca7af34654077e96288094255aa10de5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca7af34654077e96288094255aa10de5">&#9670;&nbsp;</a></span>GetCenter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::MeshBase::GetCenter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the center of the geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a32d884b24e1a680bf2adecd713182ffb">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a36ceff192f28d34b1893bb592c535072"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36ceff192f28d34b1893bb592c535072">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::MeshBase::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns max bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4ba1483835f630921a290c36d0dc0528">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ad6c4c2ef12c0a5a4d50d7974cb779d06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6c4c2ef12c0a5a4d50d7974cb779d06">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::MeshBase::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns min bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5ce0c9ab3b7c4addc07732e69ea0d48d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a3b821b781c20c9d1e2d3fd586763626e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b821b781c20c9d1e2d3fd586763626e">&#9670;&nbsp;</a></span>GetMinimalOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::MeshBase::GetMinimalOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates the minimal oriented bounding box around the vertices of the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a00bf997d31d1b43449f89b509ac03f72">OrientedBoundingBox::CreateFromPointsMinimal()</a> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">robust</td><td>If set to true uses a more robust method which works in degenerate cases but introduces noise to the points coordinates. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a371b43251251c0873ca427b8dcb5f309">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="adf9583383d79c612d1396750f3ad190a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf9583383d79c612d1396750f3ad190a">&#9670;&nbsp;</a></span>GetOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::MeshBase::GetOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an oriented bounding box around the vertices of the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin#a699fea43ea3dc4e828492e091fc98ba2">OrientedBoundingBox::CreateFromPoints()</a> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">robust</td><td>If set to true uses a more robust method which works in degenerate cases but introduces noise to the points coordinates. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa390b8742e15d903bf394cc3b7518d08">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a77341c2d09a3a5bbab23e92b3df88400"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77341c2d09a3a5bbab23e92b3df88400">&#9670;&nbsp;</a></span>HasVertexColors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::MeshBase::HasVertexColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>True</code> if the mesh contains vertex colors. </p>

</div>
</div>
<a id="a3e672e8e3eac58844656f81a1154b074"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e672e8e3eac58844656f81a1154b074">&#9670;&nbsp;</a></span>HasVertexNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::MeshBase::HasVertexNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>True</code> if the mesh contains vertex normals. </p>

</div>
</div>
<a id="ab7ee6962ded8a7de44d38f4e737fdad0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7ee6962ded8a7de44d38f4e737fdad0">&#9670;&nbsp;</a></span>HasVertices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::MeshBase::HasVertices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>True</code> if the mesh contains vertices. </p>

</div>
</div>
<a id="a0968a4f71bdbbc116850df571f80272c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0968a4f71bdbbc116850df571f80272c">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::MeshBase::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> iff the geometry is empty. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5cece4be56baea48a365ab22f88f89ea">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ab0f5f6dc5af988b69c7d9f7ac4294bea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0f5f6dc5af988b69c7d9f7ac4294bea">&#9670;&nbsp;</a></span>NormalizeNormals()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a>&amp; open3d::geometry::MeshBase::NormalizeNormals </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Normalize vertex normals to length 1. </p>

</div>
</div>
<a id="ace2c246764d9cf09ccf582435570598a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace2c246764d9cf09ccf582435570598a">&#9670;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> open3d::geometry::MeshBase::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5f2e94203dc3b39392b9266407e00aac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f2e94203dc3b39392b9266407e00aac">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp; open3d::geometry::MeshBase::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a760c1f0ddd8fb5121309fbf5f439a881"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a760c1f0ddd8fb5121309fbf5f439a881">&#9670;&nbsp;</a></span>PaintUniformColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a>&amp; open3d::geometry::MeshBase::PaintUniformColor </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assigns each vertex in the <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a> the same color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">color</td><td>RGB colors of vertices. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3fa1a882c26e318cc9d03b688e91a4f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fa1a882c26e318cc9d03b688e91a4f0">&#9670;&nbsp;</a></span>Rotate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp; open3d::geometry::MeshBase::Rotate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix </td></tr>
    <tr><td class="paramname">center</td><td>Rotation center that is used for the rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aab4555d0b3e65d35450a2ec57a14ff4d">open3d::geometry::Geometry3D</a>.</p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40#a039c1d00b33423cb5371d6ba157557a1">open3d::geometry::TriangleMesh</a>.</p>

</div>
</div>
<a id="ad300c61bbb35ea3b174b04f8eb5fa042"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad300c61bbb35ea3b174b04f8eb5fa042">&#9670;&nbsp;</a></span>Scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp; open3d::geometry::MeshBase::Scale </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>The scale parameter that is multiplied to the points/vertices of the geometry. </td></tr>
    <tr><td class="paramname">center</td><td>Scale center that is used to resize the geometry. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a54876d016ceed8e4885dc25b22fa176e">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a660867be2560d5690b6837dea7ccfac8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a660867be2560d5690b6837dea7ccfac8">&#9670;&nbsp;</a></span>Transform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp; open3d::geometry::MeshBase::Transform </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply transformation (4x4 matrix) to the geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab99e2171cafbe1039aaebd76d178db0d">open3d::geometry::Geometry3D</a>.</p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40#a76a6954168e7b35c70cdcd0f98086783">open3d::geometry::TriangleMesh</a>.</p>

</div>
</div>
<a id="aa364e4164bb9dfd420732106a0046c3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa364e4164bb9dfd420732106a0046c3b">&#9670;&nbsp;</a></span>Translate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_mesh_base.412.de">MeshBase</a> &amp; open3d::geometry::MeshBase::Translate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply translation to the geometry coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">translation</td><td>A 3D vector to transform the geometry. </td></tr>
    <tr><td class="paramname">relative</td><td>If <code>true</code>, the <code>translation</code> is directly applied to the geometry. Otherwise, the geometry center is moved to the <code>translation</code>. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a167e8cb72ba68af89c6f418d59dc8bfd">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a41ab85a9c0d063d22ddbe058daa86751"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41ab85a9c0d063d22ddbe058daa86751">&#9670;&nbsp;</a></span>vertex_colors_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;Eigen::Vector3d&gt; open3d::geometry::MeshBase::vertex_colors_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>RGB colors of vertices. </p>

</div>
</div>
<a id="ad3d33d6cd75814858c797096c605fc55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3d33d6cd75814858c797096c605fc55">&#9670;&nbsp;</a></span>vertex_normals_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;Eigen::Vector3d&gt; open3d::geometry::MeshBase::vertex_normals_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Vertex normals. </p>

</div>
</div>
<a id="a004aeef2268433b07feb4ee32e560292"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a004aeef2268433b07feb4ee32e560292">&#9670;&nbsp;</a></span>vertices_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;Eigen::Vector3d&gt; open3d::geometry::MeshBase::vertices_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Vertex coordinates. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_mesh_base_8h_source.html">MeshBase.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_mesh_base_8cpp.html">MeshBase.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_mesh_base.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:06 GMT -->
</html>
