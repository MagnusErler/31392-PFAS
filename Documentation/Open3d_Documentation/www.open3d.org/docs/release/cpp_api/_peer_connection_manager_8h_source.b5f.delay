<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_peer_connection_manager_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:47 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/visualization/webrtc_server/PeerConnectionManager.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_24afd032cc75c1c3607b086ffced3f32.4b6.del">visualization</a></li><li class="navelem"><a class="el" href="dir_2641aa47251edb57d3489eb146c72216.84d.del">webrtc_server</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">PeerConnectionManager.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_peer_connection_manager_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">// Contains source code from</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// https://github.com/mpromonet/webrtc-streamer</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// This software is in the public domain, furnished &quot;as is&quot;, without technical</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// support, and with no warranty, express or implied, as to its usefulness for</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// any purpose.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">// This is a private header. It shall be hidden from Open3D&#39;s public API. Do not</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// put this in Open3D.h.in.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;api/peer_connection_interface.h&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;rtc_base/strings/json.h&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;future&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;regex&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_bitmap_track_source_8h.html">open3d/visualization/webrtc_server/BitmapTrackSource.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_http_server_request_handler_8h.html">open3d/visualization/webrtc_server/HttpServerRequestHandler.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_web_r_t_c_window_system_8h.html">open3d/visualization/webrtc_server/WebRTCWindowSystem.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>visualization {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>webrtc_server {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7">   73</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7">PeerConnectionManager</a> {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">class </span>VideoSink : <span class="keyword">public</span> rtc::VideoSinkInterface&lt;webrtc::VideoFrame&gt; {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        VideoSink(webrtc::VideoTrackInterface* track) : track_(track) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            track_-&gt;AddOrUpdateSink(<span class="keyword">this</span>, rtc::VideoSinkWants());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">virtual</span> ~VideoSink() { track_-&gt;RemoveSink(<span class="keyword">this</span>); }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// VideoSinkInterface implementation</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a81734e3949f1ec94df6a59032ab519ea">OnFrame</a>(<span class="keyword">const</span> webrtc::VideoFrame&amp; video_frame) {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            rtc::scoped_refptr&lt;webrtc::I420BufferInterface&gt; buffer(</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    video_frame.video_frame_buffer()-&gt;ToI420());</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">utility::LogDebug</a>(<span class="stringliteral">&quot;[{}] frame: {}x{}&quot;</span>, <a class="code" href="_macro_8h.html#aa8ee2e09b5e5907d333f4ac50ba81465">OPEN3D_FUNCTION</a>,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                              buffer-&gt;height(), buffer-&gt;width());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        rtc::scoped_refptr&lt;webrtc::VideoTrackInterface&gt; track_;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    };</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">class </span>SetSessionDescriptionObserver</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        : <span class="keyword">public</span> webrtc::SetSessionDescriptionObserver {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">static</span> SetSessionDescriptionObserver* Create(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                webrtc::PeerConnectionInterface* pc,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                std::promise&lt;const webrtc::SessionDescriptionInterface*&gt;&amp;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        promise) {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> rtc::RefCountedObject&lt;SetSessionDescriptionObserver&gt;(</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    pc, promise);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSuccess() {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            std::string sdp;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">if</span> (pc_-&gt;local_description()) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                promise_.set_value(pc_-&gt;local_description());</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                pc_-&gt;local_description()-&gt;ToString(&amp;sdp);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (pc_-&gt;remote_description()) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                promise_.set_value(pc_-&gt;remote_description());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                pc_-&gt;remote_description()-&gt;ToString(&amp;sdp);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnFailure(webrtc::RTCError error) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <a class="code" href="_logging_8h.html#a2c6c3e9c356e14fb4a7139acf4fa7b18">utility::LogWarning</a>(<span class="stringliteral">&quot;{}&quot;</span>, error.message());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            promise_.set_value(<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        SetSessionDescriptionObserver(</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                webrtc::PeerConnectionInterface* pc,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                std::promise&lt;const webrtc::SessionDescriptionInterface*&gt;&amp;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        promise)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            : pc_(pc), promise_(promise){};</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        webrtc::PeerConnectionInterface* pc_;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        std::promise&lt;const webrtc::SessionDescriptionInterface*&gt;&amp; promise_;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    };</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">class </span>CreateSessionDescriptionObserver</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        : <span class="keyword">public</span> webrtc::CreateSessionDescriptionObserver {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">static</span> CreateSessionDescriptionObserver* Create(</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                webrtc::PeerConnectionInterface* pc,</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                std::promise&lt;const webrtc::SessionDescriptionInterface*&gt;&amp;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        promise) {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> rtc::RefCountedObject&lt;CreateSessionDescriptionObserver&gt;(</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    pc, promise);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSuccess(webrtc::SessionDescriptionInterface* desc) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            std::string sdp;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            desc-&gt;ToString(&amp;sdp);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            pc_-&gt;SetLocalDescription(</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    SetSessionDescriptionObserver::Create(pc_, promise_), desc);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnFailure(webrtc::RTCError error) {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <a class="code" href="_logging_8h.html#a2c6c3e9c356e14fb4a7139acf4fa7b18">utility::LogWarning</a>(<span class="stringliteral">&quot;{}&quot;</span>, error.message());</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            promise_.set_value(<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        CreateSessionDescriptionObserver(</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                webrtc::PeerConnectionInterface* pc,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                std::promise&lt;const webrtc::SessionDescriptionInterface*&gt;&amp;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        promise)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            : pc_(pc), promise_(promise){};</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        webrtc::PeerConnectionInterface* pc_;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        std::promise&lt;const webrtc::SessionDescriptionInterface*&gt;&amp; promise_;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    };</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">class </span>PeerConnectionStatsCollectorCallback</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        : <span class="keyword">public</span> webrtc::RTCStatsCollectorCallback {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        PeerConnectionStatsCollectorCallback() {}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordtype">void</span> clearReport() { report_.clear(); }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        Json::Value getReport() { <span class="keywordflow">return</span> report_; }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnStatsDelivered(</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> rtc::scoped_refptr&lt;const webrtc::RTCStatsReport&gt;&amp;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        report) {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> webrtc::RTCStats&amp; stats : *report) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                Json::Value stats_members;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">const</span> webrtc::RTCStatsMemberInterface* member :</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                     stats.Members()) {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    stats_members[member-&gt;name()] = member-&gt;ValueToString();</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                report_[stats.id()] = stats_members;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        Json::Value report_;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    };</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">class </span>DataChannelObserver : <span class="keyword">public</span> webrtc::DataChannelObserver {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        DataChannelObserver(</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7">PeerConnectionManager</a>* peer_connection_manager,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                rtc::scoped_refptr&lt;webrtc::DataChannelInterface&gt; data_channel,</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> std::string&amp; peerid)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            : peer_connection_manager_(peer_connection_manager),</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;              data_channel_(data_channel),</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;              peerid_(peerid) {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            data_channel_-&gt;RegisterObserver(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">virtual</span> ~DataChannelObserver() { data_channel_-&gt;UnregisterObserver(); }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="comment">// DataChannelObserver interface</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnStateChange() {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="comment">// Useful to know when the data channel is established.</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keyword">const</span> std::string label = data_channel_-&gt;label();</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keyword">const</span> std::string state =</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    webrtc::DataChannelInterface::DataStateString(</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                            data_channel_-&gt;state());</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <a class="code" href="_logging_8h.html#a57eb3ffc98e6ad1bdbed0a980a54c484">utility::LogInfo</a>(</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    <span class="stringliteral">&quot;DataChannelObserver::OnStateChange label: {}, state: {}, &quot;</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="stringliteral">&quot;peerid: {}&quot;</span>,</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    label, state, peerid_);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            std::string msg(label + <span class="stringliteral">&quot; &quot;</span> + state);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            webrtc::DataBuffer buffer(msg);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            data_channel_-&gt;Send(buffer);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="comment">// ClientDataChannel is established after ServerDataChannel. Once</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="comment">// ClientDataChannel is established, we need to send initial frames</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// to the client such that the video is not empty. Afterwards,</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// video frames will only be sent when the GUI redraws.</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordflow">if</span> (label == <span class="stringliteral">&quot;ClientDataChannel&quot;</span> &amp;&amp; state == <span class="stringliteral">&quot;open&quot;</span>) {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    std::lock_guard&lt;std::mutex&gt; mutex_lock(</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                            peer_connection_manager_</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                    -&gt;<a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a1c06d9ab9a02fe9180458fc26aa0a18a">peerid_data_channel_mutex_</a>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    peer_connection_manager_-&gt;peerid_data_channel_ready_.insert(</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                            peerid_);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                peer_connection_manager_-&gt;SendInitFramesToPeer(peerid_);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">if</span> (label == <span class="stringliteral">&quot;ClientDataChannel&quot;</span> &amp;&amp;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                (state == <span class="stringliteral">&quot;closed&quot;</span> || state == <span class="stringliteral">&quot;closing&quot;</span>)) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                std::lock_guard&lt;std::mutex&gt; mutex_lock(</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        peer_connection_manager_-&gt;peerid_data_channel_mutex_);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                peer_connection_manager_-&gt;peerid_data_channel_ready_.erase(</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        peerid_);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnMessage(<span class="keyword">const</span> webrtc::DataBuffer&amp; buffer) {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            std::string msg((<span class="keyword">const</span> <span class="keywordtype">char</span>*)buffer.data.data(),</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            buffer.data.size());</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <a class="code" href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">utility::LogDebug</a>(<span class="stringliteral">&quot;DataChannelObserver::OnMessage: {}, msg: {}.&quot;</span>,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                              data_channel_-&gt;label(), msg);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            std::string reply =</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-10#a6ead48c1116aef40d66f4dcbf195c63f">WebRTCWindowSystem::GetInstance</a>()-&gt;OnDataChannelMessage(</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                            msg);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">if</span> (!reply.empty()) {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                webrtc::DataBuffer buffer(reply);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                data_channel_-&gt;Send(buffer);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7">PeerConnectionManager</a>* peer_connection_manager_;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        rtc::scoped_refptr&lt;webrtc::DataChannelInterface&gt; data_channel_;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keyword">const</span> std::string peerid_;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    };</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">class </span>PeerConnectionObserver : <span class="keyword">public</span> webrtc::PeerConnectionObserver {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        PeerConnectionObserver(</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7">PeerConnectionManager</a>* peer_connection_manager,</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keyword">const</span> std::string&amp; peerid,</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keyword">const</span> webrtc::PeerConnectionInterface::RTCConfiguration&amp; config,</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                std::unique_ptr&lt;cricket::PortAllocator&gt; port_allocator)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            : peer_connection_manager_(peer_connection_manager),</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;              peerid_(peerid),</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;              local_channel_(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;              remote_channel_(<span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;              ice_candidate_list_(Json::arrayValue),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;              deleting_(<span class="keyword">false</span>) {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            pc_ = peer_connection_manager_-&gt;peer_connection_factory_</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                          -&gt;CreatePeerConnection(config,</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                                 std::move(port_allocator),</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                 <span class="keyword">nullptr</span>, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">if</span> (pc_.get()) {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                rtc::scoped_refptr&lt;webrtc::DataChannelInterface&gt; channel =</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        pc_-&gt;CreateDataChannel(<span class="stringliteral">&quot;ServerDataChannel&quot;</span>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                local_channel_ = <span class="keyword">new</span> DataChannelObserver(</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        peer_connection_manager_, channel, peerid_);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            stats_callback_ = <span class="keyword">new</span> rtc::RefCountedObject&lt;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    PeerConnectionStatsCollectorCallback&gt;();</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        };</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keyword">virtual</span> ~PeerConnectionObserver() {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keyword">delete</span> local_channel_;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">delete</span> remote_channel_;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">if</span> (pc_.get()) {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="comment">// warning: pc-&gt;close call OnIceConnectionChange</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                deleting_ = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                pc_-&gt;Close();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6ca0b42beb6bbb8f059c9d55e8a92926">GetIceCandidateList</a>() { <span class="keywordflow">return</span> ice_candidate_list_; }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        Json::Value GetStats() {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            stats_callback_-&gt;clearReport();</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            pc_-&gt;GetStats(stats_callback_);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordtype">int</span> <a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a> = 10;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">while</span> ((stats_callback_-&gt;getReport().empty()) &amp;&amp; (--<a class="code" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a> &gt; 0)) {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                std::this_thread::sleep_for(std::chrono::milliseconds(1000));</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">return</span> Json::Value(stats_callback_-&gt;getReport());</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        };</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        rtc::scoped_refptr&lt;webrtc::PeerConnectionInterface&gt;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ab6d9b7fd46ca3abf1d48cb603a346088">GetPeerConnection</a>() {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordflow">return</span> pc_;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        };</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="comment">// PeerConnectionObserver interface</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnAddStream(</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                rtc::scoped_refptr&lt;webrtc::MediaStreamInterface&gt; stream) {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <a class="code" href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">utility::LogDebug</a>(<span class="stringliteral">&quot;[{}] GetVideoTracks().size(): {}.&quot;</span>,</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                              <a class="code" href="_macro_8h.html#aa8ee2e09b5e5907d333f4ac50ba81465">OPEN3D_FUNCTION</a>, stream-&gt;GetVideoTracks().size());</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            webrtc::VideoTrackVector videoTracks = stream-&gt;GetVideoTracks();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">if</span> (videoTracks.size() &gt; 0) {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                video_sink_.reset(<span class="keyword">new</span> VideoSink(videoTracks.at(0)));</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnRemoveStream(</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                rtc::scoped_refptr&lt;webrtc::MediaStreamInterface&gt; stream) {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            video_sink_.reset();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        }</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnDataChannel(</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                rtc::scoped_refptr&lt;webrtc::DataChannelInterface&gt; channel) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <a class="code" href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">utility::LogDebug</a>(</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="stringliteral">&quot;PeerConnectionObserver::OnDataChannel peerid: {}&quot;</span>,</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    peerid_);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            remote_channel_ = <span class="keyword">new</span> DataChannelObserver(peer_connection_manager_,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                      channel, peerid_);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnRenegotiationNeeded() {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            std::lock_guard&lt;std::mutex&gt; mutex_lock(</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    peer_connection_manager_-&gt;peerid_data_channel_mutex_);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            peer_connection_manager_-&gt;peerid_data_channel_ready_.erase(peerid_);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <a class="code" href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">utility::LogDebug</a>(</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    <span class="stringliteral">&quot;PeerConnectionObserver::OnRenegotiationNeeded peerid: {}&quot;</span>,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    peerid_);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnIceCandidate(</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                <span class="keyword">const</span> webrtc::IceCandidateInterface* candidate);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSignalingChange(</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                webrtc::PeerConnectionInterface::SignalingState state) {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <a class="code" href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">utility::LogDebug</a>(<span class="stringliteral">&quot;state: {}, peerid: {}&quot;</span>, state, peerid_);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnIceConnectionChange(</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                webrtc::PeerConnectionInterface::IceConnectionState state) {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">if</span> ((state ==</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                 webrtc::PeerConnectionInterface::kIceConnectionFailed) ||</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                (state ==</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                 webrtc::PeerConnectionInterface::kIceConnectionClosed)) {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                ice_candidate_list_.clear();</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">if</span> (!deleting_) {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    std::thread([<span class="keyword">this</span>]() {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                        peer_connection_manager_-&gt;HangUp(peerid_);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    }).detach();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnIceGatheringChange(</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                webrtc::PeerConnectionInterface::IceGatheringState) {}</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7">PeerConnectionManager</a>* peer_connection_manager_;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">const</span> std::string peerid_;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        rtc::scoped_refptr&lt;webrtc::PeerConnectionInterface&gt; pc_;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        DataChannelObserver* local_channel_;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        DataChannelObserver* remote_channel_;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        Json::Value ice_candidate_list_;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        rtc::scoped_refptr&lt;PeerConnectionStatsCollectorCallback&gt;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                stats_callback_;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        std::unique_ptr&lt;VideoSink&gt; video_sink_;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordtype">bool</span> deleting_;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    };</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a0d27dd70d291d761fcd37d3c369beb50">PeerConnectionManager</a>(<span class="keyword">const</span> std::list&lt;std::string&gt;&amp; ice_server_list,</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                          <span class="keyword">const</span> Json::Value&amp; config,</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                          <span class="keyword">const</span> std::string&amp; publish_filter,</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                          <span class="keyword">const</span> std::string&amp; webrtc_udp_port_range);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a30b150c203c35039364ce008bcde52f9">~PeerConnectionManager</a>();</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a646bdb4d9accfd80b5e90e29685c85a1">InitializePeerConnection</a>();</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, HttpServerRequestHandler::HttpFunction&gt;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a8feb9565a278354ad921764fb4a52d54">GetHttpApi</a>();</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6ca0b42beb6bbb8f059c9d55e8a92926">GetIceCandidateList</a>(<span class="keyword">const</span> std::string&amp; peerid);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a12531c10889782f267f28f59ff79b540">AddIceCandidate</a>(<span class="keyword">const</span> std::string&amp; peerid,</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                      <span class="keyword">const</span> Json::Value&amp; json_message);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a7b19130f4b277e458ec8907b9713686a">GetMediaList</a>();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6e151280fbb2ec5784a7cfd7adb03369">HangUp</a>(<span class="keyword">const</span> std::string&amp; peerid);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a5ff6a0794f6203d8a5e73ca07b56986f">Call</a>(<span class="keyword">const</span> std::string&amp; peerid,</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                           <span class="keyword">const</span> std::string&amp; window_uid,</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                           <span class="keyword">const</span> std::string&amp; options,</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                           <span class="keyword">const</span> Json::Value&amp; json_message);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a8c3733a0dbcf10b5f327d8c547a51f64">GetIceServers</a>();</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a684722fb9b78a553c119604da3993e63">SendInitFramesToPeer</a>(<span class="keyword">const</span> std::string&amp; peerid);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ab675115f60c67684698116bfbd122a13">CloseWindowConnections</a>(<span class="keyword">const</span> std::string&amp; window_uid);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a81734e3949f1ec94df6a59032ab519ea">OnFrame</a>(<span class="keyword">const</span> std::string&amp; window_uid,</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                 <span class="keyword">const</span> std::shared_ptr&lt;core::Tensor&gt;&amp; im);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    rtc::scoped_refptr&lt;BitmapTrackSourceInterface&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#abe3458943cf1c49c763e7e2124ed6d83">GetVideoTrackSource</a>(</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="keyword">const</span> std::string&amp; window_uid);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    PeerConnectionObserver* <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a2cde2efbffc4e4adebe73dd735303d61">CreatePeerConnection</a>(<span class="keyword">const</span> std::string&amp; peerid);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#abe46ba622bb3e8545304a2a319459b56">AddStreams</a>(webrtc::PeerConnectionInterface* peer_connection,</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    <span class="keyword">const</span> std::string&amp; window_uid,</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                    <span class="keyword">const</span> std::string&amp; options);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    rtc::scoped_refptr&lt;BitmapTrackSourceInterface&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a43e5f58acd3ba06a96d8b719f4ec8f37">CreateVideoSource</a>(</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="keyword">const</span> std::string&amp; window_uid,</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keyword">const</span> std::map&lt;std::string, std::string&gt;&amp; opts);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a45d65597ecb07fb380c47764b24b7cf0">WindowStillUsed</a>(<span class="keyword">const</span> std::string&amp; window_uid);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    rtc::scoped_refptr&lt;webrtc::PeerConnectionInterface&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ab6d9b7fd46ca3abf1d48cb603a346088">GetPeerConnection</a>(</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keyword">const</span> std::string&amp; peerid);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6138dd8aa589cf55e0a597166b24df2a">  424</a></span>&#160;    std::unique_ptr&lt;webrtc::TaskQueueFactory&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6138dd8aa589cf55e0a597166b24df2a">task_queue_factory_</a>;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    rtc::scoped_refptr&lt;webrtc::PeerConnectionFactoryInterface&gt;</div>
<div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aece058dc5d0d0d8f56c19e4a1362e386">  426</a></span>&#160;            <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aece058dc5d0d0d8f56c19e4a1362e386">peer_connection_factory_</a>;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="comment">// Each peer has exactly one connection.</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    std::unordered_map&lt;std::string, PeerConnectionObserver*&gt;</div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aafc0f87c23017ec87d52b3d794b09317">  430</a></span>&#160;            <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aafc0f87c23017ec87d52b3d794b09317">peerid_to_connection_</a>;</div>
<div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a5ef0a0c0462bdff5adf1ddf6b7cf13d9">  431</a></span>&#160;    std::mutex <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a5ef0a0c0462bdff5adf1ddf6b7cf13d9">peerid_to_connection_mutex_</a>;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// Set of peerids with data channel ready for communication</span></div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#abaec225c975efe1f830853058760ec57">  433</a></span>&#160;    std::unordered_set&lt;std::string&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#abaec225c975efe1f830853058760ec57">peerid_data_channel_ready_</a>;</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a1c06d9ab9a02fe9180458fc26aa0a18a">  434</a></span>&#160;    std::mutex <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a1c06d9ab9a02fe9180458fc26aa0a18a">peerid_data_channel_mutex_</a>;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="comment">// Each Window has exactly one TrackSource.</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    std::unordered_map&lt;std::string,</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                       rtc::scoped_refptr&lt;BitmapTrackSourceInterface&gt;&gt;</div>
<div class="line"><a name="l00439"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ae9a6f59d49336985c435bc200b64e93f">  439</a></span>&#160;            <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ae9a6f59d49336985c435bc200b64e93f">window_uid_to_track_source_</a>;</div>
<div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aca306e12f0230846114ad6b50195a5c4">  440</a></span>&#160;    std::mutex <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aca306e12f0230846114ad6b50195a5c4">window_uid_to_track_source_mutex_</a>;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="comment">// Each Window can be connected to zero, one or more peers.</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    std::unordered_map&lt;std::string, std::set&lt;std::string&gt;&gt;</div>
<div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a61d5045a9a202aff7329e4ddd1e4eba7">  444</a></span>&#160;            <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a61d5045a9a202aff7329e4ddd1e4eba7">window_uid_to_peerids_</a>;</div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6b7de85b5e1f8c205fe106423cbe5532">  445</a></span>&#160;    std::unordered_map&lt;std::string, std::string&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6b7de85b5e1f8c205fe106423cbe5532">peerid_to_window_uid_</a>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="comment">// Shared by window_uid_to_peerids_ and peerid_to_window_uid_.</span></div>
<div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a3401a6662db6bf1730520fe370a74198">  447</a></span>&#160;    std::mutex <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a3401a6662db6bf1730520fe370a74198">window_uid_to_peerids_mutex_</a>;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a83eeec0c4398926f933daecdcc707a2d">  449</a></span>&#160;    std::list&lt;std::string&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a83eeec0c4398926f933daecdcc707a2d">ice_server_list_</a>;</div>
<div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ae7a93eca636c6d9386c4e2082eab5ef2">  450</a></span>&#160;    <span class="keyword">const</span> Json::Value <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#ae7a93eca636c6d9386c4e2082eab5ef2">config_</a>;</div>
<div class="line"><a name="l00451"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#abd6433cb8c2dde4abd21b3bc322608fd">  451</a></span>&#160;    <span class="keyword">const</span> std::regex <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#abd6433cb8c2dde4abd21b3bc322608fd">publish_filter_</a>;</div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a981f9bf06d1a1c5b279f62873db43a93">  452</a></span>&#160;    std::map&lt;std::string, HttpServerRequestHandler::HttpFunction&gt; <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#a981f9bf06d1a1c5b279f62873db43a93">func_</a>;</div>
<div class="line"><a name="l00453"></a><span class="lineno"><a class="line" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aaa27d45cc525e4002dd8b8f9d39937f9">  453</a></span>&#160;    std::string <a class="code" href="classopen3d_1_1visualization_1_1webrtc__serv-7#aaa27d45cc525e4002dd8b8f9d39937f9">webrtc_port_range_</a>;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;};</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}  <span class="comment">// namespace webrtc_server</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}  <span class="comment">// namespace visualization</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_bitmap_track_source_8h_html"><div class="ttname"><a href="_bitmap_track_source_8h.html">BitmapTrackSource.h</a></div></div>
<div class="ttc" id="a_http_server_request_handler_8h_html"><div class="ttname"><a href="_http_server_request_handler_8h.html">HttpServerRequestHandler.h</a></div></div>
<div class="ttc" id="a_logging_8h_html_a2c6c3e9c356e14fb4a7139acf4fa7b18"><div class="ttname"><a href="_logging_8h.html#a2c6c3e9c356e14fb4a7139acf4fa7b18">LogWarning</a></div><div class="ttdeci">#define LogWarning(...)</div><div class="ttdef"><b>Definition:</b> Logging.h:60</div></div>
<div class="ttc" id="a_logging_8h_html_a57eb3ffc98e6ad1bdbed0a980a54c484"><div class="ttname"><a href="_logging_8h.html#a57eb3ffc98e6ad1bdbed0a980a54c484">LogInfo</a></div><div class="ttdeci">#define LogInfo(...)</div><div class="ttdef"><b>Definition:</b> Logging.h:70</div></div>
<div class="ttc" id="a_logging_8h_html_af347100a11f303535485cc3acbf3e6b0"><div class="ttname"><a href="_logging_8h.html#af347100a11f303535485cc3acbf3e6b0">LogDebug</a></div><div class="ttdeci">#define LogDebug(...)</div><div class="ttdef"><b>Definition:</b> Logging.h:79</div></div>
<div class="ttc" id="a_macro_8h_html_aa8ee2e09b5e5907d333f4ac50ba81465"><div class="ttname"><a href="_macro_8h.html#aa8ee2e09b5e5907d333f4ac50ba81465">OPEN3D_FUNCTION</a></div><div class="ttdeci">#define OPEN3D_FUNCTION</div><div class="ttdef"><b>Definition:</b> Macro.h:40</div></div>
<div class="ttc" id="a_web_r_t_c_window_system_8h_html"><div class="ttname"><a href="_web_r_t_c_window_system_8h.html">WebRTCWindowSystem.h</a></div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7">open3d::visualization::webrtc_server::PeerConnectionManager</a></div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:73</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a0d27dd70d291d761fcd37d3c369beb50"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a0d27dd70d291d761fcd37d3c369beb50">open3d::visualization::webrtc_server::PeerConnectionManager::PeerConnectionManager</a></div><div class="ttdeci">PeerConnectionManager(const std::list&lt; std::string &gt; &amp;ice_server_list, const Json::Value &amp;config, const std::string &amp;publish_filter, const std::string &amp;webrtc_udp_port_range)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:126</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a12531c10889782f267f28f59ff79b540"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a12531c10889782f267f28f59ff79b540">open3d::visualization::webrtc_server::PeerConnectionManager::AddIceCandidate</a></div><div class="ttdeci">const Json::Value AddIceCandidate(const std::string &amp;peerid, const Json::Value &amp;json_message)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:251</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a1c06d9ab9a02fe9180458fc26aa0a18a"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a1c06d9ab9a02fe9180458fc26aa0a18a">open3d::visualization::webrtc_server::PeerConnectionManager::peerid_data_channel_mutex_</a></div><div class="ttdeci">std::mutex peerid_data_channel_mutex_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:434</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a2cde2efbffc4e4adebe73dd735303d61"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a2cde2efbffc4e4adebe73dd735303d61">open3d::visualization::webrtc_server::PeerConnectionManager::CreatePeerConnection</a></div><div class="ttdeci">PeerConnectionObserver * CreatePeerConnection(const std::string &amp;peerid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:522</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a30b150c203c35039364ce008bcde52f9"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a30b150c203c35039364ce008bcde52f9">open3d::visualization::webrtc_server::PeerConnectionManager::~PeerConnectionManager</a></div><div class="ttdeci">virtual ~PeerConnectionManager()</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:200</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a3401a6662db6bf1730520fe370a74198"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a3401a6662db6bf1730520fe370a74198">open3d::visualization::webrtc_server::PeerConnectionManager::window_uid_to_peerids_mutex_</a></div><div class="ttdeci">std::mutex window_uid_to_peerids_mutex_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:447</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a43e5f58acd3ba06a96d8b719f4ec8f37"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a43e5f58acd3ba06a96d8b719f4ec8f37">open3d::visualization::webrtc_server::PeerConnectionManager::CreateVideoSource</a></div><div class="ttdeci">rtc::scoped_refptr&lt; BitmapTrackSourceInterface &gt; CreateVideoSource(const std::string &amp;window_uid, const std::map&lt; std::string, std::string &gt; &amp;opts)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:563</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a45d65597ecb07fb380c47764b24b7cf0"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a45d65597ecb07fb380c47764b24b7cf0">open3d::visualization::webrtc_server::PeerConnectionManager::WindowStillUsed</a></div><div class="ttdeci">bool WindowStillUsed(const std::string &amp;window_uid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:417</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a5ef0a0c0462bdff5adf1ddf6b7cf13d9"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a5ef0a0c0462bdff5adf1ddf6b7cf13d9">open3d::visualization::webrtc_server::PeerConnectionManager::peerid_to_connection_mutex_</a></div><div class="ttdeci">std::mutex peerid_to_connection_mutex_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:431</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a5ff6a0794f6203d8a5e73ca07b56986f"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a5ff6a0794f6203d8a5e73ca07b56986f">open3d::visualization::webrtc_server::PeerConnectionManager::Call</a></div><div class="ttdeci">const Json::Value Call(const std::string &amp;peerid, const std::string &amp;window_uid, const std::string &amp;options, const Json::Value &amp;json_message)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:305</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a6138dd8aa589cf55e0a597166b24df2a"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6138dd8aa589cf55e0a597166b24df2a">open3d::visualization::webrtc_server::PeerConnectionManager::task_queue_factory_</a></div><div class="ttdeci">std::unique_ptr&lt; webrtc::TaskQueueFactory &gt; task_queue_factory_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:424</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a61d5045a9a202aff7329e4ddd1e4eba7"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a61d5045a9a202aff7329e4ddd1e4eba7">open3d::visualization::webrtc_server::PeerConnectionManager::window_uid_to_peerids_</a></div><div class="ttdeci">std::unordered_map&lt; std::string, std::set&lt; std::string &gt; &gt; window_uid_to_peerids_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:444</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a646bdb4d9accfd80b5e90e29685c85a1"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a646bdb4d9accfd80b5e90e29685c85a1">open3d::visualization::webrtc_server::PeerConnectionManager::InitializePeerConnection</a></div><div class="ttdeci">bool InitializePeerConnection()</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:516</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a684722fb9b78a553c119604da3993e63"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a684722fb9b78a553c119604da3993e63">open3d::visualization::webrtc_server::PeerConnectionManager::SendInitFramesToPeer</a></div><div class="ttdeci">void SendInitFramesToPeer(const std::string &amp;peerid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:708</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a6b7de85b5e1f8c205fe106423cbe5532"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6b7de85b5e1f8c205fe106423cbe5532">open3d::visualization::webrtc_server::PeerConnectionManager::peerid_to_window_uid_</a></div><div class="ttdeci">std::unordered_map&lt; std::string, std::string &gt; peerid_to_window_uid_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:445</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a6ca0b42beb6bbb8f059c9d55e8a92926"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6ca0b42beb6bbb8f059c9d55e8a92926">open3d::visualization::webrtc_server::PeerConnectionManager::GetIceCandidateList</a></div><div class="ttdeci">const Json::Value GetIceCandidateList(const std::string &amp;peerid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:499</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a6e151280fbb2ec5784a7cfd7adb03369"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a6e151280fbb2ec5784a7cfd7adb03369">open3d::visualization::webrtc_server::PeerConnectionManager::HangUp</a></div><div class="ttdeci">const Json::Value HangUp(const std::string &amp;peerid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:435</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a7b19130f4b277e458ec8907b9713686a"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a7b19130f4b277e458ec8907b9713686a">open3d::visualization::webrtc_server::PeerConnectionManager::GetMediaList</a></div><div class="ttdeci">const Json::Value GetMediaList()</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:203</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a81734e3949f1ec94df6a59032ab519ea"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a81734e3949f1ec94df6a59032ab519ea">open3d::visualization::webrtc_server::PeerConnectionManager::OnFrame</a></div><div class="ttdeci">void OnFrame(const std::string &amp;window_uid, const std::shared_ptr&lt; core::Tensor &gt; &amp;im)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:732</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a83eeec0c4398926f933daecdcc707a2d"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a83eeec0c4398926f933daecdcc707a2d">open3d::visualization::webrtc_server::PeerConnectionManager::ice_server_list_</a></div><div class="ttdeci">std::list&lt; std::string &gt; ice_server_list_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:449</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a8c3733a0dbcf10b5f327d8c547a51f64"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a8c3733a0dbcf10b5f327d8c547a51f64">open3d::visualization::webrtc_server::PeerConnectionManager::GetIceServers</a></div><div class="ttdeci">const Json::Value GetIceServers()</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:217</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a8feb9565a278354ad921764fb4a52d54"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a8feb9565a278354ad921764fb4a52d54">open3d::visualization::webrtc_server::PeerConnectionManager::GetHttpApi</a></div><div class="ttdeci">const std::map&lt; std::string, HttpServerRequestHandler::HttpFunction &gt; GetHttpApi()</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:494</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_a981f9bf06d1a1c5b279f62873db43a93"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#a981f9bf06d1a1c5b279f62873db43a93">open3d::visualization::webrtc_server::PeerConnectionManager::func_</a></div><div class="ttdeci">std::map&lt; std::string, HttpServerRequestHandler::HttpFunction &gt; func_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:452</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_aaa27d45cc525e4002dd8b8f9d39937f9"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#aaa27d45cc525e4002dd8b8f9d39937f9">open3d::visualization::webrtc_server::PeerConnectionManager::webrtc_port_range_</a></div><div class="ttdeci">std::string webrtc_port_range_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:453</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_aafc0f87c23017ec87d52b3d794b09317"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#aafc0f87c23017ec87d52b3d794b09317">open3d::visualization::webrtc_server::PeerConnectionManager::peerid_to_connection_</a></div><div class="ttdeci">std::unordered_map&lt; std::string, PeerConnectionObserver * &gt; peerid_to_connection_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:430</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_ab675115f60c67684698116bfbd122a13"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#ab675115f60c67684698116bfbd122a13">open3d::visualization::webrtc_server::PeerConnectionManager::CloseWindowConnections</a></div><div class="ttdeci">void CloseWindowConnections(const std::string &amp;window_uid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:714</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_ab6d9b7fd46ca3abf1d48cb603a346088"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#ab6d9b7fd46ca3abf1d48cb603a346088">open3d::visualization::webrtc_server::PeerConnectionManager::GetPeerConnection</a></div><div class="ttdeci">rtc::scoped_refptr&lt; webrtc::PeerConnectionInterface &gt; GetPeerConnection(const std::string &amp;peerid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:241</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_abaec225c975efe1f830853058760ec57"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#abaec225c975efe1f830853058760ec57">open3d::visualization::webrtc_server::PeerConnectionManager::peerid_data_channel_ready_</a></div><div class="ttdeci">std::unordered_set&lt; std::string &gt; peerid_data_channel_ready_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:433</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_abd6433cb8c2dde4abd21b3bc322608fd"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#abd6433cb8c2dde4abd21b3bc322608fd">open3d::visualization::webrtc_server::PeerConnectionManager::publish_filter_</a></div><div class="ttdeci">const std::regex publish_filter_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:451</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_abe3458943cf1c49c763e7e2124ed6d83"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#abe3458943cf1c49c763e7e2124ed6d83">open3d::visualization::webrtc_server::PeerConnectionManager::GetVideoTrackSource</a></div><div class="ttdeci">rtc::scoped_refptr&lt; BitmapTrackSourceInterface &gt; GetVideoTrackSource(const std::string &amp;window_uid)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:696</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_abe46ba622bb3e8545304a2a319459b56"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#abe46ba622bb3e8545304a2a319459b56">open3d::visualization::webrtc_server::PeerConnectionManager::AddStreams</a></div><div class="ttdeci">bool AddStreams(webrtc::PeerConnectionInterface *peer_connection, const std::string &amp;window_uid, const std::string &amp;options)</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.cpp:575</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_aca306e12f0230846114ad6b50195a5c4"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#aca306e12f0230846114ad6b50195a5c4">open3d::visualization::webrtc_server::PeerConnectionManager::window_uid_to_track_source_mutex_</a></div><div class="ttdeci">std::mutex window_uid_to_track_source_mutex_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:440</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_ae7a93eca636c6d9386c4e2082eab5ef2"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#ae7a93eca636c6d9386c4e2082eab5ef2">open3d::visualization::webrtc_server::PeerConnectionManager::config_</a></div><div class="ttdeci">const Json::Value config_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:450</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_ae9a6f59d49336985c435bc200b64e93f"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#ae9a6f59d49336985c435bc200b64e93f">open3d::visualization::webrtc_server::PeerConnectionManager::window_uid_to_track_source_</a></div><div class="ttdeci">std::unordered_map&lt; std::string, rtc::scoped_refptr&lt; BitmapTrackSourceInterface &gt; &gt; window_uid_to_track_source_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:439</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_peer_connection_manager_html_aece058dc5d0d0d8f56c19e4a1362e386"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-7#aece058dc5d0d0d8f56c19e4a1362e386">open3d::visualization::webrtc_server::PeerConnectionManager::peer_connection_factory_</a></div><div class="ttdeci">rtc::scoped_refptr&lt; webrtc::PeerConnectionFactoryInterface &gt; peer_connection_factory_</div><div class="ttdef"><b>Definition:</b> PeerConnectionManager.h:426</div></div>
<div class="ttc" id="aclassopen3d_1_1visualization_1_1webrtc__server_1_1_web_r_t_c_window_system_html_a6ead48c1116aef40d66f4dcbf195c63f"><div class="ttname"><a href="classopen3d_1_1visualization_1_1webrtc__serv-10#a6ead48c1116aef40d66f4dcbf195c63f">open3d::visualization::webrtc_server::WebRTCWindowSystem::GetInstance</a></div><div class="ttdeci">static std::shared_ptr&lt; WebRTCWindowSystem &gt; GetInstance()</div><div class="ttdef"><b>Definition:</b> WebRTCWindowSystem.cpp:111</div></div>
<div class="ttc" id="aio_2file__format_2_file_p_c_d_8cpp_html_ad43c3812e6d13e0518d9f8b8f463ffcf"><div class="ttname"><a href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad43c3812e6d13e0518d9f8b8f463ffcf">count</a></div><div class="ttdeci">int count</div><div class="ttdef"><b>Definition:</b> FilePCD.cpp:42</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_peer_connection_manager_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:03:47 GMT -->
</html>
