<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1odometry.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:55 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::pipelines::odometry Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines.33e.delaye">pipelines</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr">odometry</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::pipelines::odometry Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a26a3b4d96a12f40982dd6a5babe32fe0"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0">Method</a> { <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0a621eeaff7db1283a0db27b4e7233a8ed">PointToPlane</a>
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0a71bb6e4d1fa40e68f8c45ea97acae945">Intensity</a>
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0afb1b6e23a3767d2a31ef7899e6dd3f1e">Hybrid</a>
 }</td></tr>
<tr class="separator:a26a3b4d96a12f40982dd6a5babe32fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a4fc7c3a7173a48a3f6a3b85e0603e906"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a4fc7c3a7173a48a3f6a3b85e0603e906">RGBDOdometryMultiScalePointToPlane</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;target, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;trans, const float depth_scale, const float depth_max, const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;criteria, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;params)</td></tr>
<tr class="separator:a4fc7c3a7173a48a3f6a3b85e0603e906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae402582a4963ed1472d6e460712d656"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#aae402582a4963ed1472d6e460712d656">RGBDOdometryMultiScaleIntensity</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;target, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;trans, const float depth_scale, const float depth_max, const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;criteria, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;params)</td></tr>
<tr class="separator:aae402582a4963ed1472d6e460712d656"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65811a9be9d9cccef6328d3fd4bc992a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a65811a9be9d9cccef6328d3fd4bc992a">RGBDOdometryMultiScaleHybrid</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;target, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;trans, const float depth_scale, const float depth_max, const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;criteria, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;params)</td></tr>
<tr class="separator:a65811a9be9d9cccef6328d3fd4bc992a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a420aab8861a26506bfe9051bfb3aba25"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a420aab8861a26506bfe9051bfb3aba25">RGBDOdometryMultiScale</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">t::geometry::RGBDImage</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">t::geometry::RGBDImage</a> &amp;target, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target=<a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4, <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)), const float depth_scale=1000.0f, const float depth_max=3.0f, const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;criteria_list={10, 5, 3}, const <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0">Method</a> method=<a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0afb1b6e23a3767d2a31ef7899e6dd3f1e">Method::Hybrid</a>, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;params=<a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a>())</td></tr>
<tr class="memdesc:a420aab8861a26506bfe9051bfb3aba25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an RGBD image pyramid given the original source and target RGBD images, and perform hierarchical odometry using specified <code>method</code>. Can be used for offline odometry where we do not expect to push performance to the extreme and not reuse vertex/normal map computed before. Input RGBD images hold a depth image (UInt16 or Float32) with a scale factor and a color image (UInt8 x 3).  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a420aab8861a26506bfe9051bfb3aba25">More...</a><br /></td></tr>
<tr class="separator:a420aab8861a26506bfe9051bfb3aba25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7700b0a659ec2cdd34a73ef50605606c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a7700b0a659ec2cdd34a73ef50605606c">ComputeOdometryResultPointToPlane</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normal_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, const float depth_outlier_trunc, const float depth_huber_delta)</td></tr>
<tr class="memdesc:a7700b0a659ec2cdd34a73ef50605606c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Estimates the 4x4 rigid transformation T from source to target, with inlier rmse and fitness. Performs one iteration of RGBD odometry using loss function \([(V_p - V_q)^T N_p]^2\), where \( V_p \) denotes the vertex at pixel p in the source, \( V_q \) denotes the vertex at pixel q in the target, \( N_p \) denotes the normal at pixel p in the source. q is obtained by transforming p with <code>init_source_to_target</code> then projecting with <code>intrinsics</code>. KinectFusion, ISMAR 2011.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a7700b0a659ec2cdd34a73ef50605606c">More...</a><br /></td></tr>
<tr class="separator:a7700b0a659ec2cdd34a73ef50605606c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae36031a281513e7d324982ca0f998344"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#ae36031a281513e7d324982ca0f998344">ComputeOdometryResultIntensity</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, const float depth_outlier_trunc, const float intensity_huber_delta)</td></tr>
<tr class="memdesc:ae36031a281513e7d324982ca0f998344"><td class="mdescLeft">&#160;</td><td class="mdescRight">Estimates the 4x4 rigid transformation T from source to target, with inlier rmse and fitness. Performs one iteration of RGBD odometry using loss function \((I_p - I_q)^2\), where \( I_p \) denotes the intensity at pixel p in the source, \( I_q \) denotes the intensity at pixel q in the target. q is obtained by transforming p with <code>init_source_to_target</code> then projecting with <code>intrinsics</code>. Real-time visual odometry from dense RGB-D images, ICCV Workshops, 2011.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#ae36031a281513e7d324982ca0f998344">More...</a><br /></td></tr>
<tr class="separator:ae36031a281513e7d324982ca0f998344"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a580ab62d38c622ca688ffb300a239913"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a580ab62d38c622ca688ffb300a239913">ComputeOdometryResultHybrid</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, const float depth_outlier_trunc, const float depth_huber_delta, const float intensity_huber_delta)</td></tr>
<tr class="memdesc:a580ab62d38c622ca688ffb300a239913"><td class="mdescLeft">&#160;</td><td class="mdescRight">Estimates the 4x4 rigid transformation T from source to target, with inlier rmse and fitness. Performs one iteration of RGBD odometry using loss function \((I_p - I_q)^2 + \lambda(D_p - (D_q)&#39;)^2\), where \( I_p \) denotes the intensity at pixel p in the source, \( I_q \) denotes the intensity at pixel q in the target. \( D_p \) denotes the depth pixel p in the source, \( D_q \) denotes the depth pixel q in the target. q is obtained by transforming p with <code>init_source_to_target</code> then projecting with <code>intrinsics</code>. Reference: J. Park, Q.Y. Zhou, and V. Koltun, Colored Point Cloud Registration Revisited, ICCV, 2017.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a580ab62d38c622ca688ffb300a239913">More...</a><br /></td></tr>
<tr class="separator:a580ab62d38c622ca688ffb300a239913"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeca3c05a6086313a3dd35b1454d521e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#aeca3c05a6086313a3dd35b1454d521e5">ComputeOdometryInformationMatrix</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">geometry::Image</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">geometry::Image</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_to_target, const float dist_thr, const float depth_scale, const float depth_max)</td></tr>
<tr class="separator:aeca3c05a6086313a3dd35b1454d521e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a26a3b4d96a12f40982dd6a5babe32fe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26a3b4d96a12f40982dd6a5babe32fe0">&#9670;&nbsp;</a></span>Method</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0">open3d::t::pipelines::odometry::Method</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a26a3b4d96a12f40982dd6a5babe32fe0a621eeaff7db1283a0db27b4e7233a8ed"></a>PointToPlane&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a26a3b4d96a12f40982dd6a5babe32fe0a71bb6e4d1fa40e68f8c45ea97acae945"></a>Intensity&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a26a3b4d96a12f40982dd6a5babe32fe0afb1b6e23a3767d2a31ef7899e6dd3f1e"></a>Hybrid&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="aeca3c05a6086313a3dd35b1454d521e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeca3c05a6086313a3dd35b1454d521e5">&#9670;&nbsp;</a></span>ComputeOdometryInformationMatrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::odometry::ComputeOdometryInformationMatrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>dist_thr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Estimates 6x6 information matrix from a pair of depth images. The process is akin to information matrix creation for point clouds. </p>

</div>
</div>
<a id="a580ab62d38c622ca688ffb300a239913"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a580ab62d38c622ca688ffb300a239913">&#9670;&nbsp;</a></span>ComputeOdometryResultHybrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::ComputeOdometryResultHybrid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_huber_delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>intensity_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Estimates the 4x4 rigid transformation T from source to target, with inlier rmse and fitness. Performs one iteration of RGBD odometry using loss function \((I_p - I_q)^2 + \lambda(D_p - (D_q)&#39;)^2\), where \( I_p \) denotes the intensity at pixel p in the source, \( I_q \) denotes the intensity at pixel q in the target. \( D_p \) denotes the depth pixel p in the source, \( D_q \) denotes the depth pixel q in the target. q is obtained by transforming p with <code>init_source_to_target</code> then projecting with <code>intrinsics</code>. Reference: J. Park, Q.Y. Zhou, and V. Koltun, Colored Point Cloud Registration Revisited, ICCV, 2017. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source_depth</td><td>(rows, cols, channels=1) Float32 source depth image obtained by PreprocessDepth before calling this function. </td></tr>
    <tr><td class="paramname">target_depth</td><td>(rows, cols, channels=1) Float32 target depth image obtained by PreprocessDepth before calling this function. </td></tr>
    <tr><td class="paramname">source_intensity</td><td>(rows, cols, channels=1) Float32 source intensity image obtained by RGBToGray before calling this function. </td></tr>
    <tr><td class="paramname">target_intensity</td><td>(rows, cols, channels=1) Float32 target intensity image obtained by RGBToGray before calling this function. </td></tr>
    <tr><td class="paramname">target_depth_dx</td><td>(rows, cols, channels=1) Float32 target depth gradient image along x-axis obtained by FilterSobel before calling this function. </td></tr>
    <tr><td class="paramname">target_depth_dy</td><td>(rows, cols, channels=1) Float32 target depth gradient image along y-axis obtained by FilterSobel before calling this function. </td></tr>
    <tr><td class="paramname">target_intensity_dx</td><td>(rows, cols, channels=1) Float32 target intensity gradient image along x-axis obtained by FilterSobel before calling this function. </td></tr>
    <tr><td class="paramname">target_intensity_dy</td><td>(rows, cols, channels=1) Float32 target intensity gradient image along y-axis obtained by FilterSobel before calling this function. </td></tr>
    <tr><td class="paramname">source_vertex_map</td><td>(rows, cols, channels=3) Float32 source vertex image obtained by CreateVertexMap before calling this function. </td></tr>
    <tr><td class="paramname">intrinsics</td><td>(3, 3) intrinsic matrix for projection. </td></tr>
    <tr><td class="paramname">init_source_to_target</td><td>(4, 4) initial transformation matrix from source to target. </td></tr>
    <tr><td class="paramname">depth_outlier_trunc</td><td>Depth difference threshold used to filter projective associations. </td></tr>
    <tr><td class="paramname">depth_huber_delta</td><td>Huber norm parameter used in depth loss. </td></tr>
    <tr><td class="paramname">intensity_huber_delta</td><td>Huber norm parameter used in intensity loss. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>odometry result, with(4, 4) optimized transformation matrix from source to target, inlier ratio, and fitness. </dd></dl>

</div>
</div>
<a id="ae36031a281513e7d324982ca0f998344"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae36031a281513e7d324982ca0f998344">&#9670;&nbsp;</a></span>ComputeOdometryResultIntensity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::ComputeOdometryResultIntensity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>intensity_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Estimates the 4x4 rigid transformation T from source to target, with inlier rmse and fitness. Performs one iteration of RGBD odometry using loss function \((I_p - I_q)^2\), where \( I_p \) denotes the intensity at pixel p in the source, \( I_q \) denotes the intensity at pixel q in the target. q is obtained by transforming p with <code>init_source_to_target</code> then projecting with <code>intrinsics</code>. Real-time visual odometry from dense RGB-D images, ICCV Workshops, 2011. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source_depth</td><td>(rows, cols, channels=1) Float32 source depth image obtained by PreprocessDepth before calling this function. </td></tr>
    <tr><td class="paramname">target_depth</td><td>(rows, cols, channels=1) Float32 target depth image obtained by PreprocessDepth before calling this function. </td></tr>
    <tr><td class="paramname">source_intensity</td><td>(rows, cols, channels=1) Float32 source intensity image obtained by RGBToGray before calling this function. </td></tr>
    <tr><td class="paramname">target_intensity</td><td>(rows, cols, channels=1) Float32 target intensity image obtained by RGBToGray before calling this function. </td></tr>
    <tr><td class="paramname">target_intensity_dx</td><td>(rows, cols, channels=1) Float32 target intensity gradient image along x-axis obtained by FilterSobel before calling this function. </td></tr>
    <tr><td class="paramname">target_intensity_dy</td><td>(rows, cols, channels=1) Float32 target intensity gradient image along y-axis obtained by FilterSobel before calling this function. </td></tr>
    <tr><td class="paramname">source_vertex_map</td><td>(rows, cols, channels=3) Float32 source vertex image obtained by CreateVertexMap before calling this function. </td></tr>
    <tr><td class="paramname">intrinsics</td><td>(3, 3) intrinsic matrix for projection. </td></tr>
    <tr><td class="paramname">init_source_to_target</td><td>(4, 4) initial transformation matrix from source to target. </td></tr>
    <tr><td class="paramname">depth_outlier_trunc</td><td>Depth difference threshold used to filter projective associations. </td></tr>
    <tr><td class="paramname">intensity_huber_delta</td><td>Huber norm parameter used in intensity loss. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>odometry result, with(4, 4) optimized transformation matrix from source to target, inlier ratio, and fitness. </dd></dl>

</div>
</div>
<a id="a7700b0a659ec2cdd34a73ef50605606c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7700b0a659ec2cdd34a73ef50605606c">&#9670;&nbsp;</a></span>ComputeOdometryResultPointToPlane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::ComputeOdometryResultPointToPlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normal_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Estimates the 4x4 rigid transformation T from source to target, with inlier rmse and fitness. Performs one iteration of RGBD odometry using loss function \([(V_p - V_q)^T N_p]^2\), where \( V_p \) denotes the vertex at pixel p in the source, \( V_q \) denotes the vertex at pixel q in the target, \( N_p \) denotes the normal at pixel p in the source. q is obtained by transforming p with <code>init_source_to_target</code> then projecting with <code>intrinsics</code>. KinectFusion, ISMAR 2011. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source_vertex_map</td><td>(rows, cols, channels=3) Float32 source vertex image obtained by CreateVertexMap before calling this function. </td></tr>
    <tr><td class="paramname">target_vertex_map</td><td>(rows, cols, channels=3) Float32 target vertex image obtained by CreateVertexMap before calling this function. </td></tr>
    <tr><td class="paramname">target_normal_map</td><td>(rows, cols, channels=3) Float32 target normal image obtained by CreateNormalMap before calling this function. </td></tr>
    <tr><td class="paramname">intrinsics</td><td>(3, 3) intrinsic matrix for projection. </td></tr>
    <tr><td class="paramname">init_source_to_target</td><td>(4, 4) initial transformation matrix from source to target. </td></tr>
    <tr><td class="paramname">depth_outlier_trunc</td><td>Depth difference threshold used to filter projective associations. </td></tr>
    <tr><td class="paramname">depth_huber_delta</td><td>Huber norm parameter used in depth loss. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>odometry result, with (4, 4) optimized transformation matrix from source to target, inlier ratio, and fitness. </dd></dl>

</div>
</div>
<a id="a420aab8861a26506bfe9051bfb3aba25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a420aab8861a26506bfe9051bfb3aba25">&#9670;&nbsp;</a></span>RGBDOdometryMultiScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::RGBDOdometryMultiScale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">t::geometry::RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">t::geometry::RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em> = <code><a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4,&#160;<a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>,&#160;<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>criteria_list</em> = <code>{10,&#160;5,&#160;3}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0">Method</a>&#160;</td>
          <td class="paramname"><em>method</em> = <code><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0afb1b6e23a3767d2a31ef7899e6dd3f1e">Method::Hybrid</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an RGBD image pyramid given the original source and target RGBD images, and perform hierarchical odometry using specified <code>method</code>. Can be used for offline odometry where we do not expect to push performance to the extreme and not reuse vertex/normal map computed before. Input RGBD images hold a depth image (UInt16 or Float32) with a scale factor and a color image (UInt8 x 3). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>Source RGBD image. </td></tr>
    <tr><td class="paramname">target</td><td>Target RGBD image. </td></tr>
    <tr><td class="paramname">intrinsics</td><td>(3, 3) intrinsic matrix for projection of <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a> on CPU. </td></tr>
    <tr><td class="paramname">init_source_to_target</td><td>(4, 4) initial transformation matrix from source to target of <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a> on CPU. </td></tr>
    <tr><td class="paramname">depth_scale</td><td>Converts depth pixel values to meters by dividing the scale factor. </td></tr>
    <tr><td class="paramname">depth_max</td><td>Max depth to truncate depth image with noisy measurements. </td></tr>
    <tr><td class="paramname">criteria_list</td><td>Criteria used to define and terminate iterations. In multiscale odometry the order is from coarse to fine. Inputting a vector of iterations by default triggers the implicit conversion. </td></tr>
    <tr><td class="paramname">method</td><td>Method used to apply RGBD odometry. </td></tr>
    <tr><td class="paramname">params</td><td>Parameters used in loss function, including outlier rejection threshold and Huber norm parameters. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>odometry result, with (4, 4) optimized transformation matrix from source to target, inlier ratio, and fitness. </dd></dl>

</div>
</div>
<a id="a65811a9be9d9cccef6328d3fd4bc992a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65811a9be9d9cccef6328d3fd4bc992a">&#9670;&nbsp;</a></span>RGBDOdometryMultiScaleHybrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::RGBDOdometryMultiScaleHybrid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>trans</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>criteria</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aae402582a4963ed1472d6e460712d656"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae402582a4963ed1472d6e460712d656">&#9670;&nbsp;</a></span>RGBDOdometryMultiScaleIntensity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::RGBDOdometryMultiScaleIntensity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>trans</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>criteria</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4fc7c3a7173a48a3f6a3b85e0603e906"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fc7c3a7173a48a3f6a3b85e0603e906">&#9670;&nbsp;</a></span>RGBDOdometryMultiScalePointToPlane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">OdometryResult</a> open3d::t::pipelines::odometry::RGBDOdometryMultiScalePointToPlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_r_g_b_d_ima">RGBDImage</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>trans</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">OdometryConvergenceCriteria</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>criteria</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-3">OdometryLossParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1odometry.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:55 GMT -->
</html>
