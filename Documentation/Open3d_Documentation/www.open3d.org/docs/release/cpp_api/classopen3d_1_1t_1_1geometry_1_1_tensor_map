<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_tensor_map.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:52 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::TensorMap Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::TensorMap Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tensor_map_8h_source.html">TensorMap.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::t::geometry::TensorMap:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1t_1_1geometry_1_1_tensor_map-2" alt=""/>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a44abe69a2fb74e75ec29f68009eb4d0e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a44abe69a2fb74e75ec29f68009eb4d0e">TensorMap</a> (const std::string &amp;primary_key)</td></tr>
<tr class="memdesc:a44abe69a2fb74e75ec29f68009eb4d0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create empty <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> and set primary key.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a44abe69a2fb74e75ec29f68009eb4d0e">More...</a><br /></td></tr>
<tr class="separator:a44abe69a2fb74e75ec29f68009eb4d0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c3f5680fdea080b8b9a3c3e9287a86f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a0c3f5680fdea080b8b9a3c3e9287a86f">TensorMap</a> ()</td></tr>
<tr class="separator:a0c3f5680fdea080b8b9a3c3e9287a86f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b2fb983d82c998de44a3f76b5a817c4"><td class="memTemplParams" colspan="2">template&lt;class InputIt &gt; </td></tr>
<tr class="memitem:a7b2fb983d82c998de44a3f76b5a817c4"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a7b2fb983d82c998de44a3f76b5a817c4">TensorMap</a> (const std::string &amp;primary_key, InputIt first, InputIt last)</td></tr>
<tr class="separator:a7b2fb983d82c998de44a3f76b5a817c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85fced41cf4675ccc162536436db3d67"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a85fced41cf4675ccc162536436db3d67">TensorMap</a> (const std::string &amp;primary_key, const std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; &amp;tensor_map)</td></tr>
<tr class="separator:a85fced41cf4675ccc162536436db3d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56a00e1ef5e69e05eaff9aab9324a609"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a56a00e1ef5e69e05eaff9aab9324a609">TensorMap</a> (const std::string &amp;primary_key, std::initializer_list&lt; value_type &gt; init)</td></tr>
<tr class="separator:a56a00e1ef5e69e05eaff9aab9324a609"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac82b0bb88a86fcd7769a6d92341e95ed"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ac82b0bb88a86fcd7769a6d92341e95ed">TensorMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;other)</td></tr>
<tr class="memdesc:ac82b0bb88a86fcd7769a6d92341e95ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor performs a "shallow" copy of the Tensors.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ac82b0bb88a86fcd7769a6d92341e95ed">More...</a><br /></td></tr>
<tr class="separator:ac82b0bb88a86fcd7769a6d92341e95ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b7b2e0b1abb82add1a1d76c556f740a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a2b7b2e0b1abb82add1a1d76c556f740a">TensorMap</a> (<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&amp;other)</td></tr>
<tr class="memdesc:a2b7b2e0b1abb82add1a1d76c556f740a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructor performs a "shallow" copy of the Tensors.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a2b7b2e0b1abb82add1a1d76c556f740a">More...</a><br /></td></tr>
<tr class="separator:a2b7b2e0b1abb82add1a1d76c556f740a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4406713e9610b48a75cde20f091e7284"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a4406713e9610b48a75cde20f091e7284">Erase</a> (const std::string key)</td></tr>
<tr class="memdesc:a4406713e9610b48a75cde20f091e7284"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase elements for the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> by key value, if the key exists. If the key does not exists, a warning is thrown. Also <code>primary_key</code> cannot be deleted. It is based on <code>size_type unordered_map::erase(const key_type&amp; k);</code>.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a4406713e9610b48a75cde20f091e7284">More...</a><br /></td></tr>
<tr class="separator:a4406713e9610b48a75cde20f091e7284"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92b179ffa148920dc179493a76b9e7fe"><td class="memItemLeft" align="right" valign="top">std::pair&lt; iterator, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a92b179ffa148920dc179493a76b9e7fe">insert</a> (const value_type &amp;value)</td></tr>
<tr class="separator:a92b179ffa148920dc179493a76b9e7fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad747f14794b222a87953481a06258fb"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:aad747f14794b222a87953481a06258fb"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; iterator, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aad747f14794b222a87953481a06258fb">insert</a> (P &amp;&amp;value)</td></tr>
<tr class="separator:aad747f14794b222a87953481a06258fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8549575da43c6b548a04e4682b131e2"><td class="memItemLeft" align="right" valign="top">iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aa8549575da43c6b548a04e4682b131e2">insert</a> (const_iterator hint, const value_type &amp;value)</td></tr>
<tr class="separator:aa8549575da43c6b548a04e4682b131e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac54d3254c2869d13a4b61b92cee610de"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:ac54d3254c2869d13a4b61b92cee610de"><td class="memTemplItemLeft" align="right" valign="top">iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ac54d3254c2869d13a4b61b92cee610de">insert</a> (const_iterator hint, P &amp;&amp;value)</td></tr>
<tr class="separator:ac54d3254c2869d13a4b61b92cee610de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a467ad2b6aabc5a22570b11b650676d28"><td class="memTemplParams" colspan="2">template&lt;class InputIt &gt; </td></tr>
<tr class="memitem:a467ad2b6aabc5a22570b11b650676d28"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a467ad2b6aabc5a22570b11b650676d28">insert</a> (InputIt first, InputIt last)</td></tr>
<tr class="separator:a467ad2b6aabc5a22570b11b650676d28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cabed33b6a4a831b2756d1fd0b31d7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a6cabed33b6a4a831b2756d1fd0b31d7e">insert</a> (std::initializer_list&lt; value_type &gt; ilist)</td></tr>
<tr class="separator:a6cabed33b6a4a831b2756d1fd0b31d7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a406bf46acee8353d9e946395abd28663"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a406bf46acee8353d9e946395abd28663">operator=</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;)=default</td></tr>
<tr class="separator:a406bf46acee8353d9e946395abd28663"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affb993d2437724c6ef02c04438c9bc96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#affb993d2437724c6ef02c04438c9bc96">operator=</a> (<a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&amp;)=default</td></tr>
<tr class="separator:affb993d2437724c6ef02c04438c9bc96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac23cca33a90fca9f99b4b127be4f1c6a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ac23cca33a90fca9f99b4b127be4f1c6a">GetPrimaryKey</a> () const</td></tr>
<tr class="memdesc:ac23cca33a90fca9f99b4b127be4f1c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the primary key of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ac23cca33a90fca9f99b4b127be4f1c6a">More...</a><br /></td></tr>
<tr class="separator:ac23cca33a90fca9f99b4b127be4f1c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6ea48a48335ec2ec93dd4196f476f75"><td class="memItemLeft" align="right" valign="top">std::unordered_set&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ae6ea48a48335ec2ec93dd4196f476f75">GetKeySet</a> () const</td></tr>
<tr class="memdesc:ae6ea48a48335ec2ec93dd4196f476f75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a set with all keys.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#ae6ea48a48335ec2ec93dd4196f476f75">More...</a><br /></td></tr>
<tr class="separator:ae6ea48a48335ec2ec93dd4196f476f75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafcd9b4b7bb475e121cee3fecb4a80f8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aafcd9b4b7bb475e121cee3fecb4a80f8">IsSizeSynchronized</a> () const</td></tr>
<tr class="memdesc:aafcd9b4b7bb475e121cee3fecb4a80f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if all tensors in the map have the same size.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aafcd9b4b7bb475e121cee3fecb4a80f8">More...</a><br /></td></tr>
<tr class="separator:aafcd9b4b7bb475e121cee3fecb4a80f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e5955cea272b983496327de37be611c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a3e5955cea272b983496327de37be611c">AssertSizeSynchronized</a> () const</td></tr>
<tr class="memdesc:a3e5955cea272b983496327de37be611c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assert <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aafcd9b4b7bb475e121cee3fecb4a80f8" title="Returns true if all tensors in the map have the same size.">IsSizeSynchronized()</a>.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a3e5955cea272b983496327de37be611c">More...</a><br /></td></tr>
<tr class="separator:a3e5955cea272b983496327de37be611c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa41a130e61fb4a4b5931dc840a9be62b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aa41a130e61fb4a4b5931dc840a9be62b">IsContiguous</a> () const</td></tr>
<tr class="separator:aa41a130e61fb4a4b5931dc840a9be62b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a124733deb6113aecad15d07d171fa733"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a124733deb6113aecad15d07d171fa733">Contiguous</a> () const</td></tr>
<tr class="separator:a124733deb6113aecad15d07d171fa733"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a962b9723076b5602e5aa96ff4528c697"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a962b9723076b5602e5aa96ff4528c697">Contains</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a962b9723076b5602e5aa96ff4528c697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8c2288d8017b47aabc01e0665c7c5b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a4c8c2288d8017b47aabc01e0665c7c5b">ToString</a> () const</td></tr>
<tr class="memdesc:a4c8c2288d8017b47aabc01e0665c7c5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> to string.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a4c8c2288d8017b47aabc01e0665c7c5b">More...</a><br /></td></tr>
<tr class="separator:a4c8c2288d8017b47aabc01e0665c7c5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a862cf94385073f518e7a5a965c1e3020"><td class="memItemLeft" align="right" valign="top">static std::unordered_set&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a862cf94385073f518e7a5a965c1e3020">GetReservedKeys</a> ()</td></tr>
<tr class="memdesc:a862cf94385073f518e7a5a965c1e3020"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get reserved keys for the map. A map cannot contain any of these keys.  <a href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#a862cf94385073f518e7a5a965c1e3020">More...</a><br /></td></tr>
<tr class="separator:a862cf94385073f518e7a5a965c1e3020"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> is a unordered_map&lt;string, Tensor&gt; with a primary key. It is typically used as a container for geometry attributes.</p>
<p>e.g. tensor_map.primary_key: "positions" tensor_map["positions"] : Tensor of shape {100, 3}. tensor_map["colors"] : Tensor of shape {100, 3}. tensor_map["normals"] : Tensor of shape {100, 3}.</p>
<p>Typically, tensors in the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> should have the same length (the first dimension of shape) and device as the primary tensor. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a44abe69a2fb74e75ec29f68009eb4d0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44abe69a2fb74e75ec29f68009eb4d0e">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>primary_key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create empty <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> and set primary key. </p>

</div>
</div>
<a id="a0c3f5680fdea080b8b9a3c3e9287a86f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c3f5680fdea080b8b9a3c3e9287a86f">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>A primary key is always required. This constructor can be marked as delete in C++, but it is needed for pybind to bind as a generic python map interface. </p>

</div>
</div>
<a id="a7b2fb983d82c998de44a3f76b5a817c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b2fb983d82c998de44a3f76b5a817c4">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class InputIt &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>primary_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIt&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIt&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a85fced41cf4675ccc162536436db3d67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85fced41cf4675ccc162536436db3d67">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>primary_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor_map</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a56a00e1ef5e69e05eaff9aab9324a609"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56a00e1ef5e69e05eaff9aab9324a609">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>primary_key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; value_type &gt;&#160;</td>
          <td class="paramname"><em>init</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac82b0bb88a86fcd7769a6d92341e95ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac82b0bb88a86fcd7769a6d92341e95ed">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructor performs a "shallow" copy of the Tensors. </p>

</div>
</div>
<a id="a2b7b2e0b1abb82add1a1d76c556f740a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b7b2e0b1abb82add1a1d76c556f740a">&#9670;&nbsp;</a></span>TensorMap() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::TensorMap::TensorMap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructor performs a "shallow" copy of the Tensors. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3e5955cea272b983496327de37be611c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e5955cea272b983496327de37be611c">&#9670;&nbsp;</a></span>AssertSizeSynchronized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TensorMap::AssertSizeSynchronized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assert <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map#aafcd9b4b7bb475e121cee3fecb4a80f8" title="Returns true if all tensors in the map have the same size.">IsSizeSynchronized()</a>. </p>

</div>
</div>
<a id="a962b9723076b5602e5aa96ff4528c697"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a962b9723076b5602e5aa96ff4528c697">&#9670;&nbsp;</a></span>Contains()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TensorMap::Contains </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if the key exists in the map. Same as C++20's std::unordered_map::contains(). </p>

</div>
</div>
<a id="a124733deb6113aecad15d07d171fa733"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a124733deb6113aecad15d07d171fa733">&#9670;&nbsp;</a></span>Contiguous()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> open3d::t::geometry::TensorMap::Contiguous </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a new contiguous <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> containing the same data in the same device. For the contiguous tensors in the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>, the same underlying memory will be used. </p>

</div>
</div>
<a id="a4406713e9610b48a75cde20f091e7284"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4406713e9610b48a75cde20f091e7284">&#9670;&nbsp;</a></span>Erase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t open3d::t::geometry::TensorMap::Erase </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erase elements for the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> by key value, if the key exists. If the key does not exists, a warning is thrown. Also <code>primary_key</code> cannot be deleted. It is based on <code>size_type unordered_map::erase(const key_type&amp; k);</code>. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of elements deleted. [0 if key was not present]. </dd></dl>

</div>
</div>
<a id="ae6ea48a48335ec2ec93dd4196f476f75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6ea48a48335ec2ec93dd4196f476f75">&#9670;&nbsp;</a></span>GetKeySet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_set&lt;std::string&gt; open3d::t::geometry::TensorMap::GetKeySet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a set with all keys. </p>

</div>
</div>
<a id="ac23cca33a90fca9f99b4b127be4f1c6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac23cca33a90fca9f99b4b127be4f1c6a">&#9670;&nbsp;</a></span>GetPrimaryKey()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::t::geometry::TensorMap::GetPrimaryKey </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the primary key of the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>. </p>

</div>
</div>
<a id="a862cf94385073f518e7a5a965c1e3020"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a862cf94385073f518e7a5a965c1e3020">&#9670;&nbsp;</a></span>GetReservedKeys()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_set&lt; std::string &gt; open3d::t::geometry::TensorMap::GetReservedKeys </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get reserved keys for the map. A map cannot contain any of these keys. </p>

</div>
</div>
<a id="a92b179ffa148920dc179493a76b9e7fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92b179ffa148920dc179493a76b9e7fe">&#9670;&nbsp;</a></span>insert() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;iterator, bool&gt; open3d::t::geometry::TensorMap::insert </td>
          <td>(</td>
          <td class="paramtype">const value_type &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa8549575da43c6b548a04e4682b131e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8549575da43c6b548a04e4682b131e2">&#9670;&nbsp;</a></span>insert() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">iterator open3d::t::geometry::TensorMap::insert </td>
          <td>(</td>
          <td class="paramtype">const_iterator&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const value_type &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac54d3254c2869d13a4b61b92cee610de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac54d3254c2869d13a4b61b92cee610de">&#9670;&nbsp;</a></span>insert() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class P &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">iterator open3d::t::geometry::TensorMap::insert </td>
          <td>(</td>
          <td class="paramtype">const_iterator&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a467ad2b6aabc5a22570b11b650676d28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a467ad2b6aabc5a22570b11b650676d28">&#9670;&nbsp;</a></span>insert() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class InputIt &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TensorMap::insert </td>
          <td>(</td>
          <td class="paramtype">InputIt&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIt&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aad747f14794b222a87953481a06258fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad747f14794b222a87953481a06258fb">&#9670;&nbsp;</a></span>insert() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class P &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;iterator, bool&gt; open3d::t::geometry::TensorMap::insert </td>
          <td>(</td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6cabed33b6a4a831b2756d1fd0b31d7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cabed33b6a4a831b2756d1fd0b31d7e">&#9670;&nbsp;</a></span>insert() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::TensorMap::insert </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; value_type &gt;&#160;</td>
          <td class="paramname"><em>ilist</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa41a130e61fb4a4b5931dc840a9be62b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa41a130e61fb4a4b5931dc840a9be62b">&#9670;&nbsp;</a></span>IsContiguous()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TensorMap::IsContiguous </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns True if the underlying memory buffers of all the Tensors in the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> is contiguous. </p>

</div>
</div>
<a id="aafcd9b4b7bb475e121cee3fecb4a80f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafcd9b4b7bb475e121cee3fecb4a80f8">&#9670;&nbsp;</a></span>IsSizeSynchronized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::t::geometry::TensorMap::IsSizeSynchronized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if all tensors in the map have the same size. </p>

</div>
</div>
<a id="a406bf46acee8353d9e946395abd28663"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a406bf46acee8353d9e946395abd28663">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&amp; open3d::t::geometry::TensorMap::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="affb993d2437724c6ef02c04438c9bc96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affb993d2437724c6ef02c04438c9bc96">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&amp; open3d::t::geometry::TensorMap::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4c8c2288d8017b47aabc01e0665c7c5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8c2288d8017b47aabc01e0665c7c5b">&#9670;&nbsp;</a></span>ToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::t::geometry::TensorMap::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> to string. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="_tensor_map_8h_source.html">TensorMap.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="_tensor_map_8cpp.html">TensorMap.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_tensor_map.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:53 GMT -->
</html>
