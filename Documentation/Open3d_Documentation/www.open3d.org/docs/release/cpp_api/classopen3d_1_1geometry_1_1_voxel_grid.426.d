<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_voxel_grid.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:12 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::geometry::VoxelGrid Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">open3d::geometry::VoxelGrid Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> is a collection of voxels which are aligned in grid.  
 <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_voxel_grid_8h_source.html">VoxelGrid.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::geometry::VoxelGrid:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1geometry_1_1_voxel_grid.646.d" usemap="#open3d::geometry::VoxelGrid_map" alt=""/>
  <map id="open3d::geometry::VoxelGrid_map" name="open3d::geometry::VoxelGrid_map">
<area href="classopen3d_1_1geometry_1_1_geometry3_d.402" title="The base geometry class for 3D geometries." alt="open3d::geometry::Geometry3D" shape="rect" coords="0,56,188,80"/>
<area href="classopen3d_1_1geometry_1_1_geometry.400.del" title="The base geometry class." alt="open3d::geometry::Geometry" shape="rect" coords="0,0,188,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3129af80b114fca37229e15e10020dc7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a3129af80b114fca37229e15e10020dc7">VoxelGrid</a> ()</td></tr>
<tr class="memdesc:a3129af80b114fca37229e15e10020dc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a3129af80b114fca37229e15e10020dc7">More...</a><br /></td></tr>
<tr class="separator:a3129af80b114fca37229e15e10020dc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32aaf2fee63a31a06b54ae81c8aaf581"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a32aaf2fee63a31a06b54ae81c8aaf581">VoxelGrid</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;src_voxel_grid)</td></tr>
<tr class="memdesc:a32aaf2fee63a31a06b54ae81c8aaf581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy Constructor.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a32aaf2fee63a31a06b54ae81c8aaf581">More...</a><br /></td></tr>
<tr class="separator:a32aaf2fee63a31a06b54ae81c8aaf581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa56d1724028ffedd9ff96f3f2ce342"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#affa56d1724028ffedd9ff96f3f2ce342">~VoxelGrid</a> () override</td></tr>
<tr class="separator:affa56d1724028ffedd9ff96f3f2ce342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c21e599148f858ab8928008358cbf43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a6c21e599148f858ab8928008358cbf43">Clear</a> () override</td></tr>
<tr class="memdesc:a6c21e599148f858ab8928008358cbf43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear all elements in the geometry.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a6c21e599148f858ab8928008358cbf43">More...</a><br /></td></tr>
<tr class="separator:a6c21e599148f858ab8928008358cbf43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aa9a4074406a897fbed07aec7266956"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a4aa9a4074406a897fbed07aec7266956">IsEmpty</a> () const override</td></tr>
<tr class="memdesc:a4aa9a4074406a897fbed07aec7266956"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> iff the geometry is empty.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a4aa9a4074406a897fbed07aec7266956">More...</a><br /></td></tr>
<tr class="separator:a4aa9a4074406a897fbed07aec7266956"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8422b89bb6b28d31e291e1960d1e61cf"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a8422b89bb6b28d31e291e1960d1e61cf">GetMinBound</a> () const override</td></tr>
<tr class="memdesc:a8422b89bb6b28d31e291e1960d1e61cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns min bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a8422b89bb6b28d31e291e1960d1e61cf">More...</a><br /></td></tr>
<tr class="separator:a8422b89bb6b28d31e291e1960d1e61cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eaeb8d615431d53b95b134ca5c93590"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a9eaeb8d615431d53b95b134ca5c93590">GetMaxBound</a> () const override</td></tr>
<tr class="memdesc:a9eaeb8d615431d53b95b134ca5c93590"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns max bounds for geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a9eaeb8d615431d53b95b134ca5c93590">More...</a><br /></td></tr>
<tr class="separator:a9eaeb8d615431d53b95b134ca5c93590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94a328b55529bb33f5d428656e6a86a"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ab94a328b55529bb33f5d428656e6a86a">GetCenter</a> () const override</td></tr>
<tr class="memdesc:ab94a328b55529bb33f5d428656e6a86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the center of the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ab94a328b55529bb33f5d428656e6a86a">More...</a><br /></td></tr>
<tr class="separator:ab94a328b55529bb33f5d428656e6a86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05168fae52917fbc53e4b6366cd29f69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a05168fae52917fbc53e4b6366cd29f69">GetAxisAlignedBoundingBox</a> () const override</td></tr>
<tr class="separator:a05168fae52917fbc53e4b6366cd29f69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a452e8855ff458f519d6679ec1e4c6f22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a452e8855ff458f519d6679ec1e4c6f22">GetOrientedBoundingBox</a> (bool robust=false) const override</td></tr>
<tr class="separator:a452e8855ff458f519d6679ec1e4c6f22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af51ee30927f7ae619ad69b399c5bc6c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#af51ee30927f7ae619ad69b399c5bc6c4">GetMinimalOrientedBoundingBox</a> (bool robust=false) const override</td></tr>
<tr class="separator:af51ee30927f7ae619ad69b399c5bc6c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91ede3a2e8130ee2380f990efd9c9b24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a91ede3a2e8130ee2380f990efd9c9b24">Transform</a> (const Eigen::Matrix4d &amp;transformation) override</td></tr>
<tr class="memdesc:a91ede3a2e8130ee2380f990efd9c9b24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply transformation (4x4 matrix) to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a91ede3a2e8130ee2380f990efd9c9b24">More...</a><br /></td></tr>
<tr class="separator:a91ede3a2e8130ee2380f990efd9c9b24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac24d9842d433547fcb98627e8722b8f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ac24d9842d433547fcb98627e8722b8f6">Translate</a> (const Eigen::Vector3d &amp;translation, bool relative=true) override</td></tr>
<tr class="memdesc:ac24d9842d433547fcb98627e8722b8f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ac24d9842d433547fcb98627e8722b8f6">More...</a><br /></td></tr>
<tr class="separator:ac24d9842d433547fcb98627e8722b8f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cabe44f714a80c750ece424c1f7ddcc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a7cabe44f714a80c750ece424c1f7ddcc">Scale</a> (const double scale, const Eigen::Vector3d &amp;center) override</td></tr>
<tr class="memdesc:a7cabe44f714a80c750ece424c1f7ddcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a7cabe44f714a80c750ece424c1f7ddcc">More...</a><br /></td></tr>
<tr class="separator:a7cabe44f714a80c750ece424c1f7ddcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eae1fb9d0afb0fa2b90f8ac5e82bb15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a3eae1fb9d0afb0fa2b90f8ac5e82bb15">Rotate</a> (const Eigen::Matrix3d &amp;R, const Eigen::Vector3d &amp;center) override</td></tr>
<tr class="memdesc:a3eae1fb9d0afb0fa2b90f8ac5e82bb15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\).  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a3eae1fb9d0afb0fa2b90f8ac5e82bb15">More...</a><br /></td></tr>
<tr class="separator:a3eae1fb9d0afb0fa2b90f8ac5e82bb15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae59f3dd2efa359e7e423b8288834b4d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ae59f3dd2efa359e7e423b8288834b4d9">operator+=</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;voxelgrid)</td></tr>
<tr class="separator:ae59f3dd2efa359e7e423b8288834b4d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23cfc64e7d604b39b2dcd92b530b879a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a23cfc64e7d604b39b2dcd92b530b879a">operator+</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;voxelgrid) const</td></tr>
<tr class="separator:a23cfc64e7d604b39b2dcd92b530b879a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db35eb5094e07fbcd0a5588850e3ffb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a8db35eb5094e07fbcd0a5588850e3ffb">HasVoxels</a> () const</td></tr>
<tr class="memdesc:a8db35eb5094e07fbcd0a5588850e3ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> if the voxel grid contains voxels.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a8db35eb5094e07fbcd0a5588850e3ffb">More...</a><br /></td></tr>
<tr class="separator:a8db35eb5094e07fbcd0a5588850e3ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91f14e2b72df7a3c4afc09e05698f8ac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a91f14e2b72df7a3c4afc09e05698f8ac">HasColors</a> () const</td></tr>
<tr class="memdesc:a91f14e2b72df7a3c4afc09e05698f8ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <code>true</code> if the voxel grid contains voxel colors.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a91f14e2b72df7a3c4afc09e05698f8ac">More...</a><br /></td></tr>
<tr class="separator:a91f14e2b72df7a3c4afc09e05698f8ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1a5aaf4ebf581f0dac06180d4234326"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3i&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#af1a5aaf4ebf581f0dac06180d4234326">GetVoxel</a> (const Eigen::Vector3d &amp;point) const</td></tr>
<tr class="memdesc:af1a5aaf4ebf581f0dac06180d4234326"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns voxel index given query point.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#af1a5aaf4ebf581f0dac06180d4234326">More...</a><br /></td></tr>
<tr class="separator:af1a5aaf4ebf581f0dac06180d4234326"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c6adb3fe03b1c007cc363c8cebb3886"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a5c6adb3fe03b1c007cc363c8cebb3886">GetVoxelCenterCoordinate</a> (const Eigen::Vector3i &amp;idx) const</td></tr>
<tr class="memdesc:a5c6adb3fe03b1c007cc363c8cebb3886"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that returns the 3d coordinates of the queried voxel center.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a5c6adb3fe03b1c007cc363c8cebb3886">More...</a><br /></td></tr>
<tr class="separator:a5c6adb3fe03b1c007cc363c8cebb3886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe84627251094867050295e85b52c0c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#abe84627251094867050295e85b52c0c0">AddVoxel</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye">Voxel</a> &amp;voxel)</td></tr>
<tr class="memdesc:abe84627251094867050295e85b52c0c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a voxel with specified grid index and color.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#abe84627251094867050295e85b52c0c0">More...</a><br /></td></tr>
<tr class="separator:abe84627251094867050295e85b52c0c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c12d67b750b39789a4f0d1df7c84a3e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; Eigen::Vector3d &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a2c12d67b750b39789a4f0d1df7c84a3e">GetVoxelBoundingPoints</a> (const Eigen::Vector3i &amp;index) const</td></tr>
<tr class="memdesc:a2c12d67b750b39789a4f0d1df7c84a3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a vector of 3D coordinates that define the indexed voxel cube.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a2c12d67b750b39789a4f0d1df7c84a3e">More...</a><br /></td></tr>
<tr class="separator:a2c12d67b750b39789a4f0d1df7c84a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e0f0a1d5dda5a79a8a7d558585bf698"><td class="memItemLeft" align="right" valign="top">std::vector&lt; bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a8e0f0a1d5dda5a79a8a7d558585bf698">CheckIfIncluded</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;queries)</td></tr>
<tr class="separator:a8e0f0a1d5dda5a79a8a7d558585bf698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7671fc14d24566d78fd2cabcb8746387"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a7671fc14d24566d78fd2cabcb8746387">CarveDepthMap</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;depth_map, const <a class="el" href="classopen3d_1_1camera_1_1_pinhole_camera_par">camera::PinholeCameraParameters</a> &amp;camera_parameter, bool keep_voxels_outside_image)</td></tr>
<tr class="separator:a7671fc14d24566d78fd2cabcb8746387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f753a453ecd43e88d6b5f49a5bc246c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a0f753a453ecd43e88d6b5f49a5bc246c">CarveSilhouette</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;silhouette_mask, const <a class="el" href="classopen3d_1_1camera_1_1_pinhole_camera_par">camera::PinholeCameraParameters</a> &amp;camera_parameter, bool keep_voxels_outside_image)</td></tr>
<tr class="separator:a0f753a453ecd43e88d6b5f49a5bc246c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b133235a7b3036ac117893c01bc2741"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a0b133235a7b3036ac117893c01bc2741">CreateFromOctree</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;octree)</td></tr>
<tr class="separator:a0b133235a7b3036ac117893c01bc2741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb74255c98b2163d00e66b44193386ae"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">geometry::Octree</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#afb74255c98b2163d00e66b44193386ae">ToOctree</a> (const size_t &amp;max_depth) const</td></tr>
<tr class="separator:afb74255c98b2163d00e66b44193386ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac923b30ed7fc40654866aae71b45c332"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye">Voxel</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ac923b30ed7fc40654866aae71b45c332">GetVoxels</a> () const</td></tr>
<tr class="separator:ac923b30ed7fc40654866aae71b45c332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:a3bee61a0da428535d0eb9f62786fcab1 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a3bee61a0da428535d0eb9f62786fcab1">~Geometry3D</a> () override</td></tr>
<tr class="separator:a3bee61a0da428535d0eb9f62786fcab1 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2ab7fb19c0fc8f4ccbc9a776be2e23 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">Geometry3D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5c2ab7fb19c0fc8f4ccbc9a776be2e23">Rotate</a> (const Eigen::Matrix3d &amp;R)</td></tr>
<tr class="separator:a5c2ab7fb19c0fc8f4ccbc9a776be2e23 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a1c2eb5a3e6c0a47cc31e38d086d07c54">~Geometry</a> ()</td></tr>
<tr class="separator:a1c2eb5a3e6c0a47cc31e38d086d07c54 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">GetGeometryType</a> () const</td></tr>
<tr class="memdesc:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one of registered geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a194473f920417162aa501bfb7df1d4b9">More...</a><br /></td></tr>
<tr class="separator:a194473f920417162aa501bfb7df1d4b9 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">Dimension</a> () const</td></tr>
<tr class="memdesc:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the geometry is 2D or 3D.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a669ce49f3f489ec8816fb3ad228de081">More...</a><br /></td></tr>
<tr class="separator:a669ce49f3f489ec8816fb3ad228de081 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a7cba98e39c57eb2544eedfb525807a06">GetName</a> () const</td></tr>
<tr class="separator:a7cba98e39c57eb2544eedfb525807a06 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a4229d9bdaded622121f443cbb81626b8">SetName</a> (const std::string &amp;<a class="el" href="_o3_d_visualizer_8cpp.html#a9b45b3e13bd9167aab02e17e08916231">name</a>)</td></tr>
<tr class="separator:a4229d9bdaded622121f443cbb81626b8 inherit pub_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ad8d9b7171b75b718abbedfd0e387980f"><td class="memItemLeft" align="right" valign="top">static std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ad8d9b7171b75b718abbedfd0e387980f">CreateDense</a> (const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, double voxel_size, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, double <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>, double depth)</td></tr>
<tr class="separator:ad8d9b7171b75b718abbedfd0e387980f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9239348e9de069abaf5912b92dd2b84"><td class="memItemLeft" align="right" valign="top">static std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ae9239348e9de069abaf5912b92dd2b84">CreateFromPointCloud</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">PointCloud</a> &amp;input, double voxel_size)</td></tr>
<tr class="separator:ae9239348e9de069abaf5912b92dd2b84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7082a565360088f9d52eed0a525f1337"><td class="memItemLeft" align="right" valign="top">static std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a7082a565360088f9d52eed0a525f1337">CreateFromPointCloudWithinBounds</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">PointCloud</a> &amp;input, double voxel_size, const Eigen::Vector3d &amp;min_bound, const Eigen::Vector3d &amp;max_bound)</td></tr>
<tr class="separator:a7082a565360088f9d52eed0a525f1337"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02decf53fb8e4427f2029761f0519894"><td class="memItemLeft" align="right" valign="top">static std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a02decf53fb8e4427f2029761f0519894">CreateFromTriangleMesh</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">TriangleMesh</a> &amp;input, double voxel_size)</td></tr>
<tr class="separator:a02decf53fb8e4427f2029761f0519894"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1f4b34e2107b9b8561f07c855a58b4a"><td class="memItemLeft" align="right" valign="top">static std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ab1f4b34e2107b9b8561f07c855a58b4a">CreateFromTriangleMeshWithinBounds</a> (const <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">TriangleMesh</a> &amp;input, double voxel_size, const Eigen::Vector3d &amp;min_bound, const Eigen::Vector3d &amp;max_bound)</td></tr>
<tr class="separator:ab1f4b34e2107b9b8561f07c855a58b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">GetRotationMatrixFromXYZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XYZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab557dd1610ea7fae73d00c706bbd529f">More...</a><br /></td></tr>
<tr class="separator:ab557dd1610ea7fae73d00c706bbd529f inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">GetRotationMatrixFromYZX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YZX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#af5b8ef97b798c623b4e2fe72d2afda03">More...</a><br /></td></tr>
<tr class="separator:af5b8ef97b798c623b4e2fe72d2afda03 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">GetRotationMatrixFromZXY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZXY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#afbb9b2eabab1ced5c25358c3a69c8d13">More...</a><br /></td></tr>
<tr class="separator:afbb9b2eabab1ced5c25358c3a69c8d13 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">GetRotationMatrixFromXZY</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from XZY RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a82f91e4bddbb07a3ccd6692db599eca7">More...</a><br /></td></tr>
<tr class="separator:a82f91e4bddbb07a3ccd6692db599eca7 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">GetRotationMatrixFromZYX</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from ZYX RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac96c4285c5d5cc80f14458559c7a3826">More...</a><br /></td></tr>
<tr class="separator:ac96c4285c5d5cc80f14458559c7a3826 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">GetRotationMatrixFromYXZ</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from YXZ RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a16ee2e4c68c2c55ac4ab8b533b11dad0">More...</a><br /></td></tr>
<tr class="separator:a16ee2e4c68c2c55ac4ab8b533b11dad0 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">GetRotationMatrixFromAxisAngle</a> (const Eigen::Vector3d &amp;rotation)</td></tr>
<tr class="memdesc:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from AxisAngle RotationType.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa9356dfe2ba6a44df60588f4b2a29056">More...</a><br /></td></tr>
<tr class="separator:aa9356dfe2ba6a44df60588f4b2a29056 inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">static Eigen::Matrix3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">GetRotationMatrixFromQuaternion</a> (const Eigen::Vector4d &amp;rotation)</td></tr>
<tr class="memdesc:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Rotation Matrix from Quaternion.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ad9966dec46a4808e5acd9318fa6bf73a">More...</a><br /></td></tr>
<tr class="separator:ad9966dec46a4808e5acd9318fa6bf73a inherit pub_static_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:ad6fbe573d88b16af0540f4f8b516b261"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ad6fbe573d88b16af0540f4f8b516b261">voxel_size_</a> = 0.0</td></tr>
<tr class="memdesc:ad6fbe573d88b16af0540f4f8b516b261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of the voxel.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#ad6fbe573d88b16af0540f4f8b516b261">More...</a><br /></td></tr>
<tr class="separator:ad6fbe573d88b16af0540f4f8b516b261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a659469f1a429559d7c295ac5de403247"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a659469f1a429559d7c295ac5de403247">origin_</a> = Eigen::Vector3d::Zero()</td></tr>
<tr class="memdesc:a659469f1a429559d7c295ac5de403247"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coorindate of the origin point.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a659469f1a429559d7c295ac5de403247">More...</a><br /></td></tr>
<tr class="separator:a659469f1a429559d7c295ac5de403247"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a797d8ae437fe49440bab84205acf78"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; Eigen::Vector3i, <a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye">Voxel</a>, <a class="el" href="structopen3d_1_1utility_1_1hash__eigen.44c.d">utility::hash_eigen</a>&lt; Eigen::Vector3i &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a4a797d8ae437fe49440bab84205acf78">voxels_</a></td></tr>
<tr class="memdesc:a4a797d8ae437fe49440bab84205acf78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Voxels contained in voxel grid.  <a href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a4a797d8ae437fe49440bab84205acf78">More...</a><br /></td></tr>
<tr class="separator:a4a797d8ae437fe49440bab84205acf78"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> { <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaee9349b5cdfd717c7e1234edce6b72fa">PointCloud</a> = 1
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7fe2447f30c8de08b433c3631d7d78ff">VoxelGrid</a> = 2
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea3d33fe96c4d284d37a6ee296db5e33ac">Octree</a> = 3
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eae3e5995e4fc46bdc12e733558dd3120a">LineSet</a> = 4
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea2ad6a25f1ccff1433467bae74193446e">MeshBase</a> = 5
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea70be243de75004a602f012fece7c0fad">TriangleMesh</a> = 6
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaa79a2e14e35ed8368058ad93d3d39dc3">HalfEdgeTriangleMesh</a> = 7
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eabe53a0541a6d36f6ecb879fa2c584b08">Image</a> = 8
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea7d64b6deb2cbf0f1712bd6e93b5755ba">RGBDImage</a> = 9
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea48e9695b4242a3a90ea76c7cc87162de">TetraMesh</a> = 10
, <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8eaff8b20067506aaf814f1e5df2494c2f1">OrientedBoundingBox</a> = 11
, <br />
&#160;&#160;<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8ea0446516d578c6abaae2f3adc7239fa61">AxisAlignedBoundingBox</a> = 12
<br />
 }</td></tr>
<tr class="memdesc:a69975c2b054d4fd12cf36866a030ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies possible geometry types.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">More...</a><br /></td></tr>
<tr class="separator:a69975c2b054d4fd12cf36866a030ed8e inherit pub_types_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry3_d')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">open3d::geometry::Geometry3D</a></td></tr>
<tr class="memitem:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">Geometry3D</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>)</td></tr>
<tr class="memdesc:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab7c4a13882fb57765e55e164e34eedfb">More...</a><br /></td></tr>
<tr class="separator:ab7c4a13882fb57765e55e164e34eedfb inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">ComputeMinBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute min bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa03dcc177e8b50632e95d7dd7d838976">More...</a><br /></td></tr>
<tr class="separator:aa03dcc177e8b50632e95d7dd7d838976 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">ComputeMaxBound</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute max bound of a list points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a487b1d81a14ef17bf70e8c4d94d5c18c">More...</a><br /></td></tr>
<tr class="separator:a487b1d81a14ef17bf70e8c4d94d5c18c inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">Eigen::Vector3d&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">ComputeCenter</a> (const std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computer center of a list of points.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac8e6a432ab26afcb7fb572313ddc90ce">More...</a><br /></td></tr>
<tr class="separator:ac8e6a432ab26afcb7fb572313ddc90ce inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">ResizeAndPaintUniformColor</a> (std::vector&lt; Eigen::Vector3d &gt; &amp;colors, const size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, const Eigen::Vector3d &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>) const</td></tr>
<tr class="memdesc:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resizes the colors vector and paints a uniform color.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a1fb3da9e31897b4279f02327daca34cd">More...</a><br /></td></tr>
<tr class="separator:a1fb3da9e31897b4279f02327daca34cd inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">TransformPoints</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>) const</td></tr>
<tr class="memdesc:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all points with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a0e3a5c603c2c9a0e05c1af1a4a279508">More...</a><br /></td></tr>
<tr class="separator:a0e3a5c603c2c9a0e05c1af1a4a279508 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">TransformNormals</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the normals with the transformation matrix.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#ac1df456f2e6dddac794f7ab2186a7ce5">More...</a><br /></td></tr>
<tr class="separator:ac1df456f2e6dddac794f7ab2186a7ce5 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">TransformCovariances</a> (const Eigen::Matrix4d &amp;transformation, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms all covariance matrices with the transformation.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a623c3e7c883e0bcfc2987aaf92c96597">More...</a><br /></td></tr>
<tr class="separator:a623c3e7c883e0bcfc2987aaf92c96597 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">TranslatePoints</a> (const Eigen::Vector3d &amp;translation, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, bool relative) const</td></tr>
<tr class="memdesc:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply translation to the geometry coordinates.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4029dff278938fcf7eb73b4133f76e67">More...</a><br /></td></tr>
<tr class="separator:a4029dff278938fcf7eb73b4133f76e67 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">ScalePoints</a> (const double scale, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the coordinates of all points by the scaling factor <code>scale</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a26106b31a3acecad90f44293c83a3a1b">More...</a><br /></td></tr>
<tr class="separator:a26106b31a3acecad90f44293c83a3a1b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">RotatePoints</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#af7f8f4a4e39e09fdb5e9f02330ecabef">points</a>, const Eigen::Vector3d &amp;center) const</td></tr>
<tr class="memdesc:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all points with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a901a9fda0a2b40a8a53ea45ff18a1760">More...</a><br /></td></tr>
<tr class="separator:a901a9fda0a2b40a8a53ea45ff18a1760 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">RotateNormals</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Vector3d &gt; &amp;normals) const</td></tr>
<tr class="memdesc:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all normals with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa2448e4cfbdb49e90e72289e36113d9b">More...</a><br /></td></tr>
<tr class="separator:aa2448e4cfbdb49e90e72289e36113d9b inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">RotateCovariances</a> (const Eigen::Matrix3d &amp;R, std::vector&lt; Eigen::Matrix3d &gt; &amp;covariances) const</td></tr>
<tr class="memdesc:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate all covariance matrices with the rotation matrix <code>R</code>.  <a href="classopen3d_1_1geometry_1_1_geometry3_d.402#a9ce8a11fd0762558a620f448f18ebae3">More...</a><br /></td></tr>
<tr class="separator:a9ce8a11fd0762558a620f448f18ebae3 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry3_d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1geometry_1_1_geometry"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1geometry_1_1_geometry')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del">open3d::geometry::Geometry</a></td></tr>
<tr class="memitem:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">Geometry</a> (<a class="el" href="classopen3d_1_1geometry_1_1_geometry.400.del#a69975c2b054d4fd12cf36866a030ed8e">GeometryType</a> <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#aff17911edc8208aa8ddb1c7c52c78389">type</a>, int dimension)</td></tr>
<tr class="memdesc:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parameterized Constructor.  <a href="classopen3d_1_1geometry_1_1_geometry.400.del#ae0bb1c2bed5d65d1ecd0e81370a12d99">More...</a><br /></td></tr>
<tr class="separator:ae0bb1c2bed5d65d1ecd0e81370a12d99 inherit pro_methods_classopen3d_1_1geometry_1_1_geometry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> is a collection of voxels which are aligned in grid. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a3129af80b114fca37229e15e10020dc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3129af80b114fca37229e15e10020dc7">&#9670;&nbsp;</a></span>VoxelGrid() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::VoxelGrid::VoxelGrid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Constructor. </p>

</div>
</div>
<a id="a32aaf2fee63a31a06b54ae81c8aaf581"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32aaf2fee63a31a06b54ae81c8aaf581">&#9670;&nbsp;</a></span>VoxelGrid() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::VoxelGrid::VoxelGrid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td>
          <td class="paramname"><em>src_voxel_grid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy Constructor. </p>

</div>
</div>
<a id="affa56d1724028ffedd9ff96f3f2ce342"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affa56d1724028ffedd9ff96f3f2ce342">&#9670;&nbsp;</a></span>~VoxelGrid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::geometry::VoxelGrid::~VoxelGrid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abe84627251094867050295e85b52c0c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe84627251094867050295e85b52c0c0">&#9670;&nbsp;</a></span>AddVoxel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::VoxelGrid::AddVoxel </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye">Voxel</a> &amp;&#160;</td>
          <td class="paramname"><em>voxel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a voxel with specified grid index and color. </p>

</div>
</div>
<a id="a7671fc14d24566d78fd2cabcb8746387"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7671fc14d24566d78fd2cabcb8746387">&#9670;&nbsp;</a></span>CarveDepthMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::CarveDepthMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>depth_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1camera_1_1_pinhole_camera_par">camera::PinholeCameraParameters</a> &amp;&#160;</td>
          <td class="paramname"><em>camera_parameter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep_voxels_outside_image</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove all voxels from the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> where none of the boundary points of the voxel projects to depth value that is smaller, or equal than the projected depth of the boundary point. If keep_voxels_outside_image is true then voxels are only carved if all boundary points project to a valid image location.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">depth_map</td><td>Depth map (<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a>) used for <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> carving. </td></tr>
    <tr><td class="paramname">camera_parameter</td><td>Input Camera Parameters. </td></tr>
    <tr><td class="paramname">keep_voxels_outside_image</td><td>Project all voxels to a valid location. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0f753a453ecd43e88d6b5f49a5bc246c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f753a453ecd43e88d6b5f49a5bc246c">&#9670;&nbsp;</a></span>CarveSilhouette()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::CarveSilhouette </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>silhouette_mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1camera_1_1_pinhole_camera_par">camera::PinholeCameraParameters</a> &amp;&#160;</td>
          <td class="paramname"><em>camera_parameter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep_voxels_outside_image</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove all voxels from the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> where none of the boundary points of the voxel projects to a valid mask pixel (pixel value &gt; 0). If keep_voxels_outside_image is true then voxels are only carved if all boundary points project to a valid image location.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">silhouette_mask</td><td>Silhouette mask (<a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye" title="The Image class stores image with customizable width, height, num of channels and bytes per channel.">Image</a>) used for <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> carving. </td></tr>
    <tr><td class="paramname">camera_parameter</td><td>Input Camera Parameters. </td></tr>
    <tr><td class="paramname">keep_voxels_outside_image</td><td>Project all voxels to a valid location. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8e0f0a1d5dda5a79a8a7d558585bf698"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e0f0a1d5dda5a79a8a7d558585bf698">&#9670;&nbsp;</a></span>CheckIfIncluded()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; bool &gt; open3d::geometry::VoxelGrid::CheckIfIncluded </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; Eigen::Vector3d &gt; &amp;&#160;</td>
          <td class="paramname"><em>queries</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise check if a query in the list is included in the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> Queries are double precision and are mapped to the closest voxel. </p>

</div>
</div>
<a id="a6c21e599148f858ab8928008358cbf43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c21e599148f858ab8928008358cbf43">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all elements in the geometry. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5d18d746cde60c2e79cd6109c505ea22">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ad8d9b7171b75b718abbedfd0e387980f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8d9b7171b75b718abbedfd0e387980f">&#9670;&nbsp;</a></span>CreateDense()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt; open3d::geometry::VoxelGrid::CreateDense </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>origin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>voxel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>depth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a voxel grid where every voxel is set (hence dense). This is a useful starting point for voxel carving.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">origin</td><td>Coordinate center of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> </td></tr>
    <tr><td class="paramname">color</td><td><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a> color for all voxels of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a>. </td></tr>
    <tr><td class="paramname">voxel_size</td><td><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a> size of of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> construction. </td></tr>
    <tr><td class="paramname">width</td><td>Spatial width extend of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a>. </td></tr>
    <tr><td class="paramname">height</td><td>Spatial height extend of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a>. </td></tr>
    <tr><td class="paramname">depth</td><td>Spatial depth extend of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0b133235a7b3036ac117893c01bc2741"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b133235a7b3036ac117893c01bc2741">&#9670;&nbsp;</a></span>CreateFromOctree()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::geometry::VoxelGrid::CreateFromOctree </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">Octree</a> &amp;&#160;</td>
          <td class="paramname"><em>octree</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> from <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">octree</td><td>The input <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae9239348e9de069abaf5912b92dd2b84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9239348e9de069abaf5912b92dd2b84">&#9670;&nbsp;</a></span>CreateFromPointCloud()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt; open3d::geometry::VoxelGrid::CreateFromPointCloud </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>voxel_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> from a given <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a>. The color value of a given voxel is the average color value of the points that fall into it (if the <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a> has colors). The bounds of the created <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> are computed from the <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The input <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a>. </td></tr>
    <tr><td class="paramname">voxel_size</td><td><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a> size of of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> construction. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7082a565360088f9d52eed0a525f1337"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7082a565360088f9d52eed0a525f1337">&#9670;&nbsp;</a></span>CreateFromPointCloudWithinBounds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt; open3d::geometry::VoxelGrid::CreateFromPointCloudWithinBounds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b">PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>voxel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>min_bound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>max_bound</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> from a given <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a>. The color value of a given voxel is the average color value of the points that fall into it (if the <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a> has colors). The bounds of the created <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> are defined by the given parameters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The input <a class="el" href="classopen3d_1_1geometry_1_1_point_cloud.41b" title="A point cloud consists of point coordinates, and optionally point colors and point normals.">PointCloud</a>. </td></tr>
    <tr><td class="paramname">voxel_size</td><td><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a> size of of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> construction. </td></tr>
    <tr><td class="paramname">min_bound</td><td>Minimum boundary point for the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> to create. </td></tr>
    <tr><td class="paramname">max_bound</td><td>Maximum boundary point for the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> to create. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a02decf53fb8e4427f2029761f0519894"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02decf53fb8e4427f2029761f0519894">&#9670;&nbsp;</a></span>CreateFromTriangleMesh()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt; open3d::geometry::VoxelGrid::CreateFromTriangleMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>voxel_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> from a given <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a>. No color information is converted. The bounds of the created <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> are computed from the <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The input <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a>. </td></tr>
    <tr><td class="paramname">voxel_size</td><td><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a> size of of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> construction. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab1f4b34e2107b9b8561f07c855a58b4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1f4b34e2107b9b8561f07c855a58b4a">&#9670;&nbsp;</a></span>CreateFromTriangleMeshWithinBounds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &gt; open3d::geometry::VoxelGrid::CreateFromTriangleMeshWithinBounds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>voxel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>min_bound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>max_bound</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> from a given <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a>. No color information is converted. The bounds of the created <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> are defined by the given parameters..</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The input <a class="el" href="classopen3d_1_1geometry_1_1_triangle_mesh.40" title="Triangle mesh contains vertices and triangles represented by the indices to the vertices.">TriangleMesh</a>. </td></tr>
    <tr><td class="paramname">voxel_size</td><td><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a> size of of the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> construction. </td></tr>
    <tr><td class="paramname">min_bound</td><td>Minimum boundary point for the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> to create. </td></tr>
    <tr><td class="paramname">max_bound</td><td>Maximum boundary point for the <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d" title="VoxelGrid is a collection of voxels which are aligned in grid.">VoxelGrid</a> to create. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a05168fae52917fbc53e4b6366cd29f69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05168fae52917fbc53e4b6366cd29f69">&#9670;&nbsp;</a></span>GetAxisAlignedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">AxisAlignedBoundingBox</a> open3d::geometry::VoxelGrid::GetAxisAlignedBoundingBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates the axis-aligned bounding box around the object. Further details in <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou#a2e4d811d697c9e1de0a35439d025d778" title="Default constructor.">AxisAlignedBoundingBox::AxisAlignedBoundingBox()</a> </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a6adfe40c8c59be751e3079a2a5cba874">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ab94a328b55529bb33f5d428656e6a86a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab94a328b55529bb33f5d428656e6a86a">&#9670;&nbsp;</a></span>GetCenter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::VoxelGrid::GetCenter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the center of the geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a32d884b24e1a680bf2adecd713182ffb">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a9eaeb8d615431d53b95b134ca5c93590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eaeb8d615431d53b95b134ca5c93590">&#9670;&nbsp;</a></span>GetMaxBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::VoxelGrid::GetMaxBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns max bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a4ba1483835f630921a290c36d0dc0528">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a8422b89bb6b28d31e291e1960d1e61cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8422b89bb6b28d31e291e1960d1e61cf">&#9670;&nbsp;</a></span>GetMinBound()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::VoxelGrid::GetMinBound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns min bounds for geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5ce0c9ab3b7c4addc07732e69ea0d48d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="af51ee30927f7ae619ad69b399c5bc6c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af51ee30927f7ae619ad69b399c5bc6c4">&#9670;&nbsp;</a></span>GetMinimalOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::VoxelGrid::GetMinimalOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an oriented bounding box that is identical to the axis-aligned bounding from <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a05168fae52917fbc53e4b6366cd29f69">GetAxisAlignedBoundingBox()</a>. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a371b43251251c0873ca427b8dcb5f309">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a452e8855ff458f519d6679ec1e4c6f22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a452e8855ff458f519d6679ec1e4c6f22">&#9670;&nbsp;</a></span>GetOrientedBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_oriented_boundin">OrientedBoundingBox</a> open3d::geometry::VoxelGrid::GetOrientedBoundingBox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>robust</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an oriented bounding box that is identical to the axis-aligned bounding from <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d#a05168fae52917fbc53e4b6366cd29f69">GetAxisAlignedBoundingBox()</a>. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aa390b8742e15d903bf394cc3b7518d08">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="af1a5aaf4ebf581f0dac06180d4234326"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1a5aaf4ebf581f0dac06180d4234326">&#9670;&nbsp;</a></span>GetVoxel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3i open3d::geometry::VoxelGrid::GetVoxel </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns voxel index given query point. </p>

</div>
</div>
<a id="a2c12d67b750b39789a4f0d1df7c84a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c12d67b750b39789a4f0d1df7c84a3e">&#9670;&nbsp;</a></span>GetVoxelBoundingPoints()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; Eigen::Vector3d &gt; open3d::geometry::VoxelGrid::GetVoxelBoundingPoints </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3i &amp;&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a vector of 3D coordinates that define the indexed voxel cube. </p>

</div>
</div>
<a id="a5c6adb3fe03b1c007cc363c8cebb3886"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c6adb3fe03b1c007cc363c8cebb3886">&#9670;&nbsp;</a></span>GetVoxelCenterCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::VoxelGrid::GetVoxelCenterCoordinate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3i &amp;&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function that returns the 3d coordinates of the queried voxel center. </p>

</div>
</div>
<a id="ac923b30ed7fc40654866aae71b45c332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac923b30ed7fc40654866aae71b45c332">&#9670;&nbsp;</a></span>GetVoxels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye">Voxel</a> &gt; open3d::geometry::VoxelGrid::GetVoxels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns List of <code><a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye" title="Base Voxel class, containing grid id and color.">Voxel</a></code>: Voxels contained in voxel grid. Changes to the voxels returned from this method are not reflected in the voxel grid. </p>

</div>
</div>
<a id="a91f14e2b72df7a3c4afc09e05698f8ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91f14e2b72df7a3c4afc09e05698f8ac">&#9670;&nbsp;</a></span>HasColors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::VoxelGrid::HasColors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> if the voxel grid contains voxel colors. </p>

</div>
</div>
<a id="a8db35eb5094e07fbcd0a5588850e3ffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8db35eb5094e07fbcd0a5588850e3ffb">&#9670;&nbsp;</a></span>HasVoxels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::VoxelGrid::HasVoxels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> if the voxel grid contains voxels. </p>

</div>
</div>
<a id="a4aa9a4074406a897fbed07aec7266956"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4aa9a4074406a897fbed07aec7266956">&#9670;&nbsp;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::geometry::VoxelGrid::IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns <code>true</code> iff the geometry is empty. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a5cece4be56baea48a365ab22f88f89ea">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a23cfc64e7d604b39b2dcd92b530b879a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23cfc64e7d604b39b2dcd92b530b879a">&#9670;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> open3d::geometry::VoxelGrid::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td>
          <td class="paramname"><em>voxelgrid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae59f3dd2efa359e7e423b8288834b4d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae59f3dd2efa359e7e423b8288834b4d9">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp;&#160;</td>
          <td class="paramname"><em>voxelgrid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3eae1fb9d0afb0fa2b90f8ac5e82bb15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eae1fb9d0afb0fa2b90f8ac5e82bb15">&#9670;&nbsp;</a></span>Rotate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::Rotate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>R</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply rotation to the geometry coordinates and normals. Given a rotation matrix \(R\), and center \(c\), a given point \(p\) is transformed according to \(R (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">R</td><td>A 3x3 rotation matrix </td></tr>
    <tr><td class="paramname">center</td><td>Rotation center that is used for the rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#aab4555d0b3e65d35450a2ec57a14ff4d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="a7cabe44f714a80c750ece424c1f7ddcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cabe44f714a80c750ece424c1f7ddcc">&#9670;&nbsp;</a></span>Scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::Scale </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply scaling to the geometry coordinates. Given a scaling factor \(s\), and center \(c\), a given point \(p\) is transformed according to \(s (p - c) + c\). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scale</td><td>The scale parameter that is multiplied to the points/vertices of the geometry. </td></tr>
    <tr><td class="paramname">center</td><td>Scale center that is used to resize the geometry. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a54876d016ceed8e4885dc25b22fa176e">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="afb74255c98b2163d00e66b44193386ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb74255c98b2163d00e66b44193386ae">&#9670;&nbsp;</a></span>ToOctree()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay">geometry::Octree</a> &gt; open3d::geometry::VoxelGrid::ToOctree </td>
          <td>(</td>
          <td class="paramtype">const size_t &amp;&#160;</td>
          <td class="paramname"><em>max_depth</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert to <a class="el" href="classopen3d_1_1geometry_1_1_octree.41a.delay" title="Octree datastructure.">Octree</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">max_depth</td><td>Maximum depth of the octree. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a91ede3a2e8130ee2380f990efd9c9b24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91ede3a2e8130ee2380f990efd9c9b24">&#9670;&nbsp;</a></span>Transform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::Transform </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix4d &amp;&#160;</td>
          <td class="paramname"><em>transformation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply transformation (4x4 matrix) to the geometry coordinates. </p>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#ab99e2171cafbe1039aaebd76d178db0d">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<a id="ac24d9842d433547fcb98627e8722b8f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac24d9842d433547fcb98627e8722b8f6">&#9670;&nbsp;</a></span>Translate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1geometry_1_1_voxel_grid.426.d">VoxelGrid</a> &amp; open3d::geometry::VoxelGrid::Translate </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3d &amp;&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply translation to the geometry coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">translation</td><td>A 3D vector to transform the geometry. </td></tr>
    <tr><td class="paramname">relative</td><td>If <code>true</code>, the <code>translation</code> is directly applied to the geometry. Otherwise, the geometry center is moved to the <code>translation</code>. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402#a167e8cb72ba68af89c6f418d59dc8bfd">open3d::geometry::Geometry3D</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a659469f1a429559d7c295ac5de403247"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a659469f1a429559d7c295ac5de403247">&#9670;&nbsp;</a></span>origin_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector3d open3d::geometry::VoxelGrid::origin_ = Eigen::Vector3d::Zero()</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Coorindate of the origin point. </p>

</div>
</div>
<a id="ad6fbe573d88b16af0540f4f8b516b261"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6fbe573d88b16af0540f4f8b516b261">&#9670;&nbsp;</a></span>voxel_size_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double open3d::geometry::VoxelGrid::voxel_size_ = 0.0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Size of the voxel. </p>

</div>
</div>
<a id="a4a797d8ae437fe49440bab84205acf78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a797d8ae437fe49440bab84205acf78">&#9670;&nbsp;</a></span>voxels_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt;Eigen::Vector3i, <a class="el" href="classopen3d_1_1geometry_1_1_voxel.425.delaye">Voxel</a>, <a class="el" href="structopen3d_1_1utility_1_1hash__eigen.44c.d">utility::hash_eigen</a>&lt;Eigen::Vector3i&gt; &gt; open3d::geometry::VoxelGrid::voxels_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Voxels contained in voxel grid. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_voxel_grid_8h_source.html">VoxelGrid.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_voxel_grid_8cpp.html">VoxelGrid.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/geometry/<a class="el" href="_voxel_grid_factory_8cpp.html">VoxelGridFactory.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1geometry_1_1_voxel_grid.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:56:13 GMT -->
</html>
