<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_continuous_conv_transpose_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:04:55 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/ml/impl/continuous_conv/ContinuousConvTranspose.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_b383250e6a9804e003b118f7109c729e.4d9.del">ml</a></li><li class="navelem"><a class="el" href="dir_d2402e7861dbbf5555a99e031eda3ca3.8e8.del">impl</a></li><li class="navelem"><a class="el" href="dir_4b58b113595680d998266bc1fc8ab010.c11.del">continuous_conv</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ContinuousConvTranspose.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_continuous_conv_transpose_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;tbb/parallel_for.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinate_transformation_8h.html">open3d/ml/impl/continuous_conv/CoordinateTransformation.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span>ml {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span>impl {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>TFeat,</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;          <span class="keyword">class </span>TOut,</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;          <span class="keyword">class </span>TReal,</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;          <span class="keyword">class </span>TIndex,</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;          <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">InterpolationMode</a> INTERPOLATION,</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;          <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fb">CoordinateMapping</a> MAPPING,</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;          <span class="keywordtype">bool</span> ALIGN_CORNERS,</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;          <span class="keywordtype">bool</span> INDIVIDUAL_EXTENT,</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;          <span class="keywordtype">bool</span> ISOTROPIC_EXTENT,</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;          <span class="keywordtype">bool</span> NORMALIZE&gt;</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1ml_1_1impl.html#a8642d185de7ece8c2d37ea649b143a12">   30</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a8642d185de7ece8c2d37ea649b143a12">_CConvTransposeComputeFeaturesCPU</a>(</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        TOut* out_features,</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keyword">const</span> std::vector&lt;int&gt;&amp; filter_dims,</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keyword">const</span> TFeat* filter,</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordtype">size_t</span> num_out,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">const</span> TReal* out_positions,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keyword">const</span> TFeat* out_importance,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordtype">size_t</span> num_inp,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keyword">const</span> TReal* inp_positions,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keyword">const</span> TFeat* inp_features,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keyword">const</span> TFeat* inp_neighbors_importance_sum,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keyword">const</span> int64_t* inp_neighbors_row_splits,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordtype">size_t</span> neighbors_index_size,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> TIndex* neighbors_index,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keyword">const</span> TFeat* neighbors_importance,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keyword">const</span> int64_t* neighbors_row_splits,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keyword">const</span> TReal* extents,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keyword">const</span> TReal* offsets) {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> NEIGHBORS_IMPORTANCE = inp_neighbors_importance_sum;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a> = 32;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">typedef</span> Eigen::Array&lt;TReal, VECSIZE, 1&gt; Vec_t;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="structopen3d_1_1ml_1_1impl_1_1_interpolation">InterpolationVec&lt;TReal, VECSIZE, INTERPOLATION&gt;</a> InterpolationVec_t;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    InterpolationVec_t interpolation;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_channels = filter_dims[filter_dims.size() - 2];</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_channels = filter_dims[filter_dims.size() - 1];</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">int</span> spatial_filter_size = 1;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 3; ++i) spatial_filter_size *= filter_dims[i];</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    Eigen::Array&lt;int, 3, 1&gt; filter_size_xyz(filter_dims[2], filter_dims[1],</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                            filter_dims[0]);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    memset(out_features, 0, <span class="keyword">sizeof</span>(TOut) * num_out * out_channels);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    tbb::parallel_for(</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            tbb::blocked_range&lt;size_t&gt;(0, num_out, 32),</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            [&amp;](<span class="keyword">const</span> tbb::blocked_range&lt;size_t&gt;&amp; r) {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordtype">int</span> range_length = r.end() - r.begin();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                Eigen::Matrix&lt;TFeat, Eigen::Dynamic, Eigen::Dynamic&gt; <a class="code" href="_point_cloud_planar_patch_detection_8cpp.3c3#ac970fa185e639f6057b92195881e2512">B</a>(</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                        in_channels * spatial_filter_size, range_length);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <a class="code" href="_point_cloud_planar_patch_detection_8cpp.3c3#ac970fa185e639f6057b92195881e2512">B</a>.setZero();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">typedef</span> Eigen::Array&lt;TFeat, VECSIZE, Eigen::Dynamic&gt; Matrix;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                Matrix infeat(<a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a>, in_channels);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                Eigen::Array&lt;TReal, 3, 1&gt; offsets_(offsets[0], offsets[1],</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                   offsets[2]);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                Eigen::Array&lt;TReal, VECSIZE, 3&gt; inv_extents;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">if</span> (INDIVIDUAL_EXTENT == <span class="keyword">false</span>) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keywordflow">if</span> (ISOTROPIC_EXTENT) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        inv_extents = 1 / extents[0];</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        inv_extents.col(0) = 1 / extents[0];</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        inv_extents.col(1) = 1 / extents[1];</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        inv_extents.col(2) = 1 / extents[2];</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> out_idx = r.begin(); out_idx != r.end();</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                     ++out_idx) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> out_col = out_idx - r.begin();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">size_t</span> neighbor_start = neighbors_row_splits[out_idx];</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">size_t</span> neighbor_end =</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                            (out_idx + 1 &lt; num_out</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                     ? neighbors_row_splits[out_idx + 1]</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                     : neighbors_index_size);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keyword">typename</span> InterpolationVec_t::Weight_t interp_weights;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keyword">typename</span> InterpolationVec_t::Idx_t interp_indices;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keywordtype">int</span> vec_valid_count = 0;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    Vec_t x, y, z;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="comment">// set to zero to avoid problems with vectors with less than</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="comment">// VECSIZE valid entries</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    x.setZero();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    y.setZero();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    z.setZero();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> n = neighbor_start; n &lt; neighbor_end; ++n) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">size_t</span> inp_idx = neighbors_index[n];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> i = vec_valid_count;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        x(i) = out_positions[out_idx * 3 + 0] -</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                               inp_positions[inp_idx * 3 + 0];</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                        y(i) = out_positions[out_idx * 3 + 1] -</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                               inp_positions[inp_idx * 3 + 1];</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        z(i) = out_positions[out_idx * 3 + 2] -</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                               inp_positions[inp_idx * 3 + 2];</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <span class="keywordflow">if</span> (INDIVIDUAL_EXTENT) {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                            <span class="keywordflow">if</span> (ISOTROPIC_EXTENT) {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                inv_extents.row(i) = 1 / extents[inp_idx];</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                inv_extents(i, 0) =</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                        1 / extents[3 * inp_idx + 0];</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                inv_extents(i, 1) =</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                        1 / extents[3 * inp_idx + 1];</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                inv_extents(i, 2) =</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                        1 / extents[3 * inp_idx + 2];</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                            }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        TFeat n_importance = NEIGHBORS_IMPORTANCE</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                                     ? neighbors_importance[n]</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                                     : TFeat(1);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ic = 0; ic &lt; in_channels; ++ic)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                            infeat(i, ic) =</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                    inp_features[inp_idx * in_channels + ic] *</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                    n_importance;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="keywordflow">if</span> (NORMALIZE) {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                            TFeat normalizer(1);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            <span class="keywordflow">if</span> (NEIGHBORS_IMPORTANCE) {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                <span class="keywordflow">if</span> (inp_neighbors_importance_sum[inp_idx] !=</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                    TFeat(0))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                    normalizer /= inp_neighbors_importance_sum</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                            [inp_idx];</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                <span class="keywordtype">size_t</span> num_inp_neighbors;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">size_t</span> inp_neighbor_start =</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                        inp_neighbors_row_splits[inp_idx];</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">size_t</span> inp_neighbor_end =</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                        inp_neighbors_row_splits[inp_idx + 1];</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                num_inp_neighbors =</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                        inp_neighbor_end - inp_neighbor_start;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                <span class="keywordflow">if</span> (num_inp_neighbors &gt; 0)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                    normalizer /= TFeat(num_inp_neighbors);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                            }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ic = 0; ic &lt; in_channels; ++ic)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                infeat(i, ic) *= normalizer;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        ++vec_valid_count;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <span class="keywordflow">if</span> (vec_valid_count == <a class="code" href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a> ||</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                            n + 1 == neighbor_end) {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                            ComputeFilterCoordinates&lt;ALIGN_CORNERS, MAPPING&gt;(</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                    x, y, z, filter_size_xyz, inv_extents,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                    offsets_);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                            interpolation.Interpolate(</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                    interp_weights, interp_indices, x, y, z,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                    filter_size_xyz, in_channels);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; vec_valid_count; ++k) {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; InterpolationVec_t::Size();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                     ++j) {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ic = 0; ic &lt; in_channels; ++ic)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                        <a class="code" href="_point_cloud_planar_patch_detection_8cpp.3c3#ac970fa185e639f6057b92195881e2512">B</a>(interp_indices(j, k) + ic, out_col) +=</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                TFeat(interp_weights(j, k)) *</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                infeat(k, ic);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                            }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                            vec_valid_count = 0;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                }  <span class="comment">// out_idx</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                Eigen::Map&lt;<span class="keyword">const</span> Eigen::Matrix&lt;TFeat, Eigen::Dynamic,</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                               Eigen::Dynamic&gt;&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        A(filter, out_channels,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                          spatial_filter_size * in_channels);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;TOut, Eigen::Dynamic, Eigen::Dynamic&gt;&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        C(out_features + (r.begin() * out_channels),</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                          out_channels, range_length);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                C = (A * <a class="code" href="_point_cloud_planar_patch_detection_8cpp.3c3#ac970fa185e639f6057b92195881e2512">B</a>).<span class="keyword">template</span> cast&lt;TOut&gt;();</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">if</span> (out_importance) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; range_length; ++i)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        C.col(i) *= TOut(out_importance[r.begin() + i]);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            });</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> TFeat, <span class="keyword">class</span> TOut, <span class="keyword">class</span> TReal, <span class="keyword">class</span> TIndex&gt;</div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1ml_1_1impl.html#aa392243129810b195110b9e5e8797ebe">  286</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#aa392243129810b195110b9e5e8797ebe">CConvTransposeComputeFeaturesCPU</a>(TOut* out_features,</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                      <span class="keyword">const</span> std::vector&lt;int&gt;&amp; filter_dims,</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                      <span class="keyword">const</span> TFeat* filter,</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                      <span class="keywordtype">size_t</span> num_out,</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                      <span class="keyword">const</span> TReal* out_positions,</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                      <span class="keyword">const</span> TFeat* out_importance,</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                      <span class="keywordtype">size_t</span> num_inp,</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                      <span class="keyword">const</span> TReal* inp_positions,</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                      <span class="keyword">const</span> TFeat* inp_features,</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                      <span class="keyword">const</span> TFeat* inp_neighbors_importance_sum,</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                      <span class="keyword">const</span> int64_t* inp_neighbors_row_splits,</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                      <span class="keywordtype">size_t</span> neighbors_index_size,</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                      <span class="keyword">const</span> TIndex* neighbors_index,</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                      <span class="keyword">const</span> TFeat* neighbors_importance,</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                      <span class="keyword">const</span> int64_t* neighbors_row_splits,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                      <span class="keyword">const</span> TReal* extents,</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                      <span class="keyword">const</span> TReal* offsets,</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                      <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">InterpolationMode</a> interpolation,</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                      <a class="code" href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fb">CoordinateMapping</a> coordinate_mapping,</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                      <span class="keywordtype">bool</span> align_corners,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                      <span class="keywordtype">bool</span> individual_extent,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                      <span class="keywordtype">bool</span> isotropic_extent,</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                      <span class="keywordtype">bool</span> normalize) {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#define FN_PARAMETERS                                                          \</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">    out_features, filter_dims, filter, num_out, out_positions, out_importance, \</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">            num_inp, inp_positions, inp_features,                              \</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">            inp_neighbors_importance_sum, inp_neighbors_row_splits,            \</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">            neighbors_index_size, neighbors_index, neighbors_importance,       \</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">            neighbors_row_splits, extents, offsets</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE(INTERPOLATION, MAPPING, ALIGN_CORNERS,                \</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">                      INDIVIDUAL_EXTENT, ISOTROPIC_EXTENT, NORMALIZE)       \</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">    if (INTERPOLATION == interpolation &amp;&amp; MAPPING == coordinate_mapping &amp;&amp;  \</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">        ALIGN_CORNERS == align_corners &amp;&amp;                                   \</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor">        INDIVIDUAL_EXTENT == individual_extent &amp;&amp;                           \</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">        ISOTROPIC_EXTENT == isotropic_extent &amp;&amp; NORMALIZE == normalize)     \</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor">        _CConvTransposeComputeFeaturesCPU&lt;TFeat, TOut, TReal, TIndex,       \</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor">                                          INTERPOLATION, MAPPING,           \</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">                                          ALIGN_CORNERS, INDIVIDUAL_EXTENT, \</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor">                                          ISOTROPIC_EXTENT, NORMALIZE&gt;(     \</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">                FN_PARAMETERS);</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE2(INTERPOLATION, MAPPING)                       \</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, true, true, true)    \</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, true, true, false)   \</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, true, false, true)   \</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, true, false, false)  \</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, false, true, true)   \</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, false, true, false)  \</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, false, false, true)  \</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, true, false, false, false) \</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, true, true, true)   \</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, true, true, false)  \</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, true, false, true)  \</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, true, false, false) \</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, false, true, true)  \</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, false, true, false) \</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, false, false, true) \</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="preprocessor">    CALL_TEMPLATE(INTERPOLATION, MAPPING, false, false, false, false)</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE3(INTERPOLATION)                                     \</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">    CALL_TEMPLATE2(INTERPOLATION, CoordinateMapping::BALL_TO_CUBE_RADIAL) \</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="preprocessor">    CALL_TEMPLATE2(INTERPOLATION,                                         \</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="preprocessor">                   CoordinateMapping::BALL_TO_CUBE_VOLUME_PRESERVING)     \</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="preprocessor">    CALL_TEMPLATE2(INTERPOLATION, CoordinateMapping::IDENTITY)</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor">#define CALL_TEMPLATE4                               \</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor">    CALL_TEMPLATE3(InterpolationMode::LINEAR)        \</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="preprocessor">    CALL_TEMPLATE3(InterpolationMode::LINEAR_BORDER) \</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">    CALL_TEMPLATE3(InterpolationMode::NEAREST_NEIGHBOR)</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="_continuous_conv_transpose_8h.html#a065491957d683f16ae1cf56ad825f978">CALL_TEMPLATE4</a></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE2</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE3</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="preprocessor">#undef CALL_TEMPLATE4</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor">#undef FN_PARAMETERS</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;}</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}  <span class="comment">// namespace impl</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}  <span class="comment">// namespace ml</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_continuous_conv_transpose_8h_html_a065491957d683f16ae1cf56ad825f978"><div class="ttname"><a href="_continuous_conv_transpose_8h.html#a065491957d683f16ae1cf56ad825f978">CALL_TEMPLATE4</a></div><div class="ttdeci">#define CALL_TEMPLATE4</div></div>
<div class="ttc" id="a_coordinate_transformation_8h_html"><div class="ttname"><a href="_coordinate_transformation_8h.html">CoordinateTransformation.h</a></div></div>
<div class="ttc" id="a_fixed_radius_search_impl_8h_html_a36a1e768e2eb11edcae1d9081eb07394"><div class="ttname"><a href="_fixed_radius_search_impl_8h.html#a36a1e768e2eb11edcae1d9081eb07394">VECSIZE</a></div><div class="ttdeci">#define VECSIZE</div></div>
<div class="ttc" id="a_point_cloud_planar_patch_detection_8cpp_html_ac970fa185e639f6057b92195881e2512"><div class="ttname"><a href="_point_cloud_planar_patch_detection_8cpp.3c3#ac970fa185e639f6057b92195881e2512">B</a></div><div class="ttdeci">Eigen::Matrix3d B</div><div class="ttdef"><b>Definition:</b> PointCloudPlanarPatchDetection.cpp:506</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a1cdea72ec606986b7ada2e619ea41a8d"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a1cdea72ec606986b7ada2e619ea41a8d">open3d::ml::impl::InterpolationMode</a></div><div class="ttdeci">InterpolationMode</div><div class="ttdef"><b>Definition:</b> ContinuousConvTypes.h:18</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_a8642d185de7ece8c2d37ea649b143a12"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#a8642d185de7ece8c2d37ea649b143a12">open3d::ml::impl::_CConvTransposeComputeFeaturesCPU</a></div><div class="ttdeci">void _CConvTransposeComputeFeaturesCPU(TOut *out_features, const std::vector&lt; int &gt; &amp;filter_dims, const TFeat *filter, size_t num_out, const TReal *out_positions, const TFeat *out_importance, size_t num_inp, const TReal *inp_positions, const TFeat *inp_features, const TFeat *inp_neighbors_importance_sum, const int64_t *inp_neighbors_row_splits, size_t neighbors_index_size, const TIndex *neighbors_index, const TFeat *neighbors_importance, const int64_t *neighbors_row_splits, const TReal *extents, const TReal *offsets)</div><div class="ttdef"><b>Definition:</b> ContinuousConvTranspose.h:30</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_aa392243129810b195110b9e5e8797ebe"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#aa392243129810b195110b9e5e8797ebe">open3d::ml::impl::CConvTransposeComputeFeaturesCPU</a></div><div class="ttdeci">void CConvTransposeComputeFeaturesCPU(TOut *out_features, const std::vector&lt; int &gt; &amp;filter_dims, const TFeat *filter, size_t num_out, const TReal *out_positions, const TFeat *out_importance, size_t num_inp, const TReal *inp_positions, const TFeat *inp_features, const TFeat *inp_neighbors_importance_sum, const int64_t *inp_neighbors_row_splits, size_t neighbors_index_size, const TIndex *neighbors_index, const TFeat *neighbors_importance, const int64_t *neighbors_row_splits, const TReal *extents, const TReal *offsets, InterpolationMode interpolation, CoordinateMapping coordinate_mapping, bool align_corners, bool individual_extent, bool isotropic_extent, bool normalize)</div><div class="ttdef"><b>Definition:</b> ContinuousConvTranspose.h:286</div></div>
<div class="ttc" id="anamespaceopen3d_1_1ml_1_1impl_html_ad39d07a9288168e9ecab8f34e24d27fb"><div class="ttname"><a href="namespaceopen3d_1_1ml_1_1impl.html#ad39d07a9288168e9ecab8f34e24d27fb">open3d::ml::impl::CoordinateMapping</a></div><div class="ttdeci">CoordinateMapping</div><div class="ttdef"><b>Definition:</b> ContinuousConvTypes.h:26</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
<div class="ttc" id="astructopen3d_1_1ml_1_1impl_1_1_interpolation_vec_html"><div class="ttname"><a href="structopen3d_1_1ml_1_1impl_1_1_interpolation">open3d::ml::impl::InterpolationVec</a></div><div class="ttdoc">Class for computing interpolation weights.</div><div class="ttdef"><b>Definition:</b> CoordinateTransformation.h:185</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_continuous_conv_transpose_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:04:55 GMT -->
</html>
