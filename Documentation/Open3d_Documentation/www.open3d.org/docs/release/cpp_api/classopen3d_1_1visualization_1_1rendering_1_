<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1rendering_1_1_material.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:58:04 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::visualization::rendering::Material Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization.html">visualization</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization_1_1renderin">rendering</a></li><li class="navelem"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::visualization::rendering::Material Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_material_8h_source.html">Material.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a00724bc34f65319db2ccb8e3f61d1443"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a00724bc34f65319db2ccb8e3f61d1443">TextureMaps</a> = std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &gt;</td></tr>
<tr class="separator:a00724bc34f65319db2ccb8e3f61d1443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6346a039cbbc94135a428cbde3eb7572"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6346a039cbbc94135a428cbde3eb7572">ScalarPropertyMap</a> = std::unordered_map&lt; std::string, float &gt;</td></tr>
<tr class="separator:a6346a039cbbc94135a428cbde3eb7572"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd3ec636dcf04e062d65cc36378fb1c6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#abd3ec636dcf04e062d65cc36378fb1c6">VectorPropertyMap</a> = std::unordered_map&lt; std::string, Eigen::Vector4f, std::hash&lt; std::string &gt;, std::equal_to&lt; std::string &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const std::string, Eigen::Vector4f &gt; &gt;&gt;</td></tr>
<tr class="separator:abd3ec636dcf04e062d65cc36378fb1c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa62d1e881b8f87eda4e5516df3db9e52"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aa62d1e881b8f87eda4e5516df3db9e52">Material</a> ()=default</td></tr>
<tr class="memdesc:aa62d1e881b8f87eda4e5516df3db9e52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an empty, invalid material.  <a href="classopen3d_1_1visualization_1_1rendering_1_#aa62d1e881b8f87eda4e5516df3db9e52">More...</a><br /></td></tr>
<tr class="separator:aa62d1e881b8f87eda4e5516df3db9e52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec495c674dbc366bec713090ca842a21"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aec495c674dbc366bec713090ca842a21">Material</a> (const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a> &amp;mat)=default</td></tr>
<tr class="separator:aec495c674dbc366bec713090ca842a21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae868a11e42186bca78b93b8853ca2b94"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ae868a11e42186bca78b93b8853ca2b94">operator=</a> (const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a> &amp;other)=default</td></tr>
<tr class="separator:ae868a11e42186bca78b93b8853ca2b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af07affb8c393a3c8744ed3bbf2fe7b7b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#af07affb8c393a3c8744ed3bbf2fe7b7b">Material</a> (const std::string &amp;material_name)</td></tr>
<tr class="memdesc:af07affb8c393a3c8744ed3bbf2fe7b7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an empty but valid material for the specified material name.  <a href="classopen3d_1_1visualization_1_1rendering_1_#af07affb8c393a3c8744ed3bbf2fe7b7b">More...</a><br /></td></tr>
<tr class="separator:af07affb8c393a3c8744ed3bbf2fe7b7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bd24a674c828f4ed1a7c61f17a18756"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a3bd24a674c828f4ed1a7c61f17a18756">SetDefaultProperties</a> ()</td></tr>
<tr class="separator:a3bd24a674c828f4ed1a7c61f17a18756"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53516dd844e47a9acf788d61f8020eae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a53516dd844e47a9acf788d61f8020eae">IsValid</a> () const</td></tr>
<tr class="separator:a53516dd844e47a9acf788d61f8020eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a6d5a674f2441545d1a2972311a1a9c"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a5a6d5a674f2441545d1a2972311a1a9c">GetMaterialName</a> () const</td></tr>
<tr class="memdesc:a5a6d5a674f2441545d1a2972311a1a9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the name of the material.  <a href="classopen3d_1_1visualization_1_1rendering_1_#a5a6d5a674f2441545d1a2972311a1a9c">More...</a><br /></td></tr>
<tr class="separator:a5a6d5a674f2441545d1a2972311a1a9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b7d06276f539a9147e3acf05f303113"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a00724bc34f65319db2ccb8e3f61d1443">TextureMaps</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a2b7d06276f539a9147e3acf05f303113">GetTextureMaps</a> () const</td></tr>
<tr class="memdesc:a2b7d06276f539a9147e3acf05f303113"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the texture map map.  <a href="classopen3d_1_1visualization_1_1rendering_1_#a2b7d06276f539a9147e3acf05f303113">More...</a><br /></td></tr>
<tr class="separator:a2b7d06276f539a9147e3acf05f303113"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a389c2ea9c5ed299a1cf681bc4e4cd48f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a389c2ea9c5ed299a1cf681bc4e4cd48f">GetTextureMap</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a389c2ea9c5ed299a1cf681bc4e4cd48f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a481c223e0642c001db8ed368a389f04f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6346a039cbbc94135a428cbde3eb7572">ScalarPropertyMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a481c223e0642c001db8ed368a389f04f">GetScalarProperties</a> () const</td></tr>
<tr class="memdesc:a481c223e0642c001db8ed368a389f04f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the map of scalar properties.  <a href="classopen3d_1_1visualization_1_1rendering_1_#a481c223e0642c001db8ed368a389f04f">More...</a><br /></td></tr>
<tr class="separator:a481c223e0642c001db8ed368a389f04f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9195a3711dcb29e96840fcb42a76bec7"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a9195a3711dcb29e96840fcb42a76bec7">GetScalarProperty</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a9195a3711dcb29e96840fcb42a76bec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4f2b05a9c889827424a7d747b3d686d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#abd3ec636dcf04e062d65cc36378fb1c6">VectorPropertyMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ab4f2b05a9c889827424a7d747b3d686d">GetVectorProperties</a> () const</td></tr>
<tr class="memdesc:ab4f2b05a9c889827424a7d747b3d686d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the map of vector properties.  <a href="classopen3d_1_1visualization_1_1rendering_1_#ab4f2b05a9c889827424a7d747b3d686d">More...</a><br /></td></tr>
<tr class="separator:ab4f2b05a9c889827424a7d747b3d686d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a844e8ab0b6d15d2405a94e8c73124826"><td class="memItemLeft" align="right" valign="top">Eigen::Vector4f&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a844e8ab0b6d15d2405a94e8c73124826">GetVectorProperty</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a844e8ab0b6d15d2405a94e8c73124826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d08fd804e35e249345bb0d7e93ce3e2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6d08fd804e35e249345bb0d7e93ce3e2">SetTextureMap</a> (const std::string &amp;key, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a6d08fd804e35e249345bb0d7e93ce3e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a316e82354ea0b8335f8c0410e79e064a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a316e82354ea0b8335f8c0410e79e064a">SetScalarProperty</a> (const std::string &amp;key, float value)</td></tr>
<tr class="separator:a316e82354ea0b8335f8c0410e79e064a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a743f1339dc56c0e0d81dbf0a92569bb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a743f1339dc56c0e0d81dbf0a92569bb9">SetVectorProperty</a> (const std::string &amp;key, const Eigen::Vector4f &amp;value)</td></tr>
<tr class="separator:a743f1339dc56c0e0d81dbf0a92569bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a261dcc2c9dedc7dc4a5d7ea30cd75fb4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a261dcc2c9dedc7dc4a5d7ea30cd75fb4">SetMaterialName</a> (const std::string &amp;material_name)</td></tr>
<tr class="memdesc:a261dcc2c9dedc7dc4a5d7ea30cd75fb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set material name. The material name should match the name of a built.  <a href="classopen3d_1_1visualization_1_1rendering_1_#a261dcc2c9dedc7dc4a5d7ea30cd75fb4">More...</a><br /></td></tr>
<tr class="separator:a261dcc2c9dedc7dc4a5d7ea30cd75fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3c56904e19fe4161d17d9583fac25d0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad3c56904e19fe4161d17d9583fac25d0">HasTextureMap</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:ad3c56904e19fe4161d17d9583fac25d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a024baf8e118557e0934559974fcab11c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a024baf8e118557e0934559974fcab11c">HasScalarProperty</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a024baf8e118557e0934559974fcab11c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a643ddbf4ab39441f033f0317079d8f37"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a643ddbf4ab39441f033f0317079d8f37">HasVectorProperty</a> (const std::string &amp;key) const</td></tr>
<tr class="separator:a643ddbf4ab39441f033f0317079d8f37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e52d2efec3431feb2a2da17519d2813"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a9e52d2efec3431feb2a2da17519d2813">GetAlbedoMap</a> () const</td></tr>
<tr class="separator:a9e52d2efec3431feb2a2da17519d2813"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66a5a88644d4895caabb67b2cc40b698"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a66a5a88644d4895caabb67b2cc40b698">GetNormalMap</a> () const</td></tr>
<tr class="separator:a66a5a88644d4895caabb67b2cc40b698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a664390ec2bb831346d7f5d51f807a063"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a664390ec2bb831346d7f5d51f807a063">GetAOMap</a> () const</td></tr>
<tr class="separator:a664390ec2bb831346d7f5d51f807a063"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8ce78754213c6e311f711d1542aa3be"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ab8ce78754213c6e311f711d1542aa3be">GetMetallicMap</a> () const</td></tr>
<tr class="separator:ab8ce78754213c6e311f711d1542aa3be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a639fc44afca8203bc0fdcec28a5d737b"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a639fc44afca8203bc0fdcec28a5d737b">GetRoughnessMap</a> () const</td></tr>
<tr class="separator:a639fc44afca8203bc0fdcec28a5d737b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a7bfd81bc878d05de455c689b8ed48b"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a4a7bfd81bc878d05de455c689b8ed48b">GetReflectanceMap</a> () const</td></tr>
<tr class="separator:a4a7bfd81bc878d05de455c689b8ed48b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4ef863cf0943049b2974e878d6cc30e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ab4ef863cf0943049b2974e878d6cc30e">GetClearcoatMap</a> () const</td></tr>
<tr class="separator:ab4ef863cf0943049b2974e878d6cc30e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b27fbb2470f11104d097b447f0d0320"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a8b27fbb2470f11104d097b447f0d0320">GetClearcoatRoughnessMap</a> () const</td></tr>
<tr class="separator:a8b27fbb2470f11104d097b447f0d0320"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9448d8ed6a8a71eeffd00caad18144fb"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a9448d8ed6a8a71eeffd00caad18144fb">GetAnisotropyMap</a> () const</td></tr>
<tr class="separator:a9448d8ed6a8a71eeffd00caad18144fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5bbaa7ce77d543842974d9773b3c790"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ac5bbaa7ce77d543842974d9773b3c790">GetAORoughnessMetalMap</a> () const</td></tr>
<tr class="separator:ac5bbaa7ce77d543842974d9773b3c790"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cfa0fc9f413acb981a81d98fdf22a2b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a7cfa0fc9f413acb981a81d98fdf22a2b">HasAlbedoMap</a> () const</td></tr>
<tr class="separator:a7cfa0fc9f413acb981a81d98fdf22a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0f5030237ca9481381f55e050fc00fb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad0f5030237ca9481381f55e050fc00fb">HasNormalMap</a> () const</td></tr>
<tr class="separator:ad0f5030237ca9481381f55e050fc00fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fdd3e6dd637f577d85046fac1234c87"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a3fdd3e6dd637f577d85046fac1234c87">HasAOMap</a> () const</td></tr>
<tr class="separator:a3fdd3e6dd637f577d85046fac1234c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82ac56c2443387536259ec925621c0af"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a82ac56c2443387536259ec925621c0af">HasMetallicMap</a> () const</td></tr>
<tr class="separator:a82ac56c2443387536259ec925621c0af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2433924ddf224ea0a27c3f0e0c62d5b5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a2433924ddf224ea0a27c3f0e0c62d5b5">HasRoughnessMap</a> () const</td></tr>
<tr class="separator:a2433924ddf224ea0a27c3f0e0c62d5b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134ef2991d52f8a8550e944273fe9832"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a134ef2991d52f8a8550e944273fe9832">HasReflectanceMap</a> () const</td></tr>
<tr class="separator:a134ef2991d52f8a8550e944273fe9832"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b371cd724c2aa4438f79a641ebc71e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#af0b371cd724c2aa4438f79a641ebc71e">HasClearcoatMap</a> () const</td></tr>
<tr class="separator:af0b371cd724c2aa4438f79a641ebc71e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed6cb8070bc2a65cacbdf29901297eb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6ed6cb8070bc2a65cacbdf29901297eb">HasClearcoatRoughnessMap</a> () const</td></tr>
<tr class="separator:a6ed6cb8070bc2a65cacbdf29901297eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d22272a63efda5c054c0bb582877b7d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a3d22272a63efda5c054c0bb582877b7d">HasAnisotropyMap</a> () const</td></tr>
<tr class="separator:a3d22272a63efda5c054c0bb582877b7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18fef139b4acc3ab8b0f75113d1aa542"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a18fef139b4acc3ab8b0f75113d1aa542">HasAORoughnessMetalMap</a> () const</td></tr>
<tr class="separator:a18fef139b4acc3ab8b0f75113d1aa542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a075b7837876dfb33ef3f2bf1613836b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a075b7837876dfb33ef3f2bf1613836b6">SetAlbedoMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a075b7837876dfb33ef3f2bf1613836b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74d17f2c2454e304dbea7cf17cb78750"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a74d17f2c2454e304dbea7cf17cb78750">SetNormalMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a74d17f2c2454e304dbea7cf17cb78750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f6066fcb0588135c4007dc76d1411e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a2f6066fcb0588135c4007dc76d1411e8">SetAOMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a2f6066fcb0588135c4007dc76d1411e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef309f6b7ecb7fc5dc79c8769ccb53c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aef309f6b7ecb7fc5dc79c8769ccb53c1">SetMetallicMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:aef309f6b7ecb7fc5dc79c8769ccb53c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86d370b8e8492c20f7718e1d7a3fdd1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ae86d370b8e8492c20f7718e1d7a3fdd1">SetRoughnessMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:ae86d370b8e8492c20f7718e1d7a3fdd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ad5bc61fad9807bd268f1b388db2a0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a5ad5bc61fad9807bd268f1b388db2a0a">SetReflectanceMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a5ad5bc61fad9807bd268f1b388db2a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad86fb5991c1245fbce3db4fb999d7cc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad86fb5991c1245fbce3db4fb999d7cc3">SetClearcoatMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:ad86fb5991c1245fbce3db4fb999d7cc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac80b6293d2af1e7cbb3255a9d7edc0de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ac80b6293d2af1e7cbb3255a9d7edc0de">SetClearcoatRoughnessMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:ac80b6293d2af1e7cbb3255a9d7edc0de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a735e5575826ef5cfcc6ceb72aaa67ff9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a735e5575826ef5cfcc6ceb72aaa67ff9">SetAnisotropyMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a735e5575826ef5cfcc6ceb72aaa67ff9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a584af6480c66fafcc6da6558b165dce7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a584af6480c66fafcc6da6558b165dce7">SetAORoughnessMetalMap</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;<a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)</td></tr>
<tr class="separator:a584af6480c66fafcc6da6558b165dce7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e232d5acd0363f662400208e05acffb"><td class="memItemLeft" align="right" valign="top">Eigen::Vector4f&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a2e232d5acd0363f662400208e05acffb">GetBaseColor</a> () const</td></tr>
<tr class="separator:a2e232d5acd0363f662400208e05acffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ddcc42b2d6d21ecd3aeea4cd58215d0"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6ddcc42b2d6d21ecd3aeea4cd58215d0">GetBaseMetallic</a> () const</td></tr>
<tr class="separator:a6ddcc42b2d6d21ecd3aeea4cd58215d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a944100be297af26c9badb56a3962b0bb"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a944100be297af26c9badb56a3962b0bb">GetBaseRoughness</a> () const</td></tr>
<tr class="separator:a944100be297af26c9badb56a3962b0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a852f86d7d8db29253a78c3030d3981e3"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a852f86d7d8db29253a78c3030d3981e3">GetBaseReflectance</a> () const</td></tr>
<tr class="separator:a852f86d7d8db29253a78c3030d3981e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c40a18911eb34abc168cae7ed49fd2"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a68c40a18911eb34abc168cae7ed49fd2">GetBaseClearcoat</a> () const</td></tr>
<tr class="separator:a68c40a18911eb34abc168cae7ed49fd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad622b18f74a48d1f35c41e0b11384f57"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad622b18f74a48d1f35c41e0b11384f57">GetBaseClearcoatRoughness</a> () const</td></tr>
<tr class="separator:ad622b18f74a48d1f35c41e0b11384f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad39dbaa6512b5b3612d30d05b83449f3"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad39dbaa6512b5b3612d30d05b83449f3">GetAnisotropy</a> () const</td></tr>
<tr class="separator:ad39dbaa6512b5b3612d30d05b83449f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60593949f8493f1a192f959fbd1f5919"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a60593949f8493f1a192f959fbd1f5919">GetThickness</a> () const</td></tr>
<tr class="separator:a60593949f8493f1a192f959fbd1f5919"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad73bd9f2985364f32995671a4e43429d"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad73bd9f2985364f32995671a4e43429d">GetTransmission</a> () const</td></tr>
<tr class="separator:ad73bd9f2985364f32995671a4e43429d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37f8dc74b3905161b3334b4ff105a29"><td class="memItemLeft" align="right" valign="top">Eigen::Vector4f&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aa37f8dc74b3905161b3334b4ff105a29">GetAbsorptionColor</a> () const</td></tr>
<tr class="separator:aa37f8dc74b3905161b3334b4ff105a29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98274915fedb2f1f80ea808da23d0cad"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a98274915fedb2f1f80ea808da23d0cad">GetAbsorptionDistance</a> () const</td></tr>
<tr class="separator:a98274915fedb2f1f80ea808da23d0cad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d7b175fa60c975f025337c58048cd2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a85d7b175fa60c975f025337c58048cd2">HasBaseColor</a> () const</td></tr>
<tr class="separator:a85d7b175fa60c975f025337c58048cd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1840e5f3f7d7ada467a3496c3fdbf9a3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a1840e5f3f7d7ada467a3496c3fdbf9a3">HasBaseMetallic</a> () const</td></tr>
<tr class="separator:a1840e5f3f7d7ada467a3496c3fdbf9a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae21f2b13b8b1565af12e43c2eb034b1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aae21f2b13b8b1565af12e43c2eb034b1">HasBaseRoughness</a> () const</td></tr>
<tr class="separator:aae21f2b13b8b1565af12e43c2eb034b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2647c938456a169b3f8140b5f7d80911"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a2647c938456a169b3f8140b5f7d80911">HasBaseReflectance</a> () const</td></tr>
<tr class="separator:a2647c938456a169b3f8140b5f7d80911"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65f727c1a448700c9d11146bd01cec69"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a65f727c1a448700c9d11146bd01cec69">HasBaseClearcoat</a> () const</td></tr>
<tr class="separator:a65f727c1a448700c9d11146bd01cec69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5859b090b15d0c7fd62a4d9be10ba9a1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a5859b090b15d0c7fd62a4d9be10ba9a1">HasBaseClearcoatRoughness</a> () const</td></tr>
<tr class="separator:a5859b090b15d0c7fd62a4d9be10ba9a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55b395d35a405ee01f36f82384577625"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a55b395d35a405ee01f36f82384577625">HasAnisotropy</a> () const</td></tr>
<tr class="separator:a55b395d35a405ee01f36f82384577625"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19fd6387f802f6712facbfebdb8fc231"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a19fd6387f802f6712facbfebdb8fc231">HasThickness</a> () const</td></tr>
<tr class="separator:a19fd6387f802f6712facbfebdb8fc231"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4aedfe1b5aa55916a9c1531b0bc6e5e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad4aedfe1b5aa55916a9c1531b0bc6e5e">HasTransmission</a> () const</td></tr>
<tr class="separator:ad4aedfe1b5aa55916a9c1531b0bc6e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef852bfe07a6490bbcb67e21371afa4f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aef852bfe07a6490bbcb67e21371afa4f">HasAbsorptionColor</a> () const</td></tr>
<tr class="separator:aef852bfe07a6490bbcb67e21371afa4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afebd8fead3d37bc2cb48a26164c0234f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#afebd8fead3d37bc2cb48a26164c0234f">HasAbsorptionDistance</a> () const</td></tr>
<tr class="separator:afebd8fead3d37bc2cb48a26164c0234f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afee079383ae5859e474b1228e135ce27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#afee079383ae5859e474b1228e135ce27">SetBaseColor</a> (const Eigen::Vector4f &amp;value)</td></tr>
<tr class="separator:afee079383ae5859e474b1228e135ce27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd7102b576bc6f7fd5e4fa582f97a252"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#acd7102b576bc6f7fd5e4fa582f97a252">SetBaseMetallic</a> (float value)</td></tr>
<tr class="separator:acd7102b576bc6f7fd5e4fa582f97a252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a004a01baf475c6361e36b4fe5f1bb64d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a004a01baf475c6361e36b4fe5f1bb64d">SetBaseRoughness</a> (float value)</td></tr>
<tr class="separator:a004a01baf475c6361e36b4fe5f1bb64d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ccc04c170888a44771e30febac46a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a65ccc04c170888a44771e30febac46a3">SetBaseReflectance</a> (float value)</td></tr>
<tr class="separator:a65ccc04c170888a44771e30febac46a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a904137532d995b73dfb2b76dc2cc925d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a904137532d995b73dfb2b76dc2cc925d">SetBaseClearcoat</a> (float value)</td></tr>
<tr class="separator:a904137532d995b73dfb2b76dc2cc925d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a054e0c031fe546ba5ce2983d9ce01290"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a054e0c031fe546ba5ce2983d9ce01290">SetBaseClearcoatRoughness</a> (float value)</td></tr>
<tr class="separator:a054e0c031fe546ba5ce2983d9ce01290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341c3c24c04047659e6a57c439c196d1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a341c3c24c04047659e6a57c439c196d1">SetAnisotropy</a> (float value)</td></tr>
<tr class="separator:a341c3c24c04047659e6a57c439c196d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58ed64a6604bd8e7dd8807ea0a2970b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a58ed64a6604bd8e7dd8807ea0a2970b3">SetThickness</a> (float value)</td></tr>
<tr class="separator:a58ed64a6604bd8e7dd8807ea0a2970b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21a95e505a31fd2df0c896265afef72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aa21a95e505a31fd2df0c896265afef72">SetTransmission</a> (float value)</td></tr>
<tr class="separator:aa21a95e505a31fd2df0c896265afef72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bc53f1ab390ccb09ff3661575da0851"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a0bc53f1ab390ccb09ff3661575da0851">SetAbsorptionColor</a> (const Eigen::Vector4f &amp;value)</td></tr>
<tr class="separator:a0bc53f1ab390ccb09ff3661575da0851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e59a887c43c97d1886d8d4719025cb7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6e59a887c43c97d1886d8d4719025cb7">SetAbsorptionDistance</a> (float value)</td></tr>
<tr class="separator:a6e59a887c43c97d1886d8d4719025cb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6af639d46549fbeb67c8833d467b0421"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6af639d46549fbeb67c8833d467b0421">GetPointSize</a> () const</td></tr>
<tr class="separator:a6af639d46549fbeb67c8833d467b0421"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63dfd1336e79a14b98b90ffeba4df17"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#af63dfd1336e79a14b98b90ffeba4df17">GetLineWidth</a> () const</td></tr>
<tr class="separator:af63dfd1336e79a14b98b90ffeba4df17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2d64865739986ba487cc43a8b4d5712"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#ad2d64865739986ba487cc43a8b4d5712">HasPointSize</a> () const</td></tr>
<tr class="separator:ad2d64865739986ba487cc43a8b4d5712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a463f3ac7a955ddc0fe35d67c732bdc3c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a463f3ac7a955ddc0fe35d67c732bdc3c">HasLineWidth</a> () const</td></tr>
<tr class="separator:a463f3ac7a955ddc0fe35d67c732bdc3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0560e6813002ddc9a7fbfd0be5ce8ac2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a0560e6813002ddc9a7fbfd0be5ce8ac2">SetPointSize</a> (float value)</td></tr>
<tr class="separator:a0560e6813002ddc9a7fbfd0be5ce8ac2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af807f078575cc71b203da3190d6aecb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#af807f078575cc71b203da3190d6aecb3">SetLineWidth</a> (float value)</td></tr>
<tr class="separator:af807f078575cc71b203da3190d6aecb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec3fb623de47d984ebfbfdebddd44565"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#aec3fb623de47d984ebfbfdebddd44565">ToMaterialRecord</a> (<a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;record) const</td></tr>
<tr class="memdesc:aec3fb623de47d984ebfbfdebddd44565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills a legacy <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> constructed from this <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a>.  <a href="classopen3d_1_1visualization_1_1rendering_1_#aec3fb623de47d984ebfbfdebddd44565">More...</a><br /></td></tr>
<tr class="separator:aec3fb623de47d984ebfbfdebddd44565"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a6346a039cbbc94135a428cbde3eb7572"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6346a039cbbc94135a428cbde3eb7572">&#9670;&nbsp;</a></span>ScalarPropertyMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6346a039cbbc94135a428cbde3eb7572">open3d::visualization::rendering::Material::ScalarPropertyMap</a> =  std::unordered_map&lt;std::string, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a00724bc34f65319db2ccb8e3f61d1443"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00724bc34f65319db2ccb8e3f61d1443">&#9670;&nbsp;</a></span>TextureMaps</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a00724bc34f65319db2ccb8e3f61d1443">open3d::visualization::rendering::Material::TextureMaps</a> =  std::unordered_map&lt;std::string, <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abd3ec636dcf04e062d65cc36378fb1c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd3ec636dcf04e062d65cc36378fb1c6">&#9670;&nbsp;</a></span>VectorPropertyMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#abd3ec636dcf04e062d65cc36378fb1c6">open3d::visualization::rendering::Material::VectorPropertyMap</a> =  std::unordered_map&lt; std::string, Eigen::Vector4f, std::hash&lt;std::string&gt;, std::equal_to&lt;std::string&gt;, Eigen::aligned_allocator&lt; std::pair&lt;const std::string, Eigen::Vector4f&gt; &gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa62d1e881b8f87eda4e5516df3db9e52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa62d1e881b8f87eda4e5516df3db9e52">&#9670;&nbsp;</a></span>Material() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::rendering::Material::Material </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an empty, invalid material. </p>

</div>
</div>
<a id="aec495c674dbc366bec713090ca842a21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec495c674dbc366bec713090ca842a21">&#9670;&nbsp;</a></span>Material() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::rendering::Material::Material </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a> &amp;&#160;</td>
          <td class="paramname"><em>mat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af07affb8c393a3c8744ed3bbf2fe7b7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af07affb8c393a3c8744ed3bbf2fe7b7b">&#9670;&nbsp;</a></span>Material() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::rendering::Material::Material </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>material_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an empty but valid material for the specified material name. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa37f8dc74b3905161b3334b4ff105a29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa37f8dc74b3905161b3334b4ff105a29">&#9670;&nbsp;</a></span>GetAbsorptionColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector4f open3d::visualization::rendering::Material::GetAbsorptionColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a98274915fedb2f1f80ea808da23d0cad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98274915fedb2f1f80ea808da23d0cad">&#9670;&nbsp;</a></span>GetAbsorptionDistance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetAbsorptionDistance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9e52d2efec3431feb2a2da17519d2813"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e52d2efec3431feb2a2da17519d2813">&#9670;&nbsp;</a></span>GetAlbedoMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetAlbedoMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>The following are convenience methods for common PBR material properties </p>

</div>
</div>
<a id="ad39dbaa6512b5b3612d30d05b83449f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad39dbaa6512b5b3612d30d05b83449f3">&#9670;&nbsp;</a></span>GetAnisotropy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetAnisotropy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9448d8ed6a8a71eeffd00caad18144fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9448d8ed6a8a71eeffd00caad18144fb">&#9670;&nbsp;</a></span>GetAnisotropyMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetAnisotropyMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a664390ec2bb831346d7f5d51f807a063"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a664390ec2bb831346d7f5d51f807a063">&#9670;&nbsp;</a></span>GetAOMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetAOMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac5bbaa7ce77d543842974d9773b3c790"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5bbaa7ce77d543842974d9773b3c790">&#9670;&nbsp;</a></span>GetAORoughnessMetalMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetAORoughnessMetalMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Ambient occlusion, roughness, and metallic maps in a single 3 channel texture. Commonly used in glTF models. </p>

</div>
</div>
<a id="a68c40a18911eb34abc168cae7ed49fd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68c40a18911eb34abc168cae7ed49fd2">&#9670;&nbsp;</a></span>GetBaseClearcoat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetBaseClearcoat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad622b18f74a48d1f35c41e0b11384f57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad622b18f74a48d1f35c41e0b11384f57">&#9670;&nbsp;</a></span>GetBaseClearcoatRoughness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetBaseClearcoatRoughness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2e232d5acd0363f662400208e05acffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e232d5acd0363f662400208e05acffb">&#9670;&nbsp;</a></span>GetBaseColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector4f open3d::visualization::rendering::Material::GetBaseColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6ddcc42b2d6d21ecd3aeea4cd58215d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ddcc42b2d6d21ecd3aeea4cd58215d0">&#9670;&nbsp;</a></span>GetBaseMetallic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetBaseMetallic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a852f86d7d8db29253a78c3030d3981e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a852f86d7d8db29253a78c3030d3981e3">&#9670;&nbsp;</a></span>GetBaseReflectance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetBaseReflectance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a944100be297af26c9badb56a3962b0bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a944100be297af26c9badb56a3962b0bb">&#9670;&nbsp;</a></span>GetBaseRoughness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetBaseRoughness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab4ef863cf0943049b2974e878d6cc30e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4ef863cf0943049b2974e878d6cc30e">&#9670;&nbsp;</a></span>GetClearcoatMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetClearcoatMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8b27fbb2470f11104d097b447f0d0320"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b27fbb2470f11104d097b447f0d0320">&#9670;&nbsp;</a></span>GetClearcoatRoughnessMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetClearcoatRoughnessMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af63dfd1336e79a14b98b90ffeba4df17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af63dfd1336e79a14b98b90ffeba4df17">&#9670;&nbsp;</a></span>GetLineWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetLineWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a6d5a674f2441545d1a2972311a1a9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a6d5a674f2441545d1a2972311a1a9c">&#9670;&nbsp;</a></span>GetMaterialName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; open3d::visualization::rendering::Material::GetMaterialName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the name of the material. </p>

</div>
</div>
<a id="ab8ce78754213c6e311f711d1542aa3be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8ce78754213c6e311f711d1542aa3be">&#9670;&nbsp;</a></span>GetMetallicMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetMetallicMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a66a5a88644d4895caabb67b2cc40b698"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66a5a88644d4895caabb67b2cc40b698">&#9670;&nbsp;</a></span>GetNormalMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetNormalMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6af639d46549fbeb67c8833d467b0421"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6af639d46549fbeb67c8833d467b0421">&#9670;&nbsp;</a></span>GetPointSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetPointSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>The following are convenience methods for Pointclouds and LineSet shaders </p>

</div>
</div>
<a id="a4a7bfd81bc878d05de455c689b8ed48b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a7bfd81bc878d05de455c689b8ed48b">&#9670;&nbsp;</a></span>GetReflectanceMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetReflectanceMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a639fc44afca8203bc0fdcec28a5d737b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a639fc44afca8203bc0fdcec28a5d737b">&#9670;&nbsp;</a></span>GetRoughnessMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetRoughnessMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a481c223e0642c001db8ed368a389f04f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a481c223e0642c001db8ed368a389f04f">&#9670;&nbsp;</a></span>GetScalarProperties()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a6346a039cbbc94135a428cbde3eb7572">ScalarPropertyMap</a>&amp; open3d::visualization::rendering::Material::GetScalarProperties </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the map of scalar properties. </p>

</div>
</div>
<a id="a9195a3711dcb29e96840fcb42a76bec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9195a3711dcb29e96840fcb42a76bec7">&#9670;&nbsp;</a></span>GetScalarProperty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetScalarProperty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get scalar properties of this <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a>. Throws exception if the property does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Property name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a389c2ea9c5ed299a1cf681bc4e4cd48f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a389c2ea9c5ed299a1cf681bc4e4cd48f">&#9670;&nbsp;</a></span>GetTextureMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a>&amp; open3d::visualization::rendering::Material::GetTextureMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get images (texture maps) of this <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a>. Throws exception if the image does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Map name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2b7d06276f539a9147e3acf05f303113"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b7d06276f539a9147e3acf05f303113">&#9670;&nbsp;</a></span>GetTextureMaps()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#a00724bc34f65319db2ccb8e3f61d1443">TextureMaps</a>&amp; open3d::visualization::rendering::Material::GetTextureMaps </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the texture map map. </p>

</div>
</div>
<a id="a60593949f8493f1a192f959fbd1f5919"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60593949f8493f1a192f959fbd1f5919">&#9670;&nbsp;</a></span>GetThickness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetThickness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad73bd9f2985364f32995671a4e43429d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad73bd9f2985364f32995671a4e43429d">&#9670;&nbsp;</a></span>GetTransmission()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::rendering::Material::GetTransmission </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab4f2b05a9c889827424a7d747b3d686d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4f2b05a9c889827424a7d747b3d686d">&#9670;&nbsp;</a></span>GetVectorProperties()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_#abd3ec636dcf04e062d65cc36378fb1c6">VectorPropertyMap</a>&amp; open3d::visualization::rendering::Material::GetVectorProperties </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the map of vector properties. </p>

</div>
</div>
<a id="a844e8ab0b6d15d2405a94e8c73124826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a844e8ab0b6d15d2405a94e8c73124826">&#9670;&nbsp;</a></span>GetVectorProperty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Eigen::Vector4f open3d::visualization::rendering::Material::GetVectorProperty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get vector properties of this <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a>. Throws exception if the property does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Property name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aef852bfe07a6490bbcb67e21371afa4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef852bfe07a6490bbcb67e21371afa4f">&#9670;&nbsp;</a></span>HasAbsorptionColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAbsorptionColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afebd8fead3d37bc2cb48a26164c0234f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afebd8fead3d37bc2cb48a26164c0234f">&#9670;&nbsp;</a></span>HasAbsorptionDistance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAbsorptionDistance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7cfa0fc9f413acb981a81d98fdf22a2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cfa0fc9f413acb981a81d98fdf22a2b">&#9670;&nbsp;</a></span>HasAlbedoMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAlbedoMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a55b395d35a405ee01f36f82384577625"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55b395d35a405ee01f36f82384577625">&#9670;&nbsp;</a></span>HasAnisotropy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAnisotropy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d22272a63efda5c054c0bb582877b7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d22272a63efda5c054c0bb582877b7d">&#9670;&nbsp;</a></span>HasAnisotropyMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAnisotropyMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3fdd3e6dd637f577d85046fac1234c87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fdd3e6dd637f577d85046fac1234c87">&#9670;&nbsp;</a></span>HasAOMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAOMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a18fef139b4acc3ab8b0f75113d1aa542"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18fef139b4acc3ab8b0f75113d1aa542">&#9670;&nbsp;</a></span>HasAORoughnessMetalMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasAORoughnessMetalMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a65f727c1a448700c9d11146bd01cec69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65f727c1a448700c9d11146bd01cec69">&#9670;&nbsp;</a></span>HasBaseClearcoat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasBaseClearcoat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5859b090b15d0c7fd62a4d9be10ba9a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5859b090b15d0c7fd62a4d9be10ba9a1">&#9670;&nbsp;</a></span>HasBaseClearcoatRoughness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasBaseClearcoatRoughness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a85d7b175fa60c975f025337c58048cd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85d7b175fa60c975f025337c58048cd2">&#9670;&nbsp;</a></span>HasBaseColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasBaseColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1840e5f3f7d7ada467a3496c3fdbf9a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1840e5f3f7d7ada467a3496c3fdbf9a3">&#9670;&nbsp;</a></span>HasBaseMetallic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasBaseMetallic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2647c938456a169b3f8140b5f7d80911"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2647c938456a169b3f8140b5f7d80911">&#9670;&nbsp;</a></span>HasBaseReflectance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasBaseReflectance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aae21f2b13b8b1565af12e43c2eb034b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae21f2b13b8b1565af12e43c2eb034b1">&#9670;&nbsp;</a></span>HasBaseRoughness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasBaseRoughness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af0b371cd724c2aa4438f79a641ebc71e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b371cd724c2aa4438f79a641ebc71e">&#9670;&nbsp;</a></span>HasClearcoatMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasClearcoatMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6ed6cb8070bc2a65cacbdf29901297eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ed6cb8070bc2a65cacbdf29901297eb">&#9670;&nbsp;</a></span>HasClearcoatRoughnessMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasClearcoatRoughnessMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a463f3ac7a955ddc0fe35d67c732bdc3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a463f3ac7a955ddc0fe35d67c732bdc3c">&#9670;&nbsp;</a></span>HasLineWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasLineWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a82ac56c2443387536259ec925621c0af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82ac56c2443387536259ec925621c0af">&#9670;&nbsp;</a></span>HasMetallicMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasMetallicMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad0f5030237ca9481381f55e050fc00fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0f5030237ca9481381f55e050fc00fb">&#9670;&nbsp;</a></span>HasNormalMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasNormalMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad2d64865739986ba487cc43a8b4d5712"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2d64865739986ba487cc43a8b4d5712">&#9670;&nbsp;</a></span>HasPointSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasPointSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a134ef2991d52f8a8550e944273fe9832"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a134ef2991d52f8a8550e944273fe9832">&#9670;&nbsp;</a></span>HasReflectanceMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasReflectanceMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2433924ddf224ea0a27c3f0e0c62d5b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2433924ddf224ea0a27c3f0e0c62d5b5">&#9670;&nbsp;</a></span>HasRoughnessMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasRoughnessMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a024baf8e118557e0934559974fcab11c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a024baf8e118557e0934559974fcab11c">&#9670;&nbsp;</a></span>HasScalarProperty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasScalarProperty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return true if the property exists</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Property name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad3c56904e19fe4161d17d9583fac25d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3c56904e19fe4161d17d9583fac25d0">&#9670;&nbsp;</a></span>HasTextureMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasTextureMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return true if the map exists</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Map name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a19fd6387f802f6712facbfebdb8fc231"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19fd6387f802f6712facbfebdb8fc231">&#9670;&nbsp;</a></span>HasThickness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasThickness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad4aedfe1b5aa55916a9c1531b0bc6e5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4aedfe1b5aa55916a9c1531b0bc6e5e">&#9670;&nbsp;</a></span>HasTransmission()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasTransmission </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a643ddbf4ab39441f033f0317079d8f37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a643ddbf4ab39441f033f0317079d8f37">&#9670;&nbsp;</a></span>HasVectorProperty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::HasVectorProperty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return true if the property exists</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Property name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a53516dd844e47a9acf788d61f8020eae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53516dd844e47a9acf788d61f8020eae">&#9670;&nbsp;</a></span>IsValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::rendering::Material::IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns true if the <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a> was not created with the default constructor and therefore has a valid shader name. </p>

</div>
</div>
<a id="ae868a11e42186bca78b93b8853ca2b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae868a11e42186bca78b93b8853ca2b94">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a>&amp; open3d::visualization::rendering::Material::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0bc53f1ab390ccb09ff3661575da0851"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bc53f1ab390ccb09ff3661575da0851">&#9670;&nbsp;</a></span>SetAbsorptionColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAbsorptionColor </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector4f &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e59a887c43c97d1886d8d4719025cb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e59a887c43c97d1886d8d4719025cb7">&#9670;&nbsp;</a></span>SetAbsorptionDistance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAbsorptionDistance </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a075b7837876dfb33ef3f2bf1613836b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a075b7837876dfb33ef3f2bf1613836b6">&#9670;&nbsp;</a></span>SetAlbedoMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAlbedoMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a341c3c24c04047659e6a57c439c196d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a341c3c24c04047659e6a57c439c196d1">&#9670;&nbsp;</a></span>SetAnisotropy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAnisotropy </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a735e5575826ef5cfcc6ceb72aaa67ff9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a735e5575826ef5cfcc6ceb72aaa67ff9">&#9670;&nbsp;</a></span>SetAnisotropyMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAnisotropyMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2f6066fcb0588135c4007dc76d1411e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f6066fcb0588135c4007dc76d1411e8">&#9670;&nbsp;</a></span>SetAOMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAOMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a584af6480c66fafcc6da6558b165dce7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a584af6480c66fafcc6da6558b165dce7">&#9670;&nbsp;</a></span>SetAORoughnessMetalMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetAORoughnessMetalMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a904137532d995b73dfb2b76dc2cc925d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a904137532d995b73dfb2b76dc2cc925d">&#9670;&nbsp;</a></span>SetBaseClearcoat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetBaseClearcoat </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a054e0c031fe546ba5ce2983d9ce01290"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a054e0c031fe546ba5ce2983d9ce01290">&#9670;&nbsp;</a></span>SetBaseClearcoatRoughness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetBaseClearcoatRoughness </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afee079383ae5859e474b1228e135ce27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afee079383ae5859e474b1228e135ce27">&#9670;&nbsp;</a></span>SetBaseColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetBaseColor </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector4f &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acd7102b576bc6f7fd5e4fa582f97a252"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd7102b576bc6f7fd5e4fa582f97a252">&#9670;&nbsp;</a></span>SetBaseMetallic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetBaseMetallic </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a65ccc04c170888a44771e30febac46a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65ccc04c170888a44771e30febac46a3">&#9670;&nbsp;</a></span>SetBaseReflectance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetBaseReflectance </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a004a01baf475c6361e36b4fe5f1bb64d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a004a01baf475c6361e36b4fe5f1bb64d">&#9670;&nbsp;</a></span>SetBaseRoughness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetBaseRoughness </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad86fb5991c1245fbce3db4fb999d7cc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad86fb5991c1245fbce3db4fb999d7cc3">&#9670;&nbsp;</a></span>SetClearcoatMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetClearcoatMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac80b6293d2af1e7cbb3255a9d7edc0de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac80b6293d2af1e7cbb3255a9d7edc0de">&#9670;&nbsp;</a></span>SetClearcoatRoughnessMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetClearcoatRoughnessMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3bd24a674c828f4ed1a7c61f17a18756"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bd24a674c828f4ed1a7c61f17a18756">&#9670;&nbsp;</a></span>SetDefaultProperties()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetDefaultProperties </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets a number of properties to the defaults expected by Open3D shaders </p>

</div>
</div>
<a id="af807f078575cc71b203da3190d6aecb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af807f078575cc71b203da3190d6aecb3">&#9670;&nbsp;</a></span>SetLineWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetLineWidth </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a261dcc2c9dedc7dc4a5d7ea30cd75fb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a261dcc2c9dedc7dc4a5d7ea30cd75fb4">&#9670;&nbsp;</a></span>SetMaterialName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetMaterialName </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>material_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set material name. The material name should match the name of a built. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shader</td><td>The name of the shader. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aef309f6b7ecb7fc5dc79c8769ccb53c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef309f6b7ecb7fc5dc79c8769ccb53c1">&#9670;&nbsp;</a></span>SetMetallicMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetMetallicMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a74d17f2c2454e304dbea7cf17cb78750"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74d17f2c2454e304dbea7cf17cb78750">&#9670;&nbsp;</a></span>SetNormalMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetNormalMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0560e6813002ddc9a7fbfd0be5ce8ac2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0560e6813002ddc9a7fbfd0be5ce8ac2">&#9670;&nbsp;</a></span>SetPointSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetPointSize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5ad5bc61fad9807bd268f1b388db2a0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ad5bc61fad9807bd268f1b388db2a0a">&#9670;&nbsp;</a></span>SetReflectanceMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetReflectanceMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae86d370b8e8492c20f7718e1d7a3fdd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae86d370b8e8492c20f7718e1d7a3fdd1">&#9670;&nbsp;</a></span>SetRoughnessMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetRoughnessMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a316e82354ea0b8335f8c0410e79e064a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a316e82354ea0b8335f8c0410e79e064a">&#9670;&nbsp;</a></span>SetScalarProperty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetScalarProperty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set scalar property. If property already exists it is overwritten, otherwise a new key/value will be created.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>property name </td></tr>
    <tr><td class="paramname">value</td><td>Value to assign to property name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6d08fd804e35e249345bb0d7e93ce3e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d08fd804e35e249345bb0d7e93ce3e2">&#9670;&nbsp;</a></span>SetTextureMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetTextureMap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">t::geometry::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set texture map. If map already exists it is overwritten, otherwise a new key/image will be created.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>map name </td></tr>
    <tr><td class="paramname">image</td><td>Image associated with map name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a58ed64a6604bd8e7dd8807ea0a2970b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58ed64a6604bd8e7dd8807ea0a2970b3">&#9670;&nbsp;</a></span>SetThickness()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetThickness </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa21a95e505a31fd2df0c896265afef72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21a95e505a31fd2df0c896265afef72">&#9670;&nbsp;</a></span>SetTransmission()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetTransmission </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a743f1339dc56c0e0d81dbf0a92569bb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a743f1339dc56c0e0d81dbf0a92569bb9">&#9670;&nbsp;</a></span>SetVectorProperty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::SetVectorProperty </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector4f &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set vector property. If property already exists it is overwritten, otherwise a new key/value will be created.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>property name </td></tr>
    <tr><td class="paramname">value</td><td>Value to assign to property name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aec3fb623de47d984ebfbfdebddd44565"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec3fb623de47d984ebfbfdebddd44565">&#9670;&nbsp;</a></span>ToMaterialRecord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::rendering::Material::ToMaterialRecord </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;&#160;</td>
          <td class="paramname"><em>record</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills a legacy <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> constructed from this <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_">Material</a>. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/rendering/<a class="el" href="_material_8h_source.html">Material.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/rendering/<a class="el" href="_material_8cpp.html">Material.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1rendering_1_1_material.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:58:05 GMT -->
</html>
