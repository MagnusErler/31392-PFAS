<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_voxel_block_grid.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:53 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::VoxelBlockGrid Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::VoxelBlockGrid Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_voxel_block_grid_8h_source.html">VoxelBlockGrid.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ade00f6b39a352523b6ebc1d4b65120f3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#ade00f6b39a352523b6ebc1d4b65120f3">VoxelBlockGrid</a> ()=default</td></tr>
<tr class="separator:ade00f6b39a352523b6ebc1d4b65120f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d70882a7b93bad1efcca98171f8554b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a3d70882a7b93bad1efcca98171f8554b">VoxelBlockGrid</a> (const std::vector&lt; std::string &gt; &amp;attr_names, const std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &gt; &amp;attr_dtypes, const std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">core::SizeVector</a> &gt; &amp;attr_channels, float voxel_size=0.0058, int64_t block_resolution=16, int64_t block_count=10000, const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;), const <a class="el" href="namespaceopen3d_1_1core.html#aa9cb3aa033abd5eb2b1bd42d3dc10a83">core::HashBackendType</a> &amp;backend=<a class="el" href="namespaceopen3d_1_1core.html#aa9cb3aa033abd5eb2b1bd42d3dc10a83a7a1920d61156abc05a60135aefe8bc67">core::HashBackendType::Default</a>)</td></tr>
<tr class="memdesc:a3d70882a7b93bad1efcca98171f8554b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. Example: <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a>({"tsdf", "weight", "color"}, {<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="namespaceopen3d_1_1core.html#a49478d2953a40da8ade95050bfae36b1">core::UInt16</a>, <a class="el" href="namespaceopen3d_1_1core.html#a49478d2953a40da8ade95050bfae36b1">core::UInt16</a>}, {{1}, {1}, {3}}, 0.005, 16, 10000, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>("CUDA:0"), <a class="el" href="namespaceopen3d_1_1core.html#aa9cb3aa033abd5eb2b1bd42d3dc10a83a7a1920d61156abc05a60135aefe8bc67">core::HashBackendType::Default</a>);.  <a href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a3d70882a7b93bad1efcca98171f8554b">More...</a><br /></td></tr>
<tr class="separator:a3d70882a7b93bad1efcca98171f8554b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a992aba3141ca9a6c006309371ae126b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_hash_map.html">core::HashMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a992aba3141ca9a6c006309371ae126b7">GetHashMap</a> ()</td></tr>
<tr class="separator:a992aba3141ca9a6c006309371ae126b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f5bce685054a34cdcd1eb532a014e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a38f5bce685054a34cdcd1eb532a014e2">GetAttribute</a> (const std::string &amp;attr_name) const</td></tr>
<tr class="separator:a38f5bce685054a34cdcd1eb532a014e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a978389bfa80161ff7a4f74ecd0198e8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a978389bfa80161ff7a4f74ecd0198e8d">GetVoxelIndices</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;buf_indices) const</td></tr>
<tr class="separator:a978389bfa80161ff7a4f74ecd0198e8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8930f37625f966346eb82badac3c947f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a8930f37625f966346eb82badac3c947f">GetVoxelIndices</a> () const</td></tr>
<tr class="memdesc:a8930f37625f966346eb82badac3c947f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all active voxel indices.  <a href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a8930f37625f966346eb82badac3c947f">More...</a><br /></td></tr>
<tr class="separator:a8930f37625f966346eb82badac3c947f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c9a2625cbba2a5334e16fc875db19ca"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a5c9a2625cbba2a5334e16fc875db19ca">GetVoxelCoordinates</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;voxel_indices) const</td></tr>
<tr class="separator:a5c9a2625cbba2a5334e16fc875db19ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21acfa06621a23527a92c77bc6656b8d"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a21acfa06621a23527a92c77bc6656b8d">GetVoxelCoordinatesAndFlattenedIndices</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;buf_indices)</td></tr>
<tr class="separator:a21acfa06621a23527a92c77bc6656b8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6cb61c39ded9891e542267cd2de30bb"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#aa6cb61c39ded9891e542267cd2de30bb">GetVoxelCoordinatesAndFlattenedIndices</a> ()</td></tr>
<tr class="separator:aa6cb61c39ded9891e542267cd2de30bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeac60fa2c79025b7895724ebc6036373"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#aeac60fa2c79025b7895724ebc6036373">GetUniqueBlockCoordinates</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsic, float depth_scale=1000.0f, float depth_max=3.0f, float trunc_voxel_multiplier=8.0)</td></tr>
<tr class="separator:aeac60fa2c79025b7895724ebc6036373"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7d9b0a917c28647c8566379940128b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#aa7d9b0a917c28647c8566379940128b2">GetUniqueBlockCoordinates</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> &amp;pcd, float trunc_voxel_multiplier=8.0)</td></tr>
<tr class="memdesc:aa7d9b0a917c28647c8566379940128b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Obtain active block coordinates from a point cloud.  <a href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#aa7d9b0a917c28647c8566379940128b2">More...</a><br /></td></tr>
<tr class="separator:aa7d9b0a917c28647c8566379940128b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31e9e67384a75deba65eb40848256fc9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a31e9e67384a75deba65eb40848256fc9">Integrate</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;block_coords, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;depth, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;depth_intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;color_intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsic, float depth_scale=1000.0f, float depth_max=3.0f, float trunc_voxel_multiplier=8.0f)</td></tr>
<tr class="separator:a31e9e67384a75deba65eb40848256fc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f5f0e14609a7af5646e101f09467f15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a6f5f0e14609a7af5646e101f09467f15">Integrate</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;block_coords, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;depth, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsic, float depth_scale=1000.0f, float depth_max=3.0f, float trunc_voxel_multiplier=8.0f)</td></tr>
<tr class="separator:a6f5f0e14609a7af5646e101f09467f15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9968ce621df90975d1c977f16dc9f9f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a9968ce621df90975d1c977f16dc9f9f6">Integrate</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;block_coords, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsic, float depth_scale=1000.0f, float depth_max=3.0f, float trunc_voxel_multiplier=8.0f)</td></tr>
<tr class="separator:a9968ce621df90975d1c977f16dc9f9f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65e27a412d1a308479d61d8ae5615cd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a65e27a412d1a308479d61d8ae5615cd5">RayCast</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;block_coords, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;extrinsic, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>, const std::vector&lt; std::string &gt; attrs={&quot;depth&quot;, &quot;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>&quot;}, float depth_scale=1000.0f, float depth_min=0.1f, float depth_max=3.0f, float weight_threshold=3.0f, float trunc_voxel_multiplier=8.0f, int range_map_down_factor=8)</td></tr>
<tr class="separator:a65e27a412d1a308479d61d8ae5615cd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a204d9d1e87c5014cab8d69c7421c1719"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a204d9d1e87c5014cab8d69c7421c1719">ExtractPointCloud</a> (float weight_threshold=3.0f, int estimated_point_number=-1)</td></tr>
<tr class="separator:a204d9d1e87c5014cab8d69c7421c1719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72bead7e5d49d0ff5e5f541bc6726396"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a72bead7e5d49d0ff5e5f541bc6726396">ExtractTriangleMesh</a> (float weight_threshold=3.0f, int estimated_vertex_numer=-1)</td></tr>
<tr class="separator:a72bead7e5d49d0ff5e5f541bc6726396"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f2a61777aa3827cb5d6b82466b8b41b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a7f2a61777aa3827cb5d6b82466b8b41b">Save</a> (const std::string &amp;file_name) const</td></tr>
<tr class="memdesc:a7f2a61777aa3827cb5d6b82466b8b41b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save a voxel block grid to a .npz file.  <a href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a7f2a61777aa3827cb5d6b82466b8b41b">More...</a><br /></td></tr>
<tr class="separator:a7f2a61777aa3827cb5d6b82466b8b41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f58a0de3b7870f6e36804e9f485539d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a4f58a0de3b7870f6e36804e9f485539d">To</a> (const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>=false) const</td></tr>
<tr class="memdesc:a4f58a0de3b7870f6e36804e9f485539d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the hash map to another device.  <a href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a4f58a0de3b7870f6e36804e9f485539d">More...</a><br /></td></tr>
<tr class="separator:a4f58a0de3b7870f6e36804e9f485539d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a1eee52b7d91fe6fe3adc3120f20b1941"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a1eee52b7d91fe6fe3adc3120f20b1941">Load</a> (const std::string &amp;file_name)</td></tr>
<tr class="memdesc:a1eee52b7d91fe6fe3adc3120f20b1941"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a voxel block grid from a .npz file.  <a href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a1eee52b7d91fe6fe3adc3120f20b1941">More...</a><br /></td></tr>
<tr class="separator:a1eee52b7d91fe6fe3adc3120f20b1941"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A voxel block grid is a sparse grid of voxel blocks. Each voxel block is a dense 3D array, preserving local data distribution. If the block_resolution is set to 1, then the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a> degenerates to a sparse voxel grid. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ade00f6b39a352523b6ebc1d4b65120f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade00f6b39a352523b6ebc1d4b65120f3">&#9670;&nbsp;</a></span>VoxelBlockGrid() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::VoxelBlockGrid::VoxelBlockGrid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d70882a7b93bad1efcca98171f8554b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d70882a7b93bad1efcca98171f8554b">&#9670;&nbsp;</a></span>VoxelBlockGrid() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::geometry::VoxelBlockGrid::VoxelBlockGrid </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>attr_names</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>attr_dtypes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1core_1_1_size_vector.3b3.dela">core::SizeVector</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>attr_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>voxel_size</em> = <code>0.0058</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>block_resolution</em> = <code>16</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>block_count</em> = <code>10000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1core.html#aa9cb3aa033abd5eb2b1bd42d3dc10a83">core::HashBackendType</a> &amp;&#160;</td>
          <td class="paramname"><em>backend</em> = <code><a class="el" href="namespaceopen3d_1_1core.html#aa9cb3aa033abd5eb2b1bd42d3dc10a83a7a1920d61156abc05a60135aefe8bc67">core::HashBackendType::Default</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default Constructor. Example: <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a>({"tsdf", "weight", "color"}, {<a class="el" href="namespaceopen3d_1_1core.html#af1357e9a6250eaf326a9dc7069c02789">core::Float32</a>, <a class="el" href="namespaceopen3d_1_1core.html#a49478d2953a40da8ade95050bfae36b1">core::UInt16</a>, <a class="el" href="namespaceopen3d_1_1core.html#a49478d2953a40da8ade95050bfae36b1">core::UInt16</a>}, {{1}, {1}, {3}}, 0.005, 16, 10000, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>("CUDA:0"), <a class="el" href="namespaceopen3d_1_1core.html#aa9cb3aa033abd5eb2b1bd42d3dc10a83a7a1920d61156abc05a60135aefe8bc67">core::HashBackendType::Default</a>);. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a204d9d1e87c5014cab8d69c7421c1719"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a204d9d1e87c5014cab8d69c7421c1719">&#9670;&nbsp;</a></span>ExtractPointCloud()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> open3d::t::geometry::VoxelBlockGrid::ExtractPointCloud </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight_threshold</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>estimated_point_number</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Specific operation for TSDF volumes. Extract point cloud at isosurface points. Weight threshold is used to filter outliers. By default we use 3.0, where we assume a reliable surface point comes from the fusion of at least 3 viewpoints. Use as low as 0.0 to accept all the possible observations. Estimated point numbers optionally speeds up the process by a one-pass extraction with pre-allocated buffers. Use -1 when no estimate is available. </p>

</div>
</div>
<a id="a72bead7e5d49d0ff5e5f541bc6726396"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72bead7e5d49d0ff5e5f541bc6726396">&#9670;&nbsp;</a></span>ExtractTriangleMesh()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::VoxelBlockGrid::ExtractTriangleMesh </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight_threshold</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>estimated_vertex_numer</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Specific operation for TSDF volumes. Extract mesh near iso-surfaces with Marching Cubes. Weight threshold is used to filter outliers. By default we use 3.0, where we assume a reliable surface point comes from the fusion of at least 3 viewpoints. Use as low as 0.0 to accept all the possible observations. Estimated point numbers optionally speeds up the process by a one-pass extraction with pre-allocated buffers. Use -1 when no estimate is available. </p>

</div>
</div>
<a id="a38f5bce685054a34cdcd1eb532a014e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38f5bce685054a34cdcd1eb532a014e2">&#9670;&nbsp;</a></span>GetAttribute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::VoxelBlockGrid::GetAttribute </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>attr_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the attribute tensor corresponding to the attribute name. A sugar for hashmap.GetValueTensor(i) </p>

</div>
</div>
<a id="a992aba3141ca9a6c006309371ae126b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a992aba3141ca9a6c006309371ae126b7">&#9670;&nbsp;</a></span>GetHashMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_hash_map.html">core::HashMap</a> open3d::t::geometry::VoxelBlockGrid::GetHashMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the underlying hash map that stores values in structure of arrays (SoA). </p>

</div>
</div>
<a id="aeac60fa2c79025b7895724ebc6036373"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeac60fa2c79025b7895724ebc6036373">&#9670;&nbsp;</a></span>GetUniqueBlockCoordinates() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::VoxelBlockGrid::GetUniqueBlockCoordinates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get a (3, M) active block coordinates from a depth image, with potential duplicates removed. Note: these coordinates are not activated in the internal sparse voxel block. They need to be inserted in the hash map. </p>

</div>
</div>
<a id="aa7d9b0a917c28647c8566379940128b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7d9b0a917c28647c8566379940128b2">&#9670;&nbsp;</a></span>GetUniqueBlockCoordinates() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::VoxelBlockGrid::GetUniqueBlockCoordinates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>pcd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Obtain active block coordinates from a point cloud. </p>

</div>
</div>
<a id="a5c9a2625cbba2a5334e16fc875db19ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c9a2625cbba2a5334e16fc875db19ca">&#9670;&nbsp;</a></span>GetVoxelCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::VoxelBlockGrid::GetVoxelCoordinates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>voxel_indices</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get a (3, hashmap.Size() * resolution^3) coordinate tensor of active voxels per block, used for geometry transformation jointly with indices from GetVoxelIndices.</p>
<p>Example: For a voxel block grid with (2, 2, 2) block resolution, if the active block coordinates are {(-1, 3, 2), (0, 2, 4)}, the returned result will be a (3, 2 x 8) tensor given by: { key_tensor[voxel_indices[0]] * block_resolution_ + voxel_indices[1] key_tensor[voxel_indices[0]] * block_resolution_ + voxel_indices[2] key_tensor[voxel_indices[0]] * block_resolution_ + voxel_indices[3] } Note: the coordinates are VOXEL COORDINATES in Int64. To access metric coordinates, multiply by voxel size. </p>

</div>
</div>
<a id="aa6cb61c39ded9891e542267cd2de30bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6cb61c39ded9891e542267cd2de30bb">&#9670;&nbsp;</a></span>GetVoxelCoordinatesAndFlattenedIndices() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::geometry::VoxelBlockGrid::GetVoxelCoordinatesAndFlattenedIndices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Same as above, but N is the number of all the active voxels with blocks stored in the hash map. </p>

</div>
</div>
<a id="a21acfa06621a23527a92c77bc6656b8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21acfa06621a23527a92c77bc6656b8d">&#9670;&nbsp;</a></span>GetVoxelCoordinatesAndFlattenedIndices() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; open3d::t::geometry::VoxelBlockGrid::GetVoxelCoordinatesAndFlattenedIndices </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>buf_indices</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Accelerated combination of GetVoxelIndices and GetVoxelCoordinates. Returns a (N, 3) coordinate in float, and a (N, ) flattened index tensor, where N is the number of active voxels located at buf_indices. </p>

</div>
</div>
<a id="a8930f37625f966346eb82badac3c947f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8930f37625f966346eb82badac3c947f">&#9670;&nbsp;</a></span>GetVoxelIndices() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::VoxelBlockGrid::GetVoxelIndices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all active voxel indices. </p>

</div>
</div>
<a id="a978389bfa80161ff7a4f74ecd0198e8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a978389bfa80161ff7a4f74ecd0198e8d">&#9670;&nbsp;</a></span>GetVoxelIndices() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::geometry::VoxelBlockGrid::GetVoxelIndices </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>buf_indices</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get a (4, N), Int64 index tensor for active voxels, used for advanced indexing. Returned index tensor can access selected value buffers in order of (buf_index, index_voxel_x, index_voxel_y, index_voxel_z).</p>
<p>Example: For a voxel block grid with (2, 2, 2) block resolution, if the active block coordinates are at buffer index {(2, 4)} given by GetActiveIndices() from the underlying hash map, the returned result will be a (4, 2 x 8) tensor: { (2, 0, 0, 0), (2, 1, 0, 0), (2, 0, 1, 0), (2, 1, 1, 0), (2, 0, 0, 1), (2, 1, 0, 1), (2, 0, 1, 1), (2, 1, 1, 1), (4, 0, 0, 0), (4, 1, 0, 0), (4, 0, 1, 0), (4, 1, 1, 0), (4, 0, 0, 1), (4, 1, 0, 1), (4, 0, 1, 1), (4, 1, 1, 1), } Note: the slicing order is z-y-x. </p>
<p>TODO: Check if kernel version is necessary.</p>
<p>operator % is not supported now</p>

</div>
</div>
<a id="a9968ce621df90975d1c977f16dc9f9f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9968ce621df90975d1c977f16dc9f9f6">&#9670;&nbsp;</a></span>Integrate() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::VoxelBlockGrid::Integrate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>block_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Specific operation for TSDF volumes. Similar to RGB-D integration, but only applied to depth. </p>

</div>
</div>
<a id="a31e9e67384a75deba65eb40848256fc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31e9e67384a75deba65eb40848256fc9">&#9670;&nbsp;</a></span>Integrate() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::VoxelBlockGrid::Integrate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>block_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>depth_intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>color_intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Specific operation for TSDF volumes. Integrate an RGB-D frame in the selected block coordinates using pinhole camera model. For built-in kernels, we support efficient hash map types for SLAM: tsdf: float, weight: uint16_t, color: uint16_t and accurate mode for differentiable rendering: tsdf/weight/color: float We assume input data are either raw: depth: uint16_t, color: uint8_t or depth/color: float. To support other types and properties, users should combine GetUniqueBlockCoordinates, GetVoxelIndices, and GetVoxelCoordinates, with self-defined operations. </p>

</div>
</div>
<a id="a6f5f0e14609a7af5646e101f09467f15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f5f0e14609a7af5646e101f09467f15">&#9670;&nbsp;</a></span>Integrate() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::VoxelBlockGrid::Integrate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>block_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_image.34e.d">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Specific operation for TSDF volumes. Similar to RGB-D integration, but uses the same intrinsics for depth and color. </p>

</div>
</div>
<a id="a1eee52b7d91fe6fe3adc3120f20b1941"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1eee52b7d91fe6fe3adc3120f20b1941">&#9670;&nbsp;</a></span>Load()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a> open3d::t::geometry::VoxelBlockGrid::Load </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>file_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load a voxel block grid from a .npz file. </p>

</div>
</div>
<a id="a65e27a412d1a308479d61d8ae5615cd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65e27a412d1a308479d61d8ae5615cd5">&#9670;&nbsp;</a></span>RayCast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_tensor_map">TensorMap</a> open3d::t::geometry::VoxelBlockGrid::RayCast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>block_coords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>extrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>attrs</em> = <code>{&quot;depth&quot;,&#160;&quot;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>&quot;}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_min</em> = <code>0.1f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight_threshold</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>range_map_down_factor</em> = <code>8</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Specific operation for TSDF volumes. Perform volumetric ray casting in the selected block coordinates. Return selected properties from the frame. Supported attributes: Conventional rendering: vertex, depth, color, normal, range Differentiable rendering (voxel-wise): mask, index, (interpolation) ratio. The block coordinates in the frustum can be taken from GetUniqueBlockCoordinates. All the block coordinates can be taken from <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block#a992aba3141ca9a6c006309371ae126b7">GetHashMap()</a>.GetKeyTensor(). </p>

</div>
</div>
<a id="a7f2a61777aa3827cb5d6b82466b8b41b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f2a61777aa3827cb5d6b82466b8b41b">&#9670;&nbsp;</a></span>Save()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::geometry::VoxelBlockGrid::Save </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>file_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Save a voxel block grid to a .npz file. </p>

</div>
</div>
<a id="a4f58a0de3b7870f6e36804e9f485539d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f58a0de3b7870f6e36804e9f485539d">&#9670;&nbsp;</a></span>To()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">VoxelBlockGrid</a> open3d::t::geometry::VoxelBlockGrid::To </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the hash map to another device. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="_voxel_block_grid_8h_source.html">VoxelBlockGrid.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/geometry/<a class="el" href="_voxel_block_grid_8cpp.html">VoxelBlockGrid.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1geometry_1_1_voxel_block_grid.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:54 GMT -->
</html>
