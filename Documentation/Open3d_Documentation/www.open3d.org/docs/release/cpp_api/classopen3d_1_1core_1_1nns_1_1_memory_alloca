<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1nns_1_1_memory_allocation.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:59:53 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::nns::MemoryAllocation Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core_1_1nns.html">nns</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca">MemoryAllocation</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::nns::MemoryAllocation Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class for managing memory segments within a memory allocation.  
 <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="core_2nns_2_memory_allocation_8h_source.9c3">MemoryAllocation.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a255eede7efa48b6379c4764851de2752"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a255eede7efa48b6379c4764851de2752">MemoryAllocation</a> (void *ptr, size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>, size_t alignment=1)</td></tr>
<tr class="separator:a255eede7efa48b6379c4764851de2752"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa32ba29ac78d8a001421ab12ccc2938"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:aaa32ba29ac78d8a001421ab12ccc2938"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; T *, size_t &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#aaa32ba29ac78d8a001421ab12ccc2938">Alloc</a> (size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)</td></tr>
<tr class="separator:aaa32ba29ac78d8a001421ab12ccc2938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94dc9ba89550fa3aac7c2a3b089694cf"><td class="memItemLeft" align="right" valign="top">std::pair&lt; void *, size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a94dc9ba89550fa3aac7c2a3b089694cf">Alloc</a> (size_t <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)</td></tr>
<tr class="separator:a94dc9ba89550fa3aac7c2a3b089694cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af57de9ed6875176cfb9aa4aeff311f33"><td class="memItemLeft" align="right" valign="top">std::pair&lt; void *, size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#af57de9ed6875176cfb9aa4aeff311f33">AllocLargestSegment</a> ()</td></tr>
<tr class="memdesc:af57de9ed6875176cfb9aa4aeff311f33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest free segment.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#af57de9ed6875176cfb9aa4aeff311f33">More...</a><br /></td></tr>
<tr class="separator:af57de9ed6875176cfb9aa4aeff311f33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a130ea2f6e2d5d330ce3c2c15b724c9f1"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a130ea2f6e2d5d330ce3c2c15b724c9f1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a130ea2f6e2d5d330ce3c2c15b724c9f1">Free</a> (const std::pair&lt; T *, size_t &gt; &amp;segment)</td></tr>
<tr class="memdesc:a130ea2f6e2d5d330ce3c2c15b724c9f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees a previously returned segment.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a130ea2f6e2d5d330ce3c2c15b724c9f1">More...</a><br /></td></tr>
<tr class="separator:a130ea2f6e2d5d330ce3c2c15b724c9f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a326b7a7825e80b6cfd80fe3112ca90c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a326b7a7825e80b6cfd80fe3112ca90c6">Free</a> (const std::pair&lt; void *, size_t &gt; &amp;segment)</td></tr>
<tr class="memdesc:a326b7a7825e80b6cfd80fe3112ca90c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees a previously returned segment.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a326b7a7825e80b6cfd80fe3112ca90c6">More...</a><br /></td></tr>
<tr class="separator:a326b7a7825e80b6cfd80fe3112ca90c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a06aba26fd202e55cc2ac4e06582841"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a1a06aba26fd202e55cc2ac4e06582841">MaxUsed</a> () const</td></tr>
<tr class="memdesc:a1a06aba26fd202e55cc2ac4e06582841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the peak memory usage in bytes.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a1a06aba26fd202e55cc2ac4e06582841">More...</a><br /></td></tr>
<tr class="separator:a1a06aba26fd202e55cc2ac4e06582841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acca9069f511f95697f3a1fc3fdf3b2ed"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#acca9069f511f95697f3a1fc3fdf3b2ed">Alignment</a> () const</td></tr>
<tr class="memdesc:acca9069f511f95697f3a1fc3fdf3b2ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the alignment in bytes.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#acca9069f511f95697f3a1fc3fdf3b2ed">More...</a><br /></td></tr>
<tr class="separator:acca9069f511f95697f3a1fc3fdf3b2ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac598e87237ad6d104f5af5a7f5381cee"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::pair&lt; void *, size_t &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#ac598e87237ad6d104f5af5a7f5381cee">FreeSegments</a> () const</td></tr>
<tr class="memdesc:ac598e87237ad6d104f5af5a7f5381cee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the list of free segments.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#ac598e87237ad6d104f5af5a7f5381cee">More...</a><br /></td></tr>
<tr class="separator:ac598e87237ad6d104f5af5a7f5381cee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bf041d8adcbd2df298f0e6d9b39d568"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a8bf041d8adcbd2df298f0e6d9b39d568">PrintFreeSegments</a> () const</td></tr>
<tr class="memdesc:a8bf041d8adcbd2df298f0e6d9b39d568"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints all free segments. Meant for debugging.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a8bf041d8adcbd2df298f0e6d9b39d568">More...</a><br /></td></tr>
<tr class="separator:a8bf041d8adcbd2df298f0e6d9b39d568"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a131741c6a9769a9a3ef848f7cf7a5053"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a131741c6a9769a9a3ef848f7cf7a5053"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a131741c6a9769a9a3ef848f7cf7a5053">PrintSegment</a> (const std::pair&lt; T *, size_t &gt; &amp;s)</td></tr>
<tr class="memdesc:a131741c6a9769a9a3ef848f7cf7a5053"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints the segment. Meant for debugging.  <a href="classopen3d_1_1core_1_1nns_1_1_memory_alloca#a131741c6a9769a9a3ef848f7cf7a5053">More...</a><br /></td></tr>
<tr class="separator:a131741c6a9769a9a3ef848f7cf7a5053"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class for managing memory segments within a memory allocation. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a255eede7efa48b6379c4764851de2752"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a255eede7efa48b6379c4764851de2752">&#9670;&nbsp;</a></span>MemoryAllocation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::core::nns::MemoryAllocation::MemoryAllocation </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>alignment</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1core_1_1nns_1_1_memory_alloca" title="A class for managing memory segments within a memory allocation.">MemoryAllocation</a> object that manages memory segments within a memory allocation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>Pointer to the beginning of the memory. </td></tr>
    <tr><td class="paramname">size</td><td>Size of the memory. </td></tr>
    <tr><td class="paramname">alignment</td><td>The alignment for returned segments. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acca9069f511f95697f3a1fc3fdf3b2ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acca9069f511f95697f3a1fc3fdf3b2ed">&#9670;&nbsp;</a></span>Alignment()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t open3d::core::nns::MemoryAllocation::Alignment </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the alignment in bytes. </p>

</div>
</div>
<a id="aaa32ba29ac78d8a001421ab12ccc2938"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa32ba29ac78d8a001421ab12ccc2938">&#9670;&nbsp;</a></span>Alloc() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;T*, size_t&gt; open3d::core::nns::MemoryAllocation::Alloc </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns a memory segment with size for type T. Returns the pointer and the size in number of elements T. May return the pair (nullptr,0) if the allocation is not possible. </p>

</div>
</div>
<a id="a94dc9ba89550fa3aac7c2a3b089694cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94dc9ba89550fa3aac7c2a3b089694cf">&#9670;&nbsp;</a></span>Alloc() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;void*, size_t&gt; open3d::core::nns::MemoryAllocation::Alloc </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns a memory segment with size in bytes. May return the pair (nullptr,0) if the allocation is not possible. </p>

</div>
</div>
<a id="af57de9ed6875176cfb9aa4aeff311f33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af57de9ed6875176cfb9aa4aeff311f33">&#9670;&nbsp;</a></span>AllocLargestSegment()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;void*, size_t&gt; open3d::core::nns::MemoryAllocation::AllocLargestSegment </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the largest free segment. </p>

</div>
</div>
<a id="a130ea2f6e2d5d330ce3c2c15b724c9f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a130ea2f6e2d5d330ce3c2c15b724c9f1">&#9670;&nbsp;</a></span>Free() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::nns::MemoryAllocation::Free </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; T *, size_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>segment</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Frees a previously returned segment. </p>

</div>
</div>
<a id="a326b7a7825e80b6cfd80fe3112ca90c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a326b7a7825e80b6cfd80fe3112ca90c6">&#9670;&nbsp;</a></span>Free() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::nns::MemoryAllocation::Free </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; void *, size_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>segment</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Frees a previously returned segment. </p>

</div>
</div>
<a id="ac598e87237ad6d104f5af5a7f5381cee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac598e87237ad6d104f5af5a7f5381cee">&#9670;&nbsp;</a></span>FreeSegments()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::pair&lt;void*, size_t&gt; &gt;&amp; open3d::core::nns::MemoryAllocation::FreeSegments </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the list of free segments. </p>

</div>
</div>
<a id="a1a06aba26fd202e55cc2ac4e06582841"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a06aba26fd202e55cc2ac4e06582841">&#9670;&nbsp;</a></span>MaxUsed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t open3d::core::nns::MemoryAllocation::MaxUsed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the peak memory usage in bytes. </p>

</div>
</div>
<a id="a8bf041d8adcbd2df298f0e6d9b39d568"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bf041d8adcbd2df298f0e6d9b39d568">&#9670;&nbsp;</a></span>PrintFreeSegments()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::core::nns::MemoryAllocation::PrintFreeSegments </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints all free segments. Meant for debugging. </p>

</div>
</div>
<a id="a131741c6a9769a9a3ef848f7cf7a5053"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a131741c6a9769a9a3ef848f7cf7a5053">&#9670;&nbsp;</a></span>PrintSegment()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void open3d::core::nns::MemoryAllocation::PrintSegment </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; T *, size_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints the segment. Meant for debugging. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/nns/<a class="el" href="core_2nns_2_memory_allocation_8h_source.9c3">MemoryAllocation.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1nns_1_1_memory_allocation.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:59:53 GMT -->
</html>
