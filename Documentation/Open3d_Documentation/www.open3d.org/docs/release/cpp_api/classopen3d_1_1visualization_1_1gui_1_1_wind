<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1gui_1_1_window.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:01:37 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::visualization::gui::Window Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization.html">visualization</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization_1_1gui.46a">gui</a></li><li class="navelem"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">open3d::visualization::gui::Window Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_window_8h_source.html">Window.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::visualization::gui::Window:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1visualization_1_1gui_1_1_wind-3" usemap="#open3d::visualization::gui::Window_map" alt=""/>
  <map id="open3d::visualization::gui::Window_map" name="open3d::visualization::gui::Window_map">
<area href="classopen3d_1_1visualization_1_1_gui_visuali" alt="open3d::visualization::GuiVisualizer" shape="rect" coords="0,56,277,80"/>
<area href="classopen3d_1_1visualization_1_1visualizer_1" alt="open3d::visualization::visualizer::O3DVisualizer" shape="rect" coords="287,56,564,80"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_win">Impl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aee56b416a7ce0ed88326840eb66164bc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aee56b416a7ce0ed88326840eb66164bc">Window</a> (const std::string &amp;title, int flags=0)</td></tr>
<tr class="separator:aee56b416a7ce0ed88326840eb66164bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab28cfd74a651f90c7e8d6e06eccd882b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ab28cfd74a651f90c7e8d6e06eccd882b">Window</a> (const std::string &amp;title, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>, int flags=0)</td></tr>
<tr class="separator:ab28cfd74a651f90c7e8d6e06eccd882b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af850774eb821c4f1c4e99b6d822a018f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#af850774eb821c4f1c4e99b6d822a018f">Window</a> (const std::string &amp;title, int x, int y, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a2474a5474cbff19523a51eb1de01cda4">width</a>, int <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#ad12fc34ce789bce6c8a05d8a17138534">height</a>, int flags=0)</td></tr>
<tr class="separator:af850774eb821c4f1c4e99b6d822a018f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb53c927ddc3d6b0b8e783e044c22620"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#afb53c927ddc3d6b0b8e783e044c22620">~Window</a> ()</td></tr>
<tr class="separator:afb53c927ddc3d6b0b8e783e044c22620"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23ee69da890f8edd058bcfae46d25b57"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_the">Theme</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a23ee69da890f8edd058bcfae46d25b57">GetTheme</a> () const</td></tr>
<tr class="separator:a23ee69da890f8edd058bcfae46d25b57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a971287e0a8951d98a92e3d28c0232805"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">visualization::rendering::Renderer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a971287e0a8951d98a92e3d28c0232805">GetRenderer</a> () const</td></tr>
<tr class="separator:a971287e0a8951d98a92e3d28c0232805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eb5909175ba0920d2e9cf728eaf12b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_rec">Rect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a9eb5909175ba0920d2e9cf728eaf12b4">GetOSFrame</a> () const</td></tr>
<tr class="separator:a9eb5909175ba0920d2e9cf728eaf12b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a607e0c0fc144784221052266b95d06b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a607e0c0fc144784221052266b95d06b5">SetOSFrame</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_rec">Rect</a> &amp;r)</td></tr>
<tr class="separator:a607e0c0fc144784221052266b95d06b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f3d65fc8ed65608c78b25a1027d4a53"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a5f3d65fc8ed65608c78b25a1027d4a53">GetTitle</a> () const</td></tr>
<tr class="separator:a5f3d65fc8ed65608c78b25a1027d4a53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cb5bb83f9b9e1863f7ea4a0f8435bfb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a2cb5bb83f9b9e1863f7ea4a0f8435bfb">SetTitle</a> (const char *title)</td></tr>
<tr class="separator:a2cb5bb83f9b9e1863f7ea4a0f8435bfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc018b26cd55048873b8339ca43c290b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#afc018b26cd55048873b8339ca43c290b">SizeToFit</a> ()</td></tr>
<tr class="separator:afc018b26cd55048873b8339ca43c290b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d68174772abe76d6612f11eb62b449"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a85d68174772abe76d6612f11eb62b449">SetSize</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_siz">Size</a> &amp;<a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)</td></tr>
<tr class="memdesc:a85d68174772abe76d6612f11eb62b449"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the size of the window in pixels. Includes menubar on Linux.  <a href="classopen3d_1_1visualization_1_1gui_1_1_wind#a85d68174772abe76d6612f11eb62b449">More...</a><br /></td></tr>
<tr class="separator:a85d68174772abe76d6612f11eb62b449"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fabfc12d1ee446885071a0c1a34de69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_siz">Size</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a7fabfc12d1ee446885071a0c1a34de69">GetSize</a> () const</td></tr>
<tr class="separator:a7fabfc12d1ee446885071a0c1a34de69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae87e9d12a77192bc304049b8a2098545"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_rec">Rect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae87e9d12a77192bc304049b8a2098545">GetContentRect</a> () const</td></tr>
<tr class="separator:ae87e9d12a77192bc304049b8a2098545"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5c667fa3ab491307af73921a9bbe002"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae5c667fa3ab491307af73921a9bbe002">GetScaling</a> () const</td></tr>
<tr class="memdesc:ae5c667fa3ab491307af73921a9bbe002"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the scaling factor from OS pixels to device pixels.  <a href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae5c667fa3ab491307af73921a9bbe002">More...</a><br /></td></tr>
<tr class="separator:ae5c667fa3ab491307af73921a9bbe002"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa006c67d7ddeecd0ea2512b6a4eec422"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_poi">Point</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aa006c67d7ddeecd0ea2512b6a4eec422">GlobalToWindowCoord</a> (int global_x, int global_y)</td></tr>
<tr class="memdesc:aa006c67d7ddeecd0ea2512b6a4eec422"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the global point (in OS pixels) in window local coordinates.  <a href="classopen3d_1_1visualization_1_1gui_1_1_wind#aa006c67d7ddeecd0ea2512b6a4eec422">More...</a><br /></td></tr>
<tr class="separator:aa006c67d7ddeecd0ea2512b6a4eec422"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3796f6e0bbb3f960541d289ff170f57"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ad3796f6e0bbb3f960541d289ff170f57">IsVisible</a> () const</td></tr>
<tr class="separator:ad3796f6e0bbb3f960541d289ff170f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d5aed2d96812bcf207edbdabafa921f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a8d5aed2d96812bcf207edbdabafa921f">Show</a> (bool vis=true)</td></tr>
<tr class="separator:a8d5aed2d96812bcf207edbdabafa921f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa002b1e159e09c3f28aa9bc97a895db3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aa002b1e159e09c3f28aa9bc97a895db3">Close</a> ()</td></tr>
<tr class="separator:aa002b1e159e09c3f28aa9bc97a895db3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab85dbcf9e24062ae9f926b9bb401294f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ab85dbcf9e24062ae9f926b9bb401294f">SetNeedsLayout</a> ()</td></tr>
<tr class="memdesc:ab85dbcf9e24062ae9f926b9bb401294f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Instructs the window to relayout before the next draw.  <a href="classopen3d_1_1visualization_1_1gui_1_1_wind#ab85dbcf9e24062ae9f926b9bb401294f">More...</a><br /></td></tr>
<tr class="separator:ab85dbcf9e24062ae9f926b9bb401294f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b72118913badee39ce2b0da70bf1800"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a3b72118913badee39ce2b0da70bf1800">PostRedraw</a> ()</td></tr>
<tr class="separator:a3b72118913badee39ce2b0da70bf1800"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d26fb26d83fbf5083e86a4b724ee665"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a3d26fb26d83fbf5083e86a4b724ee665">SetTopmost</a> (bool topmost)</td></tr>
<tr class="separator:a3d26fb26d83fbf5083e86a4b724ee665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa67a72f39b32dbfff74b7f18b253d904"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aa67a72f39b32dbfff74b7f18b253d904">RaiseToTop</a> () const</td></tr>
<tr class="separator:aa67a72f39b32dbfff74b7f18b253d904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaee5a52e6fce38c0afb50fb3a222413"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#adaee5a52e6fce38c0afb50fb3a222413">IsActiveWindow</a> () const</td></tr>
<tr class="separator:adaee5a52e6fce38c0afb50fb3a222413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9c7adec324f2585c2b68c196aca4ed2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae9c7adec324f2585c2b68c196aca4ed2">SetFocusWidget</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_widg">Widget</a> *w)</td></tr>
<tr class="memdesc:ae9c7adec324f2585c2b68c196aca4ed2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets.  <a href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae9c7adec324f2585c2b68c196aca4ed2">More...</a><br /></td></tr>
<tr class="separator:ae9c7adec324f2585c2b68c196aca4ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ddfa823d47672be602b6933740f9b26"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a5ddfa823d47672be602b6933740f9b26">AddChild</a> (std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_widg">Widget</a> &gt; w)</td></tr>
<tr class="separator:a5ddfa823d47672be602b6933740f9b26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19823529212ab514d905a4f5bf6b0df3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a19823529212ab514d905a4f5bf6b0df3">SetOnMenuItemActivated</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu-2#a752daf3b64834af5720b97cae883387c">Menu::ItemId</a> item_id, std::function&lt; void()&gt; <a class="el" href="_filament_renderer_8cpp.html#a7a0a25a91d8a936306270fd09f1a64a9">callback</a>)</td></tr>
<tr class="separator:a19823529212ab514d905a4f5bf6b0df3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade02b0c0678bcd95d76d9bec0e0b35c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ade02b0c0678bcd95d76d9bec0e0b35c2">SetOnTickEvent</a> (std::function&lt; bool()&gt; <a class="el" href="_filament_renderer_8cpp.html#a7a0a25a91d8a936306270fd09f1a64a9">callback</a>)</td></tr>
<tr class="separator:ade02b0c0678bcd95d76d9bec0e0b35c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c267927c8980ccf293118aa04378ed4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a5c267927c8980ccf293118aa04378ed4">SetOnClose</a> (std::function&lt; bool()&gt; <a class="el" href="_filament_renderer_8cpp.html#a7a0a25a91d8a936306270fd09f1a64a9">callback</a>)</td></tr>
<tr class="separator:a5c267927c8980ccf293118aa04378ed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32eb155d7653dd14a985d0426d68b9a8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a32eb155d7653dd14a985d0426d68b9a8">SetOnKeyEvent</a> (std::function&lt; bool(const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_key">KeyEvent</a> &amp;)&gt; <a class="el" href="_filament_renderer_8cpp.html#a7a0a25a91d8a936306270fd09f1a64a9">callback</a>)</td></tr>
<tr class="separator:a32eb155d7653dd14a985d0426d68b9a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772872f7a9533126f15c7ce347481db6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a772872f7a9533126f15c7ce347481db6">ShowDialog</a> (std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_dial">Dialog</a> &gt; dlg)</td></tr>
<tr class="separator:a772872f7a9533126f15c7ce347481db6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27acf2f083e1fa3009861b282cda8158"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a27acf2f083e1fa3009861b282cda8158">CloseDialog</a> ()</td></tr>
<tr class="memdesc:a27acf2f083e1fa3009861b282cda8158"><td class="mdescLeft">&#160;</td><td class="mdescRight">Closes the dialog.  <a href="classopen3d_1_1visualization_1_1gui_1_1_wind#a27acf2f083e1fa3009861b282cda8158">More...</a><br /></td></tr>
<tr class="separator:a27acf2f083e1fa3009861b282cda8158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73896ee552da53936cfbea4c2280184c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a73896ee552da53936cfbea4c2280184c">ShowMessageBox</a> (const char *title, const char *message)</td></tr>
<tr class="separator:a73896ee552da53936cfbea4c2280184c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab86c7d24788f25b18ac563b4a40dd943"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ab86c7d24788f25b18ac563b4a40dd943">DestroyWindow</a> ()</td></tr>
<tr class="separator:ab86c7d24788f25b18ac563b4a40dd943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7da4baa08fd915a239e48dd377ce7f3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae7da4baa08fd915a239e48dd377ce7f3">OnMenuItemSelected</a> (<a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu-2#a752daf3b64834af5720b97cae883387c">Menu::ItemId</a> item_id)</td></tr>
<tr class="separator:ae7da4baa08fd915a239e48dd377ce7f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7baee2bf0eb47b00cc2ba5df2ea9e8c7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a7baee2bf0eb47b00cc2ba5df2ea9e8c7">OnDragDropped</a> (const char *path)</td></tr>
<tr class="separator:a7baee2bf0eb47b00cc2ba5df2ea9e8c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af432f7908f5a39e6b88b5f8d0aa45415"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#af432f7908f5a39e6b88b5f8d0aa45415">ShowMenu</a> (bool show)</td></tr>
<tr class="separator:af432f7908f5a39e6b88b5f8d0aa45415"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83915fa1f6a45b9c90c3e3ed200a4363"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a83915fa1f6a45b9c90c3e3ed200a4363">GetMouseMods</a> () const</td></tr>
<tr class="separator:a83915fa1f6a45b9c90c3e3ed200a4363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be58dc728a7ba981a6194efdcce545d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a6be58dc728a7ba981a6194efdcce545d">GetWebRTCUID</a> () const</td></tr>
<tr class="separator:a6be58dc728a7ba981a6194efdcce545d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa09f4d00b60b42261e5a778a70b3102"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aaa09f4d00b60b42261e5a778a70b3102">OnDraw</a> ()</td></tr>
<tr class="separator:aaa09f4d00b60b42261e5a778a70b3102"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a2779adccce9ad506a4527d74591840"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a9a2779adccce9ad506a4527d74591840">OnResize</a> ()</td></tr>
<tr class="separator:a9a2779adccce9ad506a4527d74591840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a266f9ea2fcd434f9e17311f0777d38fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a266f9ea2fcd434f9e17311f0777d38fb">OnMouseEvent</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_mou">MouseEvent</a> &amp;e)</td></tr>
<tr class="separator:a266f9ea2fcd434f9e17311f0777d38fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd36546e37e14508cb9977977c404ab8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#afd36546e37e14508cb9977977c404ab8">OnKeyEvent</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_key">KeyEvent</a> &amp;e)</td></tr>
<tr class="separator:afd36546e37e14508cb9977977c404ab8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53a050957b414d74aa50d8b5bbe87b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#af53a050957b414d74aa50d8b5bbe87b3">OnTextInput</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_tex">TextInputEvent</a> &amp;e)</td></tr>
<tr class="separator:af53a050957b414d74aa50d8b5bbe87b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad85785de0186f32b7aba2cb800acacab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ad85785de0186f32b7aba2cb800acacab">OnTickEvent</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_tic">TickEvent</a> &amp;e)</td></tr>
<tr class="separator:ad85785de0186f32b7aba2cb800acacab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ef9811d5a0545c2d9fe42ae57c8d27e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2#a7cc99ba75236df4f5d2a815a77e7a27b">WindowSystem::OSWindow</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a0ef9811d5a0545c2d9fe42ae57c8d27e">GetOSWindow</a> () const</td></tr>
<tr class="separator:a0ef9811d5a0545c2d9fe42ae57c8d27e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a8a03c6335e90b7d247a88bdbbf37daa0"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a8a03c6335e90b7d247a88bdbbf37daa0">FLAG_HIDDEN</a> = (1 &lt;&lt; 0)</td></tr>
<tr class="separator:a8a03c6335e90b7d247a88bdbbf37daa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae388830fe80ef73ef510712d9c6de8d0"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae388830fe80ef73ef510712d9c6de8d0">FLAG_TOPMOST</a> = (1 &lt;&lt; 1)</td></tr>
<tr class="separator:ae388830fe80ef73ef510712d9c6de8d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a83588f114294155e981977869dc035a8"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_siz">Size</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a83588f114294155e981977869dc035a8">CalcPreferredSize</a> ()</td></tr>
<tr class="separator:a83588f114294155e981977869dc035a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77610f617a9a81a80c8a4cae24448baf"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a77610f617a9a81a80c8a4cae24448baf">Layout</a> (const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_lay">LayoutContext</a> &amp;<a class="el" href="_window_8cpp.html#a0fc46c2cc73ed5bf25b870a781a2d18e">context</a>)</td></tr>
<tr class="separator:a77610f617a9a81a80c8a4cae24448baf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fc0d916937105d77306a2219688ea87"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_lay">LayoutContext</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a3fc0d916937105d77306a2219688ea87">GetLayoutContext</a> ()</td></tr>
<tr class="separator:a3fc0d916937105d77306a2219688ea87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa82798310ad57033b4ef50de0451609b"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_widg">Widget</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#aa82798310ad57033b4ef50de0451609b">GetChildren</a> () const</td></tr>
<tr class="separator:aa82798310ad57033b4ef50de0451609b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a23f25bcc02a0e94c2f5a4188496b04d0"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a23f25bcc02a0e94c2f5a4188496b04d0">Application</a></td></tr>
<tr class="separator:a23f25bcc02a0e94c2f5a4188496b04d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70538530bc36e033e360880ef311df61"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a70538530bc36e033e360880ef311df61">Renderer</a></td></tr>
<tr class="separator:a70538530bc36e033e360880ef311df61"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aee56b416a7ce0ed88326840eb66164bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee56b416a7ce0ed88326840eb66164bc">&#9670;&nbsp;</a></span>Window() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::gui::Window::Window </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> that is auto-sized and centered. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> creation is NOT thread-safe. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> must be created on the same thread that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Application::Run()</a>. </p>

</div>
</div>
<a id="ab28cfd74a651f90c7e8d6e06eccd882b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab28cfd74a651f90c7e8d6e06eccd882b">&#9670;&nbsp;</a></span>Window() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::gui::Window::Window </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> that is centered. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> creation is NOT thread-safe. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> must be created on the same thread that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Application::Run()</a>. </p>

</div>
</div>
<a id="af850774eb821c4f1c4e99b6d822a018f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af850774eb821c4f1c4e99b6d822a018f">&#9670;&nbsp;</a></span>Window() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::gui::Window::Window </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a>. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> creation is NOT thread-safe. <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> must be created on the same thread that calls <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl#a6695c17e9dfb48451bddca92bd90d993" title="Does not return until the UI is completely finished.">Application::Run()</a>. </p>

</div>
</div>
<a id="afb53c927ddc3d6b0b8e783e044c22620"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb53c927ddc3d6b0b8e783e044c22620">&#9670;&nbsp;</a></span>~Window()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::gui::Window::~Window </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5ddfa823d47672be602b6933740f9b26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ddfa823d47672be602b6933740f9b26">&#9670;&nbsp;</a></span>AddChild()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::AddChild </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_widg">Widget</a> &gt;&#160;</td>
          <td class="paramname"><em>w</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a83588f114294155e981977869dc035a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83588f114294155e981977869dc035a8">&#9670;&nbsp;</a></span>CalcPreferredSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_siz">Size</a> open3d::visualization::gui::Window::CalcPreferredSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the preferred size of the window. The window is not obligated to honor this size. If all children of the window are layouts, this function does not need to be overridden. This function can only be called after MakeDrawContextCurrent() has been called. </p>

</div>
</div>
<a id="aa002b1e159e09c3f28aa9bc97a895db3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa002b1e159e09c3f28aa9bc97a895db3">&#9670;&nbsp;</a></span>Close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Closes the window and destroys it (unless the close callback cancels the close) </p>

</div>
</div>
<a id="a27acf2f083e1fa3009861b282cda8158"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27acf2f083e1fa3009861b282cda8158">&#9670;&nbsp;</a></span>CloseDialog()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::CloseDialog </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Closes the dialog. </p>

</div>
</div>
<a id="ab86c7d24788f25b18ac563b4a40dd943"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab86c7d24788f25b18ac563b4a40dd943">&#9670;&nbsp;</a></span>DestroyWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::DestroyWindow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This is for internal use in rare circumstances when the destructor will not be called in a timely fashion. </p>

</div>
</div>
<a id="aa82798310ad57033b4ef50de0451609b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa82798310ad57033b4ef50de0451609b">&#9670;&nbsp;</a></span>GetChildren()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt; std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_widg">Widget</a> &gt; &gt; &amp; open3d::visualization::gui::Window::GetChildren </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae87e9d12a77192bc304049b8a2098545"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae87e9d12a77192bc304049b8a2098545">&#9670;&nbsp;</a></span>GetContentRect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_rec">Rect</a> open3d::visualization::gui::Window::GetContentRect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the rectangle that is available to widgets to use; excludes the menubar. </p>

</div>
</div>
<a id="a3fc0d916937105d77306a2219688ea87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fc0d916937105d77306a2219688ea87">&#9670;&nbsp;</a></span>GetLayoutContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_lay">LayoutContext</a> open3d::visualization::gui::Window::GetLayoutContext </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a83915fa1f6a45b9c90c3e3ed200a4363"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83915fa1f6a45b9c90c3e3ed200a4363">&#9670;&nbsp;</a></span>GetMouseMods()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::visualization::gui::Window::GetMouseMods </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9eb5909175ba0920d2e9cf728eaf12b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eb5909175ba0920d2e9cf728eaf12b4">&#9670;&nbsp;</a></span>GetOSFrame()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_rec">Rect</a> open3d::visualization::gui::Window::GetOSFrame </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the window's size and position in OS pixels, not actual device pixels. </p>

</div>
</div>
<a id="a0ef9811d5a0545c2d9fe42ae57c8d27e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ef9811d5a0545c2d9fe42ae57c8d27e">&#9670;&nbsp;</a></span>GetOSWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind-2#a7cc99ba75236df4f5d2a815a77e7a27b">WindowSystem::OSWindow</a> open3d::visualization::gui::Window::GetOSWindow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a971287e0a8951d98a92e3d28c0232805"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a971287e0a8951d98a92e3d28c0232805">&#9670;&nbsp;</a></span>GetRenderer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">visualization::rendering::Renderer</a> &amp; open3d::visualization::gui::Window::GetRenderer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae5c667fa3ab491307af73921a9bbe002"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5c667fa3ab491307af73921a9bbe002">&#9670;&nbsp;</a></span>GetScaling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float open3d::visualization::gui::Window::GetScaling </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the scaling factor from OS pixels to device pixels. </p>

</div>
</div>
<a id="a7fabfc12d1ee446885071a0c1a34de69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fabfc12d1ee446885071a0c1a34de69">&#9670;&nbsp;</a></span>GetSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_siz">Size</a> open3d::visualization::gui::Window::GetSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the total interior size of window, in pixels. On Linux this includes the menubar. </p>

</div>
</div>
<a id="a23ee69da890f8edd058bcfae46d25b57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23ee69da890f8edd058bcfae46d25b57">&#9670;&nbsp;</a></span>GetTheme()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_the">Theme</a> &amp; open3d::visualization::gui::Window::GetTheme </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5f3d65fc8ed65608c78b25a1027d4a53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f3d65fc8ed65608c78b25a1027d4a53">&#9670;&nbsp;</a></span>GetTitle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * open3d::visualization::gui::Window::GetTitle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6be58dc728a7ba981a6194efdcce545d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6be58dc728a7ba981a6194efdcce545d">&#9670;&nbsp;</a></span>GetWebRTCUID()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::visualization::gui::Window::GetWebRTCUID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the window's unique identifier when WebRTCWindowSystem is in use. Returns "window_undefined" if the window system is not WebRTCWindowSystem. </p>

</div>
</div>
<a id="aa006c67d7ddeecd0ea2512b6a4eec422"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa006c67d7ddeecd0ea2512b6a4eec422">&#9670;&nbsp;</a></span>GlobalToWindowCoord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_poi">Point</a> open3d::visualization::gui::Window::GlobalToWindowCoord </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>global_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>global_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the global point (in OS pixels) in window local coordinates. </p>

</div>
</div>
<a id="adaee5a52e6fce38c0afb50fb3a222413"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaee5a52e6fce38c0afb50fb3a222413">&#9670;&nbsp;</a></span>IsActiveWindow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::gui::Window::IsActiveWindow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad3796f6e0bbb3f960541d289ff170f57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3796f6e0bbb3f960541d289ff170f57">&#9670;&nbsp;</a></span>IsVisible()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::visualization::gui::Window::IsVisible </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a77610f617a9a81a80c8a4cae24448baf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77610f617a9a81a80c8a4cae24448baf">&#9670;&nbsp;</a></span>Layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::Layout </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_lay">LayoutContext</a> &amp;&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Lays out all the widgets in the window. If all children of the window are layouts, this function does not need to be overridden. </p>

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_gui_visuali#a2518aefaa275190521b30b8bf7e116ea">open3d::visualization::GuiVisualizer</a>, and <a class="el" href="classopen3d_1_1visualization_1_1visualizer_1#a71f47c923275e8d6b5f9d0ac5b39e9b4">open3d::visualization::visualizer::O3DVisualizer</a>.</p>

</div>
</div>
<a id="a7baee2bf0eb47b00cc2ba5df2ea9e8c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7baee2bf0eb47b00cc2ba5df2ea9e8c7">&#9670;&nbsp;</a></span>OnDragDropped()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnDragDropped </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_gui_visuali#a0ac759d926457197f791167e56881aa2">open3d::visualization::GuiVisualizer</a>.</p>

</div>
</div>
<a id="aaa09f4d00b60b42261e5a778a70b3102"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa09f4d00b60b42261e5a778a70b3102">&#9670;&nbsp;</a></span>OnDraw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnDraw </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afd36546e37e14508cb9977977c404ab8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd36546e37e14508cb9977977c404ab8">&#9670;&nbsp;</a></span>OnKeyEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnKeyEvent </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_key">KeyEvent</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae7da4baa08fd915a239e48dd377ce7f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7da4baa08fd915a239e48dd377ce7f3">&#9670;&nbsp;</a></span>OnMenuItemSelected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnMenuItemSelected </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu-2#a752daf3b64834af5720b97cae883387c">Menu::ItemId</a>&#160;</td>
          <td class="paramname"><em>item_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classopen3d_1_1visualization_1_1_gui_visuali#ae1d983b09eff3a92485fd47088bd5b02">open3d::visualization::GuiVisualizer</a>.</p>

</div>
</div>
<a id="a266f9ea2fcd434f9e17311f0777d38fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a266f9ea2fcd434f9e17311f0777d38fb">&#9670;&nbsp;</a></span>OnMouseEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnMouseEvent </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_mou">MouseEvent</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9a2779adccce9ad506a4527d74591840"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a2779adccce9ad506a4527d74591840">&#9670;&nbsp;</a></span>OnResize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnResize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af53a050957b414d74aa50d8b5bbe87b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af53a050957b414d74aa50d8b5bbe87b3">&#9670;&nbsp;</a></span>OnTextInput()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnTextInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_tex">TextInputEvent</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad85785de0186f32b7aba2cb800acacab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad85785de0186f32b7aba2cb800acacab">&#9670;&nbsp;</a></span>OnTickEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::OnTickEvent </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_tic">TickEvent</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3b72118913badee39ce2b0da70bf1800"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b72118913badee39ce2b0da70bf1800">&#9670;&nbsp;</a></span>PostRedraw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::PostRedraw </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sends a draw event to the window through the operating system's event queue. </p>

</div>
</div>
<a id="aa67a72f39b32dbfff74b7f18b253d904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa67a72f39b32dbfff74b7f18b253d904">&#9670;&nbsp;</a></span>RaiseToTop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::RaiseToTop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae9c7adec324f2585c2b68c196aca4ed2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9c7adec324f2585c2b68c196aca4ed2">&#9670;&nbsp;</a></span>SetFocusWidget()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetFocusWidget </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_widg">Widget</a> *&#160;</td>
          <td class="paramname"><em>w</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">w</td><td>as widget with text focus. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab85dbcf9e24062ae9f926b9bb401294f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab85dbcf9e24062ae9f926b9bb401294f">&#9670;&nbsp;</a></span>SetNeedsLayout()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetNeedsLayout </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Instructs the window to relayout before the next draw. </p>

</div>
</div>
<a id="a5c267927c8980ccf293118aa04378ed4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c267927c8980ccf293118aa04378ed4">&#9670;&nbsp;</a></span>SetOnClose()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetOnClose </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; bool()&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets a callback that will be called immediately before the window is closed. Callback should return true if the window should continue closing or false to cancel the close. </p>

</div>
</div>
<a id="a32eb155d7653dd14a985d0426d68b9a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32eb155d7653dd14a985d0426d68b9a8">&#9670;&nbsp;</a></span>SetOnKeyEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetOnKeyEvent </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_key">KeyEvent</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets a callback that will intercept key event dispatching to focused widget. Callback should return true to stop more dispatching or false to dispatch to focused widget. </p>

</div>
</div>
<a id="a19823529212ab514d905a4f5bf6b0df3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19823529212ab514d905a4f5bf6b0df3">&#9670;&nbsp;</a></span>SetOnMenuItemActivated()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetOnMenuItemActivated </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_menu-2#a752daf3b64834af5720b97cae883387c">Menu::ItemId</a>&#160;</td>
          <td class="paramname"><em>item_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; void()&gt;&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets a callback for menu items. If you inherit from <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind">Window</a> you can also override <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#ae7da4baa08fd915a239e48dd377ce7f3">OnMenuItemSelected()</a>; however, you should choose one or the other, but don't use both. </p>

</div>
</div>
<a id="ade02b0c0678bcd95d76d9bec0e0b35c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade02b0c0678bcd95d76d9bec0e0b35c2">&#9670;&nbsp;</a></span>SetOnTickEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetOnTickEvent </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; bool()&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets a callback that will be called on every UI tick (about 10 msec). Callback should return true if a redraw is required (i.e. the UI or a 3D scene has changed), false otherwise. </p>

</div>
</div>
<a id="a607e0c0fc144784221052266b95d06b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a607e0c0fc144784221052266b95d06b5">&#9670;&nbsp;</a></span>SetOSFrame()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetOSFrame </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_rec">Rect</a> &amp;&#160;</td>
          <td class="paramname"><em>r</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the window's size and position in OS pixels, not actual device pixels. </p>

</div>
</div>
<a id="a85d68174772abe76d6612f11eb62b449"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85d68174772abe76d6612f11eb62b449">&#9670;&nbsp;</a></span>SetSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetSize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1gui_1_1_siz">Size</a> &amp;&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the size of the window in pixels. Includes menubar on Linux. </p>

</div>
</div>
<a id="a2cb5bb83f9b9e1863f7ea4a0f8435bfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cb5bb83f9b9e1863f7ea4a0f8435bfb">&#9670;&nbsp;</a></span>SetTitle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetTitle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d26fb26d83fbf5083e86a4b724ee665"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d26fb26d83fbf5083e86a4b724ee665">&#9670;&nbsp;</a></span>SetTopmost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SetTopmost </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>topmost</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8d5aed2d96812bcf207edbdabafa921f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d5aed2d96812bcf207edbdabafa921f">&#9670;&nbsp;</a></span>Show()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::Show </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>vis</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a772872f7a9533126f15c7ce347481db6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a772872f7a9533126f15c7ce347481db6">&#9670;&nbsp;</a></span>ShowDialog()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::ShowDialog </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_dial">Dialog</a> &gt;&#160;</td>
          <td class="paramname"><em>dlg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shows the dialog. If a dialog is currently being shown it will be closed. </p>

</div>
</div>
<a id="af432f7908f5a39e6b88b5f8d0aa45415"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af432f7908f5a39e6b88b5f8d0aa45415">&#9670;&nbsp;</a></span>ShowMenu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::ShowMenu </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>show</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a73896ee552da53936cfbea4c2280184c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73896ee552da53936cfbea4c2280184c">&#9670;&nbsp;</a></span>ShowMessageBox()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::ShowMessageBox </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afc018b26cd55048873b8339ca43c290b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc018b26cd55048873b8339ca43c290b">&#9670;&nbsp;</a></span>SizeToFit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::visualization::gui::Window::SizeToFit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Auto-sizes the window to the results of <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_wind#a83588f114294155e981977869dc035a8">CalcPreferredSize()</a>, which by default is the size that the layouts of the window want. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a23f25bcc02a0e94c2f5a4188496b04d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23f25bcc02a0e94c2f5a4188496b04d0">&#9670;&nbsp;</a></span>Application</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classopen3d_1_1visualization_1_1gui_1_1_appl">Application</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a70538530bc36e033e360880ef311df61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70538530bc36e033e360880ef311df61">&#9670;&nbsp;</a></span>Renderer</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class Renderer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a8a03c6335e90b7d247a88bdbbf37daa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a03c6335e90b7d247a88bdbbf37daa0">&#9670;&nbsp;</a></span>FLAG_HIDDEN</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int open3d::visualization::gui::Window::FLAG_HIDDEN = (1 &lt;&lt; 0)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae388830fe80ef73ef510712d9c6de8d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae388830fe80ef73ef510712d9c6de8d0">&#9670;&nbsp;</a></span>FLAG_TOPMOST</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int open3d::visualization::gui::Window::FLAG_TOPMOST = (1 &lt;&lt; 1)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/gui/<a class="el" href="_window_8h_source.html">Window.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/gui/<a class="el" href="_window_8cpp.html">Window.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1gui_1_1_window.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:01:37 GMT -->
</html>
