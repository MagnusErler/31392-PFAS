<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1registration.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:55 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::pipelines::registration Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines.33e.delaye">pipelines</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr">registration</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::pipelines::registration Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class that defines the convergence criteria of ICP.  <a href="classopen3d_1_1t_1_1pipelines_1_1registratio-2#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio">RobustKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-4">TransformationEstimation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-5">TransformationEstimationPointToPoint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-6">TransformationEstimationPointToPlane</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-7">TransformationEstimationForColoredICP</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a7936c060ed1e2555da8f4c79b689f3c8"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8">RobustKernelMethod</a> { <br />
&#160;&#160;<a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8a5d602974417b6be4627f596261a34a68">L2Loss</a> = 0
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8a8c594aaba0cf4be7a63e6c499967d938">L1Loss</a> = 1
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8a8380351621ef1b58b62cc4e699a14bc6">HuberLoss</a> = 2
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8ac6273b92da99111acb1e12af30225f1b">CauchyLoss</a> = 3
, <br />
&#160;&#160;<a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8a031337573ce05c002d3dbecbfc4454f2">GMLoss</a> = 4
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8a9361577e4bc58c89f5fa92f667dd557d">TukeyLoss</a> = 5
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8ae39d851d43ec4121a315cac47fcb9183">GeneralizedLoss</a> = 6
<br />
 }</td></tr>
<tr class="separator:a7936c060ed1e2555da8f4c79b689f3c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a983e447491d0a2732ceb37d3a464bb9e"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a983e447491d0a2732ceb37d3a464bb9e">TransformationEstimationType</a> { <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a983e447491d0a2732ceb37d3a464bb9ea6fcdc090caeade09d0efd6253932b6f5">Unspecified</a> = 0
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a983e447491d0a2732ceb37d3a464bb9eacabf254f8195fce8d901b3cce7092ea9">PointToPoint</a> = 1
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a983e447491d0a2732ceb37d3a464bb9ea621eeaff7db1283a0db27b4e7233a8ed">PointToPlane</a> = 2
, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a983e447491d0a2732ceb37d3a464bb9eaa1e9a6b08bcbd78287bb35ce9dbcdf13">ColoredICP</a> = 3
 }</td></tr>
<tr class="separator:a983e447491d0a2732ceb37d3a464bb9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a37b2714bd12c3d6d873aaa00f2c7d4dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a37b2714bd12c3d6d873aaa00f2c7d4dd">ComputeFPFHFeature</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;input, const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; int &gt; max_nn, const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt; radius)</td></tr>
<tr class="separator:a37b2714bd12c3d6d873aaa00f2c7d4dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ece95ddfe82a40b35d36a6d07fcf987"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a8ece95ddfe82a40b35d36a6d07fcf987">EvaluateRegistration</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;target, double max_correspondence_distance, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;transformation=<a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4, <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)))</td></tr>
<tr class="memdesc:a8ece95ddfe82a40b35d36a6d07fcf987"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function for evaluating registration between point clouds.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a8ece95ddfe82a40b35d36a6d07fcf987">More...</a><br /></td></tr>
<tr class="separator:a8ece95ddfe82a40b35d36a6d07fcf987"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9454c0f4d7f0c2f233bb1ae5b868055"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#ae9454c0f4d7f0c2f233bb1ae5b868055">ICP</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;target, const double max_correspondence_distance, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target=<a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4, <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)), const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-4">TransformationEstimation</a> &amp;estimation=<a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-5">TransformationEstimationPointToPoint</a>(), const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a> &amp;criteria=<a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a>(), const double voxel_size=-1.0, const std::function&lt; void(const std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; &amp;)&gt; &amp;callback_after_iteration=nullptr)</td></tr>
<tr class="memdesc:ae9454c0f4d7f0c2f233bb1ae5b868055"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions for ICP registration.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#ae9454c0f4d7f0c2f233bb1ae5b868055">More...</a><br /></td></tr>
<tr class="separator:ae9454c0f4d7f0c2f233bb1ae5b868055"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a300caad70b099cb9f5d5ce72a8ff1ecb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a300caad70b099cb9f5d5ce72a8ff1ecb">MultiScaleICP</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;target, const std::vector&lt; double &gt; &amp;voxel_sizes, const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a> &gt; &amp;criteria_list, const std::vector&lt; double &gt; &amp;max_correspondence_distances, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target=<a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4, <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)), const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-4">TransformationEstimation</a> &amp;estimation=<a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-5">TransformationEstimationPointToPoint</a>(), const std::function&lt; void(const std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; &amp;)&gt; &amp;callback_after_iteration=nullptr)</td></tr>
<tr class="memdesc:a300caad70b099cb9f5d5ce72a8ff1ecb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functions for Multi-Scale ICP registration. It will run ICP on different voxel level, from coarse to dense. The vector of <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2" title="Class that defines the convergence criteria of ICP.">ICPConvergenceCriteria</a>(relative fitness, relative rmse, max_iterations) contains the stopping condition for each voxel level. The length of voxel_sizes vector, criteria vector, max_correspondence_distances vector must be same, and voxel_sizes must contain positive values in strictly decreasing order [Lower the voxel size, higher is the resolution]. Only the last value of the voxel_sizes vector can be {-1}, as it allows to run on the original scale without downsampling.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a300caad70b099cb9f5d5ce72a8ff1ecb">More...</a><br /></td></tr>
<tr class="separator:a300caad70b099cb9f5d5ce72a8ff1ecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d6a126d2c37a4b486c86bc65015ce24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a5d6a126d2c37a4b486c86bc65015ce24">GetInformationMatrix</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;source, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;target, const double max_correspondence_distance, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;transformation)</td></tr>
<tr class="memdesc:a5d6a126d2c37a4b486c86bc65015ce24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes <code>Information Matrix</code>, from the transformation between source and target pointcloud. It returns the <code>Information Matrix</code> of shape {6, 6}, of dtype <code>Float64</code> on device <code>CPU:0</code>.  <a href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a5d6a126d2c37a4b486c86bc65015ce24">More...</a><br /></td></tr>
<tr class="separator:a5d6a126d2c37a4b486c86bc65015ce24"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a7936c060ed1e2555da8f4c79b689f3c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7936c060ed1e2555da8f4c79b689f3c8">&#9670;&nbsp;</a></span>RobustKernelMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a7936c060ed1e2555da8f4c79b689f3c8">open3d::t::pipelines::registration::RobustKernelMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8a5d602974417b6be4627f596261a34a68"></a>L2Loss&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8a8c594aaba0cf4be7a63e6c499967d938"></a>L1Loss&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8a8380351621ef1b58b62cc4e699a14bc6"></a>HuberLoss&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8ac6273b92da99111acb1e12af30225f1b"></a>CauchyLoss&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8a031337573ce05c002d3dbecbfc4454f2"></a>GMLoss&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8a9361577e4bc58c89f5fa92f667dd557d"></a>TukeyLoss&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7936c060ed1e2555da8f4c79b689f3c8ae39d851d43ec4121a315cac47fcb9183"></a>GeneralizedLoss&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a983e447491d0a2732ceb37d3a464bb9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a983e447491d0a2732ceb37d3a464bb9e">&#9670;&nbsp;</a></span>TransformationEstimationType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1registr#a983e447491d0a2732ceb37d3a464bb9e">open3d::t::pipelines::registration::TransformationEstimationType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a983e447491d0a2732ceb37d3a464bb9ea6fcdc090caeade09d0efd6253932b6f5"></a>Unspecified&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a983e447491d0a2732ceb37d3a464bb9eacabf254f8195fce8d901b3cce7092ea9"></a>PointToPoint&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a983e447491d0a2732ceb37d3a464bb9ea621eeaff7db1283a0db27b4e7233a8ed"></a>PointToPlane&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a983e447491d0a2732ceb37d3a464bb9eaa1e9a6b08bcbd78287bb35ce9dbcdf13"></a>ColoredICP&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a37b2714bd12c3d6d873aaa00f2c7d4dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37b2714bd12c3d6d873aaa00f2c7d4dd">&#9670;&nbsp;</a></span>ComputeFPFHFeature()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::registration::ComputeFPFHFeature </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; int &gt;&#160;</td>
          <td class="paramname"><em>max_nn</em> = <code>100</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1utility_1_1optional.3c6.delay">utility::optional</a>&lt; double &gt;&#160;</td>
          <td class="paramname"><em>radius</em> = <code><a class="el" href="namespaceopen3d_1_1utility.html#aecfc2255664b95bf9a25f06442b978e2">utility::nullopt</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to compute FPFH feature for a point cloud. It uses KNN search (Not recommended to use on GPU) if only max_nn parameter is provided, Radius search (Not recommended to use on GPU) if only radius parameter is provided, and Hybrid search (Recommended) if both are provided.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>The input point cloud with data type float32 or float64. </td></tr>
    <tr><td class="paramname">max_nn</td><td>[optional] Neighbor search max neighbors parameter. [Default = 100]. </td></tr>
    <tr><td class="paramname">radius</td><td>[optional] Neighbor search radius parameter. [Recommended ~5x voxel size]. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A Tensor of FPFH feature of the input point cloud with shape {N, 33}, data type and device same as input. </dd></dl>

</div>
</div>
<a id="a8ece95ddfe82a40b35d36a6d07fcf987"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ece95ddfe82a40b35d36a6d07fcf987">&#9670;&nbsp;</a></span>EvaluateRegistration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a> open3d::t::pipelines::registration::EvaluateRegistration </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>transformation</em> = <code><a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4,&#160;<a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>,&#160;<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function for evaluating registration between point clouds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">transformation</td><td>The 4x4 transformation matrix to transform source to target of dtype Float64 on CPU device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5d6a126d2c37a4b486c86bc65015ce24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d6a126d2c37a4b486c86bc65015ce24">&#9670;&nbsp;</a></span>GetInformationMatrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::registration::GetInformationMatrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>transformation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Computes <code>Information Matrix</code>, from the transformation between source and target pointcloud. It returns the <code>Information Matrix</code> of shape {6, 6}, of dtype <code>Float64</code> on device <code>CPU:0</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">transformation</td><td>The 4x4 transformation matrix to transform <code>source</code> to <code>target</code>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae9454c0f4d7f0c2f233bb1ae5b868055"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9454c0f4d7f0c2f233bb1ae5b868055">&#9670;&nbsp;</a></span>ICP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a> open3d::t::pipelines::registration::ICP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>max_correspondence_distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em> = <code><a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4,&#160;<a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>,&#160;<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-4">TransformationEstimation</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-5">TransformationEstimationPointToPoint</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a> &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>voxel_size</em> = <code>-1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; void(const std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; &amp;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>callback_after_iteration</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Functions for ICP registration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">max_correspondence_distance</td><td>Maximum correspondence points-pair distance. </td></tr>
    <tr><td class="paramname">init_source_to_target</td><td>Initial transformation estimation of type Float64 on CPU. </td></tr>
    <tr><td class="paramname">estimation</td><td>Estimation method. </td></tr>
    <tr><td class="paramname">criteria</td><td>Convergence criteria. </td></tr>
    <tr><td class="paramname">voxel_size</td><td>The input pointclouds will be down-sampled to this <code>voxel_size</code> scale. If voxel_size &lt; 0, original scale will be used. However it is highly recommended to down-sample the point-cloud for performance. By default original scale of the point-cloud will be used. </td></tr>
    <tr><td class="paramname">callback_after_iteration</td><td>Optional lambda function, saves string to tensor map of attributes such as "iteration_index", "scale_index", "scale_iteration_index", "inlier_rmse", "fitness", "transformation", on CPU device, updated after each iteration. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a300caad70b099cb9f5d5ce72a8ff1ecb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a300caad70b099cb9f5d5ce72a8ff1ecb">&#9670;&nbsp;</a></span>MultiScaleICP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-3">RegistrationResult</a> open3d::t::pipelines::registration::MultiScaleICP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>voxel_sizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2">ICPConvergenceCriteria</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>criteria_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>max_correspondence_distances</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em> = <code><a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4,&#160;<a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>,&#160;<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-4">TransformationEstimation</a> &amp;&#160;</td>
          <td class="paramname"><em>estimation</em> = <code><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-5">TransformationEstimationPointToPoint</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; void(const std::unordered_map&lt; std::string, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &gt; &amp;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>callback_after_iteration</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Functions for Multi-Scale ICP registration. It will run ICP on different voxel level, from coarse to dense. The vector of <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2" title="Class that defines the convergence criteria of ICP.">ICPConvergenceCriteria</a>(relative fitness, relative rmse, max_iterations) contains the stopping condition for each voxel level. The length of voxel_sizes vector, criteria vector, max_correspondence_distances vector must be same, and voxel_sizes must contain positive values in strictly decreasing order [Lower the voxel size, higher is the resolution]. Only the last value of the voxel_sizes vector can be {-1}, as it allows to run on the original scale without downsampling. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>The source point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">target</td><td>The target point cloud. (Float32 or Float64 type). </td></tr>
    <tr><td class="paramname">voxel_sizes</td><td>VectorDouble of voxel scales of type double. </td></tr>
    <tr><td class="paramname">criteria_list</td><td>Vector of <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1registratio-2" title="Class that defines the convergence criteria of ICP.">ICPConvergenceCriteria</a> objects for each scale. </td></tr>
    <tr><td class="paramname">max_correspondence_distances</td><td>VectorDouble of maximum correspondence points-pair distances of type double, for each iteration. Must be of same length as voxel_sizes and criterias. </td></tr>
    <tr><td class="paramname">init_source_to_target</td><td>Initial transformation estimation of type Float64 on CPU. </td></tr>
    <tr><td class="paramname">estimation</td><td>Estimation method. </td></tr>
    <tr><td class="paramname">callback_after_iteration</td><td>Optional lambda function, saves string to tensor map of attributes such as "iteration_index", "scale_index", "scale_iteration_index", "inlier_rmse", "fitness", "transformation", on CPU device, updated after each iteration. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1registration.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:55 GMT -->
</html>
