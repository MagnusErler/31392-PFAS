<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1geometry_1_1vtkutils.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:48 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::geometry::vtkutils Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry.html">geometry</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils">vtkutils</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::geometry::vtkutils Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1t_1_1geometry_1_1vtkutils_1_">VtkToTensorType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopen3d_1_1t_1_1geometry_1_1vtkutils_1_-2">VtkToTensorType&lt; long long &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a3129001575ba1332a7e88dc505fc0706"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#a3129001575ba1332a7e88dc505fc0706">DtypeToVtkType</a> (const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;dtype)</td></tr>
<tr class="separator:a3129001575ba1332a7e88dc505fc0706"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4aba316e65ff6c4e473d16354eef40c"><td class="memItemLeft" align="right" valign="top">vtkSmartPointer&lt; vtkPolyData &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#ac4aba316e65ff6c4e473d16354eef40c">CreateVtkPolyDataFromGeometry</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">Geometry</a> &amp;geometry, const std::unordered_set&lt; std::string &gt; &amp;point_attr_include, const std::unordered_set&lt; std::string &gt; &amp;face_attr_include, const std::unordered_set&lt; std::string &gt; &amp;point_attr_exclude, const std::unordered_set&lt; std::string &gt; &amp;face_attr_exclude, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>)</td></tr>
<tr class="separator:ac4aba316e65ff6c4e473d16354eef40c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a412893d6b249c5cebc32a833d67f490f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#a412893d6b249c5cebc32a833d67f490f">CreateTriangleMeshFromVtkPolyData</a> (vtkPolyData *polydata, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>)</td></tr>
<tr class="separator:a412893d6b249c5cebc32a833d67f490f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24859623900dabc5bcaec4d20f486894"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_macro_8h.html#ab9b2bca5332de12bd3bba7ca9dafdb65">OPEN3D_LOCAL</a> <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#a24859623900dabc5bcaec4d20f486894">CreateLineSetFromVtkPolyData</a> (vtkPolyData *polydata, bool <a class="el" href="_vtk_utils_8cpp.html#acad86cc31af25e3d02b6d43041d0c6e9">copy</a>)</td></tr>
<tr class="separator:a24859623900dabc5bcaec4d20f486894"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfab8f34439dba395d99e90fb4e53989"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_macro_8h.html#ab9b2bca5332de12bd3bba7ca9dafdb65">OPEN3D_LOCAL</a> <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#abfab8f34439dba395d99e90fb4e53989">ExtrudeRotationTriangleMesh</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">Geometry</a> &amp;geometry, const double angle, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;axis, int resolution, double translation, bool capping)</td></tr>
<tr class="separator:abfab8f34439dba395d99e90fb4e53989"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72804a886540e9fd76bd48c2f7537dd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_macro_8h.html#ab9b2bca5332de12bd3bba7ca9dafdb65">OPEN3D_LOCAL</a> <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#a72804a886540e9fd76bd48c2f7537dd2">ExtrudeRotationLineSet</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> &amp;pointcloud, const double angle, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;axis, int resolution, double translation, bool capping)</td></tr>
<tr class="separator:a72804a886540e9fd76bd48c2f7537dd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57f8cdd5d28a90ff0d7994fac1139b3a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_macro_8h.html#ab9b2bca5332de12bd3bba7ca9dafdb65">OPEN3D_LOCAL</a> <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#a57f8cdd5d28a90ff0d7994fac1139b3a">ExtrudeLinearTriangleMesh</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">Geometry</a> &amp;geometry, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;vector, double scale, bool capping)</td></tr>
<tr class="separator:a57f8cdd5d28a90ff0d7994fac1139b3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91e1fc078904abfe10e1c7ba48a19856"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_macro_8h.html#ab9b2bca5332de12bd3bba7ca9dafdb65">OPEN3D_LOCAL</a> <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#a91e1fc078904abfe10e1c7ba48a19856">ExtrudeLinearLineSet</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> &amp;pointcloud, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;vector, double scale, bool capping)</td></tr>
<tr class="separator:a91e1fc078904abfe10e1c7ba48a19856"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ae76cc17c6cff4af5b71ecc6d25823"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_macro_8h.html#ab9b2bca5332de12bd3bba7ca9dafdb65">OPEN3D_LOCAL</a> <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1geometry_1_1vtkutils#ad8ae76cc17c6cff4af5b71ecc6d25823">ComputeNormals</a> (const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;mesh, bool vertex_normals, bool face_normals, bool consistency, bool auto_orient_normals, bool splitting, double feature_angle_deg)</td></tr>
<tr class="separator:ad8ae76cc17c6cff4af5b71ecc6d25823"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ad8ae76cc17c6cff4af5b71ecc6d25823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8ae76cc17c6cff4af5b71ecc6d25823">&#9670;&nbsp;</a></span>ComputeNormals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::vtkutils::ComputeNormals </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> &amp;&#160;</td>
          <td class="paramname"><em>mesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>vertex_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>face_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>consistency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>auto_orient_normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>splitting</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>feature_angle_deg</em> = <code>30</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes the normals for a mesh. In addition to computing the normals this function can fix the face vertex order and orient the normals to point outwards. This function can be applied to non-manifold or non-closed meshes but without any guarantees to correctness or quality for the result. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mesh</td><td>A point cloud. </td></tr>
    <tr><td class="paramname">vertex_normals</td><td>If true compute the vertex normals. </td></tr>
    <tr><td class="paramname">face_normals</td><td>If true compute the face normals. </td></tr>
    <tr><td class="paramname">consistency</td><td>If true the algorithm fixes the vertex order of faces. </td></tr>
    <tr><td class="paramname">auto_orient_normals</td><td>If true normals will be flipped to point outwards </td></tr>
    <tr><td class="paramname">splitting</td><td>If true allows splitting of edges to account for sharp edges. Splitting an edge will create new vertices. </td></tr>
    <tr><td class="paramname">feature_angle_deg</td><td>The angle in degrees that defines sharp edges for splitting. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A new mesh with the computed normals. </dd></dl>

</div>
</div>
<a id="a24859623900dabc5bcaec4d20f486894"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24859623900dabc5bcaec4d20f486894">&#9670;&nbsp;</a></span>CreateLineSetFromVtkPolyData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a> open3d::t::geometry::vtkutils::CreateLineSetFromVtkPolyData </td>
          <td>(</td>
          <td class="paramtype">vtkPolyData *&#160;</td>
          <td class="paramname"><em>polydata</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49" title="A LineSet contains points and lines joining them and optionally attributes on the points and lines.">LineSet</a> a vtkPolyData object. The returned <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49" title="A LineSet contains points and lines joining them and optionally attributes on the points and lines.">LineSet</a> may directly use the memory of the data arrays in the vtkPolyData object. The returned <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49" title="A LineSet contains points and lines joining them and optionally attributes on the points and lines.">LineSet</a> will hold references to the arrays and it is not necessary to keep other references to the vtkPolyData object or its arrays alive. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">polydata</td><td>Input polyData object. </td></tr>
    <tr><td class="paramname">copy</td><td>If true always create a copy of the data. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a412893d6b249c5cebc32a833d67f490f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a412893d6b249c5cebc32a833d67f490f">&#9670;&nbsp;</a></span>CreateTriangleMeshFromVtkPolyData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::vtkutils::CreateTriangleMeshFromVtkPolyData </td>
          <td>(</td>
          <td class="paramtype">vtkPolyData *&#160;</td>
          <td class="paramname"><em>polydata</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a triangle mesh from a vtkPolyData object. The returned <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> may directly use the memory of the data arrays in the vtkPolyData object. The returned <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a> will hold references to the arrays and it is not necessary to keep other references to the vtkPolyData object or its arrays alive. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">polydata</td><td>Input polyData object. </td></tr>
    <tr><td class="paramname">copy</td><td>If true always create a copy of the data. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac4aba316e65ff6c4e473d16354eef40c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4aba316e65ff6c4e473d16354eef40c">&#9670;&nbsp;</a></span>CreateVtkPolyDataFromGeometry()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vtkSmartPointer&lt; vtkPolyData &gt; open3d::t::geometry::vtkutils::CreateVtkPolyDataFromGeometry </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">Geometry</a> &amp;&#160;</td>
          <td class="paramname"><em>geometry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>point_attr_include</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>face_attr_include</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>point_attr_exclude</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>face_attr_exclude</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a vtkPolyData object from a point cloud or triangle mesh. The returned vtkPolyData object may directly use the memory of the tensors stored inside the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a> object. Therefore, the <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36" title="The base geometry class.">Geometry</a> object must be kept alive until the returned vtkPolyData object is deleted. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">geometry</td><td>Open3D geometry object, e.g., a <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </td></tr>
    <tr><td class="paramname">copy</td><td>If true always create a copy of the data. </td></tr>
    <tr><td class="paramname">point_attr_include</td><td>A set of keys to select which point/vertex attributes should be added. Note that the primary key may be included and will silently be ignored. </td></tr>
    <tr><td class="paramname">face_attr_include</td><td>A set of keys to select which face attributes should be added. Note that the primary key may be included and will silently be ignored. </td></tr>
    <tr><td class="paramname">point_attr_exclude</td><td>A set of keys for which point/vertex attributes will not be added to the vtkPolyData. The exclusion set has precedence over the included keys. </td></tr>
    <tr><td class="paramname">face_attr_exclude</td><td>A set of keys for which face attributes will not be added to the vtkPolyData. The exclusion set has precedence over the included keys. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3129001575ba1332a7e88dc505fc0706"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3129001575ba1332a7e88dc505fc0706">&#9670;&nbsp;</a></span>DtypeToVtkType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::t::geometry::vtkutils::DtypeToVtkType </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> &amp;&#160;</td>
          <td class="paramname"><em>dtype</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the corresponding vtk data type for <a class="el" href="classopen3d_1_1core_1_1_dtype.html">core::Dtype</a> Logs an error if no conversion exists. </p>

</div>
</div>
<a id="a91e1fc078904abfe10e1c7ba48a19856"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91e1fc078904abfe10e1c7ba48a19856">&#9670;&nbsp;</a></span>ExtrudeLinearLineSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a> open3d::t::geometry::vtkutils::ExtrudeLinearLineSet </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>pointcloud</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>capping</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sweeps the geometry along a direction vector. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pointcloud</td><td>A point cloud. </td></tr>
    <tr><td class="paramname">vector</td><td>The direction vector. </td></tr>
    <tr><td class="paramname">scale</td><td>Scalar factor which essentially scales the direction vector. </td></tr>
    <tr><td class="paramname">capping</td><td>If true adds caps to the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A triangle mesh with the result of the sweep operation. </dd></dl>

</div>
</div>
<a id="a57f8cdd5d28a90ff0d7994fac1139b3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57f8cdd5d28a90ff0d7994fac1139b3a">&#9670;&nbsp;</a></span>ExtrudeLinearTriangleMesh()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::vtkutils::ExtrudeLinearTriangleMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">Geometry</a> &amp;&#160;</td>
          <td class="paramname"><em>geometry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>capping</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sweeps the geometry along a direction vector. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">geometry</td><td>Open3D geometry object, e.g., a <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </td></tr>
    <tr><td class="paramname">vector</td><td>The direction vector. </td></tr>
    <tr><td class="paramname">scale</td><td>Scalar factor which essentially scales the direction vector. </td></tr>
    <tr><td class="paramname">capping</td><td>If true adds caps to the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A triangle mesh with the result of the sweep operation. </dd></dl>

</div>
</div>
<a id="a72804a886540e9fd76bd48c2f7537dd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72804a886540e9fd76bd48c2f7537dd2">&#9670;&nbsp;</a></span>ExtrudeRotationLineSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_line_set.49">LineSet</a> open3d::t::geometry::vtkutils::ExtrudeRotationLineSet </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>pointcloud</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>16</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>translation</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>capping</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sweeps the geometry rotationally about an axis. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pointcloud</td><td>A point cloud. </td></tr>
    <tr><td class="paramname">angle</td><td>The rotation angle in degree. </td></tr>
    <tr><td class="paramname">axis</td><td>The rotation axis. </td></tr>
    <tr><td class="paramname">resolution</td><td>The resolution defines the number of intermediate sweeps about the rotation axis. </td></tr>
    <tr><td class="paramname">translation</td><td>The translation along the rotation axis. </td></tr>
    <tr><td class="paramname">capping</td><td>If true adds caps to the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A line set with the result of the sweep operation. </dd></dl>

</div>
</div>
<a id="abfab8f34439dba395d99e90fb4e53989"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfab8f34439dba395d99e90fb4e53989">&#9670;&nbsp;</a></span>ExtrudeRotationTriangleMesh()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">TriangleMesh</a> open3d::t::geometry::vtkutils::ExtrudeRotationTriangleMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">Geometry</a> &amp;&#160;</td>
          <td class="paramname"><em>geometry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resolution</em> = <code>16</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>translation</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>capping</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sweeps the geometry rotationally about an axis. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">geometry</td><td>Open3D geometry object, e.g., a <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me" title="A triangle mesh contains vertices and triangles.">TriangleMesh</a>. </td></tr>
    <tr><td class="paramname">angle</td><td>The rotation angle in degree. </td></tr>
    <tr><td class="paramname">axis</td><td>The rotation axis. </td></tr>
    <tr><td class="paramname">resolution</td><td>The resolution defines the number of intermediate sweeps about the rotation axis. </td></tr>
    <tr><td class="paramname">translation</td><td>The translation along the rotation axis. </td></tr>
    <tr><td class="paramname">capping</td><td>If true adds caps to the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A triangle mesh with the result of the sweep operation. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1geometry_1_1vtkutils.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:57:48 GMT -->
</html>
