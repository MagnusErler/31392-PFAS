<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_small_vector_template_common.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:22 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::core::SmallVectorTemplateCommon&lt; T, typename &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1core.html">core</a></li><li class="navelem"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">SmallVectorTemplateCommon</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::core::SmallVectorTemplateCommon&lt; T, typename &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_small_vector_8h_source.html">SmallVector.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::core::SmallVectorTemplateCommon&lt; T, typename &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1core_1_1_small_vector_templat-4" usemap="#open3d::core::SmallVectorTemplateCommon_3C_20T_2C_20typename_20_3E_map" alt=""/>
  <map id="open3d::core::SmallVectorTemplateCommon_3C_20T_2C_20typename_20_3E_map" name="open3d::core::SmallVectorTemplateCommon_3C_20T_2C_20typename_20_3E_map">
<area href="classopen3d_1_1core_1_1_small_vector_base.3b" alt="open3d::core::SmallVectorBase&lt; SmallVectorSizeType&lt; T &gt; &gt;" shape="rect" coords="559,0,922,24"/>
<area href="classopen3d_1_1core_1_1_small_vector_templat-2" alt="open3d::core::SmallVectorTemplateBase&lt; T, bool &gt;" shape="rect" coords="373,112,736,136"/>
<area href="classopen3d_1_1core_1_1_small_vector_templat-3" alt="open3d::core::SmallVectorTemplateBase&lt; T, true &gt;" shape="rect" coords="746,112,1109,136"/>
<area href="classopen3d_1_1core_1_1_small_vector_impl.3b" alt="open3d::core::SmallVectorImpl&lt; T &gt;" shape="rect" coords="373,168,736,192"/>
<area href="classopen3d_1_1core_1_1_small_vector.3be.del" alt="open3d::core::SmallVector&lt; int64_t, 4 &gt;" shape="rect" coords="0,224,363,248"/>
<area href="classopen3d_1_1core_1_1_small_vector.3be.del" alt="open3d::core::SmallVector&lt; utility::optional&lt; int64_t &gt;, 4 &gt;" shape="rect" coords="373,224,736,248"/>
<area href="classopen3d_1_1core_1_1_small_vector.3be.del" alt="open3d::core::SmallVector&lt; T, N &gt;" shape="rect" coords="746,224,1109,248"/>
<area href="classopen3d_1_1core_1_1_size_vector.3b3.dela" alt="open3d::core::SizeVector" shape="rect" coords="0,280,363,304"/>
<area href="classopen3d_1_1core_1_1_dynamic_size_vector" alt="open3d::core::DynamicSizeVector" shape="rect" coords="373,280,736,304"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a39583ddacc074f6e633b204aaa714647"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a> = size_t</td></tr>
<tr class="separator:a39583ddacc074f6e633b204aaa714647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad10a4d170d2f9be02de0c5e2fd3412c3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ad10a4d170d2f9be02de0c5e2fd3412c3">difference_type</a> = ptrdiff_t</td></tr>
<tr class="separator:ad10a4d170d2f9be02de0c5e2fd3412c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab07cc779bd936e740cabecdf41c67534"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ab07cc779bd936e740cabecdf41c67534">value_type</a> = T</td></tr>
<tr class="separator:ab07cc779bd936e740cabecdf41c67534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade32037f59f14f4f5bb1840bdb9da33e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a> = T *</td></tr>
<tr class="separator:ade32037f59f14f4f5bb1840bdb9da33e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a317ab7d6fb7a4731bf22a226822a73d4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a> = const T *</td></tr>
<tr class="separator:a317ab7d6fb7a4731bf22a226822a73d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aad601dd5f723e257c79f12dda3851e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8aad601dd5f723e257c79f12dda3851e">const_reverse_iterator</a> = std::reverse_iterator&lt; <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a> &gt;</td></tr>
<tr class="separator:a8aad601dd5f723e257c79f12dda3851e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addb50f654eef5e67ebb3bad4fb3a12c1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addb50f654eef5e67ebb3bad4fb3a12c1">reverse_iterator</a> = std::reverse_iterator&lt; <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a> &gt;</td></tr>
<tr class="separator:addb50f654eef5e67ebb3bad4fb3a12c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f6a71049b85bf871e55e8bd1199db60"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a> = T &amp;</td></tr>
<tr class="separator:a7f6a71049b85bf871e55e8bd1199db60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a180eb1ccb6ea02b98e8b1b3b77fcd883"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a> = const T &amp;</td></tr>
<tr class="separator:a180eb1ccb6ea02b98e8b1b3b77fcd883"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adab7b7e9c146404688f0d0e288bb4e15"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#adab7b7e9c146404688f0d0e288bb4e15">pointer</a> = T *</td></tr>
<tr class="separator:adab7b7e9c146404688f0d0e288bb4e15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eda6737b26c62fc21c6387cfa76138f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a9eda6737b26c62fc21c6387cfa76138f">const_pointer</a> = const T *</td></tr>
<tr class="separator:a9eda6737b26c62fc21c6387cfa76138f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a746fa92e15020e4b506f5b7b92faa0f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a746fa92e15020e4b506f5b7b92faa0f0">begin</a> ()</td></tr>
<tr class="separator:a746fa92e15020e4b506f5b7b92faa0f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2457bbb5ee36735a915e009cf200e046"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a2457bbb5ee36735a915e009cf200e046">begin</a> () const</td></tr>
<tr class="separator:a2457bbb5ee36735a915e009cf200e046"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4fc9a54f3955f6a3cc5eea76408531b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ac4fc9a54f3955f6a3cc5eea76408531b">end</a> ()</td></tr>
<tr class="separator:ac4fc9a54f3955f6a3cc5eea76408531b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a734957305d193da395fb39366f55fe19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a734957305d193da395fb39366f55fe19">end</a> () const</td></tr>
<tr class="separator:a734957305d193da395fb39366f55fe19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c303fd31b8195c5ee443badfdc7668f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addb50f654eef5e67ebb3bad4fb3a12c1">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a5c303fd31b8195c5ee443badfdc7668f">rbegin</a> ()</td></tr>
<tr class="separator:a5c303fd31b8195c5ee443badfdc7668f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0978b7154a55628dab2d98ff4b83eb00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8aad601dd5f723e257c79f12dda3851e">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a0978b7154a55628dab2d98ff4b83eb00">rbegin</a> () const</td></tr>
<tr class="separator:a0978b7154a55628dab2d98ff4b83eb00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70a39bcb1d41c2d9ac475e291035a82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addb50f654eef5e67ebb3bad4fb3a12c1">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ae70a39bcb1d41c2d9ac475e291035a82">rend</a> ()</td></tr>
<tr class="separator:ae70a39bcb1d41c2d9ac475e291035a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addafb88742940cff4f73c04ed583ebcd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8aad601dd5f723e257c79f12dda3851e">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addafb88742940cff4f73c04ed583ebcd">rend</a> () const</td></tr>
<tr class="separator:addafb88742940cff4f73c04ed583ebcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ec4799f4fba7f65ae07c0135c98f11b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a9ec4799f4fba7f65ae07c0135c98f11b">size_in_bytes</a> () const</td></tr>
<tr class="separator:a9ec4799f4fba7f65ae07c0135c98f11b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36917a16c2dfabcbca35ab7b6ed5228c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a36917a16c2dfabcbca35ab7b6ed5228c">max_size</a> () const</td></tr>
<tr class="separator:a36917a16c2dfabcbca35ab7b6ed5228c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dbf48037d8ea2b9146d74e4ab4d0f0d"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a1dbf48037d8ea2b9146d74e4ab4d0f0d">capacity_in_bytes</a> () const</td></tr>
<tr class="separator:a1dbf48037d8ea2b9146d74e4ab4d0f0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f79fd520608dbd608e1e432a379cdff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#adab7b7e9c146404688f0d0e288bb4e15">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8f79fd520608dbd608e1e432a379cdff">data</a> ()</td></tr>
<tr class="memdesc:a8f79fd520608dbd608e1e432a379cdff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the vector's buffer, even if <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a062fb4380e455ece79f56fd39b18a88f">empty()</a>.  <a href="classopen3d_1_1core_1_1_small_vector_templat#a8f79fd520608dbd608e1e432a379cdff">More...</a><br /></td></tr>
<tr class="separator:a8f79fd520608dbd608e1e432a379cdff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e5db7f26c9ea66f900189f5bc87ccb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a9eda6737b26c62fc21c6387cfa76138f">const_pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a43e5db7f26c9ea66f900189f5bc87ccb">data</a> () const</td></tr>
<tr class="memdesc:a43e5db7f26c9ea66f900189f5bc87ccb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the vector's buffer, even if <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a062fb4380e455ece79f56fd39b18a88f">empty()</a>.  <a href="classopen3d_1_1core_1_1_small_vector_templat#a43e5db7f26c9ea66f900189f5bc87ccb">More...</a><br /></td></tr>
<tr class="separator:a43e5db7f26c9ea66f900189f5bc87ccb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41da7d7159d15bcdd56984ad3cb97113"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a41da7d7159d15bcdd56984ad3cb97113">operator[]</a> (<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a> idx)</td></tr>
<tr class="separator:a41da7d7159d15bcdd56984ad3cb97113"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e3930b9ebd380507402fb5e9f56706a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a6e3930b9ebd380507402fb5e9f56706a">operator[]</a> (<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a> idx) const</td></tr>
<tr class="separator:a6e3930b9ebd380507402fb5e9f56706a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76eb7efe5f92ddd39ad1b5d1b0c50f9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a76eb7efe5f92ddd39ad1b5d1b0c50f9f">front</a> ()</td></tr>
<tr class="separator:a76eb7efe5f92ddd39ad1b5d1b0c50f9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2d2285f97f55059ae9a8e9e02bc8c6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#aab2d2285f97f55059ae9a8e9e02bc8c6">front</a> () const</td></tr>
<tr class="separator:aab2d2285f97f55059ae9a8e9e02bc8c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5944ecefab3cbfba47333a46ebbf27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f5944ecefab3cbfba47333a46ebbf27">back</a> ()</td></tr>
<tr class="separator:a7f5944ecefab3cbfba47333a46ebbf27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af50c8999c50a3212d3801962776ce6fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#af50c8999c50a3212d3801962776ce6fa">back</a> () const</td></tr>
<tr class="separator:af50c8999c50a3212d3801962776ce6fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopen3d_1_1core_1_1_small_vector_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b">open3d::core::SmallVectorBase&lt; SmallVectorSizeType&lt; T &gt; &gt;</a></td></tr>
<tr class="memitem:a2dc834f4d9a8e79f9ed046ea4fc1a140 inherit pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a2dc834f4d9a8e79f9ed046ea4fc1a140">size</a> () const</td></tr>
<tr class="separator:a2dc834f4d9a8e79f9ed046ea4fc1a140 inherit pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23a6aa33770f005bb71c41ac55d1d94e inherit pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a23a6aa33770f005bb71c41ac55d1d94e">capacity</a> () const</td></tr>
<tr class="separator:a23a6aa33770f005bb71c41ac55d1d94e inherit pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a062fb4380e455ece79f56fd39b18a88f inherit pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_small_vector_8h.html#a8ce3b3743bf423cf00a9eb18a3f0f139">LLVM_NODISCARD</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a062fb4380e455ece79f56fd39b18a88f">empty</a> () const</td></tr>
<tr class="separator:a062fb4380e455ece79f56fd39b18a88f inherit pub_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a15ed82f05df5ad80d949a52e7c03fadd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a15ed82f05df5ad80d949a52e7c03fadd">SmallVectorTemplateCommon</a> (size_t <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#ab57b4e9b18f93d30eb0502fe4949e38e">Size</a>)</td></tr>
<tr class="separator:a15ed82f05df5ad80d949a52e7c03fadd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a944ee637bf9269aa7ed25e03bea66e1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a944ee637bf9269aa7ed25e03bea66e1f">grow_pod</a> (size_t MinSize, size_t TSize)</td></tr>
<tr class="separator:a944ee637bf9269aa7ed25e03bea66e1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fd00ce49a881719a21ab852ee7f35b7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8fd00ce49a881719a21ab852ee7f35b7">isSmall</a> () const</td></tr>
<tr class="separator:a8fd00ce49a881719a21ab852ee7f35b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cf9097c99f52885a22fd44c396687c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a4cf9097c99f52885a22fd44c396687c0">resetToSmall</a> ()</td></tr>
<tr class="memdesc:a4cf9097c99f52885a22fd44c396687c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Put this vector in a state of being small.  <a href="classopen3d_1_1core_1_1_small_vector_templat#a4cf9097c99f52885a22fd44c396687c0">More...</a><br /></td></tr>
<tr class="separator:a4cf9097c99f52885a22fd44c396687c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad320729adbd8050955f7bcd2938ffac2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ad320729adbd8050955f7bcd2938ffac2">isReferenceToRange</a> (const void *V, const void *First, const void *Last) const</td></tr>
<tr class="memdesc:ad320729adbd8050955f7bcd2938ffac2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if V is an internal reference to the given range.  <a href="classopen3d_1_1core_1_1_small_vector_templat#ad320729adbd8050955f7bcd2938ffac2">More...</a><br /></td></tr>
<tr class="separator:ad320729adbd8050955f7bcd2938ffac2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e46ba03cbbd403fb81bf2e4805baf5e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8e46ba03cbbd403fb81bf2e4805baf5e">isReferenceToStorage</a> (const void *V) const</td></tr>
<tr class="memdesc:a8e46ba03cbbd403fb81bf2e4805baf5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if V is an internal reference to this vector.  <a href="classopen3d_1_1core_1_1_small_vector_templat#a8e46ba03cbbd403fb81bf2e4805baf5e">More...</a><br /></td></tr>
<tr class="separator:a8e46ba03cbbd403fb81bf2e4805baf5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cee227a15db90cd59e5863845255b1a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a2cee227a15db90cd59e5863845255b1a">isRangeInStorage</a> (const void *First, const void *Last) const</td></tr>
<tr class="separator:a2cee227a15db90cd59e5863845255b1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25483a5d85e4d53a2ff2a5ad3ac2e41a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a25483a5d85e4d53a2ff2a5ad3ac2e41a">isSafeToReferenceAfterResize</a> (const void *Elt, size_t NewSize)</td></tr>
<tr class="separator:a25483a5d85e4d53a2ff2a5ad3ac2e41a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c66a83e33f100c300dcd5a9b677e9c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a2c66a83e33f100c300dcd5a9b677e9c1">assertSafeToReferenceAfterResize</a> (const void *Elt, size_t NewSize)</td></tr>
<tr class="memdesc:a2c66a83e33f100c300dcd5a9b677e9c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether Elt will be invalidated by resizing the vector to NewSize.  <a href="classopen3d_1_1core_1_1_small_vector_templat#a2c66a83e33f100c300dcd5a9b677e9c1">More...</a><br /></td></tr>
<tr class="separator:a2c66a83e33f100c300dcd5a9b677e9c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7c44743bfec713c9c3e9d33005aef57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ab7c44743bfec713c9c3e9d33005aef57">assertSafeToAdd</a> (const void *Elt, size_t N=1)</td></tr>
<tr class="separator:ab7c44743bfec713c9c3e9d33005aef57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be5fa00a678e5e8d3ce5c2eb94c6591"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a6be5fa00a678e5e8d3ce5c2eb94c6591">assertSafeToReferenceAfterClear</a> (const T *From, const T *To)</td></tr>
<tr class="memdesc:a6be5fa00a678e5e8d3ce5c2eb94c6591"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether any part of the range will be invalidated by clearing.  <a href="classopen3d_1_1core_1_1_small_vector_templat#a6be5fa00a678e5e8d3ce5c2eb94c6591">More...</a><br /></td></tr>
<tr class="separator:a6be5fa00a678e5e8d3ce5c2eb94c6591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03dbf49acd80b737a08f9c414837287e"><td class="memTemplParams" colspan="2">template&lt;class ItTy , std::enable_if_t&lt; !std::is_same&lt; std::remove_const_t&lt; ItTy &gt;, T * &gt;::value, bool &gt;  = false&gt; </td></tr>
<tr class="memitem:a03dbf49acd80b737a08f9c414837287e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a03dbf49acd80b737a08f9c414837287e">assertSafeToReferenceAfterClear</a> (ItTy, ItTy)</td></tr>
<tr class="separator:a03dbf49acd80b737a08f9c414837287e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa11ea4a88a0b0b58a668d4840b11bf65"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#aa11ea4a88a0b0b58a668d4840b11bf65">assertSafeToAddRange</a> (const T *From, const T *To)</td></tr>
<tr class="memdesc:aa11ea4a88a0b0b58a668d4840b11bf65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether any part of the range will be invalidated by growing.  <a href="classopen3d_1_1core_1_1_small_vector_templat#aa11ea4a88a0b0b58a668d4840b11bf65">More...</a><br /></td></tr>
<tr class="separator:aa11ea4a88a0b0b58a668d4840b11bf65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd2a4d18f26786ad43bfc1e02ee53825"><td class="memTemplParams" colspan="2">template&lt;class ItTy , std::enable_if_t&lt; !std::is_same&lt; std::remove_const_t&lt; ItTy &gt;, T * &gt;::value, bool &gt;  = false&gt; </td></tr>
<tr class="memitem:afd2a4d18f26786ad43bfc1e02ee53825"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#afd2a4d18f26786ad43bfc1e02ee53825">assertSafeToAddRange</a> (ItTy, ItTy)</td></tr>
<tr class="separator:afd2a4d18f26786ad43bfc1e02ee53825"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classopen3d_1_1core_1_1_small_vector_base')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b">open3d::core::SmallVectorBase&lt; SmallVectorSizeType&lt; T &gt; &gt;</a></td></tr>
<tr class="memitem:afec93e8ebbddcbcdecaa4da339220b4c inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#afec93e8ebbddcbcdecaa4da339220b4c">SmallVectorBase</a> ()=delete</td></tr>
<tr class="separator:afec93e8ebbddcbcdecaa4da339220b4c inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a05056c620f2ae6dc530c2ee866d146 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a6a05056c620f2ae6dc530c2ee866d146">SmallVectorBase</a> (void *FirstEl, size_t TotalCapacity)</td></tr>
<tr class="separator:a6a05056c620f2ae6dc530c2ee866d146 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d46bce460681c68c718a01a03dd8d49 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a9d46bce460681c68c718a01a03dd8d49">mallocForGrow</a> (size_t MinSize, size_t TSize, size_t &amp;NewCapacity)</td></tr>
<tr class="separator:a9d46bce460681c68c718a01a03dd8d49 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab782be6ee0e22fe43435dab72e942a15 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#ab782be6ee0e22fe43435dab72e942a15">grow_pod</a> (void *FirstEl, size_t MinSize, size_t TSize)</td></tr>
<tr class="separator:ab782be6ee0e22fe43435dab72e942a15 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0c23e716aa544269250f092896629e9 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#aa0c23e716aa544269250f092896629e9">set_size</a> (size_t N)</td></tr>
<tr class="separator:aa0c23e716aa544269250f092896629e9 inherit pro_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:a6a7566edb1026c9e66d92086d72cf144"><td class="memTemplParams" colspan="2">template&lt;class U &gt; </td></tr>
<tr class="memitem:a6a7566edb1026c9e66d92086d72cf144"><td class="memTemplItemLeft" align="right" valign="top">static const T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a6a7566edb1026c9e66d92086d72cf144">reserveForParamAndGetAddressImpl</a> (U *This, const T &amp;Elt, size_t N)</td></tr>
<tr class="separator:a6a7566edb1026c9e66d92086d72cf144"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_methods_classopen3d_1_1core_1_1_small_vector_base"><td colspan="2" onclick="javascript:toggleInherit('pro_static_methods_classopen3d_1_1core_1_1_small_vector_base')"><img src="closed.png" alt="-"/>&#160;Static Protected Member Functions inherited from <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b">open3d::core::SmallVectorBase&lt; SmallVectorSizeType&lt; T &gt; &gt;</a></td></tr>
<tr class="memitem:a307ee1b3d2c722012d0af9e96ecae4d1 inherit pro_static_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a307ee1b3d2c722012d0af9e96ecae4d1">SizeTypeMax</a> ()</td></tr>
<tr class="memdesc:a307ee1b3d2c722012d0af9e96ecae4d1 inherit pro_static_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum value of the Size_T used.  <a href="classopen3d_1_1core_1_1_small_vector_base.3b#a307ee1b3d2c722012d0af9e96ecae4d1">More...</a><br /></td></tr>
<tr class="separator:a307ee1b3d2c722012d0af9e96ecae4d1 inherit pro_static_methods_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classopen3d_1_1core_1_1_small_vector_base')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b">open3d::core::SmallVectorBase&lt; SmallVectorSizeType&lt; T &gt; &gt;</a></td></tr>
<tr class="memitem:a75dee5104ab5e669437ccd857baf33fb inherit pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a75dee5104ab5e669437ccd857baf33fb">BeginX</a></td></tr>
<tr class="separator:a75dee5104ab5e669437ccd857baf33fb inherit pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab57b4e9b18f93d30eb0502fe4949e38e inherit pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1core.html#a6c1322b87f8cc03be33a7bd7676d10a7">SmallVectorSizeType</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#ab57b4e9b18f93d30eb0502fe4949e38e">Size</a></td></tr>
<tr class="separator:ab57b4e9b18f93d30eb0502fe4949e38e inherit pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85ba1be19c88c57733cef02c3989205a inherit pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopen3d_1_1core.html#a6c1322b87f8cc03be33a7bd7676d10a7">SmallVectorSizeType</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a85ba1be19c88c57733cef02c3989205a">Capacity</a></td></tr>
<tr class="separator:a85ba1be19c88c57733cef02c3989205a inherit pro_attribs_classopen3d_1_1core_1_1_small_vector_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T, typename = void&gt;<br />
class open3d::core::SmallVectorTemplateCommon&lt; T, typename &gt;</h3>

<p>This is the part of <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat-2">SmallVectorTemplateBase</a> which does not depend on whether the type T is a POD. The extra dummy template argument is used by ArrayRef to avoid unnecessarily requiring T to be complete. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a317ab7d6fb7a4731bf22a226822a73d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a317ab7d6fb7a4731bf22a226822a73d4">&#9670;&nbsp;</a></span>const_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a> =  const T *</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9eda6737b26c62fc21c6387cfa76138f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eda6737b26c62fc21c6387cfa76138f">&#9670;&nbsp;</a></span>const_pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a9eda6737b26c62fc21c6387cfa76138f">const_pointer</a> =  const T *</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a180eb1ccb6ea02b98e8b1b3b77fcd883"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a180eb1ccb6ea02b98e8b1b3b77fcd883">&#9670;&nbsp;</a></span>const_reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a> =  const T &amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8aad601dd5f723e257c79f12dda3851e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8aad601dd5f723e257c79f12dda3851e">&#9670;&nbsp;</a></span>const_reverse_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8aad601dd5f723e257c79f12dda3851e">const_reverse_iterator</a> =  std::reverse_iterator&lt;<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad10a4d170d2f9be02de0c5e2fd3412c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad10a4d170d2f9be02de0c5e2fd3412c3">&#9670;&nbsp;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ad10a4d170d2f9be02de0c5e2fd3412c3">difference_type</a> =  ptrdiff_t</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ade32037f59f14f4f5bb1840bdb9da33e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade32037f59f14f4f5bb1840bdb9da33e">&#9670;&nbsp;</a></span>iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a> =  T *</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adab7b7e9c146404688f0d0e288bb4e15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adab7b7e9c146404688f0d0e288bb4e15">&#9670;&nbsp;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#adab7b7e9c146404688f0d0e288bb4e15">pointer</a> =  T *</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7f6a71049b85bf871e55e8bd1199db60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f6a71049b85bf871e55e8bd1199db60">&#9670;&nbsp;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a> =  T &amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="addb50f654eef5e67ebb3bad4fb3a12c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addb50f654eef5e67ebb3bad4fb3a12c1">&#9670;&nbsp;</a></span>reverse_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addb50f654eef5e67ebb3bad4fb3a12c1">reverse_iterator</a> =  std::reverse_iterator&lt;<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a39583ddacc074f6e633b204aaa714647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39583ddacc074f6e633b204aaa714647">&#9670;&nbsp;</a></span>size_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a> =  size_t</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab07cc779bd936e740cabecdf41c67534"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab07cc779bd936e740cabecdf41c67534">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ab07cc779bd936e740cabecdf41c67534">value_type</a> =  T</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a15ed82f05df5ad80d949a52e7c03fadd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15ed82f05df5ad80d949a52e7c03fadd">&#9670;&nbsp;</a></span>SmallVectorTemplateCommon()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::<a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">SmallVectorTemplateCommon</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>Size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab7c44743bfec713c9c3e9d33005aef57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7c44743bfec713c9c3e9d33005aef57">&#9670;&nbsp;</a></span>assertSafeToAdd()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::assertSafeToAdd </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>Elt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>N</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check whether Elt will be invalidated by increasing the size of the vector by N. </p>

</div>
</div>
<a id="aa11ea4a88a0b0b58a668d4840b11bf65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa11ea4a88a0b0b58a668d4840b11bf65">&#9670;&nbsp;</a></span>assertSafeToAddRange() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::assertSafeToAddRange </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>From</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>To</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether any part of the range will be invalidated by growing. </p>

</div>
</div>
<a id="afd2a4d18f26786ad43bfc1e02ee53825"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd2a4d18f26786ad43bfc1e02ee53825">&#9670;&nbsp;</a></span>assertSafeToAddRange() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<div class="memtemplate">
template&lt;class ItTy , std::enable_if_t&lt; !std::is_same&lt; std::remove_const_t&lt; ItTy &gt;, T * &gt;::value, bool &gt;  = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::assertSafeToAddRange </td>
          <td>(</td>
          <td class="paramtype">ItTy&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ItTy&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6be5fa00a678e5e8d3ce5c2eb94c6591"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6be5fa00a678e5e8d3ce5c2eb94c6591">&#9670;&nbsp;</a></span>assertSafeToReferenceAfterClear() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::assertSafeToReferenceAfterClear </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>From</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>To</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether any part of the range will be invalidated by clearing. </p>

</div>
</div>
<a id="a03dbf49acd80b737a08f9c414837287e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03dbf49acd80b737a08f9c414837287e">&#9670;&nbsp;</a></span>assertSafeToReferenceAfterClear() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<div class="memtemplate">
template&lt;class ItTy , std::enable_if_t&lt; !std::is_same&lt; std::remove_const_t&lt; ItTy &gt;, T * &gt;::value, bool &gt;  = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::assertSafeToReferenceAfterClear </td>
          <td>(</td>
          <td class="paramtype">ItTy&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ItTy&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2c66a83e33f100c300dcd5a9b677e9c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c66a83e33f100c300dcd5a9b677e9c1">&#9670;&nbsp;</a></span>assertSafeToReferenceAfterResize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::assertSafeToReferenceAfterResize </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>Elt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>NewSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether Elt will be invalidated by resizing the vector to NewSize. </p>

</div>
</div>
<a id="a7f5944ecefab3cbfba47333a46ebbf27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f5944ecefab3cbfba47333a46ebbf27">&#9670;&nbsp;</a></span>back() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::back </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af50c8999c50a3212d3801962776ce6fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af50c8999c50a3212d3801962776ce6fa">&#9670;&nbsp;</a></span>back() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::back </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a746fa92e15020e4b506f5b7b92faa0f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a746fa92e15020e4b506f5b7b92faa0f0">&#9670;&nbsp;</a></span>begin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2457bbb5ee36735a915e009cf200e046"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2457bbb5ee36735a915e009cf200e046">&#9670;&nbsp;</a></span>begin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1dbf48037d8ea2b9146d74e4ab4d0f0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dbf48037d8ea2b9146d74e4ab4d0f0d">&#9670;&nbsp;</a></span>capacity_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::capacity_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8f79fd520608dbd608e1e432a379cdff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f79fd520608dbd608e1e432a379cdff">&#9670;&nbsp;</a></span>data() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#adab7b7e9c146404688f0d0e288bb4e15">pointer</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return a pointer to the vector's buffer, even if <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a062fb4380e455ece79f56fd39b18a88f">empty()</a>. </p>

</div>
</div>
<a id="a43e5db7f26c9ea66f900189f5bc87ccb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43e5db7f26c9ea66f900189f5bc87ccb">&#9670;&nbsp;</a></span>data() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a9eda6737b26c62fc21c6387cfa76138f">const_pointer</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return a pointer to the vector's buffer, even if <a class="el" href="classopen3d_1_1core_1_1_small_vector_base.3b#a062fb4380e455ece79f56fd39b18a88f">empty()</a>. </p>

</div>
</div>
<a id="ac4fc9a54f3955f6a3cc5eea76408531b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4fc9a54f3955f6a3cc5eea76408531b">&#9670;&nbsp;</a></span>end() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#ade32037f59f14f4f5bb1840bdb9da33e">iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a734957305d193da395fb39366f55fe19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a734957305d193da395fb39366f55fe19">&#9670;&nbsp;</a></span>end() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a317ab7d6fb7a4731bf22a226822a73d4">const_iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a76eb7efe5f92ddd39ad1b5d1b0c50f9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76eb7efe5f92ddd39ad1b5d1b0c50f9f">&#9670;&nbsp;</a></span>front() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::front </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aab2d2285f97f55059ae9a8e9e02bc8c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab2d2285f97f55059ae9a8e9e02bc8c6">&#9670;&nbsp;</a></span>front() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::front </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a944ee637bf9269aa7ed25e03bea66e1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a944ee637bf9269aa7ed25e03bea66e1f">&#9670;&nbsp;</a></span>grow_pod()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::grow_pod </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>MinSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>TSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2cee227a15db90cd59e5863845255b1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cee227a15db90cd59e5863845255b1a">&#9670;&nbsp;</a></span>isRangeInStorage()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::isRangeInStorage </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>First</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>Last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return true if First and Last form a valid (possibly empty) range in this vector's storage. </p>

</div>
</div>
<a id="ad320729adbd8050955f7bcd2938ffac2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad320729adbd8050955f7bcd2938ffac2">&#9670;&nbsp;</a></span>isReferenceToRange()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::isReferenceToRange </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>First</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>Last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if V is an internal reference to the given range. </p>

</div>
</div>
<a id="a8e46ba03cbbd403fb81bf2e4805baf5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e46ba03cbbd403fb81bf2e4805baf5e">&#9670;&nbsp;</a></span>isReferenceToStorage()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::isReferenceToStorage </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>V</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return true if V is an internal reference to this vector. </p>

</div>
</div>
<a id="a25483a5d85e4d53a2ff2a5ad3ac2e41a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25483a5d85e4d53a2ff2a5ad3ac2e41a">&#9670;&nbsp;</a></span>isSafeToReferenceAfterResize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::isSafeToReferenceAfterResize </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>Elt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>NewSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return true unless Elt will be invalidated by resizing the vector to NewSize. </p>

</div>
</div>
<a id="a8fd00ce49a881719a21ab852ee7f35b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fd00ce49a881719a21ab852ee7f35b7">&#9670;&nbsp;</a></span>isSmall()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::isSmall </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return true if this is a smallvector which has not had dynamic memory allocated for it. </p>

</div>
</div>
<a id="a36917a16c2dfabcbca35ab7b6ed5228c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36917a16c2dfabcbca35ab7b6ed5228c">&#9670;&nbsp;</a></span>max_size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::max_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a41da7d7159d15bcdd56984ad3cb97113"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41da7d7159d15bcdd56984ad3cb97113">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a7f6a71049b85bf871e55e8bd1199db60">reference</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e3930b9ebd380507402fb5e9f56706a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e3930b9ebd380507402fb5e9f56706a">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a180eb1ccb6ea02b98e8b1b3b77fcd883">const_reference</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c303fd31b8195c5ee443badfdc7668f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c303fd31b8195c5ee443badfdc7668f">&#9670;&nbsp;</a></span>rbegin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addb50f654eef5e67ebb3bad4fb3a12c1">reverse_iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0978b7154a55628dab2d98ff4b83eb00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0978b7154a55628dab2d98ff4b83eb00">&#9670;&nbsp;</a></span>rbegin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8aad601dd5f723e257c79f12dda3851e">const_reverse_iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae70a39bcb1d41c2d9ac475e291035a82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae70a39bcb1d41c2d9ac475e291035a82">&#9670;&nbsp;</a></span>rend() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#addb50f654eef5e67ebb3bad4fb3a12c1">reverse_iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="addafb88742940cff4f73c04ed583ebcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addafb88742940cff4f73c04ed583ebcd">&#9670;&nbsp;</a></span>rend() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a8aad601dd5f723e257c79f12dda3851e">const_reverse_iterator</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6a7566edb1026c9e66d92086d72cf144"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a7566edb1026c9e66d92086d72cf144">&#9670;&nbsp;</a></span>reserveForParamAndGetAddressImpl()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<div class="memtemplate">
template&lt;class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const T* <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::reserveForParamAndGetAddressImpl </td>
          <td>(</td>
          <td class="paramtype">U *&#160;</td>
          <td class="paramname"><em>This</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Elt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>N</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reserve enough space to add one element, and return the updated element pointer in case it was a reference to the storage. </p>

</div>
</div>
<a id="a4cf9097c99f52885a22fd44c396687c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cf9097c99f52885a22fd44c396687c0">&#9670;&nbsp;</a></span>resetToSmall()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::resetToSmall </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Put this vector in a state of being small. </p>

</div>
</div>
<a id="a9ec4799f4fba7f65ae07c0135c98f11b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ec4799f4fba7f65ae07c0135c98f11b">&#9670;&nbsp;</a></span>size_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename  = void&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_small_vector_templat#a39583ddacc074f6e633b204aaa714647">size_type</a> <a class="el" href="classopen3d_1_1core_1_1_small_vector_templat">open3d::core::SmallVectorTemplateCommon</a>&lt; T, typename &gt;::size_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/core/<a class="el" href="_small_vector_8h_source.html">SmallVector.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1core_1_1_small_vector_template_common.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 10:55:22 GMT -->
</html>
