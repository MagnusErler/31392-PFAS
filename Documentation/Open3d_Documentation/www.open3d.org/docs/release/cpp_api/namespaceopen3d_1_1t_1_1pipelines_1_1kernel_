<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:02:16 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::pipelines::kernel::odometry Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines.33e.delaye">pipelines</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel">kernel</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_">odometry</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::pipelines::kernel::odometry Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a4062abbfe95764bdef179bb7a8a3ed14"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a4062abbfe95764bdef179bb7a8a3ed14">ComputeOdometryResultPointToPlane</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normal_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count, const float depth_outlier_trunc, const float depth_huber_delta)</td></tr>
<tr class="separator:a4062abbfe95764bdef179bb7a8a3ed14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a106f261620f4e1f12e18e3d532d6a4df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a106f261620f4e1f12e18e3d532d6a4df">ComputeOdometryResultIntensity</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count, const float depth_outlier_trunc, const float intensity_huber_delta)</td></tr>
<tr class="separator:a106f261620f4e1f12e18e3d532d6a4df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0511ebd144076deabe176d35b937c9b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ae0511ebd144076deabe176d35b937c9b">ComputeOdometryResultHybrid</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count, const float depth_outlier_trunc, const float depth_huber_delta, const float intensity_huber_delta)</td></tr>
<tr class="separator:ae0511ebd144076deabe176d35b937c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c7018fae63055b056a8d358a491ba2c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a2c7018fae63055b056a8d358a491ba2c">ComputeOdometryInformationMatrix</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_to_target, const float square_dist_thr, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;information)</td></tr>
<tr class="separator:a2c7018fae63055b056a8d358a491ba2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac13db9a64ce63b49fbfca0a8e5233e4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ac13db9a64ce63b49fbfca0a8e5233e4e">ComputeOdometryInformationMatrixCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsic, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_to_target, const float square_dist_thr, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;information)</td></tr>
<tr class="separator:ac13db9a64ce63b49fbfca0a8e5233e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9905e899711096e20a36291a528771d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ac9905e899711096e20a36291a528771d">ComputeOdometryResultIntensityCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count, const float depth_outlier_trunc, const float intensity_huber_delta)</td></tr>
<tr class="separator:ac9905e899711096e20a36291a528771d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d037a7cc195f033830ea94df1d8ccfe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a5d037a7cc195f033830ea94df1d8ccfe">ComputeOdometryResultHybridCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_depth_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dx, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_intensity_dy, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count, const float depth_outlier_trunc, const float depth_huber_delta, const float intensity_huber_delta)</td></tr>
<tr class="separator:a5d037a7cc195f033830ea94df1d8ccfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e7d572af3590d7c8638a56e6357d1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a92e7d572af3590d7c8638a56e6357d1e">ComputeOdometryResultPointToPlaneCPU</a> (const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;source_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_vertex_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;target_normal_map, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;intrinsics, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;init_source_to_target, <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;delta, float &amp;inlier_residual, int &amp;inlier_count, const float depth_outlier_trunc, const float depth_huber_delta)</td></tr>
<tr class="separator:a92e7d572af3590d7c8638a56e6357d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bc1496c9aa473ba32bd8d999eaa95f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a2bc1496c9aa473ba32bd8d999eaa95f0">HuberDeriv</a> (float r, float delta)</td></tr>
<tr class="separator:a2bc1496c9aa473ba32bd8d999eaa95f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad300187c731390d1a8a0ded2a64954fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ad300187c731390d1a8a0ded2a64954fe">HuberLoss</a> (float r, float delta)</td></tr>
<tr class="separator:ad300187c731390d1a8a0ded2a64954fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96e9868640fef785e1a500f5001d7ad1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a96e9868640fef785e1a500f5001d7ad1">GetJacobianPointToPoint</a> (int x, int y, const float square_dist_thr, const NDArrayIndexer &amp;source_vertex_indexer, const NDArrayIndexer &amp;target_vertex_indexer, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;ti, float *J_x, float *J_y, float *J_z, float &amp;rx, float &amp;ry, float &amp;rz)</td></tr>
<tr class="separator:a96e9868640fef785e1a500f5001d7ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39ea756283bb118fec6dceb17f4e360a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a39ea756283bb118fec6dceb17f4e360a">GetJacobianPointToPlane</a> (int x, int y, const float depth_outlier_trunc, const NDArrayIndexer &amp;source_vertex_indexer, const NDArrayIndexer &amp;target_vertex_indexer, const NDArrayIndexer &amp;target_normal_indexer, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;ti, float *J_ij, float &amp;r)</td></tr>
<tr class="separator:a39ea756283bb118fec6dceb17f4e360a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf2fd81426920b1073a03fa06e10828e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#abf2fd81426920b1073a03fa06e10828e">GetJacobianIntensity</a> (int x, int y, const float depth_outlier_trunc, const NDArrayIndexer &amp;source_depth_indexer, const NDArrayIndexer &amp;target_depth_indexer, const NDArrayIndexer &amp;source_intensity_indexer, const NDArrayIndexer &amp;target_intensity_indexer, const NDArrayIndexer &amp;target_intensity_dx_indexer, const NDArrayIndexer &amp;target_intensity_dy_indexer, const NDArrayIndexer &amp;source_vertex_indexer, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;ti, float *J_I, float &amp;r_I)</td></tr>
<tr class="separator:abf2fd81426920b1073a03fa06e10828e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a004a4a267c3a5aace95c9782f7933d86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a004a4a267c3a5aace95c9782f7933d86">GetJacobianHybrid</a> (int x, int y, const float depth_outlier_trunc, const NDArrayIndexer &amp;source_depth_indexer, const NDArrayIndexer &amp;target_depth_indexer, const NDArrayIndexer &amp;source_intensity_indexer, const NDArrayIndexer &amp;target_intensity_indexer, const NDArrayIndexer &amp;target_depth_dx_indexer, const NDArrayIndexer &amp;target_depth_dy_indexer, const NDArrayIndexer &amp;target_intensity_dx_indexer, const NDArrayIndexer &amp;target_intensity_dy_indexer, const NDArrayIndexer &amp;source_vertex_indexer, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;ti, float *J_I, float *J_D, float &amp;r_I, float &amp;r_D)</td></tr>
<tr class="separator:a004a4a267c3a5aace95c9782f7933d86"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a2c7018fae63055b056a8d358a491ba2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c7018fae63055b056a8d358a491ba2c">&#9670;&nbsp;</a></span>ComputeOdometryInformationMatrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryInformationMatrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>square_dist_thr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>information</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac13db9a64ce63b49fbfca0a8e5233e4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac13db9a64ce63b49fbfca0a8e5233e4e">&#9670;&nbsp;</a></span>ComputeOdometryInformationMatrixCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryInformationMatrixCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>square_dist_thr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>information</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae0511ebd144076deabe176d35b937c9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0511ebd144076deabe176d35b937c9b">&#9670;&nbsp;</a></span>ComputeOdometryResultHybrid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryResultHybrid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_huber_delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>intensity_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d037a7cc195f033830ea94df1d8ccfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d037a7cc195f033830ea94df1d8ccfe">&#9670;&nbsp;</a></span>ComputeOdometryResultHybridCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryResultHybridCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_huber_delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>intensity_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a106f261620f4e1f12e18e3d532d6a4df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a106f261620f4e1f12e18e3d532d6a4df">&#9670;&nbsp;</a></span>ComputeOdometryResultIntensity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryResultIntensity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>intensity_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac9905e899711096e20a36291a528771d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9905e899711096e20a36291a528771d">&#9670;&nbsp;</a></span>ComputeOdometryResultIntensityCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryResultIntensityCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>intensity_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4062abbfe95764bdef179bb7a8a3ed14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4062abbfe95764bdef179bb7a8a3ed14">&#9670;&nbsp;</a></span>ComputeOdometryResultPointToPlane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryResultPointToPlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normal_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a92e7d572af3590d7c8638a56e6357d1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92e7d572af3590d7c8638a56e6357d1e">&#9670;&nbsp;</a></span>ComputeOdometryResultPointToPlaneCPU()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::kernel::odometry::ComputeOdometryResultPointToPlaneCPU </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>target_normal_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>intrinsics</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>init_source_to_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>delta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>inlier_residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>inlier_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_huber_delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a004a4a267c3a5aace95c9782f7933d86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a004a4a267c3a5aace95c9782f7933d86">&#9670;&nbsp;</a></span>GetJacobianHybrid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::odometry::GetJacobianHybrid </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_depth_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_depth_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_intensity_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dx_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_depth_dy_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;&#160;</td>
          <td class="paramname"><em>ti</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_D</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r_I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r_D</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abf2fd81426920b1073a03fa06e10828e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf2fd81426920b1073a03fa06e10828e">&#9670;&nbsp;</a></span>GetJacobianIntensity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::odometry::GetJacobianIntensity </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_depth_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_depth_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_intensity_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dx_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_intensity_dy_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;&#160;</td>
          <td class="paramname"><em>ti</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r_I</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a39ea756283bb118fec6dceb17f4e360a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39ea756283bb118fec6dceb17f4e360a">&#9670;&nbsp;</a></span>GetJacobianPointToPlane()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::odometry::GetJacobianPointToPlane </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>depth_outlier_trunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_normal_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;&#160;</td>
          <td class="paramname"><em>ti</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_ij</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a96e9868640fef785e1a500f5001d7ad1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96e9868640fef785e1a500f5001d7ad1">&#9670;&nbsp;</a></span>GetJacobianPointToPoint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> bool open3d::t::pipelines::kernel::odometry::GetJacobianPointToPoint </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>square_dist_thr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>source_vertex_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NDArrayIndexer &amp;&#160;</td>
          <td class="paramname"><em>target_vertex_indexer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a> &amp;&#160;</td>
          <td class="paramname"><em>ti</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>J_z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&#160;</td>
          <td class="paramname"><em>rz</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2bc1496c9aa473ba32bd8d999eaa95f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bc1496c9aa473ba32bd8d999eaa95f0">&#9670;&nbsp;</a></span>HuberDeriv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> float open3d::t::pipelines::kernel::odometry::HuberDeriv </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad300187c731390d1a8a0ded2a64954fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad300187c731390d1a8a0ded2a64954fe">&#9670;&nbsp;</a></span>HuberLoss()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> float open3d::t::pipelines::kernel::odometry::HuberLoss </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/namespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:02:16 GMT -->
</html>
