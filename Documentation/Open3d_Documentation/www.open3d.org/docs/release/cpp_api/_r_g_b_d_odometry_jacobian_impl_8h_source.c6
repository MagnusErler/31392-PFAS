<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_r_g_b_d_odometry_jacobian_impl_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:04:48 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): /home/runner/work/Open3D/Open3D/cpp/open3d/t/pipelines/kernel/RGBDOdometryJacobianImpl.h (9238339 (Tue Mar 14 18:49:09 2023 -0700)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df511e5bd85cec96854b39d5e1c27aa8.357.del">cpp</a></li><li class="navelem"><a class="el" href="dir_f8cc15b2217ff526bd336cf17635da2a.358.del">open3d</a></li><li class="navelem"><a class="el" href="dir_98b8f8b2b857e52342ae5921735ee8da.359.del">t</a></li><li class="navelem"><a class="el" href="dir_a16cee171089e186ac2053c305b5f552.4e3.del">pipelines</a></li><li class="navelem"><a class="el" href="dir_cf5c51bfbf2a69ac5df5dc9085c00788.973.del">kernel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">RGBDOdometryJacobianImpl.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_r_g_b_d_odometry_jacobian_impl_8h.c6e.delay">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// -                        Open3D: www.open3d.org                            -</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (c) 2018-2023 www.open3d.org</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// ----------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">// Private header. Do not include in Open3d.h.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_8h.html">open3d/core/Tensor.h</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_geometry_indexer_8h.html">open3d/t/geometry/kernel/GeometryIndexer.h</a>&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_geometry_macros_8h.html">open3d/t/geometry/kernel/GeometryMacros.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopen3d.html">open3d</a> {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span>t {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span>pipelines {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>kernel {</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span>odometry {</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">t::geometry::kernel::NDArrayIndexer</a>;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">using</span> t::geometry::kernel::TransformIndexer;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef __CUDACC__</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">using</span> std::abs;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">using</span> std::isnan;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">using</span> std::max;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a2bc1496c9aa473ba32bd8d999eaa95f0">   29</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <span class="keywordtype">float</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a2bc1496c9aa473ba32bd8d999eaa95f0">HuberDeriv</a>(<span class="keywordtype">float</span> r, <span class="keywordtype">float</span> delta) {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">float</span> abs_r = abs(r);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> abs_r &lt; delta ? r : delta * <a class="code" href="_geometry_macros_8h.html#a3f5dfe66efca77fc8992ae7ecc21d1b4">Sign</a>(r);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ad300187c731390d1a8a0ded2a64954fe">   34</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <span class="keywordtype">float</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ad300187c731390d1a8a0ded2a64954fe">HuberLoss</a>(<span class="keywordtype">float</span> r, <span class="keywordtype">float</span> delta) {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">float</span> abs_r = abs(r);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> abs_r &lt; delta ? 0.5 * r * r : delta * abs_r - 0.5 * delta * delta;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a96e9868640fef785e1a500f5001d7ad1">   39</a></span>&#160;<a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a96e9868640fef785e1a500f5001d7ad1">GetJacobianPointToPoint</a>(</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordtype">int</span> x,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordtype">int</span> y,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> square_dist_thr,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_vertex_indexer,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_vertex_indexer,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keyword">const</span> <a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a>&amp; ti,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordtype">float</span>* J_x,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordtype">float</span>* J_y,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordtype">float</span>* J_z,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordtype">float</span>&amp; rx,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">float</span>&amp; ry,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordtype">float</span>&amp; rz) {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">float</span>* source_v = source_vertex_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(x, y);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> (isnan(source_v[0])) {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Transform source points to the target camera&#39;s coordinate space.</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">float</span> T_source_to_target_v[3], u, v;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#ae92b985c3f785ee0874a9c5ea3e133ea">RigidTransform</a>(source_v[0], source_v[1], source_v[2],</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                      &amp;T_source_to_target_v[0], &amp;T_source_to_target_v[1],</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                      &amp;T_source_to_target_v[2]);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#a066896712bf067c66477f2199272f516">Project</a>(T_source_to_target_v[0], T_source_to_target_v[1],</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;               T_source_to_target_v[2], &amp;u, &amp;v);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    u = roundf(u);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    v = roundf(v);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span> (T_source_to_target_v[2] &lt; 0 ||</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        !target_vertex_indexer.InBoundary(u, v)) {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">int</span> ui = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(u);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">int</span> vi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(v);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">float</span>* target_v = target_vertex_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(ui, vi);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (isnan(target_v[0])) {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    rx = (T_source_to_target_v[0] - target_v[0]);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    ry = (T_source_to_target_v[1] - target_v[1]);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    rz = (T_source_to_target_v[2] - target_v[2]);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">float</span> r2 = rx * rx + ry * ry + rz * rz;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> (r2 &gt; square_dist_thr) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// T s - t</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    J_x[0] = J_x[4] = J_x[5] = 0.0;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    J_x[1] = T_source_to_target_v[2];</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    J_x[2] = -T_source_to_target_v[1];</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    J_x[3] = 1.0;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    J_y[1] = J_y[3] = J_y[5] = 0.0;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    J_y[0] = -T_source_to_target_v[2];</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    J_y[2] = T_source_to_target_v[0];</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    J_y[4] = 1.0;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    J_z[2] = J_z[3] = J_z[4] = 0.0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    J_z[0] = T_source_to_target_v[1];</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    J_z[1] = -T_source_to_target_v[0];</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    J_z[5] = 1.0;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a39ea756283bb118fec6dceb17f4e360a">  106</a></span>&#160;<a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a39ea756283bb118fec6dceb17f4e360a">GetJacobianPointToPlane</a>(</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordtype">int</span> x,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordtype">int</span> y,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> depth_outlier_trunc,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_vertex_indexer,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_vertex_indexer,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_normal_indexer,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a>&amp; ti,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordtype">float</span>* J_ij,</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordtype">float</span>&amp; r) {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordtype">float</span>* source_v = source_vertex_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(x, y);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (isnan(source_v[0])) {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Transform source points to the target camera&#39;s coordinate space.</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">float</span> T_source_to_target_v[3], u, v;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#ae92b985c3f785ee0874a9c5ea3e133ea">RigidTransform</a>(source_v[0], source_v[1], source_v[2],</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                      &amp;T_source_to_target_v[0], &amp;T_source_to_target_v[1],</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                      &amp;T_source_to_target_v[2]);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#a066896712bf067c66477f2199272f516">Project</a>(T_source_to_target_v[0], T_source_to_target_v[1],</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;               T_source_to_target_v[2], &amp;u, &amp;v);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    u = roundf(u);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    v = roundf(v);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (T_source_to_target_v[2] &lt; 0 ||</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        !target_vertex_indexer.InBoundary(u, v)) {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">int</span> ui = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(u);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">int</span> vi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(v);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">float</span>* target_v = target_vertex_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(ui, vi);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">float</span>* target_n = target_normal_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(ui, vi);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (isnan(target_v[0]) || isnan(target_n[0])) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    r = (T_source_to_target_v[0] - target_v[0]) * target_n[0] +</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        (T_source_to_target_v[1] - target_v[1]) * target_n[1] +</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        (T_source_to_target_v[2] - target_v[2]) * target_n[2];</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> (abs(r) &gt; depth_outlier_trunc) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    J_ij[0] = -T_source_to_target_v[2] * target_n[1] +</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;              T_source_to_target_v[1] * target_n[2];</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    J_ij[1] = T_source_to_target_v[2] * target_n[0] -</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;              T_source_to_target_v[0] * target_n[2];</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    J_ij[2] = -T_source_to_target_v[1] * target_n[0] +</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;              T_source_to_target_v[0] * target_n[1];</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    J_ij[3] = target_n[0];</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    J_ij[4] = target_n[1];</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    J_ij[5] = target_n[2];</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#abf2fd81426920b1073a03fa06e10828e">  164</a></span>&#160;<a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#abf2fd81426920b1073a03fa06e10828e">GetJacobianIntensity</a>(</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordtype">int</span> x,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordtype">int</span> y,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> depth_outlier_trunc,</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_depth_indexer,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_depth_indexer,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_intensity_indexer,</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_intensity_indexer,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_intensity_dx_indexer,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_intensity_dy_indexer,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_vertex_indexer,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keyword">const</span> <a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a>&amp; ti,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">float</span>* J_I,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordtype">float</span>&amp; r_I) {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> sobel_scale = 0.125;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordtype">float</span>* source_v = source_vertex_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(x, y);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">if</span> (isnan(source_v[0])) {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Transform source points to the target camera&#39;s coordinate space.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">float</span> T_source_to_target_v[3], u_tf, v_tf;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#ae92b985c3f785ee0874a9c5ea3e133ea">RigidTransform</a>(source_v[0], source_v[1], source_v[2],</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                      &amp;T_source_to_target_v[0], &amp;T_source_to_target_v[1],</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                      &amp;T_source_to_target_v[2]);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#a066896712bf067c66477f2199272f516">Project</a>(T_source_to_target_v[0], T_source_to_target_v[1],</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;               T_source_to_target_v[2], &amp;u_tf, &amp;v_tf);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">int</span> u_t = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(roundf(u_tf));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">int</span> v_t = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(roundf(v_tf));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">if</span> (T_source_to_target_v[2] &lt; 0 ||</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        !target_depth_indexer.InBoundary(u_t, v_t)) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordtype">float</span> fx, fy;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#af923171300c7b857d64dbc2f96a57457">GetFocalLength</a>(&amp;fx, &amp;fy);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">float</span> depth_t = *target_depth_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">float</span> diff_D = depth_t - T_source_to_target_v[2];</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">if</span> (isnan(depth_t) || abs(diff_D) &gt; depth_outlier_trunc) {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">float</span> diff_I = *target_intensity_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t) -</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                   *source_intensity_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(x, y);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">float</span> dIdx = sobel_scale *</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                 (*target_intensity_dx_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordtype">float</span> dIdy = sobel_scale *</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                 (*target_intensity_dy_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t));</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">float</span> invz = 1 / T_source_to_target_v[2];</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordtype">float</span> c0 = dIdx * fx * invz;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordtype">float</span> c1 = dIdy * fy * invz;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">float</span> c2 = -(c0 * T_source_to_target_v[0] + c1 * T_source_to_target_v[1]) *</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;               invz;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    J_I[0] = (-T_source_to_target_v[2] * c1 + T_source_to_target_v[1] * c2);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    J_I[1] = (T_source_to_target_v[2] * c0 - T_source_to_target_v[0] * c2);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    J_I[2] = (-T_source_to_target_v[1] * c0 + T_source_to_target_v[0] * c1);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    J_I[3] = (c0);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    J_I[4] = (c1);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    J_I[5] = (c2);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    r_I = diff_I;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a004a4a267c3a5aace95c9782f7933d86">  233</a></span>&#160;<a class="code" href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a004a4a267c3a5aace95c9782f7933d86">GetJacobianHybrid</a>(</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordtype">int</span> x,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordtype">int</span> y,</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> depth_outlier_trunc,</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_depth_indexer,</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_depth_indexer,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_intensity_indexer,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_intensity_indexer,</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_depth_dx_indexer,</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_depth_dy_indexer,</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_intensity_dx_indexer,</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; target_intensity_dy_indexer,</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">NDArrayIndexer</a>&amp; source_vertex_indexer,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">const</span> <a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">TransformIndexer</a>&amp; ti,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordtype">float</span>* J_I,</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordtype">float</span>* J_D,</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordtype">float</span>&amp; r_I,</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordtype">float</span>&amp; r_D) {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// sqrt 0.5, according to</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// http://redwood-data.org/indoor_lidar_rgbd/supp.pdf</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> sqrt_lambda_intensity = 0.707;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> sqrt_lambda_depth = 0.707;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> sobel_scale = 0.125;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">float</span>* source_v = source_vertex_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(x, y);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> (isnan(source_v[0])) {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Transform source points to the target camera coordinate space.</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordtype">float</span> T_source_to_target_v[3], u_tf, v_tf;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#ae92b985c3f785ee0874a9c5ea3e133ea">RigidTransform</a>(source_v[0], source_v[1], source_v[2],</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                      &amp;T_source_to_target_v[0], &amp;T_source_to_target_v[1],</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                      &amp;T_source_to_target_v[2]);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#a066896712bf067c66477f2199272f516">Project</a>(T_source_to_target_v[0], T_source_to_target_v[1],</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;               T_source_to_target_v[2], &amp;u_tf, &amp;v_tf);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">int</span> u_t = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(roundf(u_tf));</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordtype">int</span> v_t = <a class="code" href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">int</a>(roundf(v_tf));</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span> (T_source_to_target_v[2] &lt; 0 ||</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        !target_depth_indexer.InBoundary(u_t, v_t)) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">float</span> fx, fy;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    ti.<a class="code" href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#af923171300c7b857d64dbc2f96a57457">GetFocalLength</a>(&amp;fx, &amp;fy);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordtype">float</span> depth_t = *target_depth_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordtype">float</span> diff_D = depth_t - T_source_to_target_v[2];</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> (isnan(depth_t) || abs(diff_D) &gt; depth_outlier_trunc) {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordtype">float</span> dDdx = sobel_scale *</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                 (*target_depth_dx_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t));</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordtype">float</span> dDdy = sobel_scale *</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                 (*target_depth_dy_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">if</span> (isnan(dDdx) || isnan(dDdy)) {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordtype">float</span> diff_I = *target_intensity_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t) -</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                   *source_intensity_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(x, y);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">float</span> dIdx = sobel_scale *</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                 (*target_intensity_dx_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordtype">float</span> dIdy = sobel_scale *</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                 (*target_intensity_dy_indexer.GetDataPtr&lt;<span class="keywordtype">float</span>&gt;(u_t, v_t));</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordtype">float</span> invz = 1 / T_source_to_target_v[2];</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordtype">float</span> c0 = dIdx * fx * invz;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">float</span> c1 = dIdy * fy * invz;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">float</span> c2 = -(c0 * T_source_to_target_v[0] + c1 * T_source_to_target_v[1]) *</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;               invz;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordtype">float</span> d0 = dDdx * fx * invz;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordtype">float</span> d1 = dDdy * fy * invz;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">float</span> d2 = -(d0 * T_source_to_target_v[0] + d1 * T_source_to_target_v[1]) *</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;               invz;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    J_I[0] = sqrt_lambda_intensity *</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;             (-T_source_to_target_v[2] * c1 + T_source_to_target_v[1] * c2);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    J_I[1] = sqrt_lambda_intensity *</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;             (T_source_to_target_v[2] * c0 - T_source_to_target_v[0] * c2);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    J_I[2] = sqrt_lambda_intensity *</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;             (-T_source_to_target_v[1] * c0 + T_source_to_target_v[0] * c1);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    J_I[3] = sqrt_lambda_intensity * (c0);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    J_I[4] = sqrt_lambda_intensity * (c1);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    J_I[5] = sqrt_lambda_intensity * (c2);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    r_I = sqrt_lambda_intensity * diff_I;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    J_D[0] = sqrt_lambda_depth *</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;             ((-T_source_to_target_v[2] * d1 + T_source_to_target_v[1] * d2) -</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;              T_source_to_target_v[1]);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    J_D[1] = sqrt_lambda_depth *</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;             ((T_source_to_target_v[2] * d0 - T_source_to_target_v[0] * d2) +</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;              T_source_to_target_v[0]);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    J_D[2] = sqrt_lambda_depth *</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;             ((-T_source_to_target_v[1] * d0 + T_source_to_target_v[0] * d1));</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    J_D[3] = sqrt_lambda_depth * (d0);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    J_D[4] = sqrt_lambda_depth * (d1);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    J_D[5] = sqrt_lambda_depth * (d2 - 1.0f);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    r_D = sqrt_lambda_depth * diff_D;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}  <span class="comment">// namespace odometry</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}  <span class="comment">// namespace kernel</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}  <span class="comment">// namespace pipelines</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}  <span class="comment">// namespace t</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;}  <span class="comment">// namespace open3d</span></div>
<div class="ttc" id="a_c_u_d_a_utils_8h_html_a134fcda29ee61227f5883af2d33c00a1"><div class="ttname"><a href="_c_u_d_a_utils_8h.html#a134fcda29ee61227f5883af2d33c00a1">OPEN3D_HOST_DEVICE</a></div><div class="ttdeci">#define OPEN3D_HOST_DEVICE</div><div class="ttdef"><b>Definition:</b> CUDAUtils.h:44</div></div>
<div class="ttc" id="a_geometry_indexer_8h_html"><div class="ttname"><a href="_geometry_indexer_8h.html">GeometryIndexer.h</a></div></div>
<div class="ttc" id="a_geometry_macros_8h_html"><div class="ttname"><a href="_geometry_macros_8h.html">GeometryMacros.h</a></div></div>
<div class="ttc" id="a_geometry_macros_8h_html_a3f5dfe66efca77fc8992ae7ecc21d1b4"><div class="ttname"><a href="_geometry_macros_8h.html#a3f5dfe66efca77fc8992ae7ecc21d1b4">Sign</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE int Sign(int x)</div><div class="ttdef"><b>Definition:</b> GeometryMacros.h:77</div></div>
<div class="ttc" id="a_tensor_8h_html"><div class="ttname"><a href="_tensor_8h.html">Tensor.h</a></div></div>
<div class="ttc" id="aclassopen3d_1_1t_1_1geometry_1_1kernel_1_1_transform_indexer_html"><div class="ttname"><a href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t">open3d::t::geometry::kernel::TransformIndexer</a></div><div class="ttdoc">Helper class for converting coordinates/indices between 3D/3D, 3D/2D, 2D/3D.</div><div class="ttdef"><b>Definition:</b> GeometryIndexer.h:25</div></div>
<div class="ttc" id="aclassopen3d_1_1t_1_1geometry_1_1kernel_1_1_transform_indexer_html_a066896712bf067c66477f2199272f516"><div class="ttname"><a href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#a066896712bf067c66477f2199272f516">open3d::t::geometry::kernel::TransformIndexer::Project</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE void Project(float x_in, float y_in, float z_in, float *u_out, float *v_out) const</div><div class="ttdoc">Project a 3D coordinate in camera coordinate to a 2D uv coordinate.</div><div class="ttdef"><b>Definition:</b> GeometryIndexer.h:100</div></div>
<div class="ttc" id="aclassopen3d_1_1t_1_1geometry_1_1kernel_1_1_transform_indexer_html_ae92b985c3f785ee0874a9c5ea3e133ea"><div class="ttname"><a href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#ae92b985c3f785ee0874a9c5ea3e133ea">open3d::t::geometry::kernel::TransformIndexer::RigidTransform</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE void RigidTransform(float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out) const</div><div class="ttdoc">Transform a 3D coordinate in camera coordinate to world coordinate.</div><div class="ttdef"><b>Definition:</b> GeometryIndexer.h:62</div></div>
<div class="ttc" id="aclassopen3d_1_1t_1_1geometry_1_1kernel_1_1_transform_indexer_html_af923171300c7b857d64dbc2f96a57457"><div class="ttname"><a href="classopen3d_1_1t_1_1geometry_1_1kernel_1_1_t#af923171300c7b857d64dbc2f96a57457">open3d::t::geometry::kernel::TransformIndexer::GetFocalLength</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE void GetFocalLength(float *fx, float *fy) const</div><div class="ttdef"><b>Definition:</b> GeometryIndexer.h:122</div></div>
<div class="ttc" id="anamespaceopen3d_1_1io_1_1k4a__plugin_html_a56444bbf00a8b57cbf3aaef24f882123"><div class="ttname"><a href="namespaceopen3d_1_1io_1_1k4a__plugin.362.del#a56444bbf00a8b57cbf3aaef24f882123">open3d::io::k4a_plugin::int</a></div><div class="ttdeci">const char const char value recording_handle imu_sample recording_handle uint8_t size_t data_size k4a_record_configuration_t config target_format k4a_capture_t capture_handle k4a_imu_sample_t imu_sample playback_handle k4a_logging_message_cb_t void min_level device_handle k4a_imu_sample_t timeout_in_ms capture_handle capture_handle capture_handle image_handle temperature_c int</div><div class="ttdef"><b>Definition:</b> K4aPlugin.cpp:474</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1geometry_1_1kernel_html_a65bedc8c093368de9d1ec57373d2ab31"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1geometry_1_1kernel.4#a65bedc8c093368de9d1ec57373d2ab31">open3d::t::geometry::kernel::NDArrayIndexer</a></div><div class="ttdeci">TArrayIndexer&lt; int64_t &gt; NDArrayIndexer</div><div class="ttdef"><b>Definition:</b> GeometryIndexer.h:360</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry_html_a004a4a267c3a5aace95c9782f7933d86"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a004a4a267c3a5aace95c9782f7933d86">open3d::t::pipelines::kernel::odometry::GetJacobianHybrid</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE bool GetJacobianHybrid(int x, int y, const float depth_outlier_trunc, const NDArrayIndexer &amp;source_depth_indexer, const NDArrayIndexer &amp;target_depth_indexer, const NDArrayIndexer &amp;source_intensity_indexer, const NDArrayIndexer &amp;target_intensity_indexer, const NDArrayIndexer &amp;target_depth_dx_indexer, const NDArrayIndexer &amp;target_depth_dy_indexer, const NDArrayIndexer &amp;target_intensity_dx_indexer, const NDArrayIndexer &amp;target_intensity_dy_indexer, const NDArrayIndexer &amp;source_vertex_indexer, const TransformIndexer &amp;ti, float *J_I, float *J_D, float &amp;r_I, float &amp;r_D)</div><div class="ttdef"><b>Definition:</b> RGBDOdometryJacobianImpl.h:233</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry_html_a2bc1496c9aa473ba32bd8d999eaa95f0"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a2bc1496c9aa473ba32bd8d999eaa95f0">open3d::t::pipelines::kernel::odometry::HuberDeriv</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE float HuberDeriv(float r, float delta)</div><div class="ttdef"><b>Definition:</b> RGBDOdometryJacobianImpl.h:29</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry_html_a39ea756283bb118fec6dceb17f4e360a"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a39ea756283bb118fec6dceb17f4e360a">open3d::t::pipelines::kernel::odometry::GetJacobianPointToPlane</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE bool GetJacobianPointToPlane(int x, int y, const float depth_outlier_trunc, const NDArrayIndexer &amp;source_vertex_indexer, const NDArrayIndexer &amp;target_vertex_indexer, const NDArrayIndexer &amp;target_normal_indexer, const TransformIndexer &amp;ti, float *J_ij, float &amp;r)</div><div class="ttdef"><b>Definition:</b> RGBDOdometryJacobianImpl.h:106</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry_html_a96e9868640fef785e1a500f5001d7ad1"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#a96e9868640fef785e1a500f5001d7ad1">open3d::t::pipelines::kernel::odometry::GetJacobianPointToPoint</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE bool GetJacobianPointToPoint(int x, int y, const float square_dist_thr, const NDArrayIndexer &amp;source_vertex_indexer, const NDArrayIndexer &amp;target_vertex_indexer, const TransformIndexer &amp;ti, float *J_x, float *J_y, float *J_z, float &amp;rx, float &amp;ry, float &amp;rz)</div><div class="ttdef"><b>Definition:</b> RGBDOdometryJacobianImpl.h:39</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry_html_abf2fd81426920b1073a03fa06e10828e"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#abf2fd81426920b1073a03fa06e10828e">open3d::t::pipelines::kernel::odometry::GetJacobianIntensity</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE bool GetJacobianIntensity(int x, int y, const float depth_outlier_trunc, const NDArrayIndexer &amp;source_depth_indexer, const NDArrayIndexer &amp;target_depth_indexer, const NDArrayIndexer &amp;source_intensity_indexer, const NDArrayIndexer &amp;target_intensity_indexer, const NDArrayIndexer &amp;target_intensity_dx_indexer, const NDArrayIndexer &amp;target_intensity_dy_indexer, const NDArrayIndexer &amp;source_vertex_indexer, const TransformIndexer &amp;ti, float *J_I, float &amp;r_I)</div><div class="ttdef"><b>Definition:</b> RGBDOdometryJacobianImpl.h:164</div></div>
<div class="ttc" id="anamespaceopen3d_1_1t_1_1pipelines_1_1kernel_1_1odometry_html_ad300187c731390d1a8a0ded2a64954fe"><div class="ttname"><a href="namespaceopen3d_1_1t_1_1pipelines_1_1kernel_#ad300187c731390d1a8a0ded2a64954fe">open3d::t::pipelines::kernel::odometry::HuberLoss</a></div><div class="ttdeci">OPEN3D_HOST_DEVICE float HuberLoss(float r, float delta)</div><div class="ttdef"><b>Definition:</b> RGBDOdometryJacobianImpl.h:34</div></div>
<div class="ttc" id="anamespaceopen3d_html"><div class="ttname"><a href="namespaceopen3d.html">open3d</a></div><div class="ttdef"><b>Definition:</b> PinholeCameraIntrinsic.cpp:16</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/_r_g_b_d_odometry_jacobian_impl_8h_source.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:04:48 GMT -->
</html>
