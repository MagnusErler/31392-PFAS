<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1utility_1_1filesystem_1_1_c_file.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:00:49 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::utility::filesystem::CFile Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1utility.html">utility</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1utility_1_1filesystem.444">filesystem</a></li><li class="navelem"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f">CFile</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">open3d::utility::filesystem::CFile Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_file_system_8h_source.html">FileSystem.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0363c9f76c5abc76e7c93fb8c37560c9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a0363c9f76c5abc76e7c93fb8c37560c9">~CFile</a> ()</td></tr>
<tr class="memdesc:a0363c9f76c5abc76e7c93fb8c37560c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The destructor closes the file automatically.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a0363c9f76c5abc76e7c93fb8c37560c9">More...</a><br /></td></tr>
<tr class="separator:a0363c9f76c5abc76e7c93fb8c37560c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c50d255e5378d200ff89caf4a1b5b48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a2c50d255e5378d200ff89caf4a1b5b48">Open</a> (const std::string &amp;filename, const std::string &amp;mode)</td></tr>
<tr class="memdesc:a2c50d255e5378d200ff89caf4a1b5b48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a file.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a2c50d255e5378d200ff89caf4a1b5b48">More...</a><br /></td></tr>
<tr class="separator:a2c50d255e5378d200ff89caf4a1b5b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4883bb1ffea45e12462ea3f76c1205e5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a4883bb1ffea45e12462ea3f76c1205e5">GetError</a> ()</td></tr>
<tr class="memdesc:a4883bb1ffea45e12462ea3f76c1205e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last encountered error for this file.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a4883bb1ffea45e12462ea3f76c1205e5">More...</a><br /></td></tr>
<tr class="separator:a4883bb1ffea45e12462ea3f76c1205e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a447f2269a144569b5444320a62c221ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a447f2269a144569b5444320a62c221ab">Close</a> ()</td></tr>
<tr class="memdesc:a447f2269a144569b5444320a62c221ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the file.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a447f2269a144569b5444320a62c221ab">More...</a><br /></td></tr>
<tr class="separator:a447f2269a144569b5444320a62c221ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10a1405687971350137a45d2a0e63b0b"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a10a1405687971350137a45d2a0e63b0b">CurPos</a> ()</td></tr>
<tr class="memdesc:a10a1405687971350137a45d2a0e63b0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns current position in the file (ftell).  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a10a1405687971350137a45d2a0e63b0b">More...</a><br /></td></tr>
<tr class="separator:a10a1405687971350137a45d2a0e63b0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82803511b14cd4e1f7377567303a52f1"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a82803511b14cd4e1f7377567303a52f1">GetFileSize</a> ()</td></tr>
<tr class="memdesc:a82803511b14cd4e1f7377567303a52f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file size in bytes.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a82803511b14cd4e1f7377567303a52f1">More...</a><br /></td></tr>
<tr class="separator:a82803511b14cd4e1f7377567303a52f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52eb210efd0481ee091a289461decab8"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a52eb210efd0481ee091a289461decab8">GetNumLines</a> ()</td></tr>
<tr class="memdesc:a52eb210efd0481ee091a289461decab8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of lines in the file.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a52eb210efd0481ee091a289461decab8">More...</a><br /></td></tr>
<tr class="separator:a52eb210efd0481ee091a289461decab8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc92d37858e67a216fd96e0625b69388"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#acc92d37858e67a216fd96e0625b69388">ReadLine</a> ()</td></tr>
<tr class="separator:acc92d37858e67a216fd96e0625b69388"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34a1bf1719858355194114b0748cd38d"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a34a1bf1719858355194114b0748cd38d"><td class="memTemplItemLeft" align="right" valign="top">size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a34a1bf1719858355194114b0748cd38d">ReadData</a> (T *data, size_t num_elems)</td></tr>
<tr class="separator:a34a1bf1719858355194114b0748cd38d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e9e14bc7b2db4968fe631a779471743"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a8e9e14bc7b2db4968fe631a779471743">ReadData</a> (void *data, size_t elem_size, size_t num_elems)</td></tr>
<tr class="separator:a8e9e14bc7b2db4968fe631a779471743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65dc326f9364bf628f4905b406304239"><td class="memItemLeft" align="right" valign="top">FILE *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a65dc326f9364bf628f4905b406304239">GetFILE</a> ()</td></tr>
<tr class="memdesc:a65dc326f9364bf628f4905b406304239"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the underlying C FILE pointer.  <a href="classopen3d_1_1utility_1_1filesystem_1_1_c_f#a65dc326f9364bf628f4905b406304239">More...</a><br /></td></tr>
<tr class="separator:a65dc326f9364bf628f4905b406304239"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>RAII Wrapper for C FILE* Throws exceptions in situations where the caller is not usually going to have proper handling code:</p><ul>
<li>using an unopened <a class="el" href="classopen3d_1_1utility_1_1filesystem_1_1_c_f">CFile</a></li>
<li>errors and ferror from underlying calls (fclose, ftell, fseek, fread, fwrite, fgetpos, fsetpos)</li>
<li>reading a line that is too long, caller is unlikely to have proper code to handle a partial next line If you would like to handle any of these issues by not having your code throw, use try/catch (const std::exception &amp;e) { ... } </li>
</ul>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0363c9f76c5abc76e7c93fb8c37560c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0363c9f76c5abc76e7c93fb8c37560c9">&#9670;&nbsp;</a></span>~CFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::utility::filesystem::CFile::~CFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The destructor closes the file automatically. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a447f2269a144569b5444320a62c221ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a447f2269a144569b5444320a62c221ab">&#9670;&nbsp;</a></span>Close()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::utility::filesystem::CFile::Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Close the file. </p>

</div>
</div>
<a id="a10a1405687971350137a45d2a0e63b0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10a1405687971350137a45d2a0e63b0b">&#9670;&nbsp;</a></span>CurPos()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::utility::filesystem::CFile::CurPos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns current position in the file (ftell). </p>

</div>
</div>
<a id="a4883bb1ffea45e12462ea3f76c1205e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4883bb1ffea45e12462ea3f76c1205e5">&#9670;&nbsp;</a></span>GetError()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string open3d::utility::filesystem::CFile::GetError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the last encountered error for this file. </p>

</div>
</div>
<a id="a65dc326f9364bf628f4905b406304239"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65dc326f9364bf628f4905b406304239">&#9670;&nbsp;</a></span>GetFILE()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">FILE* open3d::utility::filesystem::CFile::GetFILE </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the underlying C FILE pointer. </p>

</div>
</div>
<a id="a82803511b14cd4e1f7377567303a52f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82803511b14cd4e1f7377567303a52f1">&#9670;&nbsp;</a></span>GetFileSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::utility::filesystem::CFile::GetFileSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the file size in bytes. </p>

</div>
</div>
<a id="a52eb210efd0481ee091a289461decab8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52eb210efd0481ee091a289461decab8">&#9670;&nbsp;</a></span>GetNumLines()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t open3d::utility::filesystem::CFile::GetNumLines </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of lines in the file. </p>

</div>
</div>
<a id="a2c50d255e5378d200ff89caf4a1b5b48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c50d255e5378d200ff89caf4a1b5b48">&#9670;&nbsp;</a></span>Open()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool open3d::utility::filesystem::CFile::Open </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a file. </p>

</div>
</div>
<a id="a34a1bf1719858355194114b0748cd38d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34a1bf1719858355194114b0748cd38d">&#9670;&nbsp;</a></span>ReadData() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t open3d::utility::filesystem::CFile::ReadData </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_elems</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Read data to a buffer. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>The data buffer to be written into. </td></tr>
    <tr><td class="paramname">num_elems</td><td>Number of elements to be read. The byte size of the element is determined by the size of buffer type. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8e9e14bc7b2db4968fe631a779471743"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e9e14bc7b2db4968fe631a779471743">&#9670;&nbsp;</a></span>ReadData() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t open3d::utility::filesystem::CFile::ReadData </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>elem_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_elems</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read data to a buffer. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>The data buffer to be written into. </td></tr>
    <tr><td class="paramname">elem_size</td><td>Element size in bytes. </td></tr>
    <tr><td class="paramname">num_elems</td><td>Number of elements to read. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acc92d37858e67a216fd96e0625b69388"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc92d37858e67a216fd96e0625b69388">&#9670;&nbsp;</a></span>ReadLine()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * open3d::utility::filesystem::CFile::ReadLine </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Throws if we hit buffer maximum. In most cases, calling code is only capable of processing a complete line, if it receives a partial line it will probably fail and it is very likely to fail/corrupt on the next call that receives the remainder of the line. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/utility/<a class="el" href="_file_system_8h_source.html">FileSystem.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/utility/<a class="el" href="_file_system_8cpp.html">FileSystem.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1utility_1_1filesystem_1_1_c_file.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:00:49 GMT -->
</html>
