<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1pipelines_1_1slam_1_1_model.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:02:18 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::t::pipelines::slam::Model Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t.html">t</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines.33e.delaye">pipelines</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1slam.49">slam</a></li><li class="navelem"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo">Model</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">open3d::t::pipelines::slam::Model Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="t_2pipelines_2slam_2_model_8h_source.923.del">Model.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aca2c621e4855b93884c9c58ed816e051"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#aca2c621e4855b93884c9c58ed816e051">Model</a> ()</td></tr>
<tr class="separator:aca2c621e4855b93884c9c58ed816e051"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a971c0c4bba954cd8e483a81bf940c40c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a971c0c4bba954cd8e483a81bf940c40c">Model</a> (float voxel_size, int block_resolution=16, int block_count=1000, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;T_init=<a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4, <a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>, <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;)), const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;device=<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CUDA:0&quot;))</td></tr>
<tr class="separator:a971c0c4bba954cd8e483a81bf940c40c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a895721cc9daa0d5977028f9613c7c7f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a895721cc9daa0d5977028f9613c7c7f2">GetCurrentFramePose</a> () const</td></tr>
<tr class="separator:a895721cc9daa0d5977028f9613c7c7f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80cf47ad3c8546ed2951fd32eaf046cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a80cf47ad3c8546ed2951fd32eaf046cb">UpdateFramePose</a> (int frame_id, const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;T_frame_to_world)</td></tr>
<tr class="separator:a80cf47ad3c8546ed2951fd32eaf046cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c7d569edb857215667d5e99395d1df5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a5c7d569edb857215667d5e99395d1df5">SynthesizeModelFrame</a> (<a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;raycast_frame, float depth_scale=1000.0, float depth_min=0.1, float depth_max=3.0, float trunc_voxel_multiplier=8.0, bool enable_color=true, float weight_threshold=-1.0)</td></tr>
<tr class="separator:a5c7d569edb857215667d5e99395d1df5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79f6e6bcab42d1a0969aa0a8ab014d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">odometry::OdometryResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#af79f6e6bcab42d1a0969aa0a8ab014d1">TrackFrameToModel</a> (const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;input_frame, const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;raycast_frame, float depth_scale=1000.0, float depth_max=3.0, float depth_diff=0.07, <a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0">odometry::Method</a> method=<a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0a621eeaff7db1283a0db27b4e7233a8ed">odometry::Method::PointToPlane</a>, const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">odometry::OdometryConvergenceCriteria</a> &gt; &amp;criteria={6, 3, 1})</td></tr>
<tr class="separator:af79f6e6bcab42d1a0969aa0a8ab014d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20ee56723d6adab11446ab34506a545e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a20ee56723d6adab11446ab34506a545e">Integrate</a> (const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;input_frame, float depth_scale=1000.0, float depth_max=3.0, float trunc_voxel_multiplier=8.0f)</td></tr>
<tr class="separator:a20ee56723d6adab11446ab34506a545e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdb23a99a1859d73be463054acab998e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">t::geometry::PointCloud</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#afdb23a99a1859d73be463054acab998e">ExtractPointCloud</a> (float weight_threshold=3.0f, int estimated_number=-1)</td></tr>
<tr class="separator:afdb23a99a1859d73be463054acab998e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a376748d2d75e9a83b9352c7dc661d937"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">t::geometry::TriangleMesh</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a376748d2d75e9a83b9352c7dc661d937">ExtractTriangleMesh</a> (float weight_threshold=3.0f, int estimated_number=-1)</td></tr>
<tr class="separator:a376748d2d75e9a83b9352c7dc661d937"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c0c5deee32fa7c6d73e9123cf8272fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_hash_map.html">core::HashMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a9c0c5deee32fa7c6d73e9123cf8272fd">GetHashMap</a> ()</td></tr>
<tr class="memdesc:a9c0c5deee32fa7c6d73e9123cf8272fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get block hashmap int the VoxelBlockGrid.  <a href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a9c0c5deee32fa7c6d73e9123cf8272fd">More...</a><br /></td></tr>
<tr class="separator:a9c0c5deee32fa7c6d73e9123cf8272fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a7c6a3e302160fa0a98ea6a2e38d26945"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">t::geometry::VoxelBlockGrid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a7c6a3e302160fa0a98ea6a2e38d26945">voxel_grid_</a></td></tr>
<tr class="memdesc:a7c6a3e302160fa0a98ea6a2e38d26945"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maintained volumetric map.  <a href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a7c6a3e302160fa0a98ea6a2e38d26945">More...</a><br /></td></tr>
<tr class="separator:a7c6a3e302160fa0a98ea6a2e38d26945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ad2a84d9b6b6a5a93130c6c2baca72d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a1ad2a84d9b6b6a5a93130c6c2baca72d">frustum_block_coords_</a></td></tr>
<tr class="memdesc:a1ad2a84d9b6b6a5a93130c6c2baca72d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Active block coordinates from prior integration.  <a href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a1ad2a84d9b6b6a5a93130c6c2baca72d">More...</a><br /></td></tr>
<tr class="separator:a1ad2a84d9b6b6a5a93130c6c2baca72d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0463e5f7580e562a67e6f27bdd43aa9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#ae0463e5f7580e562a67e6f27bdd43aa9">T_frame_to_world_</a></td></tr>
<tr class="separator:ae0463e5f7580e562a67e6f27bdd43aa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b589194de04b6536051f8322d5a2f7c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo#a8b589194de04b6536051f8322d5a2f7c">frame_id_</a> = -1</td></tr>
<tr class="separator:a8b589194de04b6536051f8322d5a2f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_mo">Model</a> class maintaining a volumetric grid and the current active frame's pose. Wraps functionalities including integration, ray casting, and surface reconstruction. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aca2c621e4855b93884c9c58ed816e051"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca2c621e4855b93884c9c58ed816e051">&#9670;&nbsp;</a></span>Model() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::pipelines::slam::Model::Model </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a971c0c4bba954cd8e483a81bf940c40c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a971c0c4bba954cd8e483a81bf940c40c">&#9670;&nbsp;</a></span>Model() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">open3d::t::pipelines::slam::Model::Model </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>voxel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>block_resolution</em> = <code>16</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>block_count</em> = <code>1000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>T_init</em> = <code><a class="el" href="classopen3d_1_1core_1_1_tensor.html#ac6bf87480ab991b8efd320e8532c2808">core::Tensor::Eye</a>(4,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a class="el" href="namespaceopen3d_1_1core.html#ab5dcaa638dcbeb2d2ce60b043e8dfa27">core::Float64</a>,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CPU:0&quot;))</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a> &amp;&#160;</td>
          <td class="paramname"><em>device</em> = <code><a class="el" href="classopen3d_1_1core_1_1_device.html">core::Device</a>(&quot;CUDA:0&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="afdb23a99a1859d73be463054acab998e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdb23a99a1859d73be463054acab998e">&#9670;&nbsp;</a></span>ExtractPointCloud()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">t::geometry::PointCloud</a> open3d::t::pipelines::slam::Model::ExtractPointCloud </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight_threshold</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>estimated_number</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extract surface point cloud for visualization / model saving. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">weight_threshold</td><td>Weight threshold of the TSDF voxels to prune noise. </td></tr>
    <tr><td class="paramname">estimated_number</td><td>Estimation of the point cloud size, helpful for real-time visualization. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Extracted point cloud. </dd></dl>

</div>
</div>
<a id="a376748d2d75e9a83b9352c7dc661d937"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a376748d2d75e9a83b9352c7dc661d937">&#9670;&nbsp;</a></span>ExtractTriangleMesh()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_triangle_me">t::geometry::TriangleMesh</a> open3d::t::pipelines::slam::Model::ExtractTriangleMesh </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight_threshold</em> = <code>3.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>estimated_number</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extract surface triangle mesh for visualization / model saving. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">weight_threshold</td><td>Weight threshold of the TSDF voxels to prune noise. </td></tr>
    <tr><td class="paramname">estimated_number</td><td>Estimation of the point cloud size, helpful for real-time visualization. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Extracted point cloud. </dd></dl>

</div>
</div>
<a id="a895721cc9daa0d5977028f9613c7c7f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a895721cc9daa0d5977028f9613c7c7f2">&#9670;&nbsp;</a></span>GetCurrentFramePose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::slam::Model::GetCurrentFramePose </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9c0c5deee32fa7c6d73e9123cf8272fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c0c5deee32fa7c6d73e9123cf8272fd">&#9670;&nbsp;</a></span>GetHashMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_hash_map.html">core::HashMap</a> open3d::t::pipelines::slam::Model::GetHashMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get block hashmap int the VoxelBlockGrid. </p>

</div>
</div>
<a id="a20ee56723d6adab11446ab34506a545e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20ee56723d6adab11446ab34506a545e">&#9670;&nbsp;</a></span>Integrate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::slam::Model::Integrate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;&#160;</td>
          <td class="paramname"><em>input_frame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Integrate RGBD frame into the volumetric voxel grid. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input_frame</td><td>Input RGBD frame. </td></tr>
    <tr><td class="paramname">depth_scale</td><td>Scale factor to convert raw data into meter metric. </td></tr>
    <tr><td class="paramname">depth_max</td><td>Depth truncation to discard points far away from the camera. </td></tr>
    <tr><td class="paramname">trunc_voxel_multiplier</td><td>Truncation distance multiplier in voxel size for signed distance. For instance, &ndash;trunc_voxel_multiplier=8 with &ndash;voxel_size=0.006(m) creates a truncation distance of 0.048(m). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5c7d569edb857215667d5e99395d1df5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c7d569edb857215667d5e99395d1df5">&#9670;&nbsp;</a></span>SynthesizeModelFrame()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::slam::Model::SynthesizeModelFrame </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;&#160;</td>
          <td class="paramname"><em>raycast_frame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_min</em> = <code>0.1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>trunc_voxel_multiplier</em> = <code>8.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable_color</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>weight_threshold</em> = <code>-1.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Apply ray casting to obtain a synthesized model frame at the down sampled resolution. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">raycast_frame</td><td>RGBD frame to fill the raycasting results. </td></tr>
    <tr><td class="paramname">depth_scale</td><td>Scale factor to convert raw data into meter metric. </td></tr>
    <tr><td class="paramname">depth_min</td><td>Depth where ray casting starts from. </td></tr>
    <tr><td class="paramname">depth_max</td><td>Depth where ray casting stops at. </td></tr>
    <tr><td class="paramname">trunc_voxel_multiplier</td><td>Truncation distance multiplier in voxel size for signed distance. For instance, &ndash;trunc_voxel_multiplier=8 with &ndash;voxel_size=0.006(m) creates a truncation distance of 0.048(m). </td></tr>
    <tr><td class="paramname">enable_color</td><td>Enable color in the raycasting results. </td></tr>
    <tr><td class="paramname">weight_threshold</td><td>Weight threshold of the TSDF voxels to prune noise. Use -1 to apply default logic: min(frame_id_ * 1.0f, 3.0f). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af79f6e6bcab42d1a0969aa0a8ab014d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af79f6e6bcab42d1a0969aa0a8ab014d1">&#9670;&nbsp;</a></span>TrackFrameToModel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_-2">odometry::OdometryResult</a> open3d::t::pipelines::slam::Model::TrackFrameToModel </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;&#160;</td>
          <td class="paramname"><em>input_frame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1slam_1_1_fr">Frame</a> &amp;&#160;</td>
          <td class="paramname"><em>raycast_frame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_scale</em> = <code>1000.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_max</em> = <code>3.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>depth_diff</em> = <code>0.07</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0">odometry::Method</a>&#160;</td>
          <td class="paramname"><em>method</em> = <code><a class="el" href="namespaceopen3d_1_1t_1_1pipelines_1_1odometr#a26a3b4d96a12f40982dd6a5babe32fe0a621eeaff7db1283a0db27b4e7233a8ed">odometry::Method::PointToPlane</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classopen3d_1_1t_1_1pipelines_1_1odometry_1_">odometry::OdometryConvergenceCriteria</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>criteria</em> = <code>{6,&#160;3,&#160;1}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Track using depth odometry. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input_frame</td><td>Input RGBD frame. </td></tr>
    <tr><td class="paramname">raycast_frame</td><td>RGBD frame generated by raycasting. </td></tr>
    <tr><td class="paramname">depth_scale</td><td>Scale factor to convert raw data into meter metric. </td></tr>
    <tr><td class="paramname">depth_max</td><td>Depth truncation to discard points far away from the camera </td></tr>
    <tr><td class="paramname">method</td><td>Method used to apply RGBD odometry. </td></tr>
    <tr><td class="paramname">criteria</td><td>Criteria used to define and terminate iterations. In multiscale odometry the order is from coarse to fine. Inputting a vector of iterations by default triggers the implicit conversion. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a80cf47ad3c8546ed2951fd32eaf046cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80cf47ad3c8546ed2951fd32eaf046cb">&#9670;&nbsp;</a></span>UpdateFramePose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void open3d::t::pipelines::slam::Model::UpdateFramePose </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frame_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> &amp;&#160;</td>
          <td class="paramname"><em>T_frame_to_world</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a8b589194de04b6536051f8322d5a2f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b589194de04b6536051f8322d5a2f7c">&#9670;&nbsp;</a></span>frame_id_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int open3d::t::pipelines::slam::Model::frame_id_ = -1</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1ad2a84d9b6b6a5a93130c6c2baca72d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ad2a84d9b6b6a5a93130c6c2baca72d">&#9670;&nbsp;</a></span>frustum_block_coords_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::slam::Model::frustum_block_coords_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Active block coordinates from prior integration. </p>

</div>
</div>
<a id="ae0463e5f7580e562a67e6f27bdd43aa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0463e5f7580e562a67e6f27bdd43aa9">&#9670;&nbsp;</a></span>T_frame_to_world_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1core_1_1_tensor.html">core::Tensor</a> open3d::t::pipelines::slam::Model::T_frame_to_world_</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>T_frame_to_model, maintained tracking state in a (4, 4), Float64 Tensor on CPU. </p>

</div>
</div>
<a id="a7c6a3e302160fa0a98ea6a2e38d26945"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c6a3e302160fa0a98ea6a2e38d26945">&#9670;&nbsp;</a></span>voxel_grid_</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1t_1_1geometry_1_1_voxel_block">t::geometry::VoxelBlockGrid</a> open3d::t::pipelines::slam::Model::voxel_grid_</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Maintained volumetric map. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/pipelines/slam/<a class="el" href="t_2pipelines_2slam_2_model_8h_source.923.del">Model.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/t/pipelines/slam/<a class="el" href="_model_8cpp.html">Model.cpp (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1t_1_1pipelines_1_1slam_1_1_model.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:02:18 GMT -->
</html>
