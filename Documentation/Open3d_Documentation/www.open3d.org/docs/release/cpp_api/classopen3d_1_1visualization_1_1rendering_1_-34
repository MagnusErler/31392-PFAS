<!-- HTML header for doxygen 1.8.20-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1rendering_1_1_scene.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:01:46 GMT -->
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open3D (C++ API): open3d::visualization::rendering::Scene Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.html", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="../../../../cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-3TQPKGV6Z3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-3TQPKGV6Z3');
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="open3d_logo.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open3D (C++ API)
   &#160;<span id="projectnumber">0.17.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.html','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceopen3d.html">open3d</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization.html">visualization</a></li><li class="navelem"><a class="el" href="namespaceopen3d_1_1visualization_1_1renderin">rendering</a></li><li class="navelem"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">Scene</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">open3d::visualization::rendering::Scene Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_scene_8h_source.html">Scene.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for open3d::visualization::rendering::Scene:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classopen3d_1_1visualization_1_1rendering_1_-62" usemap="#open3d::visualization::rendering::Scene_map" alt=""/>
  <map id="open3d::visualization::rendering::Scene_map" name="open3d::visualization::rendering::Scene_map">
<area href="classopen3d_1_1visualization_1_1rendering_1_-22" alt="open3d::visualization::rendering::FilamentScene" shape="rect" coords="0,56,279,80"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a387adee0ccffd4754260c6809d03f137"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137">GroundPlane</a> { <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137a27db3b98d01e664c17a6620b222c6469">XZ</a>
, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137a74c53bcd3dcb2bb79993b2fec37d362a">XY</a>
, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137affa4ba973372c3650fd0881abeca6512">YZ</a>
 }</td></tr>
<tr class="separator:a387adee0ccffd4754260c6809d03f137"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb7ad66c42d322f2fee41424bd42ff95"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> = Eigen::Transform&lt; float, 3, Eigen::Affine &gt;</td></tr>
<tr class="separator:adb7ad66c42d322f2fee41424bd42ff95"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0e787e84299790c1d8d7a8bc182406f6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a0e787e84299790c1d8d7a8bc182406f6">Scene</a> (<a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">Renderer</a> &amp;renderer)</td></tr>
<tr class="separator:a0e787e84299790c1d8d7a8bc182406f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e3f675984689e8cb5a9f465703d3697"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a3e3f675984689e8cb5a9f465703d3697">~Scene</a> ()=default</td></tr>
<tr class="separator:a3e3f675984689e8cb5a9f465703d3697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fb32ffe24526d76b1ca558eee1683dc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">Scene</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a4fb32ffe24526d76b1ca558eee1683dc">Copy</a> ()=0</td></tr>
<tr class="separator:a4fb32ffe24526d76b1ca558eee1683dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d04c1051015b6e0f56c38cc1e662226"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a7d04c1051015b6e0f56c38cc1e662226">AddView</a> (std::int32_t x, std::int32_t y, std::uint32_t w, std::uint32_t h)=0</td></tr>
<tr class="separator:a7d04c1051015b6e0f56c38cc1e662226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9bfe7e2ae92efa67f5e40b9602917b8"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-35">View</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ad9bfe7e2ae92efa67f5e40b9602917b8">GetView</a> (const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;view_id) const =0</td></tr>
<tr class="separator:ad9bfe7e2ae92efa67f5e40b9602917b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dc3d9c41f09143d67ae0939f69e9451"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a5dc3d9c41f09143d67ae0939f69e9451">SetViewActive</a> (const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;view_id, bool is_active)=0</td></tr>
<tr class="separator:a5dc3d9c41f09143d67ae0939f69e9451"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12dd4ff334678c0ed6206e0a3da52d52"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a12dd4ff334678c0ed6206e0a3da52d52">SetRenderOnce</a> (const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;view_id)=0</td></tr>
<tr class="separator:a12dd4ff334678c0ed6206e0a3da52d52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2aec6ebde41d309fbbd99cbadefbce6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ab2aec6ebde41d309fbbd99cbadefbce6">RemoveView</a> (const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;view_id)=0</td></tr>
<tr class="separator:ab2aec6ebde41d309fbbd99cbadefbce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45bbd5aa78dbf835d964689d1d78a6fb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a45bbd5aa78dbf835d964689d1d78a6fb">AddCamera</a> (const std::string &amp;camera_name, std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-3">Camera</a> &gt; cam)=0</td></tr>
<tr class="separator:a45bbd5aa78dbf835d964689d1d78a6fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ab903326db319d368b207419da014a1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a9ab903326db319d368b207419da014a1">RemoveCamera</a> (const std::string &amp;camera_name)=0</td></tr>
<tr class="separator:a9ab903326db319d368b207419da014a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac48b8ddea01f848d153fc1585cd9378a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ac48b8ddea01f848d153fc1585cd9378a">SetActiveCamera</a> (const std::string &amp;camera_name)=0</td></tr>
<tr class="separator:ac48b8ddea01f848d153fc1585cd9378a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af497c956cbe5d796453949a67c3cd525"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#af497c956cbe5d796453949a67c3cd525">AddGeometry</a> (const std::string &amp;object_name, const <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">geometry::Geometry3D</a> &amp;geometry, const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;material, const std::string &amp;downsampled_name=&quot;&quot;, size_t downsample_threshold=SIZE_MAX)=0</td></tr>
<tr class="separator:af497c956cbe5d796453949a67c3cd525"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b3eafda6f4b9b3ec2fc0ecd1d5a8731"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a1b3eafda6f4b9b3ec2fc0ecd1d5a8731">AddGeometry</a> (const std::string &amp;object_name, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">t::geometry::Geometry</a> &amp;geometry, const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;material, const std::string &amp;downsampled_name=&quot;&quot;, size_t downsample_threshold=SIZE_MAX)=0</td></tr>
<tr class="separator:a1b3eafda6f4b9b3ec2fc0ecd1d5a8731"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a835921969e168166cdcad893518ab9f4"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a835921969e168166cdcad893518ab9f4">AddGeometry</a> (const std::string &amp;object_name, const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1">TriangleMeshModel</a> &amp;model)=0</td></tr>
<tr class="separator:a835921969e168166cdcad893518ab9f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a513b655f49db5b2919a766a189b99705"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a513b655f49db5b2919a766a189b99705">HasGeometry</a> (const std::string &amp;object_name) const =0</td></tr>
<tr class="separator:a513b655f49db5b2919a766a189b99705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c40bafd10214203fab585059d373fea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a3c40bafd10214203fab585059d373fea">UpdateGeometry</a> (const std::string &amp;object_name, const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">t::geometry::PointCloud</a> &amp;point_cloud, uint32_t update_flags)=0</td></tr>
<tr class="separator:a3c40bafd10214203fab585059d373fea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb35b37ce02617e5a2edbbccda79c04"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a6bb35b37ce02617e5a2edbbccda79c04">RemoveGeometry</a> (const std::string &amp;object_name)=0</td></tr>
<tr class="separator:a6bb35b37ce02617e5a2edbbccda79c04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a823d9119a507091b9f1c93b68ea756f0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a823d9119a507091b9f1c93b68ea756f0">ShowGeometry</a> (const std::string &amp;object_name, bool show)=0</td></tr>
<tr class="separator:a823d9119a507091b9f1c93b68ea756f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a231ca52a8c1043ff41df64164a97f688"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a231ca52a8c1043ff41df64164a97f688">GeometryIsVisible</a> (const std::string &amp;object_name)=0</td></tr>
<tr class="separator:a231ca52a8c1043ff41df64164a97f688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55ce453aca254f9f4d0f830e72c03ebb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a55ce453aca254f9f4d0f830e72c03ebb">OverrideMaterial</a> (const std::string &amp;object_name, const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;material)=0</td></tr>
<tr class="separator:a55ce453aca254f9f4d0f830e72c03ebb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04a6aa3667406b3a722d2450d0cb713b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a04a6aa3667406b3a722d2450d0cb713b">GeometryShadows</a> (const std::string &amp;object_name, bool cast_shadows, bool receive_shadows)=0</td></tr>
<tr class="separator:a04a6aa3667406b3a722d2450d0cb713b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a025b50e1011754d04b80e4edd9b8133b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a025b50e1011754d04b80e4edd9b8133b">SetGeometryCulling</a> (const std::string &amp;object_name, bool enable)=0</td></tr>
<tr class="separator:a025b50e1011754d04b80e4edd9b8133b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a763d9b603f4100c51a39e568ed50175d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a763d9b603f4100c51a39e568ed50175d">SetGeometryPriority</a> (const std::string &amp;object_name, uint8_t priority)=0</td></tr>
<tr class="separator:a763d9b603f4100c51a39e568ed50175d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b63667d3e4d019f3726c209101d2722"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a0b63667d3e4d019f3726c209101d2722">QueryGeometry</a> (std::vector&lt; std::string &gt; &amp;geometry)=0</td></tr>
<tr class="separator:a0b63667d3e4d019f3726c209101d2722"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0430ba977fe40e67e7758f68af5f4de"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ac0430ba977fe40e67e7758f68af5f4de">SetGeometryTransform</a> (const std::string &amp;object_name, const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> &amp;transform)=0</td></tr>
<tr class="separator:ac0430ba977fe40e67e7758f68af5f4de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a066d14b371a5bc122abd5dd9a900d496"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a066d14b371a5bc122abd5dd9a900d496">GetGeometryTransform</a> (const std::string &amp;object_name)=0</td></tr>
<tr class="separator:a066d14b371a5bc122abd5dd9a900d496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a933c88be0683411c887953cd9e80a243"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">geometry::AxisAlignedBoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a933c88be0683411c887953cd9e80a243">GetGeometryBoundingBox</a> (const std::string &amp;object_name)=0</td></tr>
<tr class="separator:a933c88be0683411c887953cd9e80a243"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bcfe375f0384afa072ed6a0a42efd45"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a7bcfe375f0384afa072ed6a0a42efd45">OverrideMaterialAll</a> (const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;material, bool shader_only=true)=0</td></tr>
<tr class="separator:a7bcfe375f0384afa072ed6a0a42efd45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acff08211012a0d93c7e41e395ae9cc71"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#acff08211012a0d93c7e41e395ae9cc71">AddPointLight</a> (const std::string &amp;light_name, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#ad0325471d482a632d8854fcc0614b217">position</a>, float intensity, float falloff, bool cast_shadows)=0</td></tr>
<tr class="separator:acff08211012a0d93c7e41e395ae9cc71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0d56de781816ee9277373b23b5f5c55"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ad0d56de781816ee9277373b23b5f5c55">AddSpotLight</a> (const std::string &amp;light_name, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#ad0325471d482a632d8854fcc0614b217">position</a>, const Eigen::Vector3f &amp;direction, float intensity, float falloff, float inner_cone_angle, float outer_cone_angle, bool cast_shadows)=0</td></tr>
<tr class="separator:ad0d56de781816ee9277373b23b5f5c55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48cf8bf304b1cfc30efb5908d4fa453c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a48cf8bf304b1cfc30efb5908d4fa453c">AddDirectionalLight</a> (const std::string &amp;light_name, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, const Eigen::Vector3f &amp;direction, float intensity, bool cast_shadows)=0</td></tr>
<tr class="separator:a48cf8bf304b1cfc30efb5908d4fa453c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dec9539ad84ec4083acd81912bb2087"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-5">Light</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a4dec9539ad84ec4083acd81912bb2087">GetLight</a> (const std::string &amp;light_name)=0</td></tr>
<tr class="separator:a4dec9539ad84ec4083acd81912bb2087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9047e7f473c9f8806c097aeefae4417a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a9047e7f473c9f8806c097aeefae4417a">RemoveLight</a> (const std::string &amp;light_name)=0</td></tr>
<tr class="separator:a9047e7f473c9f8806c097aeefae4417a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d6b5d6ff2aa5ba8bcb98f7b46510d20"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a6d6b5d6ff2aa5ba8bcb98f7b46510d20">UpdateLight</a> (const std::string &amp;light_name, const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-5">Light</a> &amp;light)=0</td></tr>
<tr class="separator:a6d6b5d6ff2aa5ba8bcb98f7b46510d20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d34915ac9bcf9d72c72e2d833ad8522"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a9d34915ac9bcf9d72c72e2d833ad8522">UpdateLightColor</a> (const std::string &amp;light_name, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>)=0</td></tr>
<tr class="separator:a9d34915ac9bcf9d72c72e2d833ad8522"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a160abb6b06d67b95e850c5cf394bbf47"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a160abb6b06d67b95e850c5cf394bbf47">UpdateLightPosition</a> (const std::string &amp;light_name, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#ad0325471d482a632d8854fcc0614b217">position</a>)=0</td></tr>
<tr class="separator:a160abb6b06d67b95e850c5cf394bbf47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae830f204ec744c4db12792fd1bf77d94"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ae830f204ec744c4db12792fd1bf77d94">UpdateLightDirection</a> (const std::string &amp;light_name, const Eigen::Vector3f &amp;direction)=0</td></tr>
<tr class="separator:ae830f204ec744c4db12792fd1bf77d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60ae72ae679380597f15627f65342bc1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a60ae72ae679380597f15627f65342bc1">UpdateLightIntensity</a> (const std::string &amp;light_name, float intensity)=0</td></tr>
<tr class="separator:a60ae72ae679380597f15627f65342bc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad36a31aebedb299c00fa2197860a9190"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ad36a31aebedb299c00fa2197860a9190">UpdateLightFalloff</a> (const std::string &amp;light_name, float falloff)=0</td></tr>
<tr class="separator:ad36a31aebedb299c00fa2197860a9190"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09005a631417d7ae9e2112b6f1809ece"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a09005a631417d7ae9e2112b6f1809ece">UpdateLightConeAngles</a> (const std::string &amp;light_name, float inner_cone_angle, float outer_cone_angle)=0</td></tr>
<tr class="separator:a09005a631417d7ae9e2112b6f1809ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8088a7f16134d522e05227399245b43b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a8088a7f16134d522e05227399245b43b">EnableLightShadow</a> (const std::string &amp;light_name, bool cast_shadows)=0</td></tr>
<tr class="separator:a8088a7f16134d522e05227399245b43b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef74a47fdc07e55e8222f347fddca864"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#aef74a47fdc07e55e8222f347fddca864">SetSunLight</a> (const Eigen::Vector3f &amp;direction, const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, float intensity)=0</td></tr>
<tr class="separator:aef74a47fdc07e55e8222f347fddca864"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaa60dada2525f9bc65bbade39f5babc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adaa60dada2525f9bc65bbade39f5babc">EnableSunLight</a> (bool enable)=0</td></tr>
<tr class="separator:adaa60dada2525f9bc65bbade39f5babc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46005f4c9ec27448e35ebe2f2c9c38d7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a46005f4c9ec27448e35ebe2f2c9c38d7">EnableSunLightShadows</a> (bool enable)=0</td></tr>
<tr class="separator:a46005f4c9ec27448e35ebe2f2c9c38d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b2a05b3d8055f0b2c46305aae8730fb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a7b2a05b3d8055f0b2c46305aae8730fb">SetSunLightColor</a> (const Eigen::Vector3f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>)=0</td></tr>
<tr class="separator:a7b2a05b3d8055f0b2c46305aae8730fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a340a46efe0647d2e50f0c3e8bf76594c"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3f&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a340a46efe0647d2e50f0c3e8bf76594c">GetSunLightColor</a> ()=0</td></tr>
<tr class="separator:a340a46efe0647d2e50f0c3e8bf76594c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8c8db1e5084ec20c3d9ecc2d495f33"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a4c8c8db1e5084ec20c3d9ecc2d495f33">SetSunLightIntensity</a> (float intensity)=0</td></tr>
<tr class="separator:a4c8c8db1e5084ec20c3d9ecc2d495f33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acadafd53afc774785e31ac8e09bc6cad"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#acadafd53afc774785e31ac8e09bc6cad">GetSunLightIntensity</a> ()=0</td></tr>
<tr class="separator:acadafd53afc774785e31ac8e09bc6cad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12fcd7089776910e5be9b40b5be0a0a3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a12fcd7089776910e5be9b40b5be0a0a3">SetSunLightDirection</a> (const Eigen::Vector3f &amp;direction)=0</td></tr>
<tr class="separator:a12fcd7089776910e5be9b40b5be0a0a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0be4aa4be53ff4cc75205d85e8a6735"><td class="memItemLeft" align="right" valign="top">virtual Eigen::Vector3f&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#af0be4aa4be53ff4cc75205d85e8a6735">GetSunLightDirection</a> ()=0</td></tr>
<tr class="separator:af0be4aa4be53ff4cc75205d85e8a6735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f332bc4dcf627dc1be584ff9c97c22c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a3f332bc4dcf627dc1be584ff9c97c22c">SetSunAngularRadius</a> (float radius)=0</td></tr>
<tr class="separator:a3f332bc4dcf627dc1be584ff9c97c22c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a297fc8b218f49ebfccc0ebf99fd4932a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a297fc8b218f49ebfccc0ebf99fd4932a">SetSunHaloSize</a> (float <a class="el" href="io_2file__format_2_file_p_c_d_8cpp.375.delay#a439227feff9d7f55384e8780cfc2eb82">size</a>)=0</td></tr>
<tr class="separator:a297fc8b218f49ebfccc0ebf99fd4932a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83207341b69f53b6b59f07a3f91dc3a7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a83207341b69f53b6b59f07a3f91dc3a7">SetSunHaloFalloff</a> (float falloff)=0</td></tr>
<tr class="separator:a83207341b69f53b6b59f07a3f91dc3a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a5fa7bff59bfea2def97917eac557b0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a0a5fa7bff59bfea2def97917eac557b0">SetIndirectLight</a> (const std::string &amp;ibl_name)=0</td></tr>
<tr class="separator:a0a5fa7bff59bfea2def97917eac557b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14374edc8787d135bfa0f4da91cf0c62"><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a14374edc8787d135bfa0f4da91cf0c62">GetIndirectLight</a> ()=0</td></tr>
<tr class="separator:a14374edc8787d135bfa0f4da91cf0c62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad173e5ecfef534e5736b33b3b5e0f7ea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ad173e5ecfef534e5736b33b3b5e0f7ea">EnableIndirectLight</a> (bool enable)=0</td></tr>
<tr class="separator:ad173e5ecfef534e5736b33b3b5e0f7ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a5122fbdde98c85ec017d0a77b8e60"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a15a5122fbdde98c85ec017d0a77b8e60">SetIndirectLightIntensity</a> (float intensity)=0</td></tr>
<tr class="separator:a15a5122fbdde98c85ec017d0a77b8e60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf8ec1c46cb6cce2fd7bb68eb3ce0556"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#abf8ec1c46cb6cce2fd7bb68eb3ce0556">GetIndirectLightIntensity</a> ()=0</td></tr>
<tr class="separator:abf8ec1c46cb6cce2fd7bb68eb3ce0556"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91c5893d8092d0e7ad1dd67c2c1e695b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a91c5893d8092d0e7ad1dd67c2c1e695b">SetIndirectLightRotation</a> (const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> &amp;rotation)=0</td></tr>
<tr class="separator:a91c5893d8092d0e7ad1dd67c2c1e695b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a999523e3398d266496a1fb232a1668eb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a999523e3398d266496a1fb232a1668eb">GetIndirectLightRotation</a> ()=0</td></tr>
<tr class="separator:a999523e3398d266496a1fb232a1668eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae39a2d77f5c72f0ec880eaaba2b2e465"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ae39a2d77f5c72f0ec880eaaba2b2e465">ShowSkybox</a> (bool show)=0</td></tr>
<tr class="separator:ae39a2d77f5c72f0ec880eaaba2b2e465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaf90ce87125e65f2cc3555d7f6bb2a0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#aeaf90ce87125e65f2cc3555d7f6bb2a0">GetSkyboxVisible</a> () const =0</td></tr>
<tr class="separator:aeaf90ce87125e65f2cc3555d7f6bb2a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66b12293e2fca890fe0522dfa69c4b00"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a66b12293e2fca890fe0522dfa69c4b00">SetBackground</a> (const Eigen::Vector4f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>, const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt; <a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>=nullptr)=0</td></tr>
<tr class="separator:a66b12293e2fca890fe0522dfa69c4b00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a606234ad6fbbf85415ffe13117089c67"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a606234ad6fbbf85415ffe13117089c67">SetBackground</a> (<a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#abe77f5a7fbacbb64e93059aa27873e11">TextureHandle</a> <a class="el" href="_filament_renderer_8cpp.html#a60b0c69b08810766e366c4b90031cd0d">image</a>)=0</td></tr>
<tr class="separator:a606234ad6fbbf85415ffe13117089c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c131c7c5a3bfa8d11146c991ed747e1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a8c131c7c5a3bfa8d11146c991ed747e1">EnableGroundPlane</a> (bool enable, <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137">GroundPlane</a> plane)=0</td></tr>
<tr class="separator:a8c131c7c5a3bfa8d11146c991ed747e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a887a8758f8acd1666742af59ce0e6ce2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a887a8758f8acd1666742af59ce0e6ce2">SetGroundPlaneColor</a> (const Eigen::Vector4f &amp;<a class="el" href="_triangle_mesh_buffers_8cpp.html#aa332976d803be75beb81e81af320bfcb">color</a>)=0</td></tr>
<tr class="separator:a887a8758f8acd1666742af59ce0e6ce2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69be6c64b799a24d9bbb8597e690c2d2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a69be6c64b799a24d9bbb8597e690c2d2">RenderToImage</a> (std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;)&gt; <a class="el" href="_filament_renderer_8cpp.html#a7a0a25a91d8a936306270fd09f1a64a9">callback</a>)=0</td></tr>
<tr class="memdesc:a69be6c64b799a24d9bbb8597e690c2d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of image is the size of the window.  <a href="classopen3d_1_1visualization_1_1rendering_1_-34#a69be6c64b799a24d9bbb8597e690c2d2">More...</a><br /></td></tr>
<tr class="separator:a69be6c64b799a24d9bbb8597e690c2d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f8cae719c863abb6c1cd6155c011b02"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a6f8cae719c863abb6c1cd6155c011b02">RenderToDepthImage</a> (std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;)&gt; <a class="el" href="_filament_renderer_8cpp.html#a7a0a25a91d8a936306270fd09f1a64a9">callback</a>)=0</td></tr>
<tr class="memdesc:a6f8cae719c863abb6c1cd6155c011b02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of image is the size of the window.  <a href="classopen3d_1_1visualization_1_1rendering_1_-34#a6f8cae719c863abb6c1cd6155c011b02">More...</a><br /></td></tr>
<tr class="separator:a6f8cae719c863abb6c1cd6155c011b02"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a45c6171feb8597f88d0d628ad034dedb"><td class="memItemLeft" align="right" valign="top">static const uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a45c6171feb8597f88d0d628ad034dedb">kUpdatePointsFlag</a> = (1 &lt;&lt; 0)</td></tr>
<tr class="separator:a45c6171feb8597f88d0d628ad034dedb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c57a28146a28cc202f704f3036ee4b0"><td class="memItemLeft" align="right" valign="top">static const uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a9c57a28146a28cc202f704f3036ee4b0">kUpdateNormalsFlag</a> = (1 &lt;&lt; 1)</td></tr>
<tr class="separator:a9c57a28146a28cc202f704f3036ee4b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac86c9b58b7df2b8ac3fa470127cbafb6"><td class="memItemLeft" align="right" valign="top">static const uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#ac86c9b58b7df2b8ac3fa470127cbafb6">kUpdateColorsFlag</a> = (1 &lt;&lt; 2)</td></tr>
<tr class="separator:ac86c9b58b7df2b8ac3fa470127cbafb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e98ccad3212bb0bf5c880538544bf6"><td class="memItemLeft" align="right" valign="top">static const uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#aa3e98ccad3212bb0bf5c880538544bf6">kUpdateUv0Flag</a> = (1 &lt;&lt; 3)</td></tr>
<tr class="separator:aa3e98ccad3212bb0bf5c880538544bf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a5781d92b8f71a41cd7580c54ecc0cff8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">Renderer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a5781d92b8f71a41cd7580c54ecc0cff8">renderer_</a></td></tr>
<tr class="separator:a5781d92b8f71a41cd7580c54ecc0cff8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="adb7ad66c42d322f2fee41424bd42ff95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb7ad66c42d322f2fee41424bd42ff95">&#9670;&nbsp;</a></span>Transform</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">open3d::visualization::rendering::Scene::Transform</a> =  Eigen::Transform&lt;float, 3, Eigen::Affine&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a387adee0ccffd4754260c6809d03f137"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a387adee0ccffd4754260c6809d03f137">&#9670;&nbsp;</a></span>GroundPlane</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137">open3d::visualization::rendering::Scene::GroundPlane</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a387adee0ccffd4754260c6809d03f137a27db3b98d01e664c17a6620b222c6469"></a>XZ&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a387adee0ccffd4754260c6809d03f137a74c53bcd3dcb2bb79993b2fec37d362a"></a>XY&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a387adee0ccffd4754260c6809d03f137affa4ba973372c3650fd0881abeca6512"></a>YZ&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0e787e84299790c1d8d7a8bc182406f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e787e84299790c1d8d7a8bc182406f6">&#9670;&nbsp;</a></span>Scene()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">open3d::visualization::rendering::Scene::Scene </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">Renderer</a> &amp;&#160;</td>
          <td class="paramname"><em>renderer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3e3f675984689e8cb5a9f465703d3697"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e3f675984689e8cb5a9f465703d3697">&#9670;&nbsp;</a></span>~Scene()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual open3d::visualization::rendering::Scene::~Scene </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a45bbd5aa78dbf835d964689d1d78a6fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45bbd5aa78dbf835d964689d1d78a6fb">&#9670;&nbsp;</a></span>AddCamera()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::AddCamera </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>camera_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-3">Camera</a> &gt;&#160;</td>
          <td class="paramname"><em>cam</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a9b9fd90bc93985a5038a113baf3550dc">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a48cf8bf304b1cfc30efb5908d4fa453c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48cf8bf304b1cfc30efb5908d4fa453c">&#9670;&nbsp;</a></span>AddDirectionalLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::AddDirectionalLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cast_shadows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a4bac0dab7e289d9ca2306c83794b2732">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="af497c956cbe5d796453949a67c3cd525"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af497c956cbe5d796453949a67c3cd525">&#9670;&nbsp;</a></span>AddGeometry() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::AddGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1geometry_1_1_geometry3_d.402">geometry::Geometry3D</a> &amp;&#160;</td>
          <td class="paramname"><em>geometry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;&#160;</td>
          <td class="paramname"><em>material</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>downsampled_name</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>downsample_threshold</em> = <code>SIZE_MAX</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ac54b362ed90298373d7f95ed8dbcaae5">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a1b3eafda6f4b9b3ec2fc0ecd1d5a8731"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b3eafda6f4b9b3ec2fc0ecd1d5a8731">&#9670;&nbsp;</a></span>AddGeometry() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::AddGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_geometry.36">t::geometry::Geometry</a> &amp;&#160;</td>
          <td class="paramname"><em>geometry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;&#160;</td>
          <td class="paramname"><em>material</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>downsampled_name</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>downsample_threshold</em> = <code>SIZE_MAX</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ad251b58b61e45554d51fcfb6c8f3aab0">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a835921969e168166cdcad893518ab9f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a835921969e168166cdcad893518ab9f4">&#9670;&nbsp;</a></span>AddGeometry() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::AddGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1">TriangleMeshModel</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#af6968fbfeb7701c17a83e52c6275a76a">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="acff08211012a0d93c7e41e395ae9cc71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acff08211012a0d93c7e41e395ae9cc71">&#9670;&nbsp;</a></span>AddPointLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::AddPointLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>falloff</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cast_shadows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a296577782cea0517ba9ae0e8df5cc2cd">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ad0d56de781816ee9277373b23b5f5c55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0d56de781816ee9277373b23b5f5c55">&#9670;&nbsp;</a></span>AddSpotLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::AddSpotLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>falloff</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>inner_cone_angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outer_cone_angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cast_shadows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#afcb5b5848edb8bb6a2c3b22d9abf16fa">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a7d04c1051015b6e0f56c38cc1e662226"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d04c1051015b6e0f56c38cc1e662226">&#9670;&nbsp;</a></span>AddView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> open3d::visualization::rendering::Scene::AddView </td>
          <td>(</td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::int32_t&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::uint32_t&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::uint32_t&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a6db7478a6f699edb6bb1853c9e926d7c">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a4fb32ffe24526d76b1ca558eee1683dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fb32ffe24526d76b1ca558eee1683dc">&#9670;&nbsp;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34">Scene</a>* open3d::visualization::rendering::Scene::Copy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a99ff8b567bcb967e6c31aac82d01eb2e">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a8c131c7c5a3bfa8d11146c991ed747e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c131c7c5a3bfa8d11146c991ed747e1">&#9670;&nbsp;</a></span>EnableGroundPlane()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::EnableGroundPlane </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#a387adee0ccffd4754260c6809d03f137">GroundPlane</a>&#160;</td>
          <td class="paramname"><em>plane</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a9cc68f9cad4a9e8852137eb38b6f2b72">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ad173e5ecfef534e5736b33b3b5e0f7ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad173e5ecfef534e5736b33b3b5e0f7ea">&#9670;&nbsp;</a></span>EnableIndirectLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::EnableIndirectLight </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a1645c501ea791a9b4be08e94e924aa50">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a8088a7f16134d522e05227399245b43b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8088a7f16134d522e05227399245b43b">&#9670;&nbsp;</a></span>EnableLightShadow()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::EnableLightShadow </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cast_shadows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a485ee35b9ee20da2c2efaa93a932e145">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="adaa60dada2525f9bc65bbade39f5babc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaa60dada2525f9bc65bbade39f5babc">&#9670;&nbsp;</a></span>EnableSunLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::EnableSunLight </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a31c39d00cd24293630b4bf2aa33f0ee2">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a46005f4c9ec27448e35ebe2f2c9c38d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46005f4c9ec27448e35ebe2f2c9c38d7">&#9670;&nbsp;</a></span>EnableSunLightShadows()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::EnableSunLightShadows </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a8c2cbccab50801aad981a0b597827388">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a231ca52a8c1043ff41df64164a97f688"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a231ca52a8c1043ff41df64164a97f688">&#9670;&nbsp;</a></span>GeometryIsVisible()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::GeometryIsVisible </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a6a56a142cf8d44f90473e59edf315911">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a04a6aa3667406b3a722d2450d0cb713b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04a6aa3667406b3a722d2450d0cb713b">&#9670;&nbsp;</a></span>GeometryShadows()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::GeometryShadows </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cast_shadows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>receive_shadows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#adf6c9d437fa6adcc3f2920ed7c4d36b8">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a933c88be0683411c887953cd9e80a243"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a933c88be0683411c887953cd9e80a243">&#9670;&nbsp;</a></span>GetGeometryBoundingBox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1geometry_1_1_axis_aligned_bou">geometry::AxisAlignedBoundingBox</a> open3d::visualization::rendering::Scene::GetGeometryBoundingBox </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a52c47d710bbb261ea72949eb1c7c0fe9">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a066d14b371a5bc122abd5dd9a900d496"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a066d14b371a5bc122abd5dd9a900d496">&#9670;&nbsp;</a></span>GetGeometryTransform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> open3d::visualization::rendering::Scene::GetGeometryTransform </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a56e288fcd8320577bc89088cc91d99cc">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a14374edc8787d135bfa0f4da91cf0c62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14374edc8787d135bfa0f4da91cf0c62">&#9670;&nbsp;</a></span>GetIndirectLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; open3d::visualization::rendering::Scene::GetIndirectLight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a127ae617ebac635ef47bc5b4abed15cc">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="abf8ec1c46cb6cce2fd7bb68eb3ce0556"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf8ec1c46cb6cce2fd7bb68eb3ce0556">&#9670;&nbsp;</a></span>GetIndirectLightIntensity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float open3d::visualization::rendering::Scene::GetIndirectLightIntensity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#adb2a66743b726fabd97872da8207af7c">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a999523e3398d266496a1fb232a1668eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a999523e3398d266496a1fb232a1668eb">&#9670;&nbsp;</a></span>GetIndirectLightRotation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> open3d::visualization::rendering::Scene::GetIndirectLightRotation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a47d10113994a981c3bf0e60f8e6646ae">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a4dec9539ad84ec4083acd81912bb2087"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dec9539ad84ec4083acd81912bb2087">&#9670;&nbsp;</a></span>GetLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-5">Light</a>&amp; open3d::visualization::rendering::Scene::GetLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a6cf0b8a7c33dd3c7d46e4d48f1cdd963">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="aeaf90ce87125e65f2cc3555d7f6bb2a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaf90ce87125e65f2cc3555d7f6bb2a0">&#9670;&nbsp;</a></span>GetSkyboxVisible()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::GetSkyboxVisible </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a925fc64c011d18865e659381beddbb9f">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a340a46efe0647d2e50f0c3e8bf76594c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a340a46efe0647d2e50f0c3e8bf76594c">&#9670;&nbsp;</a></span>GetSunLightColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Eigen::Vector3f open3d::visualization::rendering::Scene::GetSunLightColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a0e5f7aa8097001a27557c17d388367df">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="af0be4aa4be53ff4cc75205d85e8a6735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0be4aa4be53ff4cc75205d85e8a6735">&#9670;&nbsp;</a></span>GetSunLightDirection()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Eigen::Vector3f open3d::visualization::rendering::Scene::GetSunLightDirection </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a2921984774bdb98b7082354df32af95d">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="acadafd53afc774785e31ac8e09bc6cad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acadafd53afc774785e31ac8e09bc6cad">&#9670;&nbsp;</a></span>GetSunLightIntensity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float open3d::visualization::rendering::Scene::GetSunLightIntensity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a76720ed054099d9cfc2e5c776d7829ff">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ad9bfe7e2ae92efa67f5e40b9602917b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9bfe7e2ae92efa67f5e40b9602917b8">&#9670;&nbsp;</a></span>GetView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-35">View</a>* open3d::visualization::rendering::Scene::GetView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>view_id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a941de5f7cba66eb57e78c0178eb3928f">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a513b655f49db5b2919a766a189b99705"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a513b655f49db5b2919a766a189b99705">&#9670;&nbsp;</a></span>HasGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::HasGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#af4d95fdea4a06f97052576cb1f0f9017">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a55ce453aca254f9f4d0f830e72c03ebb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55ce453aca254f9f4d0f830e72c03ebb">&#9670;&nbsp;</a></span>OverrideMaterial()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::OverrideMaterial </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;&#160;</td>
          <td class="paramname"><em>material</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#afb49a487ff744cbbd7c9eeb5223a0e31">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a7bcfe375f0384afa072ed6a0a42efd45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bcfe375f0384afa072ed6a0a42efd45">&#9670;&nbsp;</a></span>OverrideMaterialAll()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::OverrideMaterialAll </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-3">MaterialRecord</a> &amp;&#160;</td>
          <td class="paramname"><em>material</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>shader_only</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a9667039c2992ed7745db51281fbe45a3">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a0b63667d3e4d019f3726c209101d2722"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b63667d3e4d019f3726c209101d2722">&#9670;&nbsp;</a></span>QueryGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::QueryGeometry </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>geometry</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ad9e50a75e8193b18b72d4784f1befce3">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a9ab903326db319d368b207419da014a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ab903326db319d368b207419da014a1">&#9670;&nbsp;</a></span>RemoveCamera()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::RemoveCamera </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>camera_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#aee4f7f2f2c1ee517b1a0ff3f3103796a">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a6bb35b37ce02617e5a2edbbccda79c04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb35b37ce02617e5a2edbbccda79c04">&#9670;&nbsp;</a></span>RemoveGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::RemoveGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a5fc801273e45d1b2e3558df72612d8f9">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a9047e7f473c9f8806c097aeefae4417a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9047e7f473c9f8806c097aeefae4417a">&#9670;&nbsp;</a></span>RemoveLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::RemoveLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ad2bcfecc53f14af4a03f3dc088fc6faa">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ab2aec6ebde41d309fbbd99cbadefbce6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2aec6ebde41d309fbbd99cbadefbce6">&#9670;&nbsp;</a></span>RemoveView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::RemoveView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>view_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a8daae0466af612d5bbbaf200cc747e5a">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a6f8cae719c863abb6c1cd6155c011b02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f8cae719c863abb6c1cd6155c011b02">&#9670;&nbsp;</a></span>RenderToDepthImage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::RenderToDepthImage </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;)&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of image is the size of the window. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a226be1ddcee3fda009fa5c614dbbd5a6">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a69be6c64b799a24d9bbb8597e690c2d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69be6c64b799a24d9bbb8597e690c2d2">&#9670;&nbsp;</a></span>RenderToImage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::RenderToImage </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; void(std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;)&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of image is the size of the window. </p>

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a30b5b6a61275db9c4a17d433c281ce3f">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ac48b8ddea01f848d153fc1585cd9378a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac48b8ddea01f848d153fc1585cd9378a">&#9670;&nbsp;</a></span>SetActiveCamera()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetActiveCamera </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>camera_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a1ccd7d8473b96ef570d3e2d791b87801">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a66b12293e2fca890fe0522dfa69c4b00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66b12293e2fca890fe0522dfa69c4b00">&#9670;&nbsp;</a></span>SetBackground() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetBackground </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector4f &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopen3d_1_1geometry_1_1_image.406.delaye">geometry::Image</a> &gt;&#160;</td>
          <td class="paramname"><em>image</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a35270e7f31ae9c7abd0321da19614baf">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a606234ad6fbbf85415ffe13117089c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a606234ad6fbbf85415ffe13117089c67">&#9670;&nbsp;</a></span>SetBackground() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetBackground </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#abe77f5a7fbacbb64e93059aa27873e11">TextureHandle</a>&#160;</td>
          <td class="paramname"><em>image</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#af44932029b0f04d6c29c3e5a498cc836">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a025b50e1011754d04b80e4edd9b8133b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a025b50e1011754d04b80e4edd9b8133b">&#9670;&nbsp;</a></span>SetGeometryCulling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetGeometryCulling </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a9c8519f428865278c5afe2de39488105">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a763d9b603f4100c51a39e568ed50175d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a763d9b603f4100c51a39e568ed50175d">&#9670;&nbsp;</a></span>SetGeometryPriority()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetGeometryPriority </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>priority</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#acc317e305e568da70ed4a1ff5f56362e">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ac0430ba977fe40e67e7758f68af5f4de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0430ba977fe40e67e7758f68af5f4de">&#9670;&nbsp;</a></span>SetGeometryTransform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetGeometryTransform </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>transform</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a256c36cf9d6d3d1f2048ee6b09f74efe">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a887a8758f8acd1666742af59ce0e6ce2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a887a8758f8acd1666742af59ce0e6ce2">&#9670;&nbsp;</a></span>SetGroundPlaneColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetGroundPlaneColor </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector4f &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a67ad4dd3291cd3ca42c8f89e7ec9ff40">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a0a5fa7bff59bfea2def97917eac557b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a5fa7bff59bfea2def97917eac557b0">&#9670;&nbsp;</a></span>SetIndirectLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool open3d::visualization::rendering::Scene::SetIndirectLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ibl_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a63fd0470bbc47a1fa34cbd97edde95ac">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a15a5122fbdde98c85ec017d0a77b8e60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15a5122fbdde98c85ec017d0a77b8e60">&#9670;&nbsp;</a></span>SetIndirectLightIntensity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetIndirectLightIntensity </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a6db623787a4a18c70a37b581b25a37d8">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a91c5893d8092d0e7ad1dd67c2c1e695b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91c5893d8092d0e7ad1dd67c2c1e695b">&#9670;&nbsp;</a></span>SetIndirectLightRotation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetIndirectLightRotation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-34#adb7ad66c42d322f2fee41424bd42ff95">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#adb0f85311ca0511610dd1d6714c57272">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a12dd4ff334678c0ed6206e0a3da52d52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12dd4ff334678c0ed6206e0a3da52d52">&#9670;&nbsp;</a></span>SetRenderOnce()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetRenderOnce </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>view_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a99cccfacfe9594c3177697ca886fa2e6">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a3f332bc4dcf627dc1be584ff9c97c22c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f332bc4dcf627dc1be584ff9c97c22c">&#9670;&nbsp;</a></span>SetSunAngularRadius()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunAngularRadius </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>radius</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a7245b2ce1117ba7f6a4b01dedbde1976">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a83207341b69f53b6b59f07a3f91dc3a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83207341b69f53b6b59f07a3f91dc3a7">&#9670;&nbsp;</a></span>SetSunHaloFalloff()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunHaloFalloff </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>falloff</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ad4cf05e4de06af4fb5a9194ae68199ba">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a297fc8b218f49ebfccc0ebf99fd4932a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a297fc8b218f49ebfccc0ebf99fd4932a">&#9670;&nbsp;</a></span>SetSunHaloSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunHaloSize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a9d251d7c13f3785cd68c78c5c7d8f5f1">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="aef74a47fdc07e55e8222f347fddca864"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef74a47fdc07e55e8222f347fddca864">&#9670;&nbsp;</a></span>SetSunLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunLight </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ad9f08639acfc848c211e6dda449aacd7">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a7b2a05b3d8055f0b2c46305aae8730fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b2a05b3d8055f0b2c46305aae8730fb">&#9670;&nbsp;</a></span>SetSunLightColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunLightColor </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a20b465f3003da0ef88a9597f34ce764c">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a12fcd7089776910e5be9b40b5be0a0a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12fcd7089776910e5be9b40b5be0a0a3">&#9670;&nbsp;</a></span>SetSunLightDirection()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunLightDirection </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>direction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a2a48ad4ee5ec52c5e8bb36d407259034">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a4c8c8db1e5084ec20c3d9ecc2d495f33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8c8db1e5084ec20c3d9ecc2d495f33">&#9670;&nbsp;</a></span>SetSunLightIntensity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetSunLightIntensity </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a5072af29d9c6c2d7dc69a3885b3f968c">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a5dc3d9c41f09143d67ae0939f69e9451"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5dc3d9c41f09143d67ae0939f69e9451">&#9670;&nbsp;</a></span>SetViewActive()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::SetViewActive </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopen3d_1_1visualization_1_1renderin#ae84c7ee53263cf103c77849661801ca3">ViewHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>view_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_active</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ace9c10657b3bbb93f1d742d873c78800">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a823d9119a507091b9f1c93b68ea756f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a823d9119a507091b9f1c93b68ea756f0">&#9670;&nbsp;</a></span>ShowGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::ShowGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>show</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#acff5abc18befb4c69d452418d3538cee">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ae39a2d77f5c72f0ec880eaaba2b2e465"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae39a2d77f5c72f0ec880eaaba2b2e465">&#9670;&nbsp;</a></span>ShowSkybox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::ShowSkybox </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>show</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ab47bdc32fae3b632d10821a972742726">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a3c40bafd10214203fab585059d373fea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c40bafd10214203fab585059d373fea">&#9670;&nbsp;</a></span>UpdateGeometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateGeometry </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>object_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopen3d_1_1t_1_1geometry_1_1_point_cloud">t::geometry::PointCloud</a> &amp;&#160;</td>
          <td class="paramname"><em>point_cloud</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>update_flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ac5dcf22cd541d80f9c98b0f2497f1b78">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a6d6b5d6ff2aa5ba8bcb98f7b46510d20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d6b5d6ff2aa5ba8bcb98f7b46510d20">&#9670;&nbsp;</a></span>UpdateLight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLight </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopen3d_1_1visualization_1_1rendering_1-5">Light</a> &amp;&#160;</td>
          <td class="paramname"><em>light</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#af6a82adecc4d19e079d4d5bba92314f5">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a9d34915ac9bcf9d72c72e2d833ad8522"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d34915ac9bcf9d72c72e2d833ad8522">&#9670;&nbsp;</a></span>UpdateLightColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLightColor </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>color</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a4213233f4d94e01eed76a7c7a4319fa0">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a09005a631417d7ae9e2112b6f1809ece"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09005a631417d7ae9e2112b6f1809ece">&#9670;&nbsp;</a></span>UpdateLightConeAngles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLightConeAngles </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>inner_cone_angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outer_cone_angle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#ae88f50efd3c15587918356185abd9f41">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ae830f204ec744c4db12792fd1bf77d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae830f204ec744c4db12792fd1bf77d94">&#9670;&nbsp;</a></span>UpdateLightDirection()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLightDirection </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a0a23b23ccaac5e1602889b789a107aaf">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="ad36a31aebedb299c00fa2197860a9190"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad36a31aebedb299c00fa2197860a9190">&#9670;&nbsp;</a></span>UpdateLightFalloff()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLightFalloff </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>falloff</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a8688c85e131452dcc0e05bf0b31f77b8">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a60ae72ae679380597f15627f65342bc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60ae72ae679380597f15627f65342bc1">&#9670;&nbsp;</a></span>UpdateLightIntensity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLightIntensity </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>intensity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a124d7267f9ea5fe0c0327edc37472fc4">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<a id="a160abb6b06d67b95e850c5cf394bbf47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a160abb6b06d67b95e850c5cf394bbf47">&#9670;&nbsp;</a></span>UpdateLightPosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void open3d::visualization::rendering::Scene::UpdateLightPosition </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>light_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Eigen::Vector3f &amp;&#160;</td>
          <td class="paramname"><em>position</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-22#a55e4b21e372de86c9d9f969d92e93a21">open3d::visualization::rendering::FilamentScene</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="ac86c9b58b7df2b8ac3fa470127cbafb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac86c9b58b7df2b8ac3fa470127cbafb6">&#9670;&nbsp;</a></span>kUpdateColorsFlag</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const uint32_t open3d::visualization::rendering::Scene::kUpdateColorsFlag = (1 &lt;&lt; 2)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9c57a28146a28cc202f704f3036ee4b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c57a28146a28cc202f704f3036ee4b0">&#9670;&nbsp;</a></span>kUpdateNormalsFlag</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const uint32_t open3d::visualization::rendering::Scene::kUpdateNormalsFlag = (1 &lt;&lt; 1)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a45c6171feb8597f88d0d628ad034dedb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45c6171feb8597f88d0d628ad034dedb">&#9670;&nbsp;</a></span>kUpdatePointsFlag</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const uint32_t open3d::visualization::rendering::Scene::kUpdatePointsFlag = (1 &lt;&lt; 0)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa3e98ccad3212bb0bf5c880538544bf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3e98ccad3212bb0bf5c880538544bf6">&#9670;&nbsp;</a></span>kUpdateUv0Flag</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const uint32_t open3d::visualization::rendering::Scene::kUpdateUv0Flag = (1 &lt;&lt; 3)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5781d92b8f71a41cd7580c54ecc0cff8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5781d92b8f71a41cd7580c54ecc0cff8">&#9670;&nbsp;</a></span>renderer_</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopen3d_1_1visualization_1_1rendering_1_-31">Renderer</a>&amp; open3d::visualization::rendering::Scene::renderer_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/Open3D/Open3D/cpp/open3d/visualization/rendering/<a class="el" href="_scene_8h_source.html">Scene.h (9238339 (Tue Mar 14 18:49:09 2023 -0700))</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>

<!-- Mirrored from www.open3d.org/docs/release/cpp_api/classopen3d_1_1visualization_1_1rendering_1_1_scene.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 14 May 2023 11:01:46 GMT -->
</html>
